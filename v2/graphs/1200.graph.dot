digraph G {
"kaushalshetty/Structured-Self-Attention" -> "ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding"
"kaushalshetty/Structured-Self-Attention" -> "flrngel/Self-Attentive-tensorflow"
"kaushalshetty/Structured-Self-Attention" -> "roomylee/self-attentive-emb-tf"
"kaushalshetty/Structured-Self-Attention" -> "guoyinwang/LEAM"
"kaushalshetty/Structured-Self-Attention" -> "timbmg/Structured-Self-Attentive-Sentence-Embedding"
"kaushalshetty/Structured-Self-Attention" -> "nn116003/self-attention-classification"
"kaushalshetty/Structured-Self-Attention" -> "EdGENetworks/attention-networks-for-classification"
"kaushalshetty/Structured-Self-Attention" -> "richliao/textClassifier"
"kaushalshetty/Structured-Self-Attention" -> "taoshen58/DiSAN"
"kaushalshetty/Structured-Self-Attention" -> "uhauha2929/examples"
"kaushalshetty/Structured-Self-Attention" -> "lancopku/SU4MLC"
"kaushalshetty/Structured-Self-Attention" -> "XMUNLP/Tagger"
"kaushalshetty/Structured-Self-Attention" -> "foamliu/Self-Attention-Keras" ["e"=1]
"kaushalshetty/Structured-Self-Attention" -> "yufengm/SelfAttentive"
"kaushalshetty/Structured-Self-Attention" -> "prakashpandey9/Text-Classification-Pytorch"
"prakashpandey9/Text-Classification-Pytorch" -> "AnubhavGupta3377/Text-Classification-Models-Pytorch"
"prakashpandey9/Text-Classification-Pytorch" -> "FreedomIntelligence/TextClassificationBenchmark"
"prakashpandey9/Text-Classification-Pytorch" -> "Shawn1993/cnn-text-classification-pytorch"
"prakashpandey9/Text-Classification-Pytorch" -> "sgrvinod/a-PyTorch-Tutorial-to-Text-Classification"
"prakashpandey9/Text-Classification-Pytorch" -> "keishinkickback/Pytorch-RNN-text-classification"
"prakashpandey9/Text-Classification-Pytorch" -> "songyingxin/TextClassification" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "kaushalshetty/Structured-Self-Attention"
"prakashpandey9/Text-Classification-Pytorch" -> "bentrevett/pytorch-sentiment-analysis" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "TobiasLee/Text-Classification"
"prakashpandey9/Text-Classification-Pytorch" -> "kk7nc/Text_Classification" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "lonePatient/Bert-Multi-Label-Text-Classification" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch"
"prakashpandey9/Text-Classification-Pytorch" -> "pytorch/text" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "brightmart/text_classification" ["e"=1]
"prakashpandey9/Text-Classification-Pytorch" -> "EdGENetworks/attention-networks-for-classification"
"mJackie/SpamMessage" -> "hrwhisper/SpamMessage"
"slaysd/pytorch-sentiment-analysis-classification" -> "clairett/pytorch-sentiment-classification"
"slaysd/pytorch-sentiment-analysis-classification" -> "xiaobaicxy/text-classification-BiLSTM-Attention-pytorch"
"slaysd/pytorch-sentiment-analysis-classification" -> "wqk666999/CNN-LSTM-Attention" ["e"=1]
"slaysd/pytorch-sentiment-analysis-classification" -> "PatientEz/CNN-BiLSTM-Attention-Time-Series-Prediction_Keras" ["e"=1]
"slaysd/pytorch-sentiment-analysis-classification" -> "u784799i/biLSTM_attn"
"slaysd/pytorch-sentiment-analysis-classification" -> "pranoyr/cnn-lstm" ["e"=1]
"slaysd/pytorch-sentiment-analysis-classification" -> "lukysummer/Movie-Review-Sentiment-Analysis-LSTM-Pytorch"
"slaysd/pytorch-sentiment-analysis-classification" -> "ningshixian/LSTM_Attention" ["e"=1]
"slaysd/pytorch-sentiment-analysis-classification" -> "EdGENetworks/attention-networks-for-classification"
"slaysd/pytorch-sentiment-analysis-classification" -> "dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch"
"XMUNLP/Tagger" -> "luheng/deep_srl"
"XMUNLP/Tagger" -> "strubell/LISA"
"XMUNLP/Tagger" -> "taoshen58/DiSAN"
"XMUNLP/Tagger" -> "diegma/neural-dep-srl"
"XMUNLP/Tagger" -> "luheng/lsgn"
"XMUNLP/Tagger" -> "LopezGG/NN_NER_tensorFlow" ["e"=1]
"XMUNLP/Tagger" -> "flrngel/Self-Attentive-tensorflow"
"XMUNLP/Tagger" -> "microth/PathLSTM"
"taoshen58/DiSAN" -> "taoshen58/BiBloSA"
"taoshen58/DiSAN" -> "YichenGong/Densely-Interactive-Inference-Network" ["e"=1]
"taoshen58/DiSAN" -> "taoshen58/ReSAN"
"taoshen58/DiSAN" -> "flrngel/Self-Attentive-tensorflow"
"taoshen58/DiSAN" -> "ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding"
"taoshen58/DiSAN" -> "zhiguowang/BiMPM" ["e"=1]
"taoshen58/DiSAN" -> "localminimum/QANet" ["e"=1]
"taoshen58/DiSAN" -> "XMUNLP/Tagger"
"taoshen58/DiSAN" -> "lukecq1231/nli" ["e"=1]
"taoshen58/DiSAN" -> "dinghanshen/SWEM"
"TobiasLee/Text-Classification" -> "richliao/textClassifier"
"TobiasLee/Text-Classification" -> "ilivans/tf-rnn-attention"
"TobiasLee/Text-Classification" -> "brightmart/text_classification" ["e"=1]
"TobiasLee/Text-Classification" -> "zackhy/TextClassification"
"TobiasLee/Text-Classification" -> "Socialbird-AILab/BERT-Classification-Tutorial" ["e"=1]
"TobiasLee/Text-Classification" -> "FreedomIntelligence/TextClassificationBenchmark"
"TobiasLee/Text-Classification" -> "kaushalshetty/Structured-Self-Attention"
"TobiasLee/Text-Classification" -> "prakashpandey9/Text-Classification-Pytorch"
"TobiasLee/Text-Classification" -> "dongjun-Lee/text-classification-models-tf"
"TobiasLee/Text-Classification" -> "allenai/bilm-tf" ["e"=1]
"TobiasLee/Text-Classification" -> "kk7nc/Text_Classification" ["e"=1]
"TobiasLee/Text-Classification" -> "yao8839836/text_gcn" ["e"=1]
"TobiasLee/Text-Classification" -> "brightmart/bert_language_understanding" ["e"=1]
"TobiasLee/Text-Classification" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"TobiasLee/Text-Classification" -> "Shawn1993/cnn-text-classification-pytorch"
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "EdGENetworks/attention-networks-for-classification"
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "sgrvinod/a-PyTorch-Tutorial-to-Text-Classification"
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "tqtg/hierarchical-attention-networks"
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "richliao/textClassifier"
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "jaehunjung1/Hierarchical-Attention-Network"
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "castorini/hedwig"
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "ematvey/hierarchical-attention-networks"
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "pandeykartikey/Hierarchical-Attention-Network" ["e"=1]
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "Cheneng/HiararchicalAttentionGRU" ["e"=1]
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "Hazoom/bert-han"
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "vietnh1009/Very-deep-cnn-pytorch" ["e"=1]
"vietnh1009/Hierarchical-attention-networks-pytorch" -> "FreedomIntelligence/TextClassificationBenchmark"
"dreasysnail/deconv_paragraph_represention" -> "ymym3412/textcnn-conv-deconv-pytorch"
"dreasysnail/deconv_paragraph_represention" -> "dreasysnail/textGAN_public" ["e"=1]
"albertwy/BiLSTM" -> "dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch"
"dongjun-Lee/text-classification-models-tf" -> "bendangnuksung/Image-OutPainting" ["e"=1]
"dongjun-Lee/text-classification-models-tf" -> "dongjun-Lee/transfer-learning-text-tf"
"dongjun-Lee/text-classification-models-tf" -> "zackhy/TextClassification"
"dongjun-Lee/text-classification-models-tf" -> "TobiasLee/Text-Classification"
"dongjun-Lee/text-classification-models-tf" -> "LMescheder/GAN_stability" ["e"=1]
"dongjun-Lee/text-classification-models-tf" -> "richliao/textClassifier"
"dongjun-Lee/text-classification-models-tf" -> "NTMC-Community/MatchZoo" ["e"=1]
"dongjun-Lee/text-classification-models-tf" -> "albertpumarola/GANimation" ["e"=1]
"dongjun-Lee/text-classification-models-tf" -> "Magic-Bubble/Zhihu" ["e"=1]
"fendouai/Chinese-Text-Classification" -> "indiejoseph/cnn-text-classification-tf-chinese"
"fendouai/Chinese-Text-Classification" -> "clayandgithub/zh_cnn_text_classify"
"fendouai/Chinese-Text-Classification" -> "LambdaWx/CNN_sentence_tensorflow"
"malteos/pytorch-bert-document-classification" -> "AndriyMulyar/bert_document_classification"
"malteos/pytorch-bert-document-classification" -> "AIRobotZhang/STCKA"
"FreedomIntelligence/TextClassificationBenchmark" -> "prakashpandey9/Text-Classification-Pytorch"
"FreedomIntelligence/TextClassificationBenchmark" -> "AnubhavGupta3377/Text-Classification-Models-Pytorch"
"FreedomIntelligence/TextClassificationBenchmark" -> "Shawn1993/cnn-text-classification-pytorch"
"FreedomIntelligence/TextClassificationBenchmark" -> "songyingxin/TextClassification" ["e"=1]
"FreedomIntelligence/TextClassificationBenchmark" -> "dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch"
"FreedomIntelligence/TextClassificationBenchmark" -> "EdGENetworks/attention-networks-for-classification"
"FreedomIntelligence/TextClassificationBenchmark" -> "TobiasLee/Text-Classification"
"FreedomIntelligence/TextClassificationBenchmark" -> "linhaow/TextClassification" ["e"=1]
"FreedomIntelligence/TextClassificationBenchmark" -> "Tencent/NeuralNLP-NeuralClassifier" ["e"=1]
"FreedomIntelligence/TextClassificationBenchmark" -> "pytorch/text" ["e"=1]
"FreedomIntelligence/TextClassificationBenchmark" -> "guoyinwang/LEAM"
"FreedomIntelligence/TextClassificationBenchmark" -> "andyweizhao/capsule_text_classification" ["e"=1]
"FreedomIntelligence/TextClassificationBenchmark" -> "brightmart/text_classification" ["e"=1]
"FreedomIntelligence/TextClassificationBenchmark" -> "kaushalshetty/Structured-Self-Attention"
"FreedomIntelligence/TextClassificationBenchmark" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "vietnh1009/Hierarchical-attention-networks-pytorch"
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "AnubhavGupta3377/Text-Classification-Models-Pytorch"
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "prakashpandey9/Text-Classification-Pytorch"
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "EdGENetworks/attention-networks-for-classification"
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "castorini/hedwig"
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "pandeykartikey/Hierarchical-Attention-Network" ["e"=1]
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" -> "arunarn2/HierarchicalAttentionNetworks"
"roomylee/self-attentive-emb-tf" -> "flrngel/Self-Attentive-tensorflow"
"clairett/pytorch-sentiment-classification" -> "slaysd/pytorch-sentiment-analysis-classification"
"clairett/pytorch-sentiment-classification" -> "lukysummer/Movie-Review-Sentiment-Analysis-LSTM-Pytorch"
"dinghanshen/SWEM" -> "guoyinwang/LEAM"
"dinghanshen/SWEM" -> "wangshy31/Densely-Connected-CNN-with-Multiscale-Feature-Attention" ["e"=1]
"dinghanshen/SWEM" -> "dreasysnail/deconv_paragraph_represention"
"dinghanshen/SWEM" -> "taoshen58/DiSAN"
"dinghanshen/SWEM" -> "hustlingchen/A3NCF" ["e"=1]
"cedias/Hierarchical-Sentiment" -> "cedias/HAN-pytorch"
"lijqhs/text-classification-cn" -> "JustinJiang1994/Text_Classification"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "prakashpandey9/Text-Classification-Pytorch"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "FreedomIntelligence/TextClassificationBenchmark"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "sgrvinod/a-PyTorch-Tutorial-to-Text-Classification"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "lonePatient/Bert-Multi-Label-Text-Classification" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "Shawn1993/cnn-text-classification-pytorch"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "songyingxin/TextClassification" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "Renovamen/Text-Classification"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "miracleyoo/DPCNN-TextCNN-Pytorch-Inception" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "songyingxin/Bert-TextClassification" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "EdGENetworks/attention-networks-for-classification"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "RandolphVI/Multi-Label-Text-Classification" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "pengshuang/Text-Similarity" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "ThilinaRajapakse/pytorch-transformers-classification"
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "Tencent/NeuralNLP-NeuralClassifier" ["e"=1]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" -> "atnlp/torchtext-summary" ["e"=1]
"taoshen58/BiBloSA" -> "taoshen58/DiSAN"
"tensorlayer/text-antispam" -> "clayandgithub/zh_cnn_text_classify"
"tensorlayer/text-antispam" -> "Windsooon/cherry"
"tensorlayer/text-antispam" -> "hrwhisper/SpamMessage"
"tensorlayer/text-antispam" -> "JansonKong/spam_filtering"
"guoyinwang/LEAM" -> "dinghanshen/SWEM"
"guoyinwang/LEAM" -> "kaushalshetty/Structured-Self-Attention"
"guoyinwang/LEAM" -> "lancopku/label-embedding-network" ["e"=1]
"guoyinwang/LEAM" -> "NonvolatileMemory/AAAI_2019_EXAM"
"guoyinwang/LEAM" -> "idiap/gile"
"guoyinwang/LEAM" -> "lancopku/SU4MLC"
"guoyinwang/LEAM" -> "jamesmullenbach/caml-mimic" ["e"=1]
"guoyinwang/LEAM" -> "riejohnson/ConText"
"lancopku/SU4MLC" -> "lancopku/SGM" ["e"=1]
"lancopku/SU4MLC" -> "illcat/SGM-for-Multi-label-Classification"
"lancopku/SU4MLC" -> "EMNLP2019LSAN/LSAN" ["e"=1]
"lancopku/SU4MLC" -> "NonvolatileMemory/AAAI_2019_EXAM"
"castorini/hedwig" -> "AndriyMulyar/bert_document_classification"
"castorini/hedwig" -> "castorini/castor" ["e"=1]
"castorini/hedwig" -> "vietnh1009/Hierarchical-attention-networks-pytorch"
"castorini/hedwig" -> "sgrvinod/a-PyTorch-Tutorial-to-Text-Classification"
"castorini/hedwig" -> "malteos/pytorch-bert-document-classification"
"castorini/hedwig" -> "EdGENetworks/attention-networks-for-classification"
"castorini/hedwig" -> "lonePatient/Bert-Multi-Label-Text-Classification" ["e"=1]
"castorini/hedwig" -> "Georgetown-IR-Lab/cedr" ["e"=1]
"castorini/hedwig" -> "helmy-elrais/RoBERT_Recurrence_over_BERT"
"castorini/hedwig" -> "namisan/mt-dnn" ["e"=1]
"castorini/hedwig" -> "allenai/longformer" ["e"=1]
"castorini/hedwig" -> "howardhsu/BERT-for-RRC-ABSA" ["e"=1]
"castorini/hedwig" -> "andyweizhao/capsule_text_classification" ["e"=1]
"castorini/hedwig" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"castorini/hedwig" -> "kk7nc/Text_Classification" ["e"=1]
"flrngel/Self-Attentive-tensorflow" -> "roomylee/self-attentive-emb-tf"
"flrngel/Self-Attentive-tensorflow" -> "kaushalshetty/Structured-Self-Attention"
"flrngel/Self-Attentive-tensorflow" -> "taoshen58/DiSAN"
"Windsooon/cherry" -> "enilu/material-admin" ["e"=1]
"Windsooon/cherry" -> "Eurus-Holmes/LIS-YNP" ["e"=1]
"Windsooon/cherry" -> "tensorlayer/text-antispam"
"Windsooon/cherry" -> "TurboWay/spiderman" ["e"=1]
"renjunxiang/Text-Classification" -> "percent4/Sentiment_Analysis"
"renjunxiang/Text-Classification" -> "wavewangyue/text-classification"
"renjunxiang/Text-Classification" -> "lc222/text_classification_AI100"
"renjunxiang/Text-Classification" -> "cjymz886/text-cnn" ["e"=1]
"renjunxiang/Text-Classification" -> "cjymz886/text_rnn_attention" ["e"=1]
"renjunxiang/Text-Classification" -> "Roshanson/TextInfoExp" ["e"=1]
"mttk/rnn-classifier" -> "nn116003/self-attention-classification"
"luheng/lsgn" -> "hiroki13/span-based-srl"
"luheng/lsgn" -> "bcmi220/unisrl"
"luheng/lsgn" -> "luheng/deep_srl"
"luheng/lsgn" -> "strubell/LISA"
"strubell/LISA" -> "luheng/deep_srl"
"strubell/LISA" -> "XMUNLP/Tagger"
"strubell/LISA" -> "strubell/LISA-v1"
"strubell/LISA" -> "luheng/lsgn"
"strubell/LISA" -> "microth/PathLSTM"
"strubell/LISA" -> "diegma/neural-dep-srl"
"ThilinaRajapakse/BERT_binary_text_classification" -> "ThilinaRajapakse/pytorch-transformers-classification"
"keishinkickback/Pytorch-RNN-text-classification" -> "jiangqy/LSTM-Classification-pytorch"
"keishinkickback/Pytorch-RNN-text-classification" -> "prakashpandey9/Text-Classification-Pytorch"
"triplemeng/hierarchical-attention-model" -> "magical2world/tf-hierarchical-rnn"
"silverzhaojr/spam-filter" -> "mikami-yua/byes_mail_filter"
"silverzhaojr/spam-filter" -> "shijing888/BayesSpam"
"silverzhaojr/spam-filter" -> "c1nty/Chinese_Spam_Filter"
"NonvolatileMemory/AAAI_2019_EXAM" -> "zhaozhengChen/RegionEmbedding"
"nn116003/self-attention-classification" -> "mttk/rnn-classifier"
"malllabiisc/NeuralDater" -> "malllabiisc/AD3"
"magical2world/tf-hierarchical-rnn" -> "triplemeng/hierarchical-attention-model"
"ymym3412/textcnn-conv-deconv-pytorch" -> "dreasysnail/deconv_paragraph_represention"
"bcmi220/srl_syn_pruning" -> "bcmi220/unified_syn_srl"
"bcmi220/unisrl" -> "bcmi220/unified_syn_srl"
"bcmi220/unified_syn_srl" -> "bcmi220/srl_syn_pruning"
"Renovamen/Text-Classification" -> "Doragd/Text-Classification-PyTorch"
"nado-dev/Naive-Bayes-classifier" -> "c1nty/Chinese_Spam_Filter"
"nado-dev/Naive-Bayes-classifier" -> "mikami-yua/byes_mail_filter"
"helmy-elrais/RoBERT_Recurrence_over_BERT" -> "heraclex12/VLSP2020-Fake-News-Detection"
"helmy-elrais/RoBERT_Recurrence_over_BERT" -> "franbvalero/BERT-long-sentence-classification"
"AndriyMulyar/bert_document_classification" -> "ArmandDS/bert_for_long_text"
"AndriyMulyar/bert_document_classification" -> "malteos/pytorch-bert-document-classification"
"AndriyMulyar/bert_document_classification" -> "castorini/hedwig"
"CLOVEXCWZ/Pytorch_Text_Classification_Demo" -> "CLOVEXCWZ/Pytorch_LongText_Classification_Demo"
"CLOVEXCWZ/Pytorch_LongText_Classification_Demo" -> "CLOVEXCWZ/Pytorch_Text_Classification_Demo"
"xiaobaicxy/text-classification-BiLSTM-Attention-pytorch" -> "Dongcf/BiLSTM-Attention_CN_Text_Clf_Pytorch"
"ThilinaRajapakse/pytorch-transformers-classification" -> "ThilinaRajapakse/BERT_binary_text_classification"
"ThilinaRajapakse/pytorch-transformers-classification" -> "Shivampanwar/Bert-text-classification"
"ThilinaRajapakse/pytorch-transformers-classification" -> "ThilinaRajapakse/simpletransformers" ["e"=1]
"ThilinaRajapakse/pytorch-transformers-classification" -> "AnubhavGupta3377/Text-Classification-Models-Pytorch"
"Hazoom/bert-han" -> "GeorgeLuImmortal/Hierarchical-BERT-Model-with-Limited-Labelled-Data"
"Noahs-ARK/semafor-semantic-parser" -> "Noahs-ARK/semafor"
"qingyujean/document-level-classification" -> "CLOVEXCWZ/Pytorch_LongText_Classification_Demo"
"qingyujean/document-level-classification" -> "neesetifa/bert_classification"
"SCHENLIU/longformer-chinese" -> "ValkyriaLenneth/Longformer_ZH"
"mikami-yua/byes_mail_filter" -> "silverzhaojr/spam-filter"
"mikami-yua/byes_mail_filter" -> "ischaojie/mini_sms_classify"
"Sleepychord/CogLTX" -> "SCHENLIU/longformer-chinese"
"Sleepychord/CogLTX" -> "neesetifa/bert_classification"
"Sleepychord/CogLTX" -> "helmy-elrais/RoBERT_Recurrence_over_BERT"
"aashishsatya/Bayesian-Spam-Filter" -> "abhijeet3922/Mail-Spam-Filtering"
"ValkyriaLenneth/Longformer_ZH" -> "SCHENLIU/longformer-chinese"
"Noahs-ARK/semafor" -> "Noahs-ARK/semafor-semantic-parser"
"Noahs-ARK/semafor" -> "swabhs/open-sesame"
"Noahs-ARK/semafor" -> "microth/mateplus"
"c1nty/Chinese_Spam_Filter" -> "nado-dev/Naive-Bayes-classifier"
"c1nty/Chinese_Spam_Filter" -> "shijing888/BayesSpam"
"c1nty/Chinese_Spam_Filter" -> "silverzhaojr/spam-filter"
"SunnyMarkLiu/Naive_Bayes_Meet_Adaboost" -> "shijing888/BayesSpam"
"SunnyMarkLiu/Naive_Bayes_Meet_Adaboost" -> "silverzhaojr/spam-filter"
"SunnyMarkLiu/Naive_Bayes_Meet_Adaboost" -> "ZPdesu/Spam-Message-Classifier-sklearn"
"SunnyMarkLiu/Naive_Bayes_Meet_Adaboost" -> "lvwangbeta/mailFilter"
"indiejoseph/cnn-text-classification-tf-chinese" -> "indiejoseph/chinese-char-rnn"
"indiejoseph/cnn-text-classification-tf-chinese" -> "luchi007/RNN_Text_Classify"
"indiejoseph/cnn-text-classification-tf-chinese" -> "fendouai/Chinese-Text-Classification"
"indiejoseph/cnn-text-classification-tf-chinese" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"indiejoseph/cnn-text-classification-tf-chinese" -> "kinni/char-cnn-text-classification-tensorflow"
"indiejoseph/cnn-text-classification-tf-chinese" -> "jiegzhan/multi-class-text-classification-cnn"
"indiejoseph/cnn-text-classification-tf-chinese" -> "clayandgithub/zh_cnn_text_classify"
"shijing888/BayesSpam" -> "c1nty/Chinese_Spam_Filter"
"shijing888/BayesSpam" -> "silverzhaojr/spam-filter"
"shijing888/BayesSpam" -> "nado-dev/Naive-Bayes-classifier"
"shijing888/BayesSpam" -> "SunnyMarkLiu/Naive_Bayes_Meet_Adaboost"
"shijing888/BayesSpam" -> "clayandgithub/zh_cnn_text_classify"
"shijing888/BayesSpam" -> "aashishsatya/Bayesian-Spam-Filter"
"shijing888/BayesSpam" -> "ljx02/Spam_Email_Classificaton"
"tasdikrahman/spammy" -> "abhijeet3922/Mail-Spam-Filtering"
"tasdikrahman/spammy" -> "tasdikrahman/plino"
"microth/PathLSTM" -> "diegma/neural-dep-srl"
"LunaBlack/RNN-Classification" -> "luchi007/RNN_Text_Classify"
"richliao/textClassifier" -> "EdGENetworks/attention-networks-for-classification"
"richliao/textClassifier" -> "ematvey/hierarchical-attention-networks"
"richliao/textClassifier" -> "ilivans/tf-rnn-attention"
"richliao/textClassifier" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" ["e"=1]
"richliao/textClassifier" -> "vietnh1009/Hierarchical-attention-networks-pytorch"
"richliao/textClassifier" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"richliao/textClassifier" -> "philipperemy/keras-attention" ["e"=1]
"richliao/textClassifier" -> "TobiasLee/Text-Classification"
"richliao/textClassifier" -> "brightmart/text_classification" ["e"=1]
"richliao/textClassifier" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"richliao/textClassifier" -> "airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier" ["e"=1]
"richliao/textClassifier" -> "yoonkim/CNN_sentence" ["e"=1]
"richliao/textClassifier" -> "andyweizhao/capsule_text_classification" ["e"=1]
"richliao/textClassifier" -> "datalogue/keras-attention" ["e"=1]
"richliao/textClassifier" -> "kaushalshetty/Structured-Self-Attention"
"ematvey/hierarchical-attention-networks" -> "richliao/textClassifier"
"ematvey/hierarchical-attention-networks" -> "EdGENetworks/attention-networks-for-classification"
"ematvey/hierarchical-attention-networks" -> "ilivans/tf-rnn-attention"
"ematvey/hierarchical-attention-networks" -> "raviqqe/tensorflow-font2char2word2sent2doc"
"ematvey/hierarchical-attention-networks" -> "indiejoseph/doc-han-att"
"ematvey/hierarchical-attention-networks" -> "tqtg/hierarchical-attention-networks"
"ematvey/hierarchical-attention-networks" -> "lc222/HAN-text-classification-tf"
"ematvey/hierarchical-attention-networks" -> "synthesio/hierarchical-attention-networks"
"ematvey/hierarchical-attention-networks" -> "taoshen58/DiSAN"
"ematvey/hierarchical-attention-networks" -> "vietnh1009/Hierarchical-attention-networks-pytorch"
"ematvey/hierarchical-attention-networks" -> "thunlp/NSC" ["e"=1]
"ematvey/hierarchical-attention-networks" -> "triplemeng/hierarchical-attention-model"
"ematvey/hierarchical-attention-networks" -> "flrngel/Self-Attentive-tensorflow"
"ematvey/hierarchical-attention-networks" -> "minqi/hnatt" ["e"=1]
"ematvey/hierarchical-attention-networks" -> "guoyinwang/LEAM"
"hrwhisper/SpamMessage" -> "mJackie/SpamMessage"
"hrwhisper/SpamMessage" -> "ZPdesu/Spam-Message-Classifier-sklearn"
"jiegzhan/multi-class-text-classification-cnn" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"jiegzhan/multi-class-text-classification-cnn" -> "indiejoseph/cnn-text-classification-tf-chinese"
"jiegzhan/multi-class-text-classification-cnn" -> "luchi007/RNN_Text_Classify"
"jiegzhan/multi-class-text-classification-cnn" -> "cahya-wirawan/cnn-text-classification-tf"
"jiegzhan/multi-class-text-classification-cnn" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn" -> "richliao/textClassifier"
"jiegzhan/multi-class-text-classification-cnn" -> "Socialbird-AILab/BERT-Classification-Tutorial" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn" -> "zackhy/TextClassification"
"jiegzhan/multi-class-text-classification-cnn" -> "ematvey/hierarchical-attention-networks"
"jiegzhan/multi-class-text-classification-cnn" -> "LambdaWx/CNN_sentence_tensorflow"
"jiegzhan/multi-class-text-classification-cnn" -> "liu-nlper/DocumentClassification"
"jiegzhan/multi-class-text-classification-cnn" -> "jiegzhan/machine-learning-stanford"
"jiegzhan/multi-class-text-classification-cnn" -> "salestock/fastText.py" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn" -> "ilivans/tf-rnn-attention"
"jiegzhan/multi-class-text-classification-cnn" -> "brightmart/text_classification" ["e"=1]
"luchi007/RNN_Text_Classify" -> "LunaBlack/RNN-Classification"
"luchi007/RNN_Text_Classify" -> "LambdaWx/CNN_sentence_tensorflow"
"luchi007/RNN_Text_Classify" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"luchi007/RNN_Text_Classify" -> "indiejoseph/cnn-text-classification-tf-chinese"
"LambdaWx/CNN_sentence_tensorflow" -> "LambdaWx/con_sentence"
"LambdaWx/CNN_sentence_tensorflow" -> "clayandgithub/zh_cnn_text_classify"
"LambdaWx/CNN_sentence_tensorflow" -> "luchi007/RNN_Text_Classify"
"LambdaWx/CNN_sentence_tensorflow" -> "fendouai/Chinese-Text-Classification"
"diegma/neural-dep-srl" -> "microth/PathLSTM"
"diegma/neural-dep-srl" -> "kdrivas/Graph-convolutional"
"diegma/neural-dep-srl" -> "luheng/deep_srl"
"diegma/neural-dep-srl" -> "malllabiisc/NeuralDater"
"diegma/neural-dep-srl" -> "tdozat/Parser-v1" ["e"=1]
"diegma/neural-dep-srl" -> "strubell/LISA"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "jiegzhan/multi-class-text-classification-cnn"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "luchi007/RNN_Text_Classify"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "richliao/textClassifier"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "indiejoseph/cnn-text-classification-tf-chinese"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "zackhy/TextClassification"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "LunaBlack/RNN-Classification"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "carpedm20/lstm-char-cnn-tensorflow" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "cahya-wirawan/cnn-text-classification-tf"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "ematvey/hierarchical-attention-networks"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "ilivans/tf-rnn-attention"
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "yoonkim/CNN_sentence" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "chenzhi1992/Multi-Label-Text-Classification" ["e"=1]
"jiegzhan/multi-class-text-classification-cnn-rnn" -> "TobiasLee/Text-Classification"
"EdGENetworks/attention-networks-for-classification" -> "richliao/textClassifier"
"EdGENetworks/attention-networks-for-classification" -> "vietnh1009/Hierarchical-attention-networks-pytorch"
"EdGENetworks/attention-networks-for-classification" -> "ematvey/hierarchical-attention-networks"
"EdGENetworks/attention-networks-for-classification" -> "pandeykartikey/Hierarchical-Attention-Network" ["e"=1]
"EdGENetworks/attention-networks-for-classification" -> "cedias/HAN-pytorch"
"EdGENetworks/attention-networks-for-classification" -> "cedias/Hierarchical-Sentiment"
"EdGENetworks/attention-networks-for-classification" -> "EdGENetworks/anuvada"
"EdGENetworks/attention-networks-for-classification" -> "raviqqe/tensorflow-font2char2word2sent2doc"
"EdGENetworks/attention-networks-for-classification" -> "Shawn1993/cnn-text-classification-pytorch"
"EdGENetworks/attention-networks-for-classification" -> "sgrvinod/a-PyTorch-Tutorial-to-Text-Classification"
"EdGENetworks/attention-networks-for-classification" -> "kaushalshetty/Structured-Self-Attention"
"EdGENetworks/attention-networks-for-classification" -> "ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding"
"EdGENetworks/attention-networks-for-classification" -> "MaximumEntropy/Seq2Seq-PyTorch" ["e"=1]
"EdGENetworks/attention-networks-for-classification" -> "FreedomIntelligence/TextClassificationBenchmark"
"EdGENetworks/attention-networks-for-classification" -> "kefirski/pytorch_RVAE" ["e"=1]
"ilivans/tf-rnn-attention" -> "ematvey/hierarchical-attention-networks"
"ilivans/tf-rnn-attention" -> "richliao/textClassifier"
"ilivans/tf-rnn-attention" -> "bojone/attention" ["e"=1]
"ilivans/tf-rnn-attention" -> "datalogue/keras-attention" ["e"=1]
"ilivans/tf-rnn-attention" -> "TobiasLee/Text-Classification"
"ilivans/tf-rnn-attention" -> "ematvey/tensorflow-seq2seq-tutorials" ["e"=1]
"ilivans/tf-rnn-attention" -> "HadoopIt/rnn-nlu" ["e"=1]
"ilivans/tf-rnn-attention" -> "Kyubyong/transformer" ["e"=1]
"ilivans/tf-rnn-attention" -> "allenai/bilm-tf" ["e"=1]
"ilivans/tf-rnn-attention" -> "indiejoseph/cnn-text-classification-tf-chinese"
"ilivans/tf-rnn-attention" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"ilivans/tf-rnn-attention" -> "allenai/bi-att-flow" ["e"=1]
"ilivans/tf-rnn-attention" -> "galsang/ABCNN" ["e"=1]
"ilivans/tf-rnn-attention" -> "rockingdingo/deepnlp" ["e"=1]
"ilivans/tf-rnn-attention" -> "THTBSE/rnn_text_classification"
"Shawn1993/cnn-text-classification-pytorch" -> "prakashpandey9/Text-Classification-Pytorch"
"Shawn1993/cnn-text-classification-pytorch" -> "yoonkim/CNN_sentence" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "harvardnlp/sent-conv-torch" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "practicingman/chinese_text_cnn" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "galsang/CNN-sentence-classification-pytorch"
"Shawn1993/cnn-text-classification-pytorch" -> "pytorch/text" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "FreedomIntelligence/TextClassificationBenchmark"
"Shawn1993/cnn-text-classification-pytorch" -> "EdGENetworks/attention-networks-for-classification"
"Shawn1993/cnn-text-classification-pytorch" -> "MaximumEntropy/Seq2Seq-PyTorch" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch"
"Shawn1993/cnn-text-classification-pytorch" -> "AnubhavGupta3377/Text-Classification-Models-Pytorch"
"Shawn1993/cnn-text-classification-pytorch" -> "IBM/pytorch-seq2seq" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "srviest/char-cnn-text-classification-pytorch" ["e"=1]
"Shawn1993/cnn-text-classification-pytorch" -> "spro/practical-pytorch" ["e"=1]
"yufengm/SelfAttentive" -> "ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding"
"clayandgithub/zh_cnn_text_classify" -> "LambdaWx/CNN_sentence_tensorflow"
"clayandgithub/zh_cnn_text_classify" -> "sfailsthy/chinese-text-classification-with-cnn-tf"
"clayandgithub/zh_cnn_text_classify" -> "shijing888/BayesSpam"
"clayandgithub/zh_cnn_text_classify" -> "lc222/text_classification_AI100"
"clayandgithub/zh_cnn_text_classify" -> "c1nty/Chinese_Spam_Filter"
"clayandgithub/zh_cnn_text_classify" -> "indiejoseph/cnn-text-classification-tf-chinese"
"clayandgithub/zh_cnn_text_classify" -> "fendouai/Chinese-Text-Classification"
"clayandgithub/zh_cnn_text_classify" -> "cjymz886/text-cnn" ["e"=1]
"clayandgithub/zh_cnn_text_classify" -> "Roshanson/TextInfoExp" ["e"=1]
"clayandgithub/zh_cnn_text_classify" -> "XqFeng-Josie/TextCNN" ["e"=1]
"clayandgithub/zh_cnn_text_classify" -> "luchi007/RNN_Text_Classify"
"clayandgithub/zh_cnn_text_classify" -> "ami66/ChineseTextClassifier" ["e"=1]
"clayandgithub/zh_cnn_text_classify" -> "practicingman/chinese_text_cnn" ["e"=1]
"clayandgithub/zh_cnn_text_classify" -> "liu-nlper/DocumentClassification"
"clayandgithub/zh_cnn_text_classify" -> "tensorlayer/text-antispam"
"luheng/deep_srl" -> "XMUNLP/Tagger"
"luheng/deep_srl" -> "strubell/LISA"
"luheng/deep_srl" -> "luheng/lsgn"
"luheng/deep_srl" -> "microth/PathLSTM"
"luheng/deep_srl" -> "diegma/neural-dep-srl"
"luheng/deep_srl" -> "swabhs/open-sesame"
"luheng/deep_srl" -> "allenai/acl2018-semantic-parsing-tutorial" ["e"=1]
"luheng/deep_srl" -> "UniversalPropositions/UP-1.0"
"luheng/deep_srl" -> "tdozat/Parser-v1" ["e"=1]
"cahya-wirawan/cnn-text-classification-tf" -> "cahya-wirawan/ML-Collection"
"abhijeet3922/Mail-Spam-Filtering" -> "aashishsatya/Bayesian-Spam-Filter"
"abhijeet3922/Mail-Spam-Filtering" -> "tasdikrahman/spammy"
"abhijeet3922/Mail-Spam-Filtering" -> "ZPdesu/Spam-Message-Classifier-sklearn"
"Noahs-ARK/NeurboParser" -> "mdtux89/amr-eager" ["e"=1]
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "zenRRan/Sentiment-Analysis"
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "Shawn1993/cnn-text-classification-pytorch"
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "FreedomIntelligence/TextClassificationBenchmark"
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "ndrplz/ConvLSTM_pytorch" ["e"=1]
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "PatientEz/CNN-BiLSTM-Attention-Time-Series-Prediction_Keras" ["e"=1]
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "prakashpandey9/Text-Classification-Pytorch"
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "automan000/Convolutional_LSTM_PyTorch" ["e"=1]
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF" ["e"=1]
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "albertwy/BiLSTM"
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "chenyuntc/PyTorchText" ["e"=1]
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "jiesutd/LatticeLSTM" ["e"=1]
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "649453932/Chinese-Text-Classification-Pytorch" ["e"=1]
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "slaysd/pytorch-sentiment-analysis-classification"
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "IBM/pytorch-seq2seq" ["e"=1]
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" -> "bojone/attention" ["e"=1]
"zackhy/TextClassification" -> "jiegzhan/multi-class-text-classification-cnn-rnn"
"zackhy/TextClassification" -> "TobiasLee/Text-Classification"
"zackhy/TextClassification" -> "luchi007/RNN_Text_Classify"
"jiangqy/LSTM-Classification-pytorch" -> "keishinkickback/Pytorch-RNN-text-classification"
"jiangqy/LSTM-Classification-pytorch" -> "a7b23/text-classification-in-pytorch-using-lstm"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "kaushalshetty/Structured-Self-Attention"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "yufengm/SelfAttentive"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "taoshen58/DiSAN"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "hantek/SelfAttentiveSentEmbed"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "jx00109/structured-self-attentive-sentence-embedding"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "flrngel/Self-Attentive-tensorflow"
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "dasguptar/treelstm.pytorch" ["e"=1]
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" -> "EdGENetworks/attention-networks-for-classification"
"cedias/HAN-pytorch" -> "cedias/Hierarchical-Sentiment"
"cedias/HAN-pytorch" -> "kieferk/hierarchical-attention-network"
"swabhs/open-sesame" -> "Noahs-ARK/semafor"
"swabhs/open-sesame" -> "Noahs-ARK/NeurboParser"
"swabhs/open-sesame" -> "luheng/deep_srl"
"swabhs/open-sesame" -> "chanind/frame-semantic-transformer"
"swabhs/open-sesame" -> "icsi-berkeley/ecg_framenet"
"liu-nlper/DocumentClassification" -> "lc222/text_classification_AI100"
"indiejoseph/doc-han-att" -> "indiejoseph/chinese-char-rnn"
"indiejoseph/doc-han-att" -> "ematvey/hierarchical-attention-networks"
"indiejoseph/doc-han-att" -> "indiejoseph/tf-ran-cell"
"galsang/CNN-sentence-classification-pytorch" -> "Cheneng/TextCNN" ["e"=1]
"galsang/CNN-sentence-classification-pytorch" -> "Shawn1993/cnn-text-classification-pytorch"
"galsang/CNN-sentence-classification-pytorch" -> "ymym3412/textcnn-conv-deconv-pytorch"
"lc222/text_classification_AI100" -> "liu-nlper/DocumentClassification"
"lc222/text_classification_AI100" -> "clayandgithub/zh_cnn_text_classify"
"lc222/text_classification_AI100" -> "Socialbird-AILab/BERT-Classification-Tutorial" ["e"=1]
"wavewangyue/text-classification" -> "JustinJiang1994/Text_Classification"
"kaushalshetty/Structured-Self-Attention" ["l"="53.425,28.753"]
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" ["l"="53.425,28.735"]
"flrngel/Self-Attentive-tensorflow" ["l"="53.452,28.778"]
"roomylee/self-attentive-emb-tf" ["l"="53.463,28.753"]
"guoyinwang/LEAM" ["l"="53.449,28.762"]
"timbmg/Structured-Self-Attentive-Sentence-Embedding" ["l"="53.452,28.737"]
"nn116003/self-attention-classification" ["l"="53.501,28.699"]
"EdGENetworks/attention-networks-for-classification" ["l"="53.351,28.75"]
"richliao/textClassifier" ["l"="53.381,28.809"]
"taoshen58/DiSAN" ["l"="53.479,28.768"]
"uhauha2929/examples" ["l"="53.465,28.707"]
"lancopku/SU4MLC" ["l"="53.489,28.748"]
"XMUNLP/Tagger" ["l"="53.55,28.771"]
"foamliu/Self-Attention-Keras" ["l"="53.957,27.242"]
"yufengm/SelfAttentive" ["l"="53.44,28.719"]
"prakashpandey9/Text-Classification-Pytorch" ["l"="53.355,28.716"]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" ["l"="53.362,28.683"]
"FreedomIntelligence/TextClassificationBenchmark" ["l"="53.375,28.734"]
"Shawn1993/cnn-text-classification-pytorch" ["l"="53.379,28.704"]
"sgrvinod/a-PyTorch-Tutorial-to-Text-Classification" ["l"="53.321,28.721"]
"keishinkickback/Pytorch-RNN-text-classification" ["l"="53.343,28.655"]
"songyingxin/TextClassification" ["l"="53.618,27.115"]
"bentrevett/pytorch-sentiment-analysis" ["l"="53.013,25.707"]
"TobiasLee/Text-Classification" ["l"="53.385,28.787"]
"kk7nc/Text_Classification" ["l"="53.611,27.203"]
"lonePatient/Bert-Multi-Label-Text-Classification" ["l"="53.666,27.193"]
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" ["l"="53.317,28.693"]
"pytorch/text" ["l"="53.07,25.646"]
"brightmart/text_classification" ["l"="53.422,27.308"]
"mJackie/SpamMessage" ["l"="53.345,29.124"]
"hrwhisper/SpamMessage" ["l"="53.341,29.101"]
"slaysd/pytorch-sentiment-analysis-classification" ["l"="53.245,28.724"]
"clairett/pytorch-sentiment-classification" ["l"="53.214,28.726"]
"xiaobaicxy/text-classification-BiLSTM-Attention-pytorch" ["l"="53.184,28.742"]
"wqk666999/CNN-LSTM-Attention" ["l"="-8.814,15.014"]
"PatientEz/CNN-BiLSTM-Attention-Time-Series-Prediction_Keras" ["l"="44.945,24.186"]
"u784799i/biLSTM_attn" ["l"="53.188,28.709"]
"pranoyr/cnn-lstm" ["l"="47.898,33.828"]
"lukysummer/Movie-Review-Sentiment-Analysis-LSTM-Pytorch" ["l"="53.214,28.747"]
"ningshixian/LSTM_Attention" ["l"="53.937,27.235"]
"luheng/deep_srl" ["l"="53.62,28.77"]
"strubell/LISA" ["l"="53.592,28.777"]
"diegma/neural-dep-srl" ["l"="53.605,28.75"]
"luheng/lsgn" ["l"="53.611,28.794"]
"LopezGG/NN_NER_tensorFlow" ["l"="53.512,27.608"]
"microth/PathLSTM" ["l"="53.586,28.758"]
"taoshen58/BiBloSA" ["l"="53.507,28.791"]
"YichenGong/Densely-Interactive-Inference-Network" ["l"="53.054,27.46"]
"taoshen58/ReSAN" ["l"="53.513,28.773"]
"zhiguowang/BiMPM" ["l"="53.104,27.486"]
"localminimum/QANet" ["l"="54.708,26.522"]
"lukecq1231/nli" ["l"="53.054,27.441"]
"dinghanshen/SWEM" ["l"="53.482,28.73"]
"ilivans/tf-rnn-attention" ["l"="53.357,28.838"]
"zackhy/TextClassification" ["l"="53.385,28.848"]
"Socialbird-AILab/BERT-Classification-Tutorial" ["l"="53.62,27.27"]
"dongjun-Lee/text-classification-models-tf" ["l"="53.421,28.822"]
"allenai/bilm-tf" ["l"="53.105,25.598"]
"yao8839836/text_gcn" ["l"="52.881,15.91"]
"brightmart/bert_language_understanding" ["l"="53.553,27.339"]
"jiegzhan/multi-class-text-classification-cnn-rnn" ["l"="53.364,28.863"]
"vietnh1009/Hierarchical-attention-networks-pytorch" ["l"="53.324,28.766"]
"tqtg/hierarchical-attention-networks" ["l"="53.317,28.796"]
"jaehunjung1/Hierarchical-Attention-Network" ["l"="53.292,28.786"]
"castorini/hedwig" ["l"="53.272,28.712"]
"ematvey/hierarchical-attention-networks" ["l"="53.36,28.807"]
"pandeykartikey/Hierarchical-Attention-Network" ["l"="-45.743,-33.91"]
"Cheneng/HiararchicalAttentionGRU" ["l"="-45.71,-33.928"]
"Hazoom/bert-han" ["l"="53.266,28.788"]
"vietnh1009/Very-deep-cnn-pytorch" ["l"="50.805,30.469"]
"dreasysnail/deconv_paragraph_represention" ["l"="53.483,28.67"]
"ymym3412/textcnn-conv-deconv-pytorch" ["l"="53.459,28.655"]
"dreasysnail/textGAN_public" ["l"="57.895,29.386"]
"albertwy/BiLSTM" ["l"="53.303,28.654"]
"bendangnuksung/Image-OutPainting" ["l"="45.668,28.948"]
"dongjun-Lee/transfer-learning-text-tf" ["l"="53.459,28.848"]
"LMescheder/GAN_stability" ["l"="45.856,29.003"]
"NTMC-Community/MatchZoo" ["l"="53.367,27.337"]
"albertpumarola/GANimation" ["l"="45.707,28.979"]
"Magic-Bubble/Zhihu" ["l"="53.594,27.388"]
"fendouai/Chinese-Text-Classification" ["l"="53.364,28.956"]
"indiejoseph/cnn-text-classification-tf-chinese" ["l"="53.372,28.919"]
"clayandgithub/zh_cnn_text_classify" ["l"="53.357,28.984"]
"LambdaWx/CNN_sentence_tensorflow" ["l"="53.345,28.942"]
"malteos/pytorch-bert-document-classification" ["l"="53.218,28.673"]
"AndriyMulyar/bert_document_classification" ["l"="53.241,28.681"]
"AIRobotZhang/STCKA" ["l"="53.194,28.64"]
"linhaow/TextClassification" ["l"="53.736,27.15"]
"Tencent/NeuralNLP-NeuralClassifier" ["l"="53.585,27.211"]
"andyweizhao/capsule_text_classification" ["l"="50.965,33.212"]
"songyouwei/ABSA-PyTorch" ["l"="54.111,28.178"]
"arunarn2/HierarchicalAttentionNetworks" ["l"="53.284,28.689"]
"wangshy31/Densely-Connected-CNN-with-Multiscale-Feature-Attention" ["l"="55.042,33.775"]
"hustlingchen/A3NCF" ["l"="59.742,23.628"]
"cedias/Hierarchical-Sentiment" ["l"="53.297,28.766"]
"cedias/HAN-pytorch" ["l"="53.283,28.756"]
"lijqhs/text-classification-cn" ["l"="53.55,29.14"]
"JustinJiang1994/Text_Classification" ["l"="53.528,29.118"]
"Renovamen/Text-Classification" ["l"="53.404,28.629"]
"miracleyoo/DPCNN-TextCNN-Pytorch-Inception" ["l"="50.086,22.313"]
"songyingxin/Bert-TextClassification" ["l"="53.601,27.184"]
"RandolphVI/Multi-Label-Text-Classification" ["l"="53.68,27.247"]
"pengshuang/Text-Similarity" ["l"="53.267,27.368"]
"ThilinaRajapakse/pytorch-transformers-classification" ["l"="53.368,28.619"]
"atnlp/torchtext-summary" ["l"="53.838,27.061"]
"tensorlayer/text-antispam" ["l"="53.37,29.048"]
"Windsooon/cherry" ["l"="53.388,29.081"]
"JansonKong/spam_filtering" ["l"="53.401,29.053"]
"lancopku/label-embedding-network" ["l"="58.568,29.072"]
"NonvolatileMemory/AAAI_2019_EXAM" ["l"="53.51,28.75"]
"idiap/gile" ["l"="53.466,28.793"]
"jamesmullenbach/caml-mimic" ["l"="-33.326,16.236"]
"riejohnson/ConText" ["l"="53.484,28.808"]
"lancopku/SGM" ["l"="-51.531,-14.771"]
"illcat/SGM-for-Multi-label-Classification" ["l"="53.516,28.73"]
"EMNLP2019LSAN/LSAN" ["l"="51.666,30.918"]
"castorini/castor" ["l"="52.909,27.447"]
"Georgetown-IR-Lab/cedr" ["l"="54.482,25.796"]
"helmy-elrais/RoBERT_Recurrence_over_BERT" ["l"="53.17,28.665"]
"namisan/mt-dnn" ["l"="53.308,27.184"]
"allenai/longformer" ["l"="53.252,27.091"]
"howardhsu/BERT-for-RRC-ABSA" ["l"="54.154,28.172"]
"huggingface/naacl_transfer_learning_tutorial" ["l"="23.497,14.916"]
"enilu/material-admin" ["l"="-43.936,11.073"]
"Eurus-Holmes/LIS-YNP" ["l"="51.272,27.542"]
"TurboWay/spiderman" ["l"="-44.003,11.114"]
"renjunxiang/Text-Classification" ["l"="53.467,29.051"]
"percent4/Sentiment_Analysis" ["l"="53.497,29.056"]
"wavewangyue/text-classification" ["l"="53.504,29.091"]
"lc222/text_classification_AI100" ["l"="53.405,29"]
"cjymz886/text-cnn" ["l"="50.09,22.208"]
"cjymz886/text_rnn_attention" ["l"="50.126,22.255"]
"Roshanson/TextInfoExp" ["l"="53.398,27.314"]
"mttk/rnn-classifier" ["l"="53.53,28.678"]
"hiroki13/span-based-srl" ["l"="53.623,28.819"]
"bcmi220/unisrl" ["l"="53.649,28.821"]
"strubell/LISA-v1" ["l"="53.589,28.804"]
"ThilinaRajapakse/BERT_binary_text_classification" ["l"="53.361,28.587"]
"jiangqy/LSTM-Classification-pytorch" ["l"="53.326,28.618"]
"triplemeng/hierarchical-attention-model" ["l"="53.286,28.832"]
"magical2world/tf-hierarchical-rnn" ["l"="53.259,28.842"]
"silverzhaojr/spam-filter" ["l"="53.286,29.036"]
"mikami-yua/byes_mail_filter" ["l"="53.259,29.035"]
"shijing888/BayesSpam" ["l"="53.31,29.034"]
"c1nty/Chinese_Spam_Filter" ["l"="53.304,29.015"]
"zhaozhengChen/RegionEmbedding" ["l"="53.534,28.74"]
"malllabiisc/NeuralDater" ["l"="53.636,28.722"]
"malllabiisc/AD3" ["l"="53.65,28.705"]
"bcmi220/srl_syn_pruning" ["l"="53.69,28.849"]
"bcmi220/unified_syn_srl" ["l"="53.674,28.838"]
"Doragd/Text-Classification-PyTorch" ["l"="53.425,28.598"]
"nado-dev/Naive-Bayes-classifier" ["l"="53.282,29.019"]
"heraclex12/VLSP2020-Fake-News-Detection" ["l"="53.143,28.666"]
"franbvalero/BERT-long-sentence-classification" ["l"="53.151,28.649"]
"ArmandDS/bert_for_long_text" ["l"="53.228,28.65"]
"CLOVEXCWZ/Pytorch_Text_Classification_Demo" ["l"="53.007,28.537"]
"CLOVEXCWZ/Pytorch_LongText_Classification_Demo" ["l"="53.019,28.549"]
"Dongcf/BiLSTM-Attention_CN_Text_Clf_Pytorch" ["l"="53.153,28.748"]
"Shivampanwar/Bert-text-classification" ["l"="53.388,28.582"]
"ThilinaRajapakse/simpletransformers" ["l"="52.79,25.725"]
"GeorgeLuImmortal/Hierarchical-BERT-Model-with-Limited-Labelled-Data" ["l"="53.235,28.799"]
"Noahs-ARK/semafor-semantic-parser" ["l"="53.751,28.756"]
"Noahs-ARK/semafor" ["l"="53.73,28.765"]
"qingyujean/document-level-classification" ["l"="53.041,28.568"]
"neesetifa/bert_classification" ["l"="53.069,28.593"]
"SCHENLIU/longformer-chinese" ["l"="53.062,28.629"]
"ValkyriaLenneth/Longformer_ZH" ["l"="53.039,28.629"]
"ischaojie/mini_sms_classify" ["l"="53.232,29.04"]
"Sleepychord/CogLTX" ["l"="53.102,28.628"]
"aashishsatya/Bayesian-Spam-Filter" ["l"="53.269,29.082"]
"abhijeet3922/Mail-Spam-Filtering" ["l"="53.262,29.111"]
"swabhs/open-sesame" ["l"="53.687,28.76"]
"microth/mateplus" ["l"="53.762,28.777"]
"SunnyMarkLiu/Naive_Bayes_Meet_Adaboost" ["l"="53.296,29.064"]
"ZPdesu/Spam-Message-Classifier-sklearn" ["l"="53.301,29.101"]
"lvwangbeta/mailFilter" ["l"="53.287,29.087"]
"indiejoseph/chinese-char-rnn" ["l"="53.413,28.898"]
"luchi007/RNN_Text_Classify" ["l"="53.354,28.91"]
"kinni/char-cnn-text-classification-tensorflow" ["l"="53.406,28.936"]
"jiegzhan/multi-class-text-classification-cnn" ["l"="53.368,28.888"]
"ljx02/Spam_Email_Classificaton" ["l"="53.323,29.056"]
"tasdikrahman/spammy" ["l"="53.245,29.136"]
"tasdikrahman/plino" ["l"="53.228,29.159"]
"LunaBlack/RNN-Classification" ["l"="53.336,28.9"]
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" ["l"="46.287,27.684"]
"philipperemy/keras-attention" ["l"="53.873,27.221"]
"dennybritz/cnn-text-classification-tf" ["l"="53.153,25.633"]
"airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier" ["l"="53.24,25.072"]
"yoonkim/CNN_sentence" ["l"="46.207,27.733"]
"datalogue/keras-attention" ["l"="53.9,27.227"]
"raviqqe/tensorflow-font2char2word2sent2doc" ["l"="53.343,28.783"]
"indiejoseph/doc-han-att" ["l"="53.408,28.855"]
"lc222/HAN-text-classification-tf" ["l"="53.32,28.816"]
"synthesio/hierarchical-attention-networks" ["l"="53.323,28.833"]
"thunlp/NSC" ["l"="54.306,28.265"]
"minqi/hnatt" ["l"="52.094,26.064"]
"cahya-wirawan/cnn-text-classification-tf" ["l"="53.32,28.886"]
"liu-nlper/DocumentClassification" ["l"="53.394,28.968"]
"jiegzhan/machine-learning-stanford" ["l"="53.395,28.906"]
"salestock/fastText.py" ["l"="53.036,25.593"]
"LambdaWx/con_sentence" ["l"="53.313,28.955"]
"kdrivas/Graph-convolutional" ["l"="53.612,28.726"]
"tdozat/Parser-v1" ["l"="52.98,25.151"]
"carpedm20/lstm-char-cnn-tensorflow" ["l"="46.213,27.79"]
"chenzhi1992/Multi-Label-Text-Classification" ["l"="53.7,27.27"]
"EdGENetworks/anuvada" ["l"="53.304,28.741"]
"MaximumEntropy/Seq2Seq-PyTorch" ["l"="53.165,25.589"]
"kefirski/pytorch_RVAE" ["l"="57.684,29.333"]
"bojone/attention" ["l"="53.649,27.27"]
"ematvey/tensorflow-seq2seq-tutorials" ["l"="55.803,28.528"]
"HadoopIt/rnn-nlu" ["l"="56.63,29.244"]
"Kyubyong/transformer" ["l"="53.233,25.678"]
"allenai/bi-att-flow" ["l"="54.681,26.519"]
"galsang/ABCNN" ["l"="53.252,27.539"]
"rockingdingo/deepnlp" ["l"="53.39,27.446"]
"THTBSE/rnn_text_classification" ["l"="53.309,28.858"]
"harvardnlp/sent-conv-torch" ["l"="46.193,27.708"]
"practicingman/chinese_text_cnn" ["l"="50.046,22.153"]
"galsang/CNN-sentence-classification-pytorch" ["l"="53.415,28.67"]
"IBM/pytorch-seq2seq" ["l"="53.182,25.62"]
"srviest/char-cnn-text-classification-pytorch" ["l"="46.305,27.586"]
"spro/practical-pytorch" ["l"="53.121,25.666"]
"sfailsthy/chinese-text-classification-with-cnn-tf" ["l"="53.347,29.009"]
"XqFeng-Josie/TextCNN" ["l"="50.078,22.198"]
"ami66/ChineseTextClassifier" ["l"="50.032,22.133"]
"allenai/acl2018-semantic-parsing-tutorial" ["l"="37.593,-1.715"]
"UniversalPropositions/UP-1.0" ["l"="53.656,28.781"]
"cahya-wirawan/ML-Collection" ["l"="53.292,28.899"]
"Noahs-ARK/NeurboParser" ["l"="53.701,28.73"]
"mdtux89/amr-eager" ["l"="57.691,28.984"]
"zenRRan/Sentiment-Analysis" ["l"="53.275,28.645"]
"ndrplz/ConvLSTM_pytorch" ["l"="41.508,25.807"]
"automan000/Convolutional_LSTM_PyTorch" ["l"="41.495,25.78"]
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" ["l"="53.611,27.499"]
"chenyuntc/PyTorchText" ["l"="53.483,27.369"]
"jiesutd/LatticeLSTM" ["l"="53.536,27.383"]
"649453932/Chinese-Text-Classification-Pytorch" ["l"="53.464,27.18"]
"a7b23/text-classification-in-pytorch-using-lstm" ["l"="53.313,28.589"]
"hantek/SelfAttentiveSentEmbed" ["l"="53.443,28.693"]
"jx00109/structured-self-attentive-sentence-embedding" ["l"="53.426,28.704"]
"dasguptar/treelstm.pytorch" ["l"="53,25.464"]
"kieferk/hierarchical-attention-network" ["l"="53.253,28.766"]
"chanind/frame-semantic-transformer" ["l"="53.715,28.745"]
"icsi-berkeley/ecg_framenet" ["l"="53.704,28.78"]
"indiejoseph/tf-ran-cell" ["l"="53.432,28.871"]
"Cheneng/TextCNN" ["l"="50.068,22.251"]
}