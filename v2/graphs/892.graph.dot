digraph G {
"dreamhunter2333/python_PlateRecogntion" -> "simple2048/CarPlateIdentity"
"dreamhunter2333/python_PlateRecogntion" -> "yinghualuowu/Python_VLPR"
"dreamhunter2333/python_PlateRecogntion" -> "DataXujing/vehicle-license-plate-recognition"
"dreamhunter2333/python_PlateRecogntion" -> "fjklqq/License_plate_recognition"
"dreamhunter2333/python_PlateRecogntion" -> "wzh191920/License-Plate-Recognition"
"dreamhunter2333/python_PlateRecogntion" -> "we0091234/Chinese_license_plate_detection_recognition"
"dreamhunter2333/python_PlateRecogntion" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"dreamhunter2333/python_PlateRecogntion" -> "Chao2020x/license-plate-recognition"
"dreamhunter2333/python_PlateRecogntion" -> "hyzhangyong/platenumber"
"dreamhunter2333/python_PlateRecogntion" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"dreamhunter2333/python_PlateRecogntion" -> "chensongbin/LicensePlateRecognition"
"dreamhunter2333/python_PlateRecogntion" -> "we0091234/Car_recognition"
"dreamhunter2333/python_PlateRecogntion" -> "detectRecog/CCPD"
"dreamhunter2333/python_PlateRecogntion" -> "jmhIcoding/car-board-reg"
"dreamhunter2333/python_PlateRecogntion" -> "we0091234/yolov8-plate"
"szad670401/HyperLPR" -> "liuruoze/EasyPR"
"szad670401/HyperLPR" -> "detectRecog/CCPD"
"szad670401/HyperLPR" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"szad670401/HyperLPR" -> "zeusees/License-Plate-Detector"
"szad670401/HyperLPR" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"szad670401/HyperLPR" -> "sergiomsilva/alpr-unconstrained"
"szad670401/HyperLPR" -> "openalpr/openalpr"
"szad670401/HyperLPR" -> "lqian/light-LPR"
"szad670401/HyperLPR" -> "chineseocr/chineseocr" ["e"=1]
"szad670401/HyperLPR" -> "DayBreak-u/chineseocr_lite" ["e"=1]
"szad670401/HyperLPR" -> "ShiqiYu/libfacedetection" ["e"=1]
"szad670401/HyperLPR" -> "we0091234/Chinese_license_plate_detection_recognition"
"szad670401/HyperLPR" -> "Linzaer/Ultra-Light-Fast-Generic-Face-Detector-1MB" ["e"=1]
"szad670401/HyperLPR" -> "xiaofengShi/CHINESE-OCR" ["e"=1]
"szad670401/HyperLPR" -> "sirius-ai/LPRNet_Pytorch"
"detectRecog/CCPD" -> "sirius-ai/LPRNet_Pytorch"
"detectRecog/CCPD" -> "szad670401/HyperLPR"
"detectRecog/CCPD" -> "sergiomsilva/alpr-unconstrained"
"detectRecog/CCPD" -> "zeusees/License-Plate-Detector"
"detectRecog/CCPD" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"detectRecog/CCPD" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"detectRecog/CCPD" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"detectRecog/CCPD" -> "lqian/light-LPR"
"detectRecog/CCPD" -> "liuruoze/EasyPR"
"detectRecog/CCPD" -> "lyl8213/Plate_Recognition-LPRnet"
"detectRecog/CCPD" -> "we0091234/Chinese_license_plate_detection_recognition"
"detectRecog/CCPD" -> "Sierkinhane/CRNN_Chinese_Characters_Rec" ["e"=1]
"detectRecog/CCPD" -> "xiangweizeng/mobile-lpr"
"detectRecog/CCPD" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"detectRecog/CCPD" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"openalpr/openalpr" -> "liuruoze/EasyPR"
"openalpr/openalpr" -> "szad670401/HyperLPR"
"openalpr/openalpr" -> "cmusatyalab/openface" ["e"=1]
"openalpr/openalpr" -> "sergiomsilva/alpr-unconstrained"
"openalpr/openalpr" -> "matthewearl/deep-anpr"
"openalpr/openalpr" -> "detectRecog/CCPD"
"openalpr/openalpr" -> "pjreddie/darknet" ["e"=1]
"openalpr/openalpr" -> "tesseract-ocr/tesseract" ["e"=1]
"openalpr/openalpr" -> "davidsandberg/facenet" ["e"=1]
"openalpr/openalpr" -> "ShiqiYu/libfacedetection" ["e"=1]
"openalpr/openalpr" -> "HumanSignal/labelImg" ["e"=1]
"openalpr/openalpr" -> "AlexeyAB/darknet" ["e"=1]
"openalpr/openalpr" -> "microsoft/CNTK" ["e"=1]
"openalpr/openalpr" -> "ageitgey/face_recognition" ["e"=1]
"openalpr/openalpr" -> "BVLC/caffe" ["e"=1]
"onuzbee/Indian-Number-Plate-Recognition-System" -> "vjgpt/Vehicle-Number-Plate-Reading"
"onuzbee/Indian-Number-Plate-Recognition-System" -> "parvatijay2901/Automatic-Number-plate-detection-for-Indian-vehicles"
"onuzbee/Indian-Number-Plate-Recognition-System" -> "AnjieCheng/Tensorflow-Number-Plate-Recognition"
"vjgpt/Vehicle-Number-Plate-Reading" -> "onuzbee/Indian-Number-Plate-Recognition-System"
"yxq9650/CarParking" -> "xuzhou530/ParkinglotWebService"
"yxq9650/CarParking" -> "ParkingOS/ParkingOS_local"
"yxq9650/CarParking" -> "watercloudss/parkweb"
"yxq9650/CarParking" -> "panmingzhi815/dongluCarpark"
"yxq9650/CarParking" -> "zhujainxipan/Parking-lot-management-system"
"yxq9650/CarParking" -> "DrXin/parkingLotSystem"
"yxq9650/CarParking" -> "qianliangchang/depot-system"
"yxq9650/CarParking" -> "maguangzu/Parking-Management-System"
"yxq9650/CarParking" -> "ParkingOS/ParkingOS_cloud"
"yxq9650/CarParking" -> "ddhmit/parking-control-server"
"yxq9650/CarParking" -> "zhangzhibo1014/CarSystem"
"yinghualuowu/Python_VLPR" -> "DataXujing/vehicle-license-plate-recognition"
"yinghualuowu/Python_VLPR" -> "dreamhunter2333/python_PlateRecogntion"
"yinghualuowu/Python_VLPR" -> "wzh191920/License-Plate-Recognition"
"yinghualuowu/Python_VLPR" -> "simple2048/CarPlateIdentity"
"yinghualuowu/Python_VLPR" -> "Yaoshicn/decaptcha" ["e"=1]
"yinghualuowu/Python_VLPR" -> "xg-zhang/faceRegister" ["e"=1]
"yinghualuowu/Python_VLPR" -> "Chao2020x/license-plate-recognition"
"yinghualuowu/Python_VLPR" -> "fjklqq/License_plate_recognition"
"yinghualuowu/Python_VLPR" -> "hyzhangyong/platenumber"
"yinghualuowu/Python_VLPR" -> "jmhIcoding/car-board-reg"
"yinghualuowu/Python_VLPR" -> "Zephery/weiboanalysis" ["e"=1]
"yinghualuowu/Python_VLPR" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"yinghualuowu/Python_VLPR" -> "veraposeidon/Insect_Identification"
"yinghualuowu/Python_VLPR" -> "Superbsco/weibo-analysis-system" ["e"=1]
"yinghualuowu/Python_VLPR" -> "PengfeiM/Fatigue-Driven-Detection-Based-on-CNN" ["e"=1]
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "lqian/light-LPR"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "sergiomsilva/alpr-unconstrained"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "detectRecog/CCPD"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "zeusees/License-Plate-Detector"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "szad670401/HyperLPR"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "zuoqing1988/ZQCNN" ["e"=1]
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "xiangweizeng/mobile-lpr"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "sirius-ai/LPRNet_Pytorch"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "YonghaoHe/LFFD-A-Light-and-Fast-Face-Detector-for-Edge-Devices" ["e"=1]
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "lyl8213/Plate_Recognition-LPRnet"
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "senlinuc/caffe_ocr" ["e"=1]
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "dlunion/mtcnn" ["e"=1]
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" -> "liuruoze/EasyPR"
"ria-com/nomeroff-net" -> "KostyaKulakov/Russian_System_of_ANPR"
"ria-com/nomeroff-net" -> "smeyanoff/car-number-detection"
"ria-com/nomeroff-net" -> "rm-yakovenko/nomeroff-net-docker"
"ria-com/nomeroff-net" -> "ZlodeiBaal/Recognitor"
"ria-com/nomeroff-net" -> "DoubangoTelecom/ultimateALPR-SDK"
"ria-com/nomeroff-net" -> "RainGrid/openalpr_ru_runtime"
"ria-com/nomeroff-net" -> "AIHunters/AcurusTrack"
"ria-com/nomeroff-net" -> "sploid/plate_recognition"
"ria-com/nomeroff-net" -> "cvat-ai/cvat-opencv"
"sergiomsilva/alpr-unconstrained" -> "detectRecog/CCPD"
"sergiomsilva/alpr-unconstrained" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"sergiomsilva/alpr-unconstrained" -> "sirius-ai/LPRNet_Pytorch"
"sergiomsilva/alpr-unconstrained" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"sergiomsilva/alpr-unconstrained" -> "DoubangoTelecom/ultimateALPR-SDK"
"sergiomsilva/alpr-unconstrained" -> "zeusees/License-Plate-Detector"
"sergiomsilva/alpr-unconstrained" -> "lyl8213/Plate_Recognition-LPRnet"
"sergiomsilva/alpr-unconstrained" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"sergiomsilva/alpr-unconstrained" -> "szad670401/HyperLPR"
"sergiomsilva/alpr-unconstrained" -> "Dharun/Tensorflow-License-Plate-Detection"
"sergiomsilva/alpr-unconstrained" -> "matthewearl/deep-anpr"
"sergiomsilva/alpr-unconstrained" -> "GuiltyNeuron/ANPR"
"sergiomsilva/alpr-unconstrained" -> "lqian/light-LPR"
"sergiomsilva/alpr-unconstrained" -> "openalpr/openalpr"
"sergiomsilva/alpr-unconstrained" -> "Deevoluation/ALPR"
"zheng-yuwei/license-plate-generator" -> "Pengfei8324/chinese_license_plate_generator"
"zheng-yuwei/license-plate-generator" -> "derek285/generateCarPlate"
"zheng-yuwei/license-plate-generator" -> "mingbocui/Generate-LicensePlate-with-GAN"
"zheng-yuwei/license-plate-generator" -> "yxgong0/CRPD"
"zheng-yuwei/license-plate-generator" -> "Nenger/chinese_licence_plate_generator"
"zheng-yuwei/license-plate-generator" -> "gm19900510/Pytorch_Retina_License_Plate"
"zheng-yuwei/license-plate-generator" -> "we0091234/crnn_plate_recognition"
"zheng-yuwei/license-plate-generator" -> "deeplearningshare/multi-line-plate-recognition"
"zheng-yuwei/license-plate-generator" -> "millionsofluo/FakeLPR"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "CaptainEven/RepNet-MDNet-VehicleReID" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "zeusees/HyperVID"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "JunshengFu/vehicle-detection" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "zeusees/License-Plate-Detector"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "Sharpiless/yolov3-vehicle-detection-paddle"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "knwng/awesome-vehicle-re-identification" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "Yukun-Huang/Person-Attribute-Recognition-MarketDuke" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "XiaoRobb/CarTeller"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "dangweili/pedestrian-attribute-recognition-pytorch" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "wangxiao5791509/Pedestrian-Attribute-Recognition-Paper-List" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "xiangweizeng/mobile-lpr"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "layumi/AICIty-reID-2020" ["e"=1]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "detectRecog/CCPD"
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" -> "gm19900510/Pytorch_Retina_License_Plate"
"simple2048/CarPlateIdentity" -> "dreamhunter2333/python_PlateRecogntion"
"simple2048/CarPlateIdentity" -> "fjklqq/License_plate_recognition"
"simple2048/CarPlateIdentity" -> "DataXujing/vehicle-license-plate-recognition"
"simple2048/CarPlateIdentity" -> "jmhIcoding/car-board-reg"
"simple2048/CarPlateIdentity" -> "yinghualuowu/Python_VLPR"
"simple2048/CarPlateIdentity" -> "wzh191920/License-Plate-Recognition"
"simple2048/CarPlateIdentity" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"simple2048/CarPlateIdentity" -> "hyzhangyong/platenumber"
"simple2048/CarPlateIdentity" -> "detectRecog/CCPD"
"simple2048/CarPlateIdentity" -> "airxiechao/simple-car-plate-recognition"
"simple2048/CarPlateIdentity" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"simple2048/CarPlateIdentity" -> "chensongbin/LicensePlateRecognition"
"simple2048/CarPlateIdentity" -> "Chao2020x/license-plate-recognition"
"simple2048/CarPlateIdentity" -> "blueapplehe/car_identify"
"simple2048/CarPlateIdentity" -> "we0091234/Chinese_license_plate_detection_recognition"
"watercloudss/parkweb" -> "qianliangchang/depot-system"
"sirius-ai/LPRNet_Pytorch" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"sirius-ai/LPRNet_Pytorch" -> "detectRecog/CCPD"
"sirius-ai/LPRNet_Pytorch" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"sirius-ai/LPRNet_Pytorch" -> "lyl8213/Plate_Recognition-LPRnet"
"sirius-ai/LPRNet_Pytorch" -> "zeusees/License-Plate-Detector"
"sirius-ai/LPRNet_Pytorch" -> "sergiomsilva/alpr-unconstrained"
"sirius-ai/LPRNet_Pytorch" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"sirius-ai/LPRNet_Pytorch" -> "gm19900510/Pytorch_Retina_License_Plate"
"sirius-ai/LPRNet_Pytorch" -> "lqian/light-LPR"
"sirius-ai/LPRNet_Pytorch" -> "xiangweizeng/mobile-lpr"
"sirius-ai/LPRNet_Pytorch" -> "we0091234/Chinese_license_plate_detection_recognition"
"sirius-ai/LPRNet_Pytorch" -> "we0091234/crnn_plate_recognition"
"sirius-ai/LPRNet_Pytorch" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"sirius-ai/LPRNet_Pytorch" -> "we0091234/yolov7_plate"
"sirius-ai/LPRNet_Pytorch" -> "SunlifeV/CBLPRD-330k"
"airxiechao/simple-car-plate-recognition" -> "jmhIcoding/car-board-reg"
"airxiechao/simple-car-plate-recognition" -> "airxiechao/simple-car-plate-recognition-2"
"airxiechao/simple-car-plate-recognition" -> "Feeyao/License-plate-recognition"
"airxiechao/simple-car-plate-recognition" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"airxiechao/simple-car-plate-recognition" -> "Chaway/LP_character_segmentation"
"airxiechao/simple-car-plate-recognition" -> "simple2048/CarPlateIdentity"
"airxiechao/simple-car-plate-recognition" -> "fjklqq/License_plate_recognition"
"StanfordVL/cs131_notes" -> "StanfordVL/CS131_release"
"StanfordVL/cs131_notes" -> "kenjihata/cs231a-notes"
"StanfordVL/cs131_notes" -> "Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application"
"StanfordVL/cs131_notes" -> "zhaoxiongjun/CS131_notes_zh-CN"
"StanfordVL/cs131_notes" -> "ermongroup/cs228-notes" ["e"=1]
"StanfordVL/cs131_notes" -> "cs231n/cs231n.github.io" ["e"=1]
"zeusees/License-Plate-Detector" -> "detectRecog/CCPD"
"zeusees/License-Plate-Detector" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"zeusees/License-Plate-Detector" -> "xiangweizeng/mobile-lpr"
"zeusees/License-Plate-Detector" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"zeusees/License-Plate-Detector" -> "sirius-ai/LPRNet_Pytorch"
"zeusees/License-Plate-Detector" -> "szad670401/HyperLPR"
"zeusees/License-Plate-Detector" -> "zeusees/HyperVID"
"zeusees/License-Plate-Detector" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"zeusees/License-Plate-Detector" -> "lqian/light-LPR"
"zeusees/License-Plate-Detector" -> "gm19900510/Pytorch_Retina_License_Plate"
"zeusees/License-Plate-Detector" -> "we0091234/Chinese_license_plate_detection_recognition"
"zeusees/License-Plate-Detector" -> "sergiomsilva/alpr-unconstrained"
"zeusees/License-Plate-Detector" -> "deepcam-cn/yolov5-face" ["e"=1]
"zeusees/License-Plate-Detector" -> "YonghaoHe/LFFD-A-Light-and-Fast-Face-Detector-for-Edge-Devices" ["e"=1]
"zeusees/License-Plate-Detector" -> "DataXujing/vehicle-license-plate-recognition"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "sirius-ai/LPRNet_Pytorch"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "zeusees/License-Plate-Detector"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "detectRecog/CCPD"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "xiangweizeng/mobile-lpr"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "lyl8213/Plate_Recognition-LPRnet"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "lqian/light-LPR"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "sergiomsilva/alpr-unconstrained"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "gm19900510/Pytorch_Retina_License_Plate"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "ufownl/alpr_utils"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "ufownl/fake_chs_lp"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "chenjun2hao/CLPR.pytorch"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "CaptainEven/Vehicle-Car-detection-and-multilabel-classification"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "zheng-yuwei/license-plate-generator"
"xuexingyu24/License_Plate_Detection_Pytorch" -> "zeusees/HyperVID"
"Alireza-Akhavan/deep-face-recognition" -> "Alireza-Akhavan/tf2-tutorial"
"Alireza-Akhavan/deep-face-recognition" -> "Alireza-Akhavan/class.vision"
"Alireza-Akhavan/deep-face-recognition" -> "Alireza-Akhavan/rnn-notebooks"
"Alireza-Akhavan/deep-face-recognition" -> "Alireza-Akhavan/deeplearning-tensorflow2-notebooks"
"Alireza-Akhavan/deep-face-recognition" -> "Alireza-Akhavan/python-labs"
"Alireza-Akhavan/deep-face-recognition" -> "Alireza-Akhavan/object-detection-notebooks"
"Alireza-Akhavan/deep-face-recognition" -> "Alireza-Akhavan/iran-celeb"
"Alireza-Akhavan/deep-face-recognition" -> "SajjadAemmi/Face-Recognition"
"apoorva-dave/LicensePlateDetector" -> "Dharun/Tensorflow-License-Plate-Detection"
"apoorva-dave/LicensePlateDetector" -> "alitourani/yolo-license-plate-detection"
"apoorva-dave/LicensePlateDetector" -> "ShreyAmbesh/Traffic-Rule-Violation-Detection-System" ["e"=1]
"apoorva-dave/LicensePlateDetector" -> "parkpow/deep-license-plate-recognition"
"apoorva-dave/LicensePlateDetector" -> "femioladeji/License-Plate-Recognition-Nigerian-vehicles"
"apoorva-dave/LicensePlateDetector" -> "GuiltyNeuron/ANPR"
"apoorva-dave/LicensePlateDetector" -> "vjgpt/Vehicle-Number-Plate-Reading"
"apoorva-dave/LicensePlateDetector" -> "apoorva-dave/LicensePlateDetector-deployment-flask"
"apoorva-dave/LicensePlateDetector" -> "SarthakV7/AI-based-indian-license-plate-detection"
"apoorva-dave/LicensePlateDetector" -> "faisalthaheem/open-lpr"
"apoorva-dave/LicensePlateDetector" -> "quangnhat185/Plate_detect_and_recognize"
"apoorva-dave/LicensePlateDetector" -> "longphungtuan94/ALPR_System"
"apoorva-dave/LicensePlateDetector" -> "mahavird/my_deep_anpr"
"apoorva-dave/LicensePlateDetector" -> "shreyapamecha/Speed-Estimation-of-Vehicles-with-Plate-Detection" ["e"=1]
"apoorva-dave/LicensePlateDetector" -> "DoubangoTelecom/ultimateALPR-SDK"
"nicolas-gervais/predicting-car-price-from-scraped-data" -> "zeusees/HyperVID"
"nicolas-gervais/predicting-car-price-from-scraped-data" -> "Strand2013/NNIE-lite" ["e"=1]
"nicolas-gervais/predicting-car-price-from-scraped-data" -> "ufownl/alpr_utils"
"blueapplehe/car_identify" -> "PT123123/Vehicle-recognition-system"
"blueapplehe/car_identify" -> "XiaoRobb/CarTeller"
"blueapplehe/car_identify" -> "kinredon/brand_classification"
"blueapplehe/car_identify" -> "erquren/vehicle_recognition"
"blueapplehe/car_identify" -> "Zoushuang86/final_quiz"
"StanfordVL/CS131_release" -> "StanfordVL/cs131_notes"
"StanfordVL/CS131_release" -> "mikucy/CS131"
"StanfordVL/CS131_release" -> "zhaoxiongjun/CS131_notes_zh-CN"
"StanfordVL/CS131_release" -> "Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application"
"StanfordVL/CS131_release" -> "veraposeidon/CS131_Assignments"
"StanfordVL/CS131_release" -> "kenjihata/cs231a-notes"
"StanfordVL/CS131_release" -> "chizhang529/cs231a"
"StanfordVL/CS131_release" -> "xuwd11/cs131_hws"
"StanfordVL/CS131_release" -> "yihui-he/computer-vision-tutorial"
"DoubangoTelecom/ultimateALPR-SDK" -> "parkpow/deep-license-plate-recognition"
"DoubangoTelecom/ultimateALPR-SDK" -> "sergiomsilva/alpr-unconstrained"
"DoubangoTelecom/ultimateALPR-SDK" -> "DoubangoTelecom/compv" ["e"=1]
"DoubangoTelecom/ultimateALPR-SDK" -> "apoorva-dave/LicensePlateDetector"
"DoubangoTelecom/ultimateALPR-SDK" -> "Deevoluation/ALPR"
"DoubangoTelecom/ultimateALPR-SDK" -> "faisalthaheem/open-lpr"
"DoubangoTelecom/ultimateALPR-SDK" -> "sirius-ai/LPRNet_Pytorch"
"DoubangoTelecom/ultimateALPR-SDK" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"DoubangoTelecom/ultimateALPR-SDK" -> "ShreyAmbesh/Traffic-Rule-Violation-Detection-System" ["e"=1]
"DoubangoTelecom/ultimateALPR-SDK" -> "ankandrew/fast-alpr"
"DoubangoTelecom/ultimateALPR-SDK" -> "theAIGuysCode/yolov4-custom-functions" ["e"=1]
"DoubangoTelecom/ultimateALPR-SDK" -> "DoubangoTelecom/ultimateMRZ-SDK" ["e"=1]
"DoubangoTelecom/ultimateALPR-SDK" -> "ufownl/alpr_utils"
"DoubangoTelecom/ultimateALPR-SDK" -> "DoubangoTelecom/FaceLivenessDetection-SDK" ["e"=1]
"DoubangoTelecom/ultimateALPR-SDK" -> "ria-com/nomeroff-net"
"Dharun/Tensorflow-License-Plate-Detection" -> "apoorva-dave/LicensePlateDetector"
"Dharun/Tensorflow-License-Plate-Detection" -> "stevefielding/tensorflow-anpr"
"Dharun/Tensorflow-License-Plate-Detection" -> "mahavird/my_deep_anpr"
"Dharun/Tensorflow-License-Plate-Detection" -> "AnjieCheng/Tensorflow-Number-Plate-Recognition"
"Dharun/Tensorflow-License-Plate-Detection" -> "ShreyAmbesh/Traffic-Rule-Violation-Detection-System" ["e"=1]
"Dharun/Tensorflow-License-Plate-Detection" -> "alitourani/yolo-license-plate-detection"
"Dharun/Tensorflow-License-Plate-Detection" -> "sergiomsilva/alpr-unconstrained"
"Dharun/Tensorflow-License-Plate-Detection" -> "vjgpt/Vehicle-Number-Plate-Reading"
"Dharun/Tensorflow-License-Plate-Detection" -> "Deevoluation/ALPR"
"Dharun/Tensorflow-License-Plate-Detection" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python"
"Dharun/Tensorflow-License-Plate-Detection" -> "GuiltyNeuron/ANPR"
"Dharun/Tensorflow-License-Plate-Detection" -> "parkpow/deep-license-plate-recognition"
"Dharun/Tensorflow-License-Plate-Detection" -> "matthewearl/deep-anpr"
"stevefielding/tensorflow-anpr" -> "stevefielding/keras-anpr"
"stevefielding/tensorflow-anpr" -> "Dharun/Tensorflow-License-Plate-Detection"
"stevefielding/tensorflow-anpr" -> "rafariva/ANPR-Tensorflow"
"stevefielding/tensorflow-anpr" -> "mahavird/my_deep_anpr"
"stevefielding/tensorflow-anpr" -> "matthewearl/deep-anpr"
"stevefielding/tensorflow-anpr" -> "GuiltyNeuron/ANPR"
"faisalthaheem/open-lpr" -> "parkpow/deep-license-plate-recognition"
"Alireza-Akhavan/deeplearning-tensorflow2-notebooks" -> "Alireza-Akhavan/tf2-tutorial"
"Alireza-Akhavan/deeplearning-tensorflow2-notebooks" -> "Alireza-Akhavan/rnn-notebooks"
"Alireza-Akhavan/deeplearning-tensorflow2-notebooks" -> "Alireza-Akhavan/class.vision"
"Alireza-Akhavan/deeplearning-tensorflow2-notebooks" -> "Alireza-Akhavan/deep-face-recognition"
"Alireza-Akhavan/deeplearning-tensorflow2-notebooks" -> "Alireza-Akhavan/ML-notebooks"
"Alireza-Akhavan/deeplearning-tensorflow2-notebooks" -> "Alireza-Akhavan/python-labs"
"Alireza-Akhavan/class.vision" -> "Alireza-Akhavan/deep-face-recognition"
"Alireza-Akhavan/class.vision" -> "Alireza-Akhavan/deeplearning-tensorflow2-notebooks"
"Alireza-Akhavan/class.vision" -> "Alireza-Akhavan/tf2-tutorial"
"Alireza-Akhavan/class.vision" -> "Alireza-Akhavan/rnn-notebooks"
"Alireza-Akhavan/class.vision" -> "Alireza-Akhavan/ML-notebooks"
"Alireza-Akhavan/class.vision" -> "Alireza-Akhavan/python-labs"
"Alireza-Akhavan/class.vision" -> "Alireza-Akhavan/object-detection-notebooks"
"Alireza-Akhavan/class.vision" -> "Alireza-Akhavan/iran-celeb"
"Alireza-Akhavan/class.vision" -> "Alireza-Akhavan/ffmpeg-tutorial"
"zeusees/HyperVID" -> "xiangweizeng/mobile-lpr"
"zeusees/HyperVID" -> "CaptainEven/Vehicle-Car-detection-and-multilabel-classification"
"zeusees/HyperVID" -> "zeusees/License-Plate-Detector"
"zeusees/HyperVID" -> "CaptainEven/RepNet-MDNet-VehicleReID" ["e"=1]
"zeusees/HyperVID" -> "lqian/light-LPR"
"zeusees/HyperVID" -> "HansRen1024/Face-Tracking-Using-CNN-and-Optical-Flow" ["e"=1]
"zeusees/HyperVID" -> "PT123123/Vehicle-recognition-system"
"zeusees/HyperVID" -> "zeusees/HyperLPR-Training"
"zeusees/HyperVID" -> "deeplearningshare/multi-line-plate-recognition"
"zeusees/HyperVID" -> "zeusees/HyperLabelImg" ["e"=1]
"zeusees/HyperVID" -> "erquren/vehicle_recognition"
"zeusees/HyperVID" -> "Charrin/RetinaFace-Cpp" ["e"=1]
"zeusees/HyperVID" -> "JDAI-CV/VeRidataset" ["e"=1]
"zeusees/HyperVID" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"zeusees/HyperVID" -> "knwng/awesome-vehicle-re-identification" ["e"=1]
"DataXujing/vehicle-license-plate-recognition" -> "wzh191920/License-Plate-Recognition"
"DataXujing/vehicle-license-plate-recognition" -> "yinghualuowu/Python_VLPR"
"DataXujing/vehicle-license-plate-recognition" -> "dreamhunter2333/python_PlateRecogntion"
"DataXujing/vehicle-license-plate-recognition" -> "simple2048/CarPlateIdentity"
"DataXujing/vehicle-license-plate-recognition" -> "fjklqq/License_plate_recognition"
"DataXujing/vehicle-license-plate-recognition" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"DataXujing/vehicle-license-plate-recognition" -> "we0091234/Chinese_license_plate_detection_recognition"
"DataXujing/vehicle-license-plate-recognition" -> "zeusees/License-Plate-Detector"
"DataXujing/vehicle-license-plate-recognition" -> "detectRecog/CCPD"
"DataXujing/vehicle-license-plate-recognition" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"DataXujing/vehicle-license-plate-recognition" -> "jmhIcoding/car-board-reg"
"DataXujing/vehicle-license-plate-recognition" -> "derek285/generateCarPlate"
"DataXujing/vehicle-license-plate-recognition" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"DataXujing/vehicle-license-plate-recognition" -> "sirius-ai/LPRNet_Pytorch"
"DataXujing/vehicle-license-plate-recognition" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"parkpow/deep-license-plate-recognition" -> "DoubangoTelecom/ultimateALPR-SDK"
"parkpow/deep-license-plate-recognition" -> "apoorva-dave/LicensePlateDetector"
"parkpow/deep-license-plate-recognition" -> "faisalthaheem/open-lpr"
"parkpow/deep-license-plate-recognition" -> "sergiomsilva/alpr-unconstrained"
"parkpow/deep-license-plate-recognition" -> "Dharun/Tensorflow-License-Plate-Detection"
"parkpow/deep-license-plate-recognition" -> "sirius-ai/LPRNet_Pytorch"
"parkpow/deep-license-plate-recognition" -> "NanoNets/nanonets-ocr-sample-python"
"parkpow/deep-license-plate-recognition" -> "Deevoluation/ALPR"
"parkpow/deep-license-plate-recognition" -> "stevefielding/tensorflow-anpr"
"parkpow/deep-license-plate-recognition" -> "GuiltyNeuron/ANPR"
"parkpow/deep-license-plate-recognition" -> "souravrs999/License-Plate-Recognition"
"parkpow/deep-license-plate-recognition" -> "ShreyAmbesh/Traffic-Rule-Violation-Detection-System" ["e"=1]
"parkpow/deep-license-plate-recognition" -> "ankandrew/fast-plate-ocr"
"parkpow/deep-license-plate-recognition" -> "ufownl/alpr_utils"
"parkpow/deep-license-plate-recognition" -> "matthewearl/deep-anpr"
"zeusees/HyperLPR-Training" -> "zeusees/train-detector"
"zeusees/HyperLPR-Training" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework"
"zeusees/HyperLPR-Training" -> "armaab/hyperlpr-train"
"zeusees/HyperLPR-Training" -> "szad670401/Rubost-Chinese-License-Plate-Locate-Using-LBP-adaboost-with-CNN-regression"
"zeusees/HyperLPR-Training" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"zeusees/HyperLPR-Training" -> "szad670401/texture_skew_detection"
"zeusees/HyperLPR-Training" -> "hyzhangyong/platenumber"
"zeusees/HyperLPR-Training" -> "zeusees/HyperVID"
"lqian/light-LPR" -> "xiangweizeng/mobile-lpr"
"lqian/light-LPR" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"lqian/light-LPR" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"lqian/light-LPR" -> "zeusees/License-Plate-Detector"
"lqian/light-LPR" -> "zeusees/HyperVID"
"lqian/light-LPR" -> "detectRecog/CCPD"
"lqian/light-LPR" -> "YonghaoHe/LFFD-A-Light-and-Fast-Face-Detector-for-Edge-Devices" ["e"=1]
"lqian/light-LPR" -> "sirius-ai/LPRNet_Pytorch"
"lqian/light-LPR" -> "xindongzhang/MNN-APPLICATIONS" ["e"=1]
"lqian/light-LPR" -> "szad670401/HyperLPR"
"lqian/light-LPR" -> "olojuwin/facerecognize-for-mobile-phone" ["e"=1]
"lqian/light-LPR" -> "hanson-young/nniefacelib" ["e"=1]
"lqian/light-LPR" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework"
"lqian/light-LPR" -> "zheng-yuwei/license-plate-generator"
"lqian/light-LPR" -> "sergiomsilva/alpr-unconstrained"
"qianliangchang/depot-system" -> "DrXin/parkingLotSystem"
"XiaoRobb/CarTeller" -> "PT123123/Vehicle-recognition-system"
"XiaoRobb/CarTeller" -> "blueapplehe/car_identify"
"XiaoRobb/CarTeller" -> "zzjoey/Vehica"
"XiaoRobb/CarTeller" -> "Sharpiless/yolov3-vehicle-detection-paddle"
"wzh191920/License-Plate-Recognition" -> "DataXujing/vehicle-license-plate-recognition"
"wzh191920/License-Plate-Recognition" -> "yinghualuowu/Python_VLPR"
"wzh191920/License-Plate-Recognition" -> "simple2048/CarPlateIdentity"
"wzh191920/License-Plate-Recognition" -> "fjklqq/License_plate_recognition"
"wzh191920/License-Plate-Recognition" -> "dreamhunter2333/python_PlateRecogntion"
"wzh191920/License-Plate-Recognition" -> "detectRecog/CCPD"
"wzh191920/License-Plate-Recognition" -> "zeusees/License-Plate-Detector"
"wzh191920/License-Plate-Recognition" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"wzh191920/License-Plate-Recognition" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python"
"wzh191920/License-Plate-Recognition" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"wzh191920/License-Plate-Recognition" -> "airxiechao/simple-car-plate-recognition"
"wzh191920/License-Plate-Recognition" -> "sirius-ai/LPRNet_Pytorch"
"wzh191920/License-Plate-Recognition" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"wzh191920/License-Plate-Recognition" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"wzh191920/License-Plate-Recognition" -> "szad670401/HyperLPR"
"lyl8213/Plate_Recognition-LPRnet" -> "sirius-ai/LPRNet_Pytorch"
"lyl8213/Plate_Recognition-LPRnet" -> "deeplearningshare/multi-line-plate-recognition"
"lyl8213/Plate_Recognition-LPRnet" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"lyl8213/Plate_Recognition-LPRnet" -> "armaab/hyperlpr-train"
"lyl8213/Plate_Recognition-LPRnet" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework"
"lyl8213/Plate_Recognition-LPRnet" -> "detectRecog/CCPD"
"lyl8213/Plate_Recognition-LPRnet" -> "sergiomsilva/alpr-unconstrained"
"lyl8213/Plate_Recognition-LPRnet" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"lyl8213/Plate_Recognition-LPRnet" -> "gm19900510/Pytorch_Retina_License_Plate"
"lyl8213/Plate_Recognition-LPRnet" -> "ufownl/fake_chs_lp"
"lyl8213/Plate_Recognition-LPRnet" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"lyl8213/Plate_Recognition-LPRnet" -> "derek285/generateCarPlate"
"lyl8213/Plate_Recognition-LPRnet" -> "ufownl/alpr_utils"
"lyl8213/Plate_Recognition-LPRnet" -> "xiangweizeng/mobile-lpr"
"lyl8213/Plate_Recognition-LPRnet" -> "zeusees/HyperLPR-Training"
"derek285/generateCarPlate" -> "zheng-yuwei/license-plate-generator"
"derek285/generateCarPlate" -> "gm19900510/Pytorch_Retina_License_Plate"
"jmhIcoding/car-board-reg" -> "simple2048/CarPlateIdentity"
"jmhIcoding/car-board-reg" -> "SeraphUnion/Automatic-recognition-system-of-license-plate-number"
"jmhIcoding/car-board-reg" -> "fjklqq/License_plate_recognition"
"jmhIcoding/car-board-reg" -> "airxiechao/simple-car-plate-recognition"
"jmhIcoding/car-board-reg" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"aleyn97/LPR" -> "lxhAndSmh/HyperLPR"
"aleyn97/LPR" -> "laolang07/CarORC"
"aleyn97/LPR" -> "imistyrain/EasyPR4Android"
"aleyn97/LPR" -> "zeusees/HyperLPR"
"mikucy/CS131" -> "Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application"
"mikucy/CS131" -> "xuwd11/cs131_hws"
"mikucy/CS131" -> "fengyang95/CS131_homework"
"mikucy/CS131" -> "veraposeidon/CS131_Assignments"
"amirmgh1375/iranian-license-plate-recognition" -> "amirmgh1375/FormCharRecognition"
"amirmgh1375/iranian-license-plate-recognition" -> "amirmgh1375/TextRecognitionDataGenerator"
"amirmgh1375/iranian-license-plate-recognition" -> "mut-deep/IR-LPR"
"amirmgh1375/iranian-license-plate-recognition" -> "alitourani/Iranis-dataset"
"amirmgh1375/iranian-license-plate-recognition" -> "SeyedHamidreza/car_plate_dataset"
"GuiltyNeuron/ANPR" -> "apoorva-dave/LicensePlateDetector"
"GuiltyNeuron/ANPR" -> "TheophileBuy/LicensePlateRecognition"
"GuiltyNeuron/ANPR" -> "sergiomsilva/alpr-unconstrained"
"GuiltyNeuron/ANPR" -> "stevefielding/tensorflow-anpr"
"GuiltyNeuron/ANPR" -> "Dharun/Tensorflow-License-Plate-Detection"
"GuiltyNeuron/ANPR" -> "mehulgupta2016154/TCS_HUMAIN"
"GuiltyNeuron/ANPR" -> "sirius-ai/LPRNet_Pytorch"
"GuiltyNeuron/ANPR" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python"
"GuiltyNeuron/ANPR" -> "Deevoluation/ALPR"
"GuiltyNeuron/ANPR" -> "longphungtuan94/ALPR_System"
"GuiltyNeuron/ANPR" -> "alitourani/yolo-license-plate-detection"
"GuiltyNeuron/ANPR" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework"
"GuiltyNeuron/ANPR" -> "femioladeji/License-Plate-Recognition-Nigerian-vehicles"
"GuiltyNeuron/ANPR" -> "parkpow/deep-license-plate-recognition"
"GuiltyNeuron/ANPR" -> "ShreyAmbesh/Traffic-Rule-Violation-Detection-System" ["e"=1]
"Aqsa-K/Number-Plate-Detection-and-Separation-OpenCV" -> "Aqsa-K/Detecting-Catarct-From-Eye-Images-OpenCV-Python"
"DrXin/parkingLotSystem" -> "qianliangchang/depot-system"
"veraposeidon/labelme2Datasets" -> "veraposeidon/Insect_Identification"
"veraposeidon/labelme2Datasets" -> "veraposeidon/CS131_Assignments"
"laolang07/CarORC" -> "ccc920123/LicensePlateDemo"
"sploid/plate_recognition" -> "ZlodeiBaal/Recognitor"
"Nenger/chinese_licence_plate_generator" -> "millionsofluo/FakeLPR"
"Nenger/chinese_licence_plate_generator" -> "chenjun2hao/CLPR.pytorch"
"zeusees/train-detector" -> "zeusees/HyperLPR-Training"
"zeusees/train-detector" -> "armaab/hyperlpr-train"
"armaab/hyperlpr-train" -> "LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework"
"armaab/hyperlpr-train" -> "szad670401/Rubost-Chinese-License-Plate-Locate-Using-LBP-adaboost-with-CNN-regression"
"armaab/hyperlpr-train" -> "zeusees/HyperLPR-Training"
"armaab/hyperlpr-train" -> "zeusees/train-detector"
"armaab/hyperlpr-train" -> "deeplearningshare/multi-line-plate-recognition"
"Alireza-Akhavan/DeepLearning-azad" -> "Alireza-Akhavan/Deep-Learning-Papers-Reading-Roadmap"
"Alireza-Akhavan/DeepLearning-azad" -> "Alireza-Akhavan/iran-celeb"
"mahavird/my_deep_anpr" -> "rafariva/ANPR-Tensorflow"
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" -> "armaab/hyperlpr-train"
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" -> "zeusees/HyperLPR-Training"
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" -> "millionsofluo/FakeLPR"
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" -> "deeplearningshare/multi-line-plate-recognition"
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" -> "Nenger/chinese_licence_plate_generator"
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" -> "mingbocui/Generate-LicensePlate-with-GAN"
"ZlodeiBaal/Recognitor" -> "CodeGenerator/Recognitor"
"Aqsa-K/Car-Number-Plate-Detection-OpenCV-Python" -> "Aqsa-K/Number-Plate-Detection-and-Separation-OpenCV"
"Aqsa-K/Car-Number-Plate-Detection-OpenCV-Python" -> "Aqsa-K/Detecting-Catarct-From-Eye-Images-OpenCV-Python"
"PT123123/Vehicle-recognition-system" -> "XiaoRobb/CarTeller"
"PT123123/Vehicle-recognition-system" -> "zzjoey/Vehica"
"PT123123/Vehicle-recognition-system" -> "kinredon/brand_classification"
"PT123123/Vehicle-recognition-system" -> "blueapplehe/car_identify"
"Aqsa-K/Detecting-Catarct-From-Eye-Images-OpenCV-Python" -> "Aqsa-K/Number-Plate-Detection-and-Separation-OpenCV"
"Alireza-Akhavan/face-quality-metrics" -> "Alireza-Akhavan/iran-celeb"
"Alireza-Akhavan/face-quality-metrics" -> "Alireza-Akhavan/python-labs"
"SeyedHamidreza/car_plate_dataset" -> "mahdi-abbaspour-shahmarasi/FlaskRestFulCodeGenerator"
"SeyedHamidreza/car_plate_dataset" -> "mahdi-abbaspour-shahmarasi/forexDataExporter"
"SeyedHamidreza/car_plate_dataset" -> "mahdi-abbaspour-shahmarasi/Hello-World"
"Alireza-Akhavan/python-labs" -> "Alireza-Akhavan/iran-celeb"
"Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application" -> "mikucy/CS131"
"Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application" -> "BXuan694/CS131"
"Zoushuang86/final_quiz" -> "lsn5966397/vehicle_detection"
"amirmgh1375/FormCharRecognition" -> "amirmgh1375/TextRecognitionDataGenerator"
"chenjun2hao/CLPR.pytorch" -> "Nenger/chinese_licence_plate_generator"
"amirmgh1375/TextRecognitionDataGenerator" -> "amirmgh1375/FormCharRecognition"
"deeplearningshare/multi-line-plate-recognition" -> "millionsofluo/FakeLPR"
"vansl/JiandanSpider" -> "qianqing13579/QQImageProcess"
"vansl/JiandanSpider" -> "gg-z/qt_image_display"
"vansl/JiandanSpider" -> "arnauddelaunay/Detectron-Tensorflow"
"vansl/JiandanSpider" -> "kingqiuol/win10_yolov5_tensorRT"
"vansl/JiandanSpider" -> "Chaway/LP_character_segmentation"
"ParkingOS/parkingos_cloud_vue" -> "ParkingOS/parkingos_cloud_vue_server"
"arnauddelaunay/Detectron-Tensorflow" -> "qianqing13579/QQImageProcess"
"ParkingOS/parkingos_cloud_vue_server" -> "ParkingOS/parkingos_cloud_vue"
"Alireza-Akhavan/iran-celeb" -> "Alireza-Akhavan/python-labs"
"liuruoze/EasyPR" -> "szad670401/HyperLPR"
"liuruoze/EasyPR" -> "openalpr/openalpr"
"liuruoze/EasyPR" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"liuruoze/EasyPR" -> "detectRecog/CCPD"
"liuruoze/EasyPR" -> "seetaface/SeetaFaceEngine" ["e"=1]
"liuruoze/EasyPR" -> "linuxxx/EasyPR_Android"
"liuruoze/EasyPR" -> "ShiqiYu/libfacedetection" ["e"=1]
"liuruoze/EasyPR" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"liuruoze/EasyPR" -> "fan-wenjie/EasyPR-Java"
"liuruoze/EasyPR" -> "weiliu89/caffe" ["e"=1]
"liuruoze/EasyPR" -> "zeusees/License-Plate-Detector"
"liuruoze/EasyPR" -> "EasyDarwin/EasyDarwin" ["e"=1]
"liuruoze/EasyPR" -> "Tencent/ncnn" ["e"=1]
"liuruoze/EasyPR" -> "sergiomsilva/alpr-unconstrained"
"liuruoze/EasyPR" -> "jikexueyuanwiki/tensorflow-zh" ["e"=1]
"linuxxx/EasyPR_Android" -> "imistyrain/EasyPR4Android"
"linuxxx/EasyPR_Android" -> "fan-wenjie/EasyPR-Java"
"linuxxx/EasyPR_Android" -> "liuruoze/EasyPR"
"linuxxx/EasyPR_Android" -> "guocheng0606/EasyPRForAndroid"
"linuxxx/EasyPR_Android" -> "zcolin/ZEasyPR"
"linuxxx/EasyPR_Android" -> "lizhangqu/Camera" ["e"=1]
"linuxxx/EasyPR_Android" -> "zhoushiwei/EasyPR-iOS"
"fanghon/lpr" -> "chenjun2hao/CLPR.pytorch"
"jeffsieu/py-sudoku" -> "g-k-l/sudokugen"
"jeffsieu/py-sudoku" -> "SajjadAemmi/PyDeploy"
"jeffsieu/py-sudoku" -> "MohamadNematizadeh/Machine-Learning"
"jeffsieu/py-sudoku" -> "MSaberian/PyLearnGUI"
"jeffsieu/py-sudoku" -> "SajjadAemmi/PyLearn"
"jeffsieu/py-sudoku" -> "M-Taghizadeh/Dollar_Rial_Price_Dataset"
"Sharpiless/yolov3-vehicle-detection-paddle" -> "CaoAnda/yolo-v4"
"Sharpiless/yolov3-vehicle-detection-paddle" -> "zbp-xxxp/reading_pictures_writing_poems" ["e"=1]
"Sharpiless/yolov3-vehicle-detection-paddle" -> "XiaoRobb/CarTeller"
"Sharpiless/yolov3-vehicle-detection-paddle" -> "KernelErr/realtime-object-detector" ["e"=1]
"Sharpiless/yolov3-vehicle-detection-paddle" -> "hang245141253/raspi4B_mask_detection_runtime" ["e"=1]
"Sharpiless/yolov3-vehicle-detection-paddle" -> "lsn5966397/vehicle_detection"
"ddhmit/parking-control-server" -> "ddhmit/parking-control-admin"
"zzxvictor/License-super-resolution" -> "zheng-yuwei/license-plate-generator"
"zzxvictor/License-super-resolution" -> "brightyoun/LPSR-Recognition"
"zzxvictor/License-super-resolution" -> "mingbocui/Generate-LicensePlate-with-GAN"
"Alireza-Akhavan/tf2-tutorial" -> "Alireza-Akhavan/rnn-notebooks"
"Alireza-Akhavan/tf2-tutorial" -> "Alireza-Akhavan/object-detection-notebooks"
"Alireza-Akhavan/tf2-tutorial" -> "Alireza-Akhavan/python-labs"
"Alireza-Akhavan/tf2-tutorial" -> "Alireza-Akhavan/iran-celeb"
"Alireza-Akhavan/tf2-tutorial" -> "Alireza-Akhavan/deeplearning-tensorflow2-notebooks"
"ufownl/fake_chs_lp" -> "ufownl/alpr_utils"
"ufownl/fake_chs_lp" -> "wangpengnorman/CLPD_dataset"
"ufownl/fake_chs_lp" -> "Nenger/chinese_licence_plate_generator"
"ufownl/fake_chs_lp" -> "millionsofluo/FakeLPR"
"ufownl/fake_chs_lp" -> "chenjun2hao/CLPR.pytorch"
"gm19900510/Pytorch_Retina_License_Plate" -> "derek285/generateCarPlate"
"gm19900510/Pytorch_Retina_License_Plate" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"gm19900510/Pytorch_Retina_License_Plate" -> "xiangweizeng/mobile-lpr"
"gm19900510/Pytorch_Retina_License_Plate" -> "zeusees/License-Plate-Detector"
"gm19900510/Pytorch_Retina_License_Plate" -> "zheng-yuwei/license-plate-generator"
"gm19900510/Pytorch_Retina_License_Plate" -> "yxgong0/CRPD"
"xiangweizeng/mobile-lpr" -> "lqian/light-LPR"
"xiangweizeng/mobile-lpr" -> "YonghaoHe/LFFD-A-Light-and-Fast-Face-Detector-for-Edge-Devices" ["e"=1]
"xiangweizeng/mobile-lpr" -> "zeusees/License-Plate-Detector"
"xiangweizeng/mobile-lpr" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"xiangweizeng/mobile-lpr" -> "zeusees/HyperVID"
"xiangweizeng/mobile-lpr" -> "olojuwin/facerecognize-for-mobile-phone" ["e"=1]
"xiangweizeng/mobile-lpr" -> "hanson-young/nniefacelib" ["e"=1]
"xiangweizeng/mobile-lpr" -> "gm19900510/Pytorch_Retina_License_Plate"
"xiangweizeng/mobile-lpr" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"xiangweizeng/mobile-lpr" -> "detectRecog/CCPD"
"xiangweizeng/mobile-lpr" -> "dog-qiuqiu/Ultralight-SimplePose" ["e"=1]
"xiangweizeng/mobile-lpr" -> "biubug6/Face-Detector-1MB-with-landmark" ["e"=1]
"xiangweizeng/mobile-lpr" -> "MirrorYuChen/ncnn_example" ["e"=1]
"xiangweizeng/mobile-lpr" -> "dlunion/DBFace" ["e"=1]
"xiangweizeng/mobile-lpr" -> "moli232777144/mtcnn_ncnn" ["e"=1]
"ankandrew/fast-alpr" -> "ankandrew/fast-plate-ocr"
"ankandrew/fast-alpr" -> "ankandrew/open-image-models"
"KostyaKulakov/Russian_System_of_ANPR" -> "RainGrid/openalpr_ru_runtime"
"KostyaKulakov/Russian_System_of_ANPR" -> "ZlodeiBaal/Recognitor"
"fjklqq/License_plate_recognition" -> "simple2048/CarPlateIdentity"
"fjklqq/License_plate_recognition" -> "dreamhunter2333/python_PlateRecogntion"
"fjklqq/License_plate_recognition" -> "DataXujing/vehicle-license-plate-recognition"
"fjklqq/License_plate_recognition" -> "jmhIcoding/car-board-reg"
"fjklqq/License_plate_recognition" -> "gm19900510/Pytorch_Retina_License_Plate"
"fjklqq/License_plate_recognition" -> "wzh191920/License-Plate-Recognition"
"fjklqq/License_plate_recognition" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"fjklqq/License_plate_recognition" -> "chensongbin/LicensePlateRecognition"
"fjklqq/License_plate_recognition" -> "Chao2020x/license-plate-recognition"
"fjklqq/License_plate_recognition" -> "airxiechao/simple-car-plate-recognition"
"fjklqq/License_plate_recognition" -> "derek285/generateCarPlate"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "DataXujing/vehicle-license-plate-recognition"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "simple2048/CarPlateIdentity"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "jmhIcoding/car-board-reg"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "fjklqq/License_plate_recognition"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "detectRecog/CCPD"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "airxiechao/simple-car-plate-recognition"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "zeusees/License-Plate-Detector"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "gm19900510/Pytorch_Retina_License_Plate"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "xiangweizeng/mobile-lpr"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "dreamhunter2333/python_PlateRecogntion"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "leo187/End-to-end-for-chinese-plate-recognition"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "zeusees/HyperLPR"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"duanshengliu/End-to-end-for-chinese-plate-recognition" -> "sirius-ai/LPRNet_Pytorch"
"AIHunters/AcurusTrack" -> "AIHunters/EvenVizion"
"wangpengnorman/CLPD_dataset" -> "yxgong0/CRPD"
"brightyoun/TITS-LPST" -> "brightyoun/Video-Style-Transfer"
"brightyoun/TITS-LPST" -> "brightyoun/LPSR-Recognition"
"brightyoun/TITS-LPST" -> "brightyoun/RainDrop-Effect_Python3"
"brightyoun/TITS-LPST" -> "unique-chan/Complement-Cross-Entropy"
"unique-chan/Complement-Cross-Entropy" -> "brightyoun/TITS-LPST"
"unique-chan/Complement-Cross-Entropy" -> "brightyoun/RainDrop-Effect_Python3"
"Chao2020x/license-plate-recognition" -> "Y132om/Credit_card_identification"
"Chao2020x/license-plate-recognition" -> "chensongbin/LicensePlateRecognition"
"Chao2020x/license-plate-recognition" -> "xiaooo-jian/Digital-image-processing-Final-Work"
"quangnhat185/Plate_detect_and_recognize" -> "longphungtuan94/ALPR_System"
"quangnhat185/Plate_detect_and_recognize" -> "apoorva-dave/LicensePlateDetector"
"Alireza-Akhavan/rnn-notebooks" -> "Alireza-Akhavan/tf2-tutorial"
"Alireza-Akhavan/rnn-notebooks" -> "Alireza-Akhavan/python-labs"
"Alireza-Akhavan/rnn-notebooks" -> "Alireza-Akhavan/deeplearning-tensorflow2-notebooks"
"Alireza-Akhavan/rnn-notebooks" -> "Alireza-Akhavan/object-detection-notebooks"
"Alireza-Akhavan/rnn-notebooks" -> "Alireza-Akhavan/deep-face-recognition"
"Alireza-Akhavan/rnn-notebooks" -> "Alireza-Akhavan/iran-celeb"
"Alireza-Akhavan/rnn-notebooks" -> "Alireza-Akhavan/class.vision"
"brightyoun/LPSR-Recognition" -> "brightyoun/Video-Style-Transfer"
"brightyoun/LPSR-Recognition" -> "brightyoun/RainDrop-Effect_Python3"
"brightyoun/LPSR-Recognition" -> "brightyoun/TITS-LPST"
"NanoNets/nanonets-ocr-sample-python" -> "AnjieCheng/Tensorflow-Number-Plate-Recognition"
"NanoNets/nanonets-ocr-sample-python" -> "souravrs999/License-Plate-Recognition"
"NanoNets/nanonets-ocr-sample-python" -> "NanoNets/ocr-python"
"ccc920123/LicensePlateDemo" -> "laolang07/CarORC"
"zhaoxiongjun/CS131_notes_zh-CN" -> "StanfordVL/CS131_release"
"alitourani/yolo-license-plate-detection" -> "alitourani/Iranis-dataset"
"alitourani/yolo-license-plate-detection" -> "alitourani/deep-learning-vehicle-detection"
"alitourani/yolo-license-plate-detection" -> "apoorva-dave/LicensePlateDetector"
"ankandrew/fast-plate-ocr" -> "ankandrew/fast-alpr"
"zeusees/HyperLPR" -> "aleyn97/LPR"
"ufownl/alpr_utils" -> "ufownl/fake_chs_lp"
"ufownl/alpr_utils" -> "xuexingyu24/License_Plate_Detection_Pytorch"
"ufownl/alpr_utils" -> "armaab/hyperlpr-train"
"ufownl/alpr_utils" -> "chenjun2hao/CLPR.pytorch"
"alitourani/Iranis-dataset" -> "mut-deep/IR-LPR"
"brightyoun/RainDrop-Effect_Python3" -> "brightyoun/Video-Style-Transfer"
"brightyoun/Video-Style-Transfer" -> "brightyoun/RainDrop-Effect_Python3"
"brightyoun/Video-Style-Transfer" -> "brightyoun/LPSR-Recognition"
"fan-wenjie/EasyPR-Java" -> "linuxxx/EasyPR_Android"
"fan-wenjie/EasyPR-Java" -> "eguid/vlpr4j"
"fan-wenjie/EasyPR-Java" -> "liuruoze/EasyPR"
"fan-wenjie/EasyPR-Java" -> "ParkingOS/ParkingOS_local"
"fan-wenjie/EasyPR-Java" -> "imistyrain/EasyPR4Android"
"fan-wenjie/EasyPR-Java" -> "lqian/light-LPR"
"fan-wenjie/EasyPR-Java" -> "kongqw/OpenCVForAndroid" ["e"=1]
"fan-wenjie/EasyPR-Java" -> "swimfish09/ChepaiORC"
"mirusu400/Pinterest-infinite-crawler" -> "SajjadAemmi/Pinterest-Crawler"
"zhujainxipan/Parking-lot-management-system" -> "xuzhou530/ParkinglotWebService"
"zhujainxipan/Parking-lot-management-system" -> "DrXin/parkingLotSystem"
"zhujainxipan/Parking-lot-management-system" -> "yxq9650/CarParking"
"zhujainxipan/Parking-lot-management-system" -> "qianliangchang/depot-system"
"Pengfei8324/chinese_license_plate_generator" -> "zheng-yuwei/license-plate-generator"
"Pengfei8324/chinese_license_plate_generator" -> "yxgong0/CRPD"
"Pengfei8324/chinese_license_plate_generator" -> "we0091234/crnn_plate_recognition"
"SomethingCo/expo-job-queue" -> "mahdi-abbaspour-shahmarasi/FlaskRestFulCodeGenerator"
"img88/ALPR_IndonesiaPlateNumber_ComputerVision" -> "muchlisinadi/ALPR-Indonesia"
"Alireza-Akhavan/object-detection-notebooks" -> "Alireza-Akhavan/tf2-tutorial"
"xiaosongshine/CCPD_Plus" -> "sevenHsu/LicensePlateChars"
"MaryamBoneh/Vehicle-Detection" -> "MaryamBoneh/DeepLearning-Course"
"MaryamBoneh/Vehicle-Detection" -> "SajjadAemmi/PyLearn"
"MaryamBoneh/Vehicle-Detection" -> "SajjadAemmi/Face-Recognition"
"MaryamBoneh/Vehicle-Detection" -> "SajjadAemmi/Face-Alignment"
"MaryamBoneh/Vehicle-Detection" -> "SajjadAemmi/RNN"
"MaryamBoneh/Vehicle-Detection" -> "NahidEbrahimian/Cars-Detection-using-Yolov5"
"MaryamBoneh/Vehicle-Detection" -> "MaryamBoneh/PythonCourse_Aemmi"
"MaryamBoneh/Vehicle-Detection" -> "Parisa-Bagherzadeh/Image_processing"
"MaryamBoneh/Vehicle-Detection" -> "NahidEbrahimian/Human-Parsing-on-Binary-Images"
"MaryamBoneh/Vehicle-Detection" -> "Parisa-Bagherzadeh/DeepLearning"
"MaryamBoneh/Vehicle-Detection" -> "SajjadAemmi/Pinterest-Crawler"
"MaryamBoneh/Vehicle-Detection" -> "SajjadAemmi/SA-MobileNetV3"
"MaryamBoneh/Vehicle-Detection" -> "SajjadAemmi/SnakeAI"
"MaryamBoneh/Vehicle-Detection" -> "SajjadAemmi/Machine-Learning"
"MaryamBoneh/Vehicle-Detection" -> "SajjadAemmi/sajjadaemmi.github.io"
"mokar2001/House-Price-Tehran-Iran" -> "M-Taghizadeh/Dollar_Rial_Price_Dataset"
"SajjadAemmi/Pinterest-Crawler" -> "SajjadAemmi/PyLearn"
"SajjadAemmi/Pinterest-Crawler" -> "SajjadAemmi/Face-Recognition"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "sirius-ai/LPRNet_Pytorch"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "we0091234/Chinese_license_plate_detection_recognition"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "kiloGrand/License-Plate-Recognition"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "we0091234/crnn_plate_recognition"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "we0091234/yolov7_plate"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "we0091234/Car_recognition"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "we0091234/yolov8-plate"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "detectRecog/CCPD"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "HuKai97/yolov5-5.x-annotations" ["e"=1]
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "zeusees/License-Plate-Detector"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "Fanstuck/Yolov7-LPRNet"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "yxgong0/CRPD"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "xialuxi/yolov5-car-plate" ["e"=1]
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "DataXujing/vehicle-license-plate-recognition"
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" -> "duanshengliu/End-to-end-for-chinese-plate-recognition"
"MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial" -> "MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Cpp"
"MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial" -> "MicrocontrollersAndMore/Raspberry_Pi_2_and_OpenCV_3_Tutorial_Part_1"
"MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python"
"MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp"
"MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial" -> "MicrocontrollersAndMore/OpenCV_3_Car_Counting_Cpp"
"Alireza-Akhavan/ML-notebooks" -> "Alireza-Akhavan/chatgpt-prompt"
"yxgong0/CRPD" -> "wangpengnorman/CLPD_dataset"
"yxgong0/CRPD" -> "SunlifeV/CBLPRD-330k"
"yxgong0/CRPD" -> "we0091234/crnn_plate_recognition"
"yxgong0/CRPD" -> "xiaosongshine/CCPD_Plus"
"yxgong0/CRPD" -> "Pengfei8324/chinese_license_plate_generator"
"FatemeZamanian/Yolov5-Fruit-Detector" -> "FatemeZamanian/DeepLearning"
"FatemeZamanian/Yolov5-Fruit-Detector" -> "SajjadAemmi/sajjadaemmi.github.io"
"FatemeZamanian/Yolov5-Fruit-Detector" -> "SajjadAemmi/Face-Alignment"
"FatemeZamanian/Yolov5-Fruit-Detector" -> "FatemeZamanian/PersonalWebsite-flask"
"MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Python" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python"
"MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Cpp" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp"
"MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Cpp" -> "MicrocontrollersAndMore/OpenCV_3_Car_Counting_Cpp"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Python"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "Deevoluation/ALPR"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "wzh191920/License-Plate-Recognition"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "Dharun/Tensorflow-License-Plate-Detection"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "Link009/LPEX"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "GuiltyNeuron/ANPR"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "apoorva-dave/LicensePlateDetector"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "muchlisinadi/ALPR-Indonesia"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "matthewearl/deep-anpr"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "stevefielding/tensorflow-anpr"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "onuzbee/Indian-Number-Plate-Recognition-System"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "longphungtuan94/ALPR_System"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" -> "Aqsa-K/Car-Number-Plate-Detection-OpenCV-Python"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp" -> "MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Cpp"
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp" -> "MicrocontrollersAndMore/OpenCV_3_Car_Counting_Cpp"
"mahdi-abbaspour-shahmarasi/ShapesDataset" -> "mahdi-abbaspour-shahmarasi/forexDataExporter"
"mahdi-abbaspour-shahmarasi/ShapesDataset" -> "mahdi-abbaspour-shahmarasi/FlaskRestFulCodeGenerator"
"openvinotoolkit/workbench" -> "openvinotoolkit/workbench_aux"
"we0091234/Chinese_license_plate_detection_recognition" -> "we0091234/crnn_plate_recognition"
"we0091234/Chinese_license_plate_detection_recognition" -> "we0091234/yolov7_plate"
"we0091234/Chinese_license_plate_detection_recognition" -> "we0091234/Car_recognition"
"we0091234/Chinese_license_plate_detection_recognition" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"we0091234/Chinese_license_plate_detection_recognition" -> "we0091234/yolov8-plate"
"we0091234/Chinese_license_plate_detection_recognition" -> "DataXujing/vehicle-license-plate-recognition"
"we0091234/Chinese_license_plate_detection_recognition" -> "zeusees/License-Plate-Detector"
"we0091234/Chinese_license_plate_detection_recognition" -> "pcb9382/PlateRecognition"
"we0091234/Chinese_license_plate_detection_recognition" -> "deepcam-cn/yolov5-face" ["e"=1]
"we0091234/Chinese_license_plate_detection_recognition" -> "detectRecog/CCPD"
"we0091234/Chinese_license_plate_detection_recognition" -> "sirius-ai/LPRNet_Pytorch"
"we0091234/Chinese_license_plate_detection_recognition" -> "Ayers-github/Chinese-License-Plate-Recognition"
"we0091234/Chinese_license_plate_detection_recognition" -> "dreamhunter2333/python_PlateRecogntion"
"we0091234/Chinese_license_plate_detection_recognition" -> "we0091234/chinese_plate_tensorrt"
"we0091234/Chinese_license_plate_detection_recognition" -> "yxgong0/CRPD"
"matthewearl/deep-anpr" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"matthewearl/deep-anpr" -> "sergiomsilva/alpr-unconstrained"
"matthewearl/deep-anpr" -> "stevefielding/tensorflow-anpr"
"matthewearl/deep-anpr" -> "openalpr/openalpr"
"matthewearl/deep-anpr" -> "Russell91/TensorBox" ["e"=1]
"matthewearl/deep-anpr" -> "Dharun/Tensorflow-License-Plate-Detection"
"matthewearl/deep-anpr" -> "bgshih/crnn" ["e"=1]
"matthewearl/deep-anpr" -> "MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python"
"matthewearl/deep-anpr" -> "pannous/tensorflow-ocr" ["e"=1]
"matthewearl/deep-anpr" -> "ankush-me/SynthText" ["e"=1]
"matthewearl/deep-anpr" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"matthewearl/deep-anpr" -> "detectRecog/CCPD"
"matthewearl/deep-anpr" -> "liuruoze/EasyPR"
"matthewearl/deep-anpr" -> "DeepSystems/supervisely-tutorials" ["e"=1]
"matthewearl/deep-anpr" -> "chongyangtao/Awesome-Scene-Text-Recognition" ["e"=1]
"we0091234/yolov7_plate" -> "we0091234/crnn_plate_recognition"
"we0091234/yolov7_plate" -> "we0091234/Chinese_license_plate_detection_recognition"
"we0091234/yolov7_plate" -> "we0091234/chinese_plate_tensorrt"
"we0091234/yolov7_plate" -> "we0091234/Car_recognition"
"we0091234/yolov7_plate" -> "Ayers-github/Chinese-License-Plate-Recognition"
"we0091234/yolov7_plate" -> "we0091234/yolov8-plate"
"we0091234/yolov7_plate" -> "yxgong0/CRPD"
"we0091234/yolov7_plate" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"we0091234/yolov7_plate" -> "we0091234/yolov7-face-tensorrt"
"we0091234/yolov7_plate" -> "we0091234/NCNN_SAMPLE"
"we0091234/yolov7_plate" -> "derronqi/yolov7-face"
"we0091234/yolov7_plate" -> "we0091234/yolov8-tensorrt"
"we0091234/yolov7_plate" -> "sirius-ai/LPRNet_Pytorch"
"we0091234/yolov7_plate" -> "zeusees/License-Plate-Detector"
"we0091234/yolov7_plate" -> "zheng-yuwei/license-plate-generator"
"derronqi/yolov7-face" -> "derronqi/yolov8-face"
"derronqi/yolov7-face" -> "deepcam-cn/yolov5-face" ["e"=1]
"derronqi/yolov7-face" -> "Krasjet-Yu/YOLO-FaceV2"
"derronqi/yolov7-face" -> "we0091234/yolov7-face-tensorrt"
"derronqi/yolov7-face" -> "hpc203/yolov7-detect-face-onnxrun-cpp-py"
"derronqi/yolov7-face" -> "qinggangwu/yolov7-pose_Npoint_Ncla" ["e"=1]
"derronqi/yolov7-face" -> "we0091234/yolov7_plate"
"derronqi/yolov7-face" -> "yxgong0/CRPD"
"derronqi/yolov7-face" -> "deepcam-cn/FaceQuality" ["e"=1]
"derronqi/yolov7-face" -> "lucasjinreal/yolov7-face"
"derronqi/yolov7-face" -> "FeiGeChuanShu/ncnn_Android_face" ["e"=1]
"derronqi/yolov7-face" -> "hpc203/yolov8-face-landmarks-opencv-dnn"
"derronqi/yolov7-face" -> "Ayers-github/Chinese-License-Plate-Recognition"
"derronqi/yolov7-face" -> "qinggangwu/yolov5_v6_plate_heading" ["e"=1]
"derronqi/yolov7-face" -> "mk-minchul/AdaFace" ["e"=1]
"akanametov/yolo-face" -> "derronqi/yolov8-face"
"akanametov/yolo-face" -> "hpc203/yolov8-face-landmarks-opencv-dnn"
"akanametov/yolo-face" -> "Yusepp/YOLOv8-Face"
"akanametov/yolo-face" -> "deepcam-cn/yolov5-face" ["e"=1]
"akanametov/yolo-face" -> "vectornguyen76/face-recognition" ["e"=1]
"akanametov/yolo-face" -> "lindevs/yolov8-face"
"we0091234/Car_recognition" -> "we0091234/crnn_plate_recognition"
"we0091234/Car_recognition" -> "we0091234/Chinese_license_plate_detection_recognition"
"we0091234/Car_recognition" -> "we0091234/yolov7_plate"
"we0091234/Car_recognition" -> "we0091234/yolov8-plate"
"we0091234/Car_recognition" -> "we0091234/chinese_plate_tensorrt"
"we0091234/Car_recognition" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"we0091234/Car_recognition" -> "Ayers-github/Chinese-License-Plate-Recognition"
"we0091234/Car_recognition" -> "dyh/win10_yolov5_deepsort_counting" ["e"=1]
"we0091234/Car_recognition" -> "1461521844lijin/trt_yolo_video_pipeline" ["e"=1]
"we0091234/Car_recognition" -> "XiaoRobb/CarTeller"
"we0091234/crnn_plate_recognition" -> "we0091234/yolov7_plate"
"we0091234/crnn_plate_recognition" -> "we0091234/Chinese_license_plate_detection_recognition"
"we0091234/crnn_plate_recognition" -> "we0091234/Car_recognition"
"we0091234/crnn_plate_recognition" -> "we0091234/yolov8-plate"
"we0091234/crnn_plate_recognition" -> "Ayers-github/Chinese-License-Plate-Recognition"
"we0091234/crnn_plate_recognition" -> "we0091234/chinese_plate_tensorrt"
"we0091234/crnn_plate_recognition" -> "yxgong0/CRPD"
"we0091234/crnn_plate_recognition" -> "pcb9382/PlateRecognition"
"we0091234/crnn_plate_recognition" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"we0091234/crnn_plate_recognition" -> "SunlifeV/CBLPRD-330k"
"we0091234/crnn_plate_recognition" -> "zheng-yuwei/license-plate-generator"
"we0091234/crnn_plate_recognition" -> "pcb9382/FaceAlgorithm" ["e"=1]
"we0091234/crnn_plate_recognition" -> "gm19900510/Pytorch_Retina_License_Plate"
"we0091234/crnn_plate_recognition" -> "Pengfei8324/chinese_license_plate_generator"
"Krasjet-Yu/YOLO-FaceV2" -> "derronqi/yolov7-face"
"mut-deep/IR-LPR" -> "M-Taghizadeh/Dollar_Rial_Price_Dataset"
"mut-deep/IR-LPR" -> "alitourani/Iranis-dataset"
"mut-deep/IR-LPR" -> "SajjadAemmi/Face-Alignment"
"mut-deep/IR-LPR" -> "SajjadAemmi/PyLearn"
"cvat-ai/cvat-opencv" -> "opencv/ade"
"cvat-ai/cvat-opencv" -> "openvinotoolkit/workbench"
"Ayers-github/Chinese-License-Plate-Recognition" -> "we0091234/crnn_plate_recognition"
"Ayers-github/Chinese-License-Plate-Recognition" -> "we0091234/NCNN_SAMPLE"
"Ayers-github/Chinese-License-Plate-Recognition" -> "we0091234/yolov7_plate"
"Ayers-github/Chinese-License-Plate-Recognition" -> "lucasjinreal/yolov7-face"
"Ayers-github/Chinese-License-Plate-Recognition" -> "we0091234/chinese_plate_tensorrt"
"Ayers-github/Chinese-License-Plate-Recognition" -> "we0091234/yolov7-face-tensorrt"
"Ayers-github/Chinese-License-Plate-Recognition" -> "we0091234/yolov8-tensorrt"
"we0091234/chinese_plate_tensorrt" -> "we0091234/NCNN_SAMPLE"
"we0091234/chinese_plate_tensorrt" -> "we0091234/yolov7-face-tensorrt"
"we0091234/chinese_plate_tensorrt" -> "we0091234/yolov8-tensorrt"
"we0091234/yolov8-tensorrt" -> "we0091234/NCNN_SAMPLE"
"we0091234/yolov8-tensorrt" -> "we0091234/yolov7-face-tensorrt"
"we0091234/yolov8-tensorrt" -> "yuxiaoranyu/stable_diffusion_trt_triton"
"we0091234/yolov8-tensorrt" -> "we0091234/chinese_plate_tensorrt"
"we0091234/yolov8-tensorrt" -> "kivenyangming/OpencvSocket"
"we0091234/yolov7-face-tensorrt" -> "we0091234/NCNN_SAMPLE"
"we0091234/yolov7-face-tensorrt" -> "we0091234/yolov8-tensorrt"
"we0091234/yolov7-face-tensorrt" -> "we0091234/chinese_plate_tensorrt"
"NanoNets/ocr-python" -> "NanoNets/invoice-processing-with-python-nanonets"
"MicrocontrollersAndMore/OpenCV_3_Car_Counting_Cpp" -> "MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Cpp"
"zcolin/WeChatLuckyMoney" -> "zcolin/ZFrame"
"MSaberian/PyLearnAssigment" -> "MSaberian/PyLearnGUI"
"Yusepp/YOLOv8-Face" -> "noorkhokhar99/face-detection-yolov8"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "ibyte2011/end-to-end-for-chinese-plate-recognition"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "szad670401/HyperLPR"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "detectRecog/CCPD"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "huxiaoman7/mxnet-cnn-plate-recognition"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "zeusees/License-Plate-Detector"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "senlinuc/caffe_ocr" ["e"=1]
"szad670401/end-to-end-for-chinese-plate-recognition" -> "zeusees/HyperLPR-Training"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "matthewearl/deep-anpr"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "bear63/sceneReco" ["e"=1]
"szad670401/end-to-end-for-chinese-plate-recognition" -> "liuruoze/EasyPR"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "JarveeLee/SynthText_Chinese_version" ["e"=1]
"szad670401/end-to-end-for-chinese-plate-recognition" -> "sergiomsilva/alpr-unconstrained"
"szad670401/end-to-end-for-chinese-plate-recognition" -> "Sanster/text_renderer" ["e"=1]
"szad670401/end-to-end-for-chinese-plate-recognition" -> "tianzhi0549/CTPN" ["e"=1]
"imistyrain/EasyPR4Android" -> "linuxxx/EasyPR_Android"
"imistyrain/EasyPR4Android" -> "guocheng0606/EasyPRForAndroid"
"imistyrain/EasyPR4Android" -> "zcolin/ZEasyPR"
"imistyrain/EasyPR4Android" -> "aleyn97/LPR"
"derronqi/yolov8-face" -> "hpc203/yolov8-face-landmarks-opencv-dnn"
"derronqi/yolov8-face" -> "derronqi/yolov7-face"
"derronqi/yolov8-face" -> "deepcam-cn/yolov5-face" ["e"=1]
"derronqi/yolov8-face" -> "akanametov/yolo-face"
"derronqi/yolov8-face" -> "we0091234/yolov8-plate"
"derronqi/yolov8-face" -> "Krasjet-Yu/YOLO-FaceV2"
"derronqi/yolov8-face" -> "mk-minchul/AdaFace" ["e"=1]
"derronqi/yolov8-face" -> "pcb9382/FaceAlgorithm" ["e"=1]
"derronqi/yolov8-face" -> "Yusepp/YOLOv8-Face"
"derronqi/yolov8-face" -> "lyp-deeplearning/MOS-Multi-Task-Face-Detect" ["e"=1]
"derronqi/yolov8-face" -> "biubug6/Pytorch_Retinaface" ["e"=1]
"derronqi/yolov8-face" -> "HamadYA/GhostFaceNets" ["e"=1]
"derronqi/yolov8-face" -> "pcb9382/PlateRecognition"
"derronqi/yolov8-face" -> "vitoralbiero/img2pose" ["e"=1]
"derronqi/yolov8-face" -> "vectornguyen76/face-recognition" ["e"=1]
"femioladeji/License-Plate-Recognition-Nigerian-vehicles" -> "apoorva-dave/LicensePlateDetector"
"femioladeji/License-Plate-Recognition-Nigerian-vehicles" -> "Deevoluation/ALPR"
"SunlifeV/CBLPRD-330k" -> "yxgong0/CRPD"
"SunlifeV/CBLPRD-330k" -> "we0091234/crnn_plate_recognition"
"SunlifeV/CBLPRD-330k" -> "pcb9382/PlateRecognition"
"SunlifeV/CBLPRD-330k" -> "wangpengnorman/CLPD_dataset"
"SunlifeV/CBLPRD-330k" -> "gm19900510/Pytorch_Retina_License_Plate"
"SunlifeV/CBLPRD-330k" -> "we0091234/Chinese_license_plate_detection_recognition"
"pcb9382/PlateRecognition" -> "pcb9382/FaceAlgorithm" ["e"=1]
"pcb9382/PlateRecognition" -> "we0091234/crnn_plate_recognition"
"pcb9382/PlateRecognition" -> "1461521844lijin/trt_yolo_video_pipeline" ["e"=1]
"pcb9382/PlateRecognition" -> "we0091234/yolov8-plate"
"pcb9382/PlateRecognition" -> "we0091234/Chinese_license_plate_detection_recognition"
"pcb9382/PlateRecognition" -> "pcb9382/StereoAlgorithms" ["e"=1]
"pcb9382/PlateRecognition" -> "SunlifeV/CBLPRD-330k"
"pcb9382/PlateRecognition" -> "cqu20160901/yolov8n_onnx_tensorRT_rknn_horizon" ["e"=1]
"pcb9382/PlateRecognition" -> "Melody-Zhou/tensorRT_Pro-YOLOv8" ["e"=1]
"pcb9382/PlateRecognition" -> "FeiYull/TensorRT-Alpha" ["e"=1]
"KaidongHe/YOLOv7-plate-rec" -> "Phantom-X/yolov7-LPRNet_pytorch"
"hpc203/yolov8-face-landmarks-opencv-dnn" -> "derronqi/yolov8-face"
"hpc203/yolov8-face-landmarks-opencv-dnn" -> "derronqi/yolov7-face"
"hpc203/yolov8-face-landmarks-opencv-dnn" -> "akanametov/yolo-face"
"hpc203/yolov8-face-landmarks-opencv-dnn" -> "pcb9382/FaceAlgorithm" ["e"=1]
"we0091234/yolov8-plate" -> "we0091234/crnn_plate_recognition"
"we0091234/yolov8-plate" -> "we0091234/Chinese_license_plate_detection_recognition"
"we0091234/yolov8-plate" -> "we0091234/yolov7_plate"
"we0091234/yolov8-plate" -> "we0091234/Car_recognition"
"we0091234/yolov8-plate" -> "pcb9382/PlateRecognition"
"we0091234/yolov8-plate" -> "HuKai97/YOLOv5-LPRNet-Licence-Recognition"
"we0091234/yolov8-plate" -> "derronqi/yolov8-face"
"we0091234/yolov8-plate" -> "SYQ50001/plate-recognition_YOLOv8_CNN"
"we0091234/yolov8-plate" -> "hpc203/yolov8-face-landmarks-opencv-dnn"
"we0091234/yolov8-plate" -> "Fanstuck/Yolov7-LPRNet"
"we0091234/yolov8-plate" -> "Ayers-github/Chinese-License-Plate-Recognition"
"we0091234/yolov8-plate" -> "YanhaoLi-Cc/License_Plate_Dynamic_Recognition"
"we0091234/yolov8-plate" -> "MuhammadMoinFaisal/Automatic_Number_Plate_Detection_Recognition_YOLOv8" ["e"=1]
"we0091234/yolov8-plate" -> "we0091234/chinese_plate_tensorrt"
"we0091234/yolov8-plate" -> "yxgong0/CRPD"
"we0091234/NCNN_SAMPLE" -> "we0091234/chinese_plate_tensorrt"
"we0091234/NCNN_SAMPLE" -> "we0091234/yolov7-face-tensorrt"
"M-Taghizadeh/Dollar_Rial_Price_Dataset" -> "mokar2001/House-Price-Tehran-Iran"
"hyzhangyong/platenumber" -> "zeusees/HyperLPR-Training"
"xuzhou530/ParkinglotWebService" -> "zhujainxipan/Parking-lot-management-system"
"xuzhou530/ParkinglotWebService" -> "yxq9650/CarParking"
"Alireza-Akhavan/chatgpt-prompt" -> "Alireza-Akhavan/GAN_tutorial"
"Alireza-Akhavan/chatgpt-prompt" -> "Alireza-Akhavan/ffmpeg-tutorial"
"muchlisinadi/ALPR-Indonesia" -> "img88/ALPR_IndonesiaPlateNumber_ComputerVision"
"muchlisinadi/ALPR-Indonesia" -> "RinaldiPakpahan/ANPR-Indonesian"
"Chaway/LP_character_segmentation" -> "qianqing13579/QQImageProcess"
"ParkingOS/ParkingOS_cloud" -> "ParkingOS/ParkingOS_local"
"ParkingOS/ParkingOS_cloud" -> "ParkingOS/parkingos_cloud_vue"
"ParkingOS/ParkingOS_cloud" -> "ParkingOS/parkingos_cloud_vue_server"
"ParkingOS/ParkingOS_local" -> "ParkingOS/ParkingOS_cloud"
"ParkingOS/ParkingOS_local" -> "panmingzhi815/dongluCarpark"
"ParkingOS/ParkingOS_local" -> "yxq9650/CarParking"
"ParkingOS/ParkingOS_local" -> "watercloudss/parkweb"
"zcolin/ZIjkPlayer" -> "zcolin/ZFrame"
"zcolin/ZIjkPlayer" -> "zcolin/PullRecyclerView"
"zcolin/ZIjkPlayer" -> "zcolin/ZRecyclerView"
"zcolin/ZIjkPlayer" -> "zcolin/ZUILib"
"zcolin/ZIjkPlayer" -> "zcolin/WeChatLuckyMoney"
"Fanstuck/Yolov7-LPRNet" -> "Phantom-X/yolov7-LPRNet_pytorch"
"zcolin/ZEasyPR" -> "zcolin/ZFrame"
"zcolin/ZEasyPR" -> "zcolin/WeChatLuckyMoney"
"kivenyangming/OpencvSocket" -> "yuxiaoranyu/stable_diffusion_trt_triton"
"zcolin/PullRecyclerView" -> "zcolin/ZRecyclerView"
"zcolin/PullRecyclerView" -> "zcolin/ZFrame"
"zcolin/ZFrame" -> "zcolin/ZRecyclerView"
"zcolin/ZFrame" -> "zcolin/PullRecyclerView"
"zcolin/ZFrame" -> "zcolin/ZUILib"
"zcolin/ZFrame" -> "zcolin/WeChatLuckyMoney"
"zcolin/ZRecyclerView" -> "zcolin/PullRecyclerView"
"zcolin/ZRecyclerView" -> "zcolin/ZFrame"
"zcolin/ZRecyclerView" -> "zcolin/ZUILib"
"zcolin/ZUILib" -> "zcolin/ZRecyclerView"
"zcolin/ZUILib" -> "zcolin/ZFrame"
"zcolin/ZUILib" -> "zcolin/PullRecyclerView"
"yuxiaoranyu/stable_diffusion_trt_triton" -> "kivenyangming/OpencvSocket"
"szad670401/Rubost-Chinese-License-Plate-Locate-Using-LBP-adaboost-with-CNN-regression" -> "armaab/hyperlpr-train"
"szad670401/Rubost-Chinese-License-Plate-Locate-Using-LBP-adaboost-with-CNN-regression" -> "szad670401/texture_skew_detection"
"szad670401/Rubost-Chinese-License-Plate-Locate-Using-LBP-adaboost-with-CNN-regression" -> "hyh21521038/ssd-plate_detection" ["e"=1]
"kenjihata/cs231a-notes" -> "chizhang529/cs231a"
"kenjihata/cs231a-notes" -> "StanfordVL/CS131_release"
"kenjihata/cs231a-notes" -> "zyxrrr/cs231a"
"chizhang529/cs231a" -> "zyxrrr/cs231a"
"chizhang529/cs231a" -> "mikucy/CS231A"
"chizhang529/cs231a" -> "kenjihata/cs231a-notes"
"eguid/vlpr4j" -> "fan-wenjie/EasyPR-Java"
"eguid/vlpr4j" -> "swimfish09/ChepaiORC"
"eguid/vlpr4j" -> "InitAction/car-OCR"
"guocheng0606/EasyPRForAndroid" -> "zcolin/ZEasyPR"
"huxiaoman7/mxnet-cnn-plate-recognition" -> "szad670401/end-to-end-for-chinese-plate-recognition"
"huxiaoman7/mxnet-cnn-plate-recognition" -> "zheng-yuwei/license-plate-generator"
"huxiaoman7/mxnet-cnn-plate-recognition" -> "zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9"
"InitAction/car-OCR" -> "swimfish09/ChepaiORC"
"dreamhunter2333/python_PlateRecogntion" ["l"="34.167,29.971"]
"simple2048/CarPlateIdentity" ["l"="34.199,29.988"]
"yinghualuowu/Python_VLPR" ["l"="34.189,29.955"]
"DataXujing/vehicle-license-plate-recognition" ["l"="34.163,29.998"]
"fjklqq/License_plate_recognition" ["l"="34.184,29.98"]
"wzh191920/License-Plate-Recognition" ["l"="34.17,30.022"]
"we0091234/Chinese_license_plate_detection_recognition" ["l"="34.119,29.984"]
"duanshengliu/End-to-end-for-chinese-plate-recognition" ["l"="34.192,30.004"]
"Chao2020x/license-plate-recognition" ["l"="34.209,29.932"]
"hyzhangyong/platenumber" ["l"="34.142,29.999"]
"HuKai97/YOLOv5-LPRNet-Licence-Recognition" ["l"="34.139,29.976"]
"chensongbin/LicensePlateRecognition" ["l"="34.21,29.952"]
"we0091234/Car_recognition" ["l"="34.132,29.95"]
"detectRecog/CCPD" ["l"="34.165,30.053"]
"jmhIcoding/car-board-reg" ["l"="34.207,29.971"]
"we0091234/yolov8-plate" ["l"="34.111,29.932"]
"szad670401/HyperLPR" ["l"="34.129,30.094"]
"liuruoze/EasyPR" ["l"="34.21,30.116"]
"szad670401/end-to-end-for-chinese-plate-recognition" ["l"="34.145,30.072"]
"zeusees/License-Plate-Detector" ["l"="34.153,30.036"]
"zhubenfu/License-Plate-Detect-Recognition-via-Deep-Neural-Networks-accuracy-up-to-99.9" ["l"="34.163,30.085"]
"sergiomsilva/alpr-unconstrained" ["l"="34.145,30.117"]
"openalpr/openalpr" ["l"="34.081,30.132"]
"lqian/light-LPR" ["l"="34.179,30.073"]
"chineseocr/chineseocr" ["l"="46.24,7.323"]
"DayBreak-u/chineseocr_lite" ["l"="46.206,7.407"]
"ShiqiYu/libfacedetection" ["l"="33.457,29.3"]
"Linzaer/Ultra-Light-Fast-Generic-Face-Detector-1MB" ["l"="33.454,29.248"]
"xiaofengShi/CHINESE-OCR" ["l"="46.287,7.304"]
"sirius-ai/LPRNet_Pytorch" ["l"="34.129,30.041"]
"xuexingyu24/License_Plate_Detection_Pytorch" ["l"="34.138,30.057"]
"lyl8213/Plate_Recognition-LPRnet" ["l"="34.115,30.063"]
"Sierkinhane/CRNN_Chinese_Characters_Rec" ["l"="46.314,7.282"]
"xiangweizeng/mobile-lpr" ["l"="34.182,30.04"]
"cmusatyalab/openface" ["l"="33.525,29.32"]
"matthewearl/deep-anpr" ["l"="34.129,30.148"]
"pjreddie/darknet" ["l"="50.479,29.806"]
"tesseract-ocr/tesseract" ["l"="48.304,29.216"]
"davidsandberg/facenet" ["l"="33.416,29.377"]
"HumanSignal/labelImg" ["l"="50.506,29.738"]
"AlexeyAB/darknet" ["l"="50.496,29.853"]
"microsoft/CNTK" ["l"="47.95,28.986"]
"ageitgey/face_recognition" ["l"="33.654,29.431"]
"BVLC/caffe" ["l"="48.066,29.002"]
"onuzbee/Indian-Number-Plate-Recognition-System" ["l"="34.037,30.232"]
"vjgpt/Vehicle-Number-Plate-Reading" ["l"="34.075,30.232"]
"parvatijay2901/Automatic-Number-plate-detection-for-Indian-vehicles" ["l"="33.985,30.238"]
"AnjieCheng/Tensorflow-Number-Plate-Recognition" ["l"="34.04,30.211"]
"yxq9650/CarParking" ["l"="34.511,30.231"]
"xuzhou530/ParkinglotWebService" ["l"="34.536,30.242"]
"ParkingOS/ParkingOS_local" ["l"="34.458,30.205"]
"watercloudss/parkweb" ["l"="34.478,30.233"]
"panmingzhi815/dongluCarpark" ["l"="34.482,30.217"]
"zhujainxipan/Parking-lot-management-system" ["l"="34.52,30.255"]
"DrXin/parkingLotSystem" ["l"="34.501,30.262"]
"qianliangchang/depot-system" ["l"="34.495,30.248"]
"maguangzu/Parking-Management-System" ["l"="34.56,30.232"]
"ParkingOS/ParkingOS_cloud" ["l"="34.494,30.2"]
"ddhmit/parking-control-server" ["l"="34.546,30.263"]
"zhangzhibo1014/CarSystem" ["l"="34.542,30.213"]
"Yaoshicn/decaptcha" ["l"="49.953,22.16"]
"xg-zhang/faceRegister" ["l"="33.242,29.759"]
"Zephery/weiboanalysis" ["l"="50.001,22.087"]
"veraposeidon/Insect_Identification" ["l"="34.228,29.836"]
"Superbsco/weibo-analysis-system" ["l"="49.973,22.081"]
"PengfeiM/Fatigue-Driven-Detection-Based-on-CNN" ["l"="33.269,29.942"]
"zuoqing1988/ZQCNN" ["l"="33.332,29.222"]
"YonghaoHe/LFFD-A-Light-and-Fast-Face-Detector-for-Edge-Devices" ["l"="33.41,29.211"]
"senlinuc/caffe_ocr" ["l"="46.28,7.234"]
"dlunion/mtcnn" ["l"="33.16,29.194"]
"ria-com/nomeroff-net" ["l"="34.233,30.275"]
"KostyaKulakov/Russian_System_of_ANPR" ["l"="34.264,30.307"]
"smeyanoff/car-number-detection" ["l"="34.226,30.307"]
"rm-yakovenko/nomeroff-net-docker" ["l"="34.217,30.291"]
"ZlodeiBaal/Recognitor" ["l"="34.275,30.288"]
"DoubangoTelecom/ultimateALPR-SDK" ["l"="34.165,30.172"]
"RainGrid/openalpr_ru_runtime" ["l"="34.247,30.296"]
"AIHunters/AcurusTrack" ["l"="34.231,30.34"]
"sploid/plate_recognition" ["l"="34.265,30.275"]
"cvat-ai/cvat-opencv" ["l"="34.288,30.34"]
"Dharun/Tensorflow-License-Plate-Detection" ["l"="34.109,30.194"]
"GuiltyNeuron/ANPR" ["l"="34.102,30.175"]
"Deevoluation/ALPR" ["l"="34.136,30.19"]
"zheng-yuwei/license-plate-generator" ["l"="34.08,30.009"]
"Pengfei8324/chinese_license_plate_generator" ["l"="34.054,29.978"]
"derek285/generateCarPlate" ["l"="34.112,30.008"]
"mingbocui/Generate-LicensePlate-with-GAN" ["l"="34.02,30.02"]
"yxgong0/CRPD" ["l"="34.075,29.971"]
"Nenger/chinese_licence_plate_generator" ["l"="34.041,30.038"]
"gm19900510/Pytorch_Retina_License_Plate" ["l"="34.132,30.015"]
"we0091234/crnn_plate_recognition" ["l"="34.095,29.971"]
"deeplearningshare/multi-line-plate-recognition" ["l"="34.087,30.042"]
"millionsofluo/FakeLPR" ["l"="34.058,30.034"]
"CaptainEven/Vehicle-Car-detection-and-multilabel-classification" ["l"="34.213,30.034"]
"CaptainEven/RepNet-MDNet-VehicleReID" ["l"="54.214,32.687"]
"zeusees/HyperVID" ["l"="34.189,30.054"]
"JunshengFu/vehicle-detection" ["l"="54.769,32.838"]
"Sharpiless/yolov3-vehicle-detection-paddle" ["l"="34.289,30.008"]
"knwng/awesome-vehicle-re-identification" ["l"="54.224,32.672"]
"Yukun-Huang/Person-Attribute-Recognition-MarketDuke" ["l"="56.045,32.849"]
"XiaoRobb/CarTeller" ["l"="34.251,29.991"]
"dangweili/pedestrian-attribute-recognition-pytorch" ["l"="56.071,32.868"]
"wangxiao5791509/Pedestrian-Attribute-Recognition-Paper-List" ["l"="56.034,32.863"]
"layumi/AICIty-reID-2020" ["l"="54.171,32.656"]
"airxiechao/simple-car-plate-recognition" ["l"="34.228,29.97"]
"blueapplehe/car_identify" ["l"="34.274,29.991"]
"we0091234/yolov7_plate" ["l"="34.104,29.957"]
"SunlifeV/CBLPRD-330k" ["l"="34.082,29.987"]
"airxiechao/simple-car-plate-recognition-2" ["l"="34.265,29.951"]
"Feeyao/License-plate-recognition" ["l"="34.27,29.929"]
"Chaway/LP_character_segmentation" ["l"="34.295,29.918"]
"StanfordVL/cs131_notes" ["l"="34.321,29.541"]
"StanfordVL/CS131_release" ["l"="34.305,29.57"]
"kenjihata/cs231a-notes" ["l"="34.289,29.536"]
"Hugstar/Solutions-Stanford-cs131-Computer-Vision-Foundations-and-Application" ["l"="34.281,29.575"]
"zhaoxiongjun/CS131_notes_zh-CN" ["l"="34.336,29.562"]
"ermongroup/cs228-notes" ["l"="45.817,26.067"]
"cs231n/cs231n.github.io" ["l"="48.069,28.667"]
"deepcam-cn/yolov5-face" ["l"="33.517,29.214"]
"ufownl/alpr_utils" ["l"="34.091,30.089"]
"ufownl/fake_chs_lp" ["l"="34.071,30.051"]
"chenjun2hao/CLPR.pytorch" ["l"="34.046,30.056"]
"Alireza-Akhavan/deep-face-recognition" ["l"="33.965,30.746"]
"Alireza-Akhavan/tf2-tutorial" ["l"="33.968,30.767"]
"Alireza-Akhavan/class.vision" ["l"="33.951,30.778"]
"Alireza-Akhavan/rnn-notebooks" ["l"="33.956,30.761"]
"Alireza-Akhavan/deeplearning-tensorflow2-notebooks" ["l"="33.938,30.762"]
"Alireza-Akhavan/python-labs" ["l"="33.966,30.779"]
"Alireza-Akhavan/object-detection-notebooks" ["l"="33.982,30.761"]
"Alireza-Akhavan/iran-celeb" ["l"="33.98,30.777"]
"SajjadAemmi/Face-Recognition" ["l"="33.987,30.674"]
"apoorva-dave/LicensePlateDetector" ["l"="34.122,30.22"]
"alitourani/yolo-license-plate-detection" ["l"="34.098,30.266"]
"ShreyAmbesh/Traffic-Rule-Violation-Detection-System" ["l"="54.791,32.699"]
"parkpow/deep-license-plate-recognition" ["l"="34.125,30.175"]
"femioladeji/License-Plate-Recognition-Nigerian-vehicles" ["l"="34.148,30.228"]
"apoorva-dave/LicensePlateDetector-deployment-flask" ["l"="34.112,30.249"]
"SarthakV7/AI-based-indian-license-plate-detection" ["l"="34.15,30.269"]
"faisalthaheem/open-lpr" ["l"="34.158,30.204"]
"quangnhat185/Plate_detect_and_recognize" ["l"="34.129,30.255"]
"longphungtuan94/ALPR_System" ["l"="34.105,30.231"]
"mahavird/my_deep_anpr" ["l"="34.091,30.219"]
"shreyapamecha/Speed-Estimation-of-Vehicles-with-Plate-Detection" ["l"="54.769,32.706"]
"nicolas-gervais/predicting-car-price-from-scraped-data" ["l"="34.053,30.092"]
"Strand2013/NNIE-lite" ["l"="51.525,33.17"]
"PT123123/Vehicle-recognition-system" ["l"="34.265,30.008"]
"kinredon/brand_classification" ["l"="34.299,29.991"]
"erquren/vehicle_recognition" ["l"="34.255,30.031"]
"Zoushuang86/final_quiz" ["l"="34.311,29.976"]
"mikucy/CS131" ["l"="34.282,29.599"]
"veraposeidon/CS131_Assignments" ["l"="34.281,29.639"]
"chizhang529/cs231a" ["l"="34.265,29.53"]
"xuwd11/cs131_hws" ["l"="34.305,29.597"]
"yihui-he/computer-vision-tutorial" ["l"="34.352,29.588"]
"DoubangoTelecom/compv" ["l"="33.823,30.221"]
"ankandrew/fast-alpr" ["l"="34.213,30.21"]
"theAIGuysCode/yolov4-custom-functions" ["l"="54.714,32.577"]
"DoubangoTelecom/ultimateMRZ-SDK" ["l"="45.011,-24.994"]
"DoubangoTelecom/FaceLivenessDetection-SDK" ["l"="33.762,30.194"]
"stevefielding/tensorflow-anpr" ["l"="34.084,30.183"]
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Python" ["l"="34.084,30.2"]
"stevefielding/keras-anpr" ["l"="34.04,30.183"]
"rafariva/ANPR-Tensorflow" ["l"="34.065,30.211"]
"Alireza-Akhavan/ML-notebooks" ["l"="33.922,30.787"]
"Alireza-Akhavan/ffmpeg-tutorial" ["l"="33.935,30.802"]
"HansRen1024/Face-Tracking-Using-CNN-and-Optical-Flow" ["l"="33.242,29.116"]
"zeusees/HyperLPR-Training" ["l"="34.095,30.057"]
"zeusees/HyperLabelImg" ["l"="33.306,29.174"]
"Charrin/RetinaFace-Cpp" ["l"="33.31,29.229"]
"JDAI-CV/VeRidataset" ["l"="54.197,32.675"]
"NanoNets/nanonets-ocr-sample-python" ["l"="34.02,30.198"]
"souravrs999/License-Plate-Recognition" ["l"="34.051,30.193"]
"ankandrew/fast-plate-ocr" ["l"="34.189,30.215"]
"zeusees/train-detector" ["l"="34.048,30.072"]
"LCorleone/A-Simple-Chinese-License-Plate-Generator-and-Recognition-Framework" ["l"="34.078,30.07"]
"armaab/hyperlpr-train" ["l"="34.063,30.063"]
"szad670401/Rubost-Chinese-License-Plate-Locate-Using-LBP-adaboost-with-CNN-regression" ["l"="34.026,30.059"]
"szad670401/texture_skew_detection" ["l"="34.019,30.074"]
"xindongzhang/MNN-APPLICATIONS" ["l"="33.352,29.168"]
"olojuwin/facerecognize-for-mobile-phone" ["l"="33.262,29.245"]
"hanson-young/nniefacelib" ["l"="33.372,29.177"]
"zzjoey/Vehica" ["l"="34.279,29.977"]
"SeraphUnion/Automatic-recognition-system-of-license-plate-number" ["l"="34.241,29.943"]
"aleyn97/LPR" ["l"="34.363,30.057"]
"lxhAndSmh/HyperLPR" ["l"="34.389,30.047"]
"laolang07/CarORC" ["l"="34.417,30.04"]
"imistyrain/EasyPR4Android" ["l"="34.349,30.097"]
"zeusees/HyperLPR" ["l"="34.316,30.038"]
"fengyang95/CS131_homework" ["l"="34.26,29.608"]
"amirmgh1375/iranian-license-plate-recognition" ["l"="34.012,30.471"]
"amirmgh1375/FormCharRecognition" ["l"="34.002,30.454"]
"amirmgh1375/TextRecognitionDataGenerator" ["l"="33.99,30.465"]
"mut-deep/IR-LPR" ["l"="34.026,30.502"]
"alitourani/Iranis-dataset" ["l"="34.044,30.43"]
"SeyedHamidreza/car_plate_dataset" ["l"="33.965,30.48"]
"TheophileBuy/LicensePlateRecognition" ["l"="34.02,30.168"]
"mehulgupta2016154/TCS_HUMAIN" ["l"="34.058,30.175"]
"Aqsa-K/Number-Plate-Detection-and-Separation-OpenCV" ["l"="34.08,30.31"]
"Aqsa-K/Detecting-Catarct-From-Eye-Images-OpenCV-Python" ["l"="34.065,30.308"]
"veraposeidon/labelme2Datasets" ["l"="34.258,29.731"]
"ccc920123/LicensePlateDemo" ["l"="34.442,30.032"]
"Alireza-Akhavan/DeepLearning-azad" ["l"="34.006,30.795"]
"Alireza-Akhavan/Deep-Learning-Papers-Reading-Roadmap" ["l"="34.02,30.81"]
"CodeGenerator/Recognitor" ["l"="34.299,30.296"]
"Aqsa-K/Car-Number-Plate-Detection-OpenCV-Python" ["l"="34.077,30.281"]
"Alireza-Akhavan/face-quality-metrics" ["l"="33.98,30.798"]
"mahdi-abbaspour-shahmarasi/FlaskRestFulCodeGenerator" ["l"="33.936,30.491"]
"mahdi-abbaspour-shahmarasi/forexDataExporter" ["l"="33.939,30.477"]
"mahdi-abbaspour-shahmarasi/Hello-World" ["l"="33.956,30.498"]
"BXuan694/CS131" ["l"="34.257,29.573"]
"lsn5966397/vehicle_detection" ["l"="34.319,29.992"]
"vansl/JiandanSpider" ["l"="34.329,29.885"]
"qianqing13579/QQImageProcess" ["l"="34.323,29.902"]
"gg-z/qt_image_display" ["l"="34.336,29.864"]
"arnauddelaunay/Detectron-Tensorflow" ["l"="34.346,29.892"]
"kingqiuol/win10_yolov5_tensorRT" ["l"="34.353,29.871"]
"ParkingOS/parkingos_cloud_vue" ["l"="34.519,30.189"]
"ParkingOS/parkingos_cloud_vue_server" ["l"="34.506,30.181"]
"seetaface/SeetaFaceEngine" ["l"="33.325,29.277"]
"linuxxx/EasyPR_Android" ["l"="34.319,30.113"]
"fan-wenjie/EasyPR-Java" ["l"="34.305,30.139"]
"weiliu89/caffe" ["l"="50.506,33.094"]
"EasyDarwin/EasyDarwin" ["l"="64.003,-12.812"]
"Tencent/ncnn" ["l"="50.241,29.805"]
"jikexueyuanwiki/tensorflow-zh" ["l"="50.532,28.137"]
"guocheng0606/EasyPRForAndroid" ["l"="34.356,30.118"]
"zcolin/ZEasyPR" ["l"="34.38,30.118"]
"lizhangqu/Camera" ["l"="60.471,-14.072"]
"zhoushiwei/EasyPR-iOS" ["l"="34.386,30.099"]
"fanghon/lpr" ["l"="33.985,30.054"]
"jeffsieu/py-sudoku" ["l"="33.978,30.56"]
"g-k-l/sudokugen" ["l"="33.976,30.578"]
"SajjadAemmi/PyDeploy" ["l"="33.958,30.55"]
"MohamadNematizadeh/Machine-Learning" ["l"="33.961,30.573"]
"MSaberian/PyLearnGUI" ["l"="33.948,30.566"]
"SajjadAemmi/PyLearn" ["l"="34.004,30.579"]
"M-Taghizadeh/Dollar_Rial_Price_Dataset" ["l"="34.002,30.532"]
"CaoAnda/yolo-v4" ["l"="34.325,30.005"]
"zbp-xxxp/reading_pictures_writing_poems" ["l"="35.587,1.805"]
"KernelErr/realtime-object-detector" ["l"="35.574,1.787"]
"hang245141253/raspi4B_mask_detection_runtime" ["l"="35.554,1.78"]
"ddhmit/parking-control-admin" ["l"="34.564,30.277"]
"zzxvictor/License-super-resolution" ["l"="33.97,29.995"]
"brightyoun/LPSR-Recognition" ["l"="33.895,29.98"]
"wangpengnorman/CLPD_dataset" ["l"="34.056,29.997"]
"dog-qiuqiu/Ultralight-SimplePose" ["l"="49.587,30.893"]
"biubug6/Face-Detector-1MB-with-landmark" ["l"="33.384,29.205"]
"MirrorYuChen/ncnn_example" ["l"="33.307,29.205"]
"dlunion/DBFace" ["l"="33.392,29.225"]
"moli232777144/mtcnn_ncnn" ["l"="33.206,29.199"]
"ankandrew/open-image-models" ["l"="34.237,30.222"]
"leo187/End-to-end-for-chinese-plate-recognition" ["l"="34.231,30.003"]
"AIHunters/EvenVizion" ["l"="34.231,30.369"]
"brightyoun/TITS-LPST" ["l"="33.867,29.978"]
"brightyoun/Video-Style-Transfer" ["l"="33.881,29.967"]
"brightyoun/RainDrop-Effect_Python3" ["l"="33.867,29.966"]
"unique-chan/Complement-Cross-Entropy" ["l"="33.846,29.971"]
"Y132om/Credit_card_identification" ["l"="34.234,29.896"]
"xiaooo-jian/Digital-image-processing-Final-Work" ["l"="34.214,29.902"]
"NanoNets/ocr-python" ["l"="33.961,30.206"]
"alitourani/deep-learning-vehicle-detection" ["l"="34.105,30.295"]
"eguid/vlpr4j" ["l"="34.332,30.166"]
"kongqw/OpenCVForAndroid" ["l"="33.126,29.684"]
"swimfish09/ChepaiORC" ["l"="34.343,30.155"]
"mirusu400/Pinterest-infinite-crawler" ["l"="33.956,30.639"]
"SajjadAemmi/Pinterest-Crawler" ["l"="33.986,30.629"]
"SomethingCo/expo-job-queue" ["l"="33.919,30.504"]
"img88/ALPR_IndonesiaPlateNumber_ComputerVision" ["l"="34.041,30.287"]
"muchlisinadi/ALPR-Indonesia" ["l"="34.056,30.269"]
"xiaosongshine/CCPD_Plus" ["l"="34.017,29.954"]
"sevenHsu/LicensePlateChars" ["l"="33.987,29.943"]
"MaryamBoneh/Vehicle-Detection" ["l"="34.021,30.627"]
"MaryamBoneh/DeepLearning-Course" ["l"="34.021,30.606"]
"SajjadAemmi/Face-Alignment" ["l"="34.036,30.568"]
"SajjadAemmi/RNN" ["l"="34.024,30.646"]
"NahidEbrahimian/Cars-Detection-using-Yolov5" ["l"="34.057,30.638"]
"MaryamBoneh/PythonCourse_Aemmi" ["l"="34.002,30.615"]
"Parisa-Bagherzadeh/Image_processing" ["l"="34.04,30.638"]
"NahidEbrahimian/Human-Parsing-on-Binary-Images" ["l"="34.002,30.639"]
"Parisa-Bagherzadeh/DeepLearning" ["l"="34.048,30.623"]
"SajjadAemmi/SA-MobileNetV3" ["l"="34.027,30.662"]
"SajjadAemmi/SnakeAI" ["l"="34.007,30.651"]
"SajjadAemmi/Machine-Learning" ["l"="34.044,30.651"]
"SajjadAemmi/sajjadaemmi.github.io" ["l"="34.047,30.606"]
"mokar2001/House-Price-Tehran-Iran" ["l"="33.985,30.528"]
"kiloGrand/License-Plate-Recognition" ["l"="34.162,29.922"]
"HuKai97/yolov5-5.x-annotations" ["l"="53.451,3.676"]
"Fanstuck/Yolov7-LPRNet" ["l"="34.139,29.909"]
"xialuxi/yolov5-car-plate" ["l"="33.65,29.045"]
"MicrocontrollersAndMore/OpenCV_3_Windows_10_Installation_Tutorial" ["l"="34.013,30.248"]
"MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Cpp" ["l"="33.996,30.271"]
"MicrocontrollersAndMore/Raspberry_Pi_2_and_OpenCV_3_Tutorial_Part_1" ["l"="33.959,30.271"]
"MicrocontrollersAndMore/OpenCV_3_License_Plate_Recognition_Cpp" ["l"="34.023,30.266"]
"MicrocontrollersAndMore/OpenCV_3_Car_Counting_Cpp" ["l"="34.002,30.286"]
"Alireza-Akhavan/chatgpt-prompt" ["l"="33.914,30.808"]
"FatemeZamanian/Yolov5-Fruit-Detector" ["l"="34.064,30.585"]
"FatemeZamanian/DeepLearning" ["l"="34.085,30.595"]
"FatemeZamanian/PersonalWebsite-flask" ["l"="34.084,30.578"]
"MicrocontrollersAndMore/OpenCV_3_KNN_Character_Recognition_Python" ["l"="34.057,30.227"]
"Link009/LPEX" ["l"="34.064,30.248"]
"mahdi-abbaspour-shahmarasi/ShapesDataset" ["l"="33.917,30.482"]
"openvinotoolkit/workbench" ["l"="34.316,30.359"]
"openvinotoolkit/workbench_aux" ["l"="34.332,30.374"]
"pcb9382/PlateRecognition" ["l"="34.075,29.95"]
"Ayers-github/Chinese-License-Plate-Recognition" ["l"="34.088,29.934"]
"we0091234/chinese_plate_tensorrt" ["l"="34.092,29.943"]
"Russell91/TensorBox" ["l"="50.449,33.05"]
"bgshih/crnn" ["l"="46.277,7.176"]
"pannous/tensorflow-ocr" ["l"="46.262,7.131"]
"ankush-me/SynthText" ["l"="46.341,7.223"]
"DeepSystems/supervisely-tutorials" ["l"="46.357,7.002"]
"chongyangtao/Awesome-Scene-Text-Recognition" ["l"="46.322,7.176"]
"we0091234/yolov7-face-tensorrt" ["l"="34.08,29.921"]
"we0091234/NCNN_SAMPLE" ["l"="34.075,29.932"]
"derronqi/yolov7-face" ["l"="34.061,29.903"]
"we0091234/yolov8-tensorrt" ["l"="34.06,29.932"]
"derronqi/yolov8-face" ["l"="34.078,29.879"]
"Krasjet-Yu/YOLO-FaceV2" ["l"="34.036,29.875"]
"hpc203/yolov7-detect-face-onnxrun-cpp-py" ["l"="34.012,29.886"]
"qinggangwu/yolov7-pose_Npoint_Ncla" ["l"="33.681,29.009"]
"deepcam-cn/FaceQuality" ["l"="33.364,29.442"]
"lucasjinreal/yolov7-face" ["l"="34.04,29.912"]
"FeiGeChuanShu/ncnn_Android_face" ["l"="49.665,30.913"]
"hpc203/yolov8-face-landmarks-opencv-dnn" ["l"="34.06,29.869"]
"qinggangwu/yolov5_v6_plate_heading" ["l"="33.664,29.052"]
"mk-minchul/AdaFace" ["l"="33.376,29.431"]
"akanametov/yolo-face" ["l"="34.054,29.839"]
"Yusepp/YOLOv8-Face" ["l"="34.077,29.827"]
"vectornguyen76/face-recognition" ["l"="33.505,29.416"]
"lindevs/yolov8-face" ["l"="34.034,29.811"]
"dyh/win10_yolov5_deepsort_counting" ["l"="54.689,32.448"]
"1461521844lijin/trt_yolo_video_pipeline" ["l"="53.425,32.612"]
"pcb9382/FaceAlgorithm" ["l"="53.455,32.595"]
"opencv/ade" ["l"="34.295,30.372"]
"yuxiaoranyu/stable_diffusion_trt_triton" ["l"="34.02,29.919"]
"kivenyangming/OpencvSocket" ["l"="34.03,29.929"]
"NanoNets/invoice-processing-with-python-nanonets" ["l"="33.929,30.213"]
"zcolin/WeChatLuckyMoney" ["l"="34.417,30.126"]
"zcolin/ZFrame" ["l"="34.433,30.119"]
"MSaberian/PyLearnAssigment" ["l"="33.927,30.572"]
"noorkhokhar99/face-detection-yolov8" ["l"="34.075,29.798"]
"ibyte2011/end-to-end-for-chinese-plate-recognition" ["l"="34.075,30.031"]
"huxiaoman7/mxnet-cnn-plate-recognition" ["l"="34.104,30.04"]
"bear63/sceneReco" ["l"="46.286,7.2"]
"JarveeLee/SynthText_Chinese_version" ["l"="46.34,7.204"]
"Sanster/text_renderer" ["l"="46.366,7.28"]
"tianzhi0549/CTPN" ["l"="46.294,7.178"]
"lyp-deeplearning/MOS-Multi-Task-Face-Detect" ["l"="33.406,28.978"]
"biubug6/Pytorch_Retinaface" ["l"="33.398,29.263"]
"HamadYA/GhostFaceNets" ["l"="33.446,29.52"]
"vitoralbiero/img2pose" ["l"="33.409,29.089"]
"pcb9382/StereoAlgorithms" ["l"="65.24,5.16"]
"cqu20160901/yolov8n_onnx_tensorRT_rknn_horizon" ["l"="54.957,31.977"]
"Melody-Zhou/tensorRT_Pro-YOLOv8" ["l"="53.438,32.623"]
"FeiYull/TensorRT-Alpha" ["l"="53.43,32.679"]
"KaidongHe/YOLOv7-plate-rec" ["l"="34.158,29.836"]
"Phantom-X/yolov7-LPRNet_pytorch" ["l"="34.15,29.868"]
"SYQ50001/plate-recognition_YOLOv8_CNN" ["l"="34.125,29.886"]
"YanhaoLi-Cc/License_Plate_Dynamic_Recognition" ["l"="34.112,29.898"]
"MuhammadMoinFaisal/Automatic_Number_Plate_Detection_Recognition_YOLOv8" ["l"="54.618,32.675"]
"Alireza-Akhavan/GAN_tutorial" ["l"="33.902,30.824"]
"RinaldiPakpahan/ANPR-Indonesian" ["l"="34.053,30.295"]
"zcolin/ZIjkPlayer" ["l"="34.442,30.129"]
"zcolin/PullRecyclerView" ["l"="34.445,30.111"]
"zcolin/ZRecyclerView" ["l"="34.457,30.116"]
"zcolin/ZUILib" ["l"="34.454,30.126"]
"hyh21521038/ssd-plate_detection" ["l"="46.379,7.012"]
"zyxrrr/cs231a" ["l"="34.278,29.511"]
"mikucy/CS231A" ["l"="34.243,29.513"]
"InitAction/car-OCR" ["l"="34.36,30.176"]
}