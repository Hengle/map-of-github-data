digraph G {
"varkor/quiver" -> "leanprover-community/mathlib3" ["e"=1]
"leanprover/elan" -> "leanprover-community/batteries"
"leanprover/elan" -> "leanprover/vscode-lean4"
"leanprover/elan" -> "leanprover-community/aesop"
"leanprover/elan" -> "leanprover/verso"
"leanprover/elan" -> "leanprover/theorem_proving_in_lean4"
"leanprover/elan" -> "leanprover-community/ProofWidgets4"
"leanprover/elan" -> "leanprover-community/mathematics_in_lean"
"leanprover/elan" -> "lecopivo/SciLean"
"leanprover/elan" -> "leanprover-community/lean"
"leanprover/elan" -> "leanprover-community/lean-liquid"
"leanprover/elan" -> "leanprover/vscode-lean"
"leanprover/elan" -> "Julian/lean.nvim"
"leanprover/elan" -> "leanprover-community/lean-perfectoid-spaces"
"leanprover/elan" -> "leanprover-community/mathlib4"
"leanprover/elan" -> "jesse-michael-han/lean-gptf"
"kbuzzard/xena" -> "formalabstracts/formalabstracts"
"kbuzzard/xena" -> "ImperialCollegeLondon/natural_number_game"
"kbuzzard/xena" -> "ImperialCollegeLondon/M40001_lean"
"kbuzzard/xena" -> "leanprover-community/lftcm2020"
"kbuzzard/xena" -> "leanprover-community/lean-perfectoid-spaces"
"kbuzzard/xena" -> "ramonfmir/lean-scheme"
"kbuzzard/xena" -> "mpedramfar/Lean-game-maker"
"kbuzzard/xena" -> "leanprover-community/mathlib3"
"kbuzzard/xena" -> "ImperialCollegeLondon/real-number-game"
"kbuzzard/xena" -> "ImperialCollegeLondon/M4P33"
"kbuzzard/xena" -> "leanprover-community/ProofWidgets4"
"kbuzzard/xena" -> "lecopivo/SciLean"
"kbuzzard/xena" -> "leanprover-community/tutorials"
"kbuzzard/xena" -> "ImperialCollegeLondon/formalising-mathematics-2022"
"kbuzzard/xena" -> "kbuzzard/lean-stacks-project"
"rocq-prover/rocq" -> "leanprover/lean4" ["e"=1]
"leanprover/lean4" -> "leanprover-community/mathlib4"
"leanprover/lean4" -> "leanprover-community/mathlib3"
"leanprover/lean4" -> "leanprover/lean3" ["e"=1]
"leanprover/lean4" -> "rocq-prover/rocq" ["e"=1]
"leanprover/lean4" -> "agda/agda" ["e"=1]
"leanprover/lean4" -> "idris-lang/Idris2" ["e"=1]
"leanprover/lean4" -> "koka-lang/koka" ["e"=1]
"leanprover/lean4" -> "FStarLang/FStar" ["e"=1]
"leanprover/lean4" -> "HigherOrderCO/Kind" ["e"=1]
"leanprover/lean4" -> "leanprover-community/batteries"
"leanprover/lean4" -> "Z3Prover/z3" ["e"=1]
"leanprover/lean4" -> "HigherOrderCO/HVM" ["e"=1]
"leanprover/lean4" -> "leanprover-community/lean"
"leanprover/lean4" -> "leanprover/elan"
"leanprover/lean4" -> "ImperialCollegeLondon/FLT"
"leanprover-community/lean" -> "leanprover-community/mathlib3"
"leanprover-community/lean" -> "leanprover-community/lean-liquid"
"leanprover-community/lean" -> "leanprover-community/aesop"
"leanprover-community/lean" -> "leanprover-community/batteries"
"leanprover-community/lean" -> "leanprover-community/lean4-metaprogramming-book"
"leanprover-community/lean" -> "leanprover-community/lean-perfectoid-spaces"
"leanprover-community/lean" -> "leanprover/vscode-lean"
"leanprover-community/lean" -> "teorth/pfr"
"leanprover-community/lean" -> "leanprover/elan"
"leanprover-community/lean" -> "leanprover/vscode-lean4"
"leanprover-community/lean" -> "leanprover-community/lftcm2020"
"leanprover-community/lean" -> "lecopivo/SciLean"
"leanprover-community/lean" -> "ImperialCollegeLondon/formalising-mathematics"
"leanprover-community/lean" -> "leanprover-community/ProofWidgets4"
"leanprover-community/lean" -> "leanprover/verso"
"vEnhance/napkin" -> "leanprover-community/mathlib3" ["e"=1]
"leanprover/lean3" -> "leanprover/lean4" ["e"=1]
"leanprover/lean3" -> "leanprover-community/mathlib3" ["e"=1]
"plastex/plastex" -> "PatrickMassot/leanblueprint" ["e"=1]
"digama0/lean-type-theory" -> "digama0/lean4lean"
"digama0/lean-type-theory" -> "leanprover/lean4-cli"
"flypitch/flypitch" -> "leanprover-community/lean-perfectoid-spaces"
"flypitch/flypitch" -> "ramonfmir/lean-scheme"
"leanprover-community/tutorials" -> "leanprover-community/lftcm2020"
"leanprover-community/tutorials" -> "b-mehta/topos"
"leanprover-community/tutorials" -> "ImperialCollegeLondon/real-number-game"
"leanprover-community/tutorials" -> "jasonrute/lean_proof_recording"
"leanprover-community/tutorials" -> "openai/lean-gym"
"ImperialCollegeLondon/natural_number_game" -> "ImperialCollegeLondon/real-number-game"
"ImperialCollegeLondon/natural_number_game" -> "mpedramfar/Lean-game-maker"
"ImperialCollegeLondon/natural_number_game" -> "kbuzzard/xena"
"ImperialCollegeLondon/natural_number_game" -> "ImperialCollegeLondon/M40001_lean"
"ImperialCollegeLondon/natural_number_game" -> "leanprover-community/format_lean"
"ImperialCollegeLondon/natural_number_game" -> "ImperialCollegeLondon/formalising-mathematics-2022"
"ImperialCollegeLondon/natural_number_game" -> "kmill/lean4-raytracer"
"ImperialCollegeLondon/natural_number_game" -> "lecopivo/SciLean"
"ImperialCollegeLondon/natural_number_game" -> "leanprover-community/lftcm2020"
"ImperialCollegeLondon/natural_number_game" -> "leanprover-community/lean4-metaprogramming-book"
"ImperialCollegeLondon/natural_number_game" -> "leanprover-community/mathematics_in_lean"
"ImperialCollegeLondon/natural_number_game" -> "leanprover-community/tutorials"
"ImperialCollegeLondon/natural_number_game" -> "leanprover-community/aesop"
"ImperialCollegeLondon/natural_number_game" -> "digama0/mm0"
"ImperialCollegeLondon/natural_number_game" -> "leanprover-community/lean"
"ryankeleti/ega" -> "leanprover-community/lean-liquid" ["e"=1]
"leanprover-community/format_lean" -> "formalabstracts/CNL-CIC"
"princeton-vl/CoqGym" -> "jesse-michael-han/lean-gptf" ["e"=1]
"princeton-vl/CoqGym" -> "openai/lean-gym" ["e"=1]
"princeton-vl/CoqGym" -> "zhangir-azerbayev/ProofNet" ["e"=1]
"princeton-vl/CoqGym" -> "stanford-centaur/PyPantograph" ["e"=1]
"digama0/mm0" -> "leanprover-community/batteries"
"digama0/mm0" -> "leanprover-community/aesop"
"digama0/mm0" -> "Deducteam/Dedukti" ["e"=1]
"digama0/mm0" -> "flypitch/flypitch"
"digama0/mm0" -> "metamath/set.mm"
"digama0/mm0" -> "leanprover/vscode-lean4"
"digama0/mm0" -> "leanprover-community/lean-liquid"
"digama0/mm0" -> "digama0/lean4lean"
"digama0/mm0" -> "leanprover-community/lean4-metaprogramming-book"
"digama0/mm0" -> "digama0/lean-type-theory"
"digama0/mm0" -> "formalabstracts/formalabstracts"
"digama0/mm0" -> "cpitclaudel/alectryon" ["e"=1]
"digama0/mm0" -> "leanprover-community/quote4"
"digama0/mm0" -> "metamath/metamath-exe"
"digama0/mmj2" -> "metamath/metamath-knife"
"digama0/mmj2" -> "metamath/set.mm"
"b-mehta/maths-notes" -> "Name-Kompsky/tripos"
"b-mehta/maths-notes" -> "b-mehta/topos"
"Name-Kompsky/tripos" -> "b-mehta/maths-notes"
"leanprover-community/lean-perfectoid-spaces" -> "ramonfmir/lean-scheme"
"leanprover-community/lean-perfectoid-spaces" -> "flypitch/flypitch"
"leanprover-community/lean-perfectoid-spaces" -> "leanprover-community/lean-liquid"
"leanprover-community/lean-perfectoid-spaces" -> "kbuzzard/lean-stacks-project"
"leanprover-community/lean-perfectoid-spaces" -> "cmu-phil/Spectral"
"leanprover-community/lean-perfectoid-spaces" -> "b-mehta/topos"
"leanprover-community/lean-perfectoid-spaces" -> "IMO-grand-challenge/formal-encoding"
"leanprover-community/lean-perfectoid-spaces" -> "formalabstracts/formalabstracts"
"leanprover-community/lean-perfectoid-spaces" -> "kim-em/lean-category-theory"
"metamath/metamath-exe" -> "metamath/metamath-book"
"metamath/metamath-exe" -> "metamath/set.mm"
"metamath/metamath-exe" -> "expln/metamath-lamp"
"metamath/metamath-exe" -> "digama0/mmj2"
"metamath/metamath-book" -> "metamath/metamath-exe"
"Naproche-SAD/Naproche-SAD" -> "formalabstracts/CNL-CIC"
"idris-lang/Idris2" -> "leanprover/lean4" ["e"=1]
"bgavran/Category_Theory_Machine_Learning" -> "leanprover-community/mathlib4" ["e"=1]
"dalcde/cam-notes" -> "Name-Kompsky/tripos" ["e"=1]
"dalcde/cam-notes" -> "b-mehta/maths-notes" ["e"=1]
"seL4/l4v" -> "seL4/isabelle" ["e"=1]
"mpedramfar/Lean-game-maker" -> "ImperialCollegeLondon/real-number-game"
"mpedramfar/Lean-game-maker" -> "ImperialCollegeLondon/group-theory-game"
"mpedramfar/Lean-game-maker" -> "ImperialCollegeLondon/natural_number_game"
"mpedramfar/Lean-game-maker" -> "leanprover-community/format_lean"
"leanprover-community/mathematics_in_lean" -> "hrmacbeth/math2001"
"leanprover-community/mathematics_in_lean" -> "avigad/mathematics_in_lean_source"
"leanprover-community/mathematics_in_lean" -> "leanprover/theorem_proving_in_lean4"
"leanprover-community/mathematics_in_lean" -> "leanprover-community/lean4-metaprogramming-book"
"leanprover-community/mathematics_in_lean" -> "PatrickMassot/GlimpseOfLean"
"leanprover-community/mathematics_in_lean" -> "lecopivo/SciLean"
"leanprover-community/mathematics_in_lean" -> "leanprover-community/mathlib4"
"leanprover-community/mathematics_in_lean" -> "leanprover-community/batteries"
"leanprover-community/mathematics_in_lean" -> "dwrensha/compfiles"
"leanprover-community/mathematics_in_lean" -> "Paper-Proof/paperproof"
"leanprover-community/mathematics_in_lean" -> "leanprover-community/ProofWidgets4"
"leanprover-community/mathematics_in_lean" -> "leanprover-community/lean4game"
"leanprover-community/mathematics_in_lean" -> "leanprover/elan"
"leanprover-community/mathematics_in_lean" -> "trishullab/PutnamBench"
"leanprover-community/mathematics_in_lean" -> "leanprover-community/NNG4"
"dominique-unruh/scala-isabelle" -> "inpefess/isabelle-client"
"avigad/mathematics_in_lean_source" -> "leanprover-community/mathematics_in_lean"
"cpitclaudel/alectryon" -> "leanprover/LeanInk" ["e"=1]
"ImperialCollegeLondon/M40001_lean" -> "ImperialCollegeLondon/real-number-game"
"ImperialCollegeLondon/M40001_lean" -> "mpedramfar/Lean-game-maker"
"ImperialCollegeLondon/M40001_lean" -> "ImperialCollegeLondon/group-theory-game"
"ImperialCollegeLondon/real-number-game" -> "ImperialCollegeLondon/complex-number-game"
"ImperialCollegeLondon/real-number-game" -> "ImperialCollegeLondon/group-theory-game"
"ImperialCollegeLondon/real-number-game" -> "mpedramfar/Lean-game-maker"
"ImperialCollegeLondon/real-number-game" -> "ImperialCollegeLondon/natural_number_game"
"ImperialCollegeLondon/real-number-game" -> "ImperialCollegeLondon/Example-Lean-Projects"
"ImperialCollegeLondon/real-number-game" -> "ImperialCollegeLondon/M40001_lean"
"ImperialCollegeLondon/real-number-game" -> "leanprover-community/lftcm2020"
"ImperialCollegeLondon/real-number-game" -> "kex-y/M4000x_LEAN_formalisation"
"Z3Prover/z3" -> "leanprover/lean4" ["e"=1]
"leanprover-community/mathlib4" -> "leanprover/lean4"
"leanprover-community/mathlib4" -> "leanprover-community/mathlib3"
"leanprover-community/mathlib4" -> "leanprover-community/batteries"
"leanprover-community/mathlib4" -> "ImperialCollegeLondon/FLT"
"leanprover-community/mathlib4" -> "lean-dojo/LeanCopilot"
"leanprover-community/mathlib4" -> "leanprover-community/mathematics_in_lean"
"leanprover-community/mathlib4" -> "lecopivo/SciLean"
"leanprover-community/mathlib4" -> "leanprover-community/aesop"
"leanprover-community/mathlib4" -> "Paper-Proof/paperproof"
"leanprover-community/mathlib4" -> "Crispher/MathlibExplorer"
"leanprover-community/mathlib4" -> "leanprover-community/lean4-metaprogramming-book"
"leanprover-community/mathlib4" -> "lean-dojo/LeanDojo"
"leanprover-community/mathlib4" -> "leanprover/elan"
"leanprover-community/mathlib4" -> "leanprover-community/lean4game"
"leanprover-community/mathlib4" -> "leanprover-community/lean"
"leanprover-community/aesop" -> "leanprover-community/batteries"
"leanprover-community/aesop" -> "leanprover-community/ProofWidgets4"
"leanprover-community/aesop" -> "digama0/lean4lean"
"leanprover-community/aesop" -> "leanprover-community/quote4"
"leanprover-community/aesop" -> "leanprover-community/lean4-metaprogramming-book"
"leanprover-community/aesop" -> "leanprover-community/lean-auto"
"leanprover-community/aesop" -> "leanprover/doc-gen4"
"leanprover-community/aesop" -> "leanprover-community/duper"
"leanprover-community/aesop" -> "lecopivo/SciLean"
"leanprover-community/aesop" -> "leanprover-community/repl"
"leanprover-community/aesop" -> "ufmg-smite/lean-smt"
"leanprover-community/aesop" -> "leanprover/verso"
"leanprover-community/aesop" -> "kmill/lean4-raytracer"
"leanprover-community/aesop" -> "siddhartha-gadgil/LeanAide"
"leanprover-community/aesop" -> "leanprover/lake"
"leanprover-community/lean-liquid" -> "leanprover-community/lean-perfectoid-spaces"
"leanprover-community/lean-liquid" -> "leanprover-community/ProofWidgets4"
"leanprover-community/lean-liquid" -> "flypitch/flypitch"
"leanprover-community/lean-liquid" -> "ramonfmir/lean-scheme"
"leanprover-community/lean-liquid" -> "leanprover-community/lean4-metaprogramming-book"
"leanprover-community/lean-liquid" -> "leanprover-community/lean"
"leanprover-community/lean-liquid" -> "leanprover-community/aesop"
"leanprover-community/lean-liquid" -> "leanprover-community/lftcm2020"
"leanprover-community/lean-liquid" -> "kmill/lean4-raytracer"
"leanprover-community/lean-liquid" -> "b-mehta/topos"
"leanprover-community/lean-liquid" -> "leanprover/LeanInk"
"leanprover-community/lean-liquid" -> "jesse-michael-han/lean-gptf"
"leanprover-community/lean-liquid" -> "kbuzzard/lean-stacks-project"
"leanprover-community/lean-liquid" -> "formalabstracts/formalabstracts"
"ImperialCollegeLondon/formalising-mathematics" -> "ImperialCollegeLondon/formalising-mathematics-2022"
"ImperialCollegeLondon/formalising-mathematics" -> "jesse-michael-han/lean-gptf"
"ImperialCollegeLondon/formalising-mathematics" -> "leanprover-community/lean"
"ImperialCollegeLondon/formalising-mathematics" -> "ImperialCollegeLondon/formalising-mathematics-2023"
"ImperialCollegeLondon/formalising-mathematics" -> "leanprover-community/lftcm2020"
"ImperialCollegeLondon/formalising-mathematics" -> "leanprover-community/tutorials"
"ImperialCollegeLondon/formalising-mathematics" -> "avigad/lamr"
"ImperialCollegeLondon/formalising-mathematics" -> "ImperialCollegeLondon/real-number-game"
"ImperialCollegeLondon/formalising-mathematics" -> "zhangir-azerbayev/lean-chat"
"ImperialCollegeLondon/formalising-mathematics" -> "IPDSnelting/tba-2021"
"ImperialCollegeLondon/formalising-mathematics" -> "leanprover-community/aesop"
"ImperialCollegeLondon/formalising-mathematics" -> "Paper-Proof/paperproof"
"ImperialCollegeLondon/formalising-mathematics" -> "leanprover-community/repl"
"ImperialCollegeLondon/formalising-mathematics" -> "ImperialCollegeLondon/M40001_lean"
"wellecks/naturalproofs" -> "wellecks/naturalprover"
"wellecks/naturalproofs" -> "wellecks/mgs"
"Julian/lean.nvim" -> "leanprover-community/batteries"
"Julian/lean.nvim" -> "leanprover/verso"
"Julian/lean.nvim" -> "digama0/lean4lean"
"Julian/lean.nvim" -> "leanprover-community/aesop"
"Julian/lean.nvim" -> "argumentcomputer/yatima"
"Julian/lean.nvim" -> "leanprover/elan"
"Julian/lean.nvim" -> "leanprover/lean4-cli"
"Julian/lean.nvim" -> "mk12/vim-lean"
"Julian/lean.nvim" -> "leanprover/doc-gen4"
"Julian/lean.nvim" -> "lecopivo/SciLean"
"Julian/lean.nvim" -> "leanprover-community/quote4"
"Julian/lean.nvim" -> "whonore/Coqtail" ["e"=1]
"Julian/lean.nvim" -> "digama0/lean-type-theory"
"Julian/lean.nvim" -> "leanprover-community/lean4-mode"
"Julian/lean.nvim" -> "Paper-Proof/paperproof"
"hendrycks/math" -> "openai/miniF2F" ["e"=1]
"hendrycks/math" -> "lean-dojo/LeanDojo" ["e"=1]
"openai/miniF2F" -> "openai/lean-gym"
"openai/miniF2F" -> "dwrensha/compfiles"
"openai/miniF2F" -> "zhangir-azerbayev/ProofNet"
"openai/miniF2F" -> "facebookresearch/miniF2F"
"openai/miniF2F" -> "lean-dojo/LeanDojo"
"openai/miniF2F" -> "lean-dojo/ReProver"
"openai/miniF2F" -> "leanprover-community/lean-auto"
"openai/miniF2F" -> "leanprover-community/aesop"
"openai/miniF2F" -> "wiio12/LEGO-Prover"
"openai/miniF2F" -> "deepseek-ai/DeepSeek-Prover-V1.5"
"openai/miniF2F" -> "jesse-michael-han/lean-step-public"
"openai/miniF2F" -> "albertqjiang/draft_sketch_prove"
"openai/miniF2F" -> "leanprover-community/repl"
"openai/miniF2F" -> "yangky11/miniF2F-lean4"
"openai/miniF2F" -> "j991222/ai4math-papers"
"PatrickMassot/leanblueprint" -> "leanprover-community/ProofWidgets4"
"PatrickMassot/leanblueprint" -> "patrik-cihal/lean-graph"
"PatrickMassot/leanblueprint" -> "Paper-Proof/paperproof"
"PatrickMassot/leanblueprint" -> "dwrensha/animate-lean-proofs"
"PatrickMassot/leanblueprint" -> "leanprover-community/lean4-metaprogramming-book"
"PatrickMassot/leanblueprint" -> "leanprover/verso"
"PatrickMassot/leanblueprint" -> "ufmg-smite/lean-smt"
"PatrickMassot/leanblueprint" -> "leanprover/doc-gen4"
"PatrickMassot/leanblueprint" -> "PatrickMassot/verbose-lean4"
"PatrickMassot/leanblueprint" -> "frenzymath/jixia"
"PatrickMassot/leanblueprint" -> "dwrensha/compfiles"
"PatrickMassot/leanblueprint" -> "siddhartha-gadgil/LeanAide"
"PatrickMassot/leanblueprint" -> "haruhisa-enomoto/mathlib4-all-tactics"
"leanprover/theorem_proving_in_lean4" -> "leanprover-community/mathematics_in_lean"
"leanprover/theorem_proving_in_lean4" -> "leanprover/lake"
"leanprover/theorem_proving_in_lean4" -> "leanprover-community/lean4-metaprogramming-book"
"lurk-lab/lurk-beta" -> "argumentcomputer/yatima" ["e"=1]
"metamath/set.mm" -> "metamath/metamath-exe"
"metamath/set.mm" -> "digama0/mmj2"
"metamath/set.mm" -> "metamath/metamath-book"
"metamath/set.mm" -> "metamath/metamath-knife"
"metamath/set.mm" -> "digama0/mm0"
"metamath/set.mm" -> "raphlinus/ghilbert"
"metamath/set.mm" -> "expln/metamath-lamp"
"metamath/set.mm" -> "david-a-wheeler/mmverify.py"
"metamath/set.mm" -> "sorear/metamath-turing-machines"
"metamath/set.mm" -> "seL4/isabelle"
"awslabs/s2n-bignum" -> "leanprover/LNSym" ["e"=1]
"leanprover/vscode-lean4" -> "leanprover/lake"
"leanprover/vscode-lean4" -> "leanprover-community/ProofWidgets4"
"leanprover/vscode-lean4" -> "leanprover-community/batteries"
"leanprover/vscode-lean4" -> "leanprover-community/aesop"
"leanprover/vscode-lean4" -> "leanprover-community/lean4-metaprogramming-book"
"leanprover/vscode-lean4" -> "leanprover/reference-manual"
"leanprover/vscode-lean4" -> "leanprover/vscode-lean"
"leanprover/vscode-lean4" -> "leanprover-community/duper"
"leanprover/vscode-lean4" -> "lecopivo/SciLean"
"leanprover/vscode-lean4" -> "leanprover-community/lean4web"
"leanprover/vscode-lean4" -> "leanprover/LeanInk"
"openai/lean-gym" -> "jesse-michael-han/lean-gptf"
"openai/lean-gym" -> "jesse-michael-han/lean-step-public"
"openai/lean-gym" -> "jasonrute/lean_proof_recording"
"openai/lean-gym" -> "openai/miniF2F"
"openai/lean-gym" -> "albertqjiang/Portal-to-ISAbelle"
"openai/lean-gym" -> "albertqjiang/draft_sketch_prove"
"openai/lean-gym" -> "facebookresearch/miniF2F"
"openai/lean-gym" -> "lean-dojo/ReProver"
"openai/lean-gym" -> "zhangir-azerbayev/ProofNet"
"openai/lean-gym" -> "leanprover-community/lean-client-python"
"openai/lean-gym" -> "leanprover-community/repl"
"openai/lean-gym" -> "wellecks/llmstep"
"openai/lean-gym" -> "kim-em/lean-training-data"
"jesse-michael-han/lean-gptf" -> "openai/lean-gym"
"jesse-michael-han/lean-gptf" -> "leanprover-community/aesop"
"jesse-michael-han/lean-gptf" -> "leanprover-community/lean-client-python"
"jesse-michael-han/lean-gptf" -> "zhangir-azerbayev/ProofNet"
"jesse-michael-han/lean-gptf" -> "jasonrute/lean_proof_recording"
"jesse-michael-han/lean-gptf" -> "leanprover/LeanInk"
"jesse-michael-han/lean-gptf" -> "albertqjiang/draft_sketch_prove"
"jesse-michael-han/lean-gptf" -> "leanprover-community/ProofWidgets4"
"jesse-michael-han/lean-gptf" -> "dselsam/binport"
"siddhartha-gadgil/Saturn" -> "Seasawher/mdgen"
"jasonrute/lean_proof_recording" -> "jesse-michael-han/lean-tpe-public"
"jasonrute/lean_proof_recording" -> "jesse-michael-han/lean-step-public"
"jasonrute/lean_proof_recording" -> "zhangir-azerbayev/repl"
"jesse-michael-han/lean-tpe-public" -> "jasonrute/lean_proof_recording"
"kmill/lean4-raytracer" -> "leanprover-community/ProofWidgets4"
"kmill/lean4-raytracer" -> "siddhartha-gadgil/Saturn"
"IPDSnelting/tba-2021" -> "dselsam/binport"
"leanprover-community/quote4" -> "digama0/lean4lean"
"leanprover-community/quote4" -> "leanprover-community/aesop"
"leanprover-community/quote4" -> "leanprover-community/ProofWidgets4"
"jesse-michael-han/lean-step-public" -> "jasonrute/lean_proof_recording"
"jesse-michael-han/lean-step-public" -> "jesse-michael-han/lean-tpe-public"
"HigherOrderCO/HVM" -> "leanprover/lean4" ["e"=1]
"hrmacbeth/math2001" -> "leanprover-community/mathematics_in_lean"
"hrmacbeth/math2001" -> "Paper-Proof/paperproof"
"hrmacbeth/math2001" -> "avigad/mathematics_in_lean_source"
"hrmacbeth/math2001" -> "leanprover-community/lean4game"
"hrmacbeth/math2001" -> "digama0/lean4lean"
"hrmacbeth/math2001" -> "HEPLean/PhysLean"
"hrmacbeth/math2001" -> "leanprover/vscode-lean4"
"hrmacbeth/math2001" -> "leanprover-community/aesop"
"hrmacbeth/math2001" -> "ufmg-smite/lean-smt"
"hrmacbeth/math2001" -> "avigad/lamr"
"sagemath/sage-archive-2023-02-01" -> "leanprover-community/mathlib3" ["e"=1]
"albertqjiang/Portal-to-ISAbelle" -> "albertqjiang/INT"
"albertqjiang/Portal-to-ISAbelle" -> "albertqjiang/draft_sketch_prove"
"albertqjiang/Portal-to-ISAbelle" -> "jasonrute/lean_proof_recording"
"albertqjiang/Portal-to-ISAbelle" -> "dominique-unruh/scala-isabelle"
"argumentcomputer/yatima" -> "argumentcomputer/LSpec"
"argumentcomputer/yatima" -> "leanprover-community/batteries"
"lecopivo/SciLean" -> "leanprover-community/lean4-metaprogramming-book"
"lecopivo/SciLean" -> "leanprover-community/aesop"
"lecopivo/SciLean" -> "leanprover-community/ProofWidgets4"
"lecopivo/SciLean" -> "ufmg-smite/lean-smt"
"lecopivo/SciLean" -> "leanprover/verso"
"lecopivo/SciLean" -> "leanprover-community/batteries"
"lecopivo/SciLean" -> "HEPLean/PhysLean"
"lecopivo/SciLean" -> "ImperialCollegeLondon/FLT"
"lecopivo/SciLean" -> "digama0/lean4lean"
"lecopivo/SciLean" -> "kmill/lean4-raytracer"
"lecopivo/SciLean" -> "Paper-Proof/paperproof"
"lecopivo/SciLean" -> "leanprover/doc-gen4"
"lecopivo/SciLean" -> "leanprover/LeanInk"
"lecopivo/SciLean" -> "leanprover/lake"
"lecopivo/SciLean" -> "leanprover-community/duper"
"ufmg-smite/lean-smt" -> "leanprover-community/lean-auto"
"ufmg-smite/lean-smt" -> "leanprover/LeanInk"
"ufmg-smite/lean-smt" -> "leanprover-community/duper"
"ufmg-smite/lean-smt" -> "leanprover/doc-gen4"
"ufmg-smite/lean-smt" -> "digama0/lean4lean"
"ufmg-smite/lean-smt" -> "sgraf812/mpl"
"ufmg-smite/lean-smt" -> "leanprover-community/iris-lean"
"ufmg-smite/lean-smt" -> "siddhartha-gadgil/Saturn"
"ufmg-smite/lean-smt" -> "leanprover-community/ProofWidgets4"
"ufmg-smite/lean-smt" -> "marcusrossel/lean-egg"
"ufmg-smite/lean-smt" -> "leanprover-community/aesop"
"ufmg-smite/lean-smt" -> "lecopivo/SciLean"
"ufmg-smite/lean-smt" -> "leanprover-community/repl"
"ufmg-smite/lean-smt" -> "leanprover/verso"
"alexkeizer/QpfTypes" -> "JamesGallicchio/LeanColls"
"avigad/lamr" -> "ufmg-smite/lean-smt"
"eric-wieser/lean-matrix-cookbook" -> "digama0/lean4lean"
"eric-wieser/lean-matrix-cookbook" -> "ammkrn/nanoda_lib"
"zhangir-azerbayev/ProofNet" -> "albertqjiang/draft_sketch_prove"
"zhangir-azerbayev/ProofNet" -> "leanprover-community/repl"
"zhangir-azerbayev/ProofNet" -> "jasonrute/lean_proof_recording"
"zhangir-azerbayev/ProofNet" -> "frenzymath/jixia"
"zhangir-azerbayev/ProofNet" -> "trishullab/PutnamBench"
"leanprover-community/lean4-metaprogramming-book" -> "leanprover-community/aesop"
"leanprover-community/lean4-metaprogramming-book" -> "leanprover/verso"
"leanprover-community/lean4-metaprogramming-book" -> "lecopivo/SciLean"
"leanprover-community/lean4-metaprogramming-book" -> "leanprover-community/batteries"
"leanprover-community/lean4-metaprogramming-book" -> "leanprover/doc-gen4"
"leanprover-community/lean4-metaprogramming-book" -> "leanprover/LeanInk"
"leanprover-community/lean4-metaprogramming-book" -> "digama0/lean4lean"
"leanprover-community/lean4-metaprogramming-book" -> "leanprover-community/ProofWidgets4"
"leanprover-community/lean4-metaprogramming-book" -> "leanprover-community/quote4"
"leanprover-community/lean4-metaprogramming-book" -> "kmill/lean4-raytracer"
"leanprover-community/lean4-metaprogramming-book" -> "leanprover-community/lean-auto"
"leanprover-community/lean4-metaprogramming-book" -> "digama0/lean-type-theory"
"leanprover-community/lean4-metaprogramming-book" -> "ufmg-smite/lean-smt"
"leanprover-community/lean4-metaprogramming-book" -> "siddhartha-gadgil/LeanAide"
"leanprover-community/lean4-metaprogramming-book" -> "leanprover/vscode-lean4"
"subfish-zhou/theorem_proving_in_lean4_zh_CN" -> "Lean-zh/tp-lean-zh"
"leanprover/doc-gen4" -> "leanprover/LeanInk"
"leanprover/doc-gen4" -> "leanprover/verso"
"ImperialCollegeLondon/formalising-mathematics-2022" -> "ImperialCollegeLondon/formalising-mathematics-2023"
"ImperialCollegeLondon/formalising-mathematics-2022" -> "ImperialCollegeLondon/formalising-mathematics"
"ImperialCollegeLondon/formalising-mathematics-2022" -> "ImperialCollegeLondon/real-number-game"
"leanprover-community/iris-lean" -> "leanprover/doc-gen4"
"leanprover-community/iris-lean" -> "alexkeizer/QpfTypes"
"leanprover-community/iris-lean" -> "JamesGallicchio/LeanColls"
"leanprover-community/iris-lean" -> "leanprover-community/plausible"
"leanprover-community/duper" -> "leanprover-community/lean-auto"
"leanprover/LeanInk" -> "leanprover-community/ProofWidgets4"
"leanprover/LeanInk" -> "leanprover/doc-gen4"
"tydeu/lean4-alloy" -> "JamesGallicchio/LeanColls"
"wellecks/naturalprover" -> "BartoszPiotrowski/lean-premise-selection"
"wellecks/naturalprover" -> "ai4reason/ATP_Proofs"
"T-Brick/c0deine" -> "JamesGallicchio/LeanColls" ["e"=1]
"leanprover-community/batteries" -> "leanprover-community/aesop"
"leanprover-community/batteries" -> "digama0/lean4lean"
"leanprover-community/batteries" -> "leanprover-community/lean4-metaprogramming-book"
"leanprover-community/batteries" -> "leanprover-community/quote4"
"leanprover-community/batteries" -> "leanprover-community/ProofWidgets4"
"leanprover-community/batteries" -> "leanprover/verso"
"leanprover-community/batteries" -> "leanprover/reference-manual"
"leanprover-community/batteries" -> "leanprover-community/lean-auto"
"leanprover-community/batteries" -> "lecopivo/SciLean"
"leanprover-community/batteries" -> "ImperialCollegeLondon/FLT"
"leanprover-community/batteries" -> "leanprover/lean4-cli"
"leanprover-community/batteries" -> "ufmg-smite/lean-smt"
"leanprover-community/batteries" -> "leanprover/vscode-lean4"
"leanprover-community/batteries" -> "emilyriehl/infinity-cosmos"
"leanprover-community/batteries" -> "argumentcomputer/yatima"
"sagemath/sage" -> "leanprover-community/mathlib4" ["e"=1]
"sagemath/sage" -> "leanprover/lean4" ["e"=1]
"mrcjkb/haskell-tools.nvim" -> "Julian/lean.nvim" ["e"=1]
"adamyedidia/parsimony" -> "sorear/metamath-turing-machines"
"lupantech/dl4math" -> "zhaoyu-li/DL4TP" ["e"=1]
"lupantech/dl4math" -> "j991222/ai4math-papers" ["e"=1]
"lupantech/dl4math" -> "lean-dojo/LeanDojo" ["e"=1]
"facebookresearch/miniF2F" -> "albertqjiang/draft_sketch_prove"
"facebookresearch/miniF2F" -> "zhangir-azerbayev/ProofNet"
"facebookresearch/miniF2F" -> "kim-em/lean-training-data"
"EleutherAI/math-lm" -> "lean-dojo/LeanDojo"
"EleutherAI/math-lm" -> "hendrycks/math" ["e"=1]
"EleutherAI/math-lm" -> "microsoft/ToRA" ["e"=1]
"EleutherAI/math-lm" -> "openai/prm800k" ["e"=1]
"EleutherAI/math-lm" -> "TIGER-AI-Lab/MAmmoTH" ["e"=1]
"EleutherAI/math-lm" -> "openai/miniF2F"
"EleutherAI/math-lm" -> "lupantech/dl4math" ["e"=1]
"EleutherAI/math-lm" -> "wellecks/llmstep"
"EleutherAI/math-lm" -> "mathllm/MathCoder" ["e"=1]
"EleutherAI/math-lm" -> "lean-dojo/LeanCopilot"
"EleutherAI/math-lm" -> "ZubinGou/math-evaluation-harness" ["e"=1]
"EleutherAI/math-lm" -> "GAIR-NLP/MathPile" ["e"=1]
"EleutherAI/math-lm" -> "lean-dojo/ReProver"
"EleutherAI/math-lm" -> "albertqjiang/Portal-to-ISAbelle"
"EleutherAI/math-lm" -> "j991222/ai4math-papers"
"leanprover-community/lean4game" -> "leanprover-community/NNG4"
"leanprover-community/lean4game" -> "leanprover-community/aesop"
"leanprover-community/lean4game" -> "leanprover-community/lean4web"
"leanprover-community/lean4game" -> "Paper-Proof/paperproof"
"leanprover-community/lean4game" -> "leanprover-community/ProofWidgets4"
"leanprover-community/lean4game" -> "hhu-adam/Robo"
"leanprover-community/lean4game" -> "leanprover/vscode-lean4"
"leanprover-community/lean4game" -> "ImperialCollegeLondon/FLT"
"leanprover-community/lean4game" -> "leanprover-community/batteries"
"leanprover-community/lean4game" -> "leanprover/SampCert"
"leanprover-community/lean4game" -> "leanprover-community/lean4-metaprogramming-book"
"leanprover-community/lean4game" -> "leanprover-community/lean-auto"
"leanprover-community/lean4game" -> "trishullab/PutnamBench"
"leanprover-community/lean4game" -> "hhu-adam/GameSkeleton"
"leanprover-community/lean4game" -> "leanprover-community/mathematics_in_lean"
"leanprover-community/ProofWidgets4" -> "leanprover/LeanInk"
"leanprover-community/ProofWidgets4" -> "leanprover-community/aesop"
"leanprover-community/ProofWidgets4" -> "leanprover/verso"
"leanprover-community/ProofWidgets4" -> "leanprover-community/quote4"
"leanprover-community/ProofWidgets4" -> "leanprover/doc-gen4"
"leanprover-community/ProofWidgets4" -> "leanprover-community/batteries"
"leanprover-community/ProofWidgets4" -> "ufmg-smite/lean-smt"
"leanprover-community/ProofWidgets4" -> "kmill/lean4-raytracer"
"leanprover-community/ProofWidgets4" -> "lecopivo/SciLean"
"leanprover-community/ProofWidgets4" -> "leanprover-community/lean4-metaprogramming-book"
"leanprover-community/ProofWidgets4" -> "digama0/lean4lean"
"leanprover-community/lean4web" -> "leanprover-community/lean-auto"
"dwrensha/compfiles" -> "trishullab/PutnamBench"
"dwrensha/compfiles" -> "zhangir-azerbayev/ProofNet"
"dwrensha/compfiles" -> "leanprover-community/repl"
"dwrensha/compfiles" -> "project-numina/kimina-lean-server"
"dwrensha/compfiles" -> "openai/miniF2F"
"dwrensha/compfiles" -> "ufmg-smite/lean-smt"
"dwrensha/compfiles" -> "leanprover-community/lean-auto"
"dwrensha/compfiles" -> "loganrjmurphy/LeanEuclid"
"dwrensha/compfiles" -> "YaelDillies/LeanCamCombi"
"dwrensha/compfiles" -> "ImperialCollegeLondon/FLT"
"meta-math/MetaMath" -> "Sphere-AI-Lab/FormalMATH-Bench" ["e"=1]
"optsuite/optlib" -> "jjdishere/EG"
"optsuite/optlib" -> "damek/gd-lean"
"lean-dojo/LeanCopilot" -> "lean-dojo/LeanDojo"
"lean-dojo/LeanCopilot" -> "lean-dojo/ReProver"
"lean-dojo/LeanCopilot" -> "leanprover-community/aesop"
"lean-dojo/LeanCopilot" -> "leanprover-community/mathlib4"
"lean-dojo/LeanCopilot" -> "Paper-Proof/paperproof"
"lean-dojo/LeanCopilot" -> "lecopivo/SciLean"
"lean-dojo/LeanCopilot" -> "deepseek-ai/DeepSeek-Prover-V1.5"
"lean-dojo/LeanCopilot" -> "ImperialCollegeLondon/FLT"
"lean-dojo/LeanCopilot" -> "loganrjmurphy/LeanEuclid"
"lean-dojo/LeanCopilot" -> "wellecks/llmstep"
"lean-dojo/LeanCopilot" -> "openai/miniF2F"
"lean-dojo/LeanCopilot" -> "Goedel-LM/Goedel-Prover"
"lean-dojo/LeanCopilot" -> "leanprover-community/lean4-metaprogramming-book"
"lean-dojo/LeanCopilot" -> "leanprover-community/mathematics_in_lean"
"lean-dojo/LeanCopilot" -> "leanprover/elan"
"Paper-Proof/paperproof" -> "leanprover-community/lean-auto"
"Paper-Proof/paperproof" -> "leanprover-community/ProofWidgets4"
"Paper-Proof/paperproof" -> "leanprover-community/lean4-metaprogramming-book"
"Paper-Proof/paperproof" -> "lecopivo/SciLean"
"Paper-Proof/paperproof" -> "leanprover-community/repl"
"Paper-Proof/paperproof" -> "leanprover-community/duper"
"Paper-Proof/paperproof" -> "leanprover-community/lean4game"
"Paper-Proof/paperproof" -> "ufmg-smite/lean-smt"
"Paper-Proof/paperproof" -> "hrmacbeth/math2001"
"Paper-Proof/paperproof" -> "PatrickMassot/leanblueprint"
"Paper-Proof/paperproof" -> "leanprover/verso"
"Paper-Proof/paperproof" -> "ImperialCollegeLondon/FLT"
"Paper-Proof/paperproof" -> "leanprover-community/aesop"
"Paper-Proof/paperproof" -> "lean-dojo/LeanCopilot"
"Paper-Proof/paperproof" -> "leanprover-community/batteries"
"microsoft/ToRA" -> "project-numina/aimo-progress-prize" ["e"=1]
"lean-dojo/ReProver" -> "lean-dojo/LeanDojo"
"lean-dojo/ReProver" -> "zhangir-azerbayev/ProofNet"
"lean-dojo/ReProver" -> "zhaoyu-li/DL4TP"
"lean-dojo/ReProver" -> "wellecks/llmstep"
"lean-dojo/ReProver" -> "lean-dojo/LeanDojoChatGPT"
"lean-dojo/ReProver" -> "lean-dojo/LeanCopilot"
"lean-dojo/ReProver" -> "wiio12/LEGO-Prover"
"lean-dojo/ReProver" -> "albertqjiang/draft_sketch_prove"
"lean-dojo/ReProver" -> "openai/miniF2F"
"lean-dojo/ReProver" -> "openai/lean-gym"
"lean-dojo/ReProver" -> "deepseek-ai/DeepSeek-Prover-V1.5"
"lean-dojo/ReProver" -> "loganrjmurphy/LeanEuclid"
"lean-dojo/ReProver" -> "leanprover-community/lean-auto"
"lean-dojo/ReProver" -> "j991222/ai4math-papers"
"lean-dojo/ReProver" -> "leanprover-community/repl"
"PatrickMassot/GlimpseOfLean" -> "leanprover-community/mathematics_in_lean"
"PatrickMassot/GlimpseOfLean" -> "avigad/mathematics_in_lean_source"
"PatrickMassot/GlimpseOfLean" -> "ufmg-smite/lean-smt"
"PatrickMassot/GlimpseOfLean" -> "wellecks/llmstep"
"PatrickMassot/GlimpseOfLean" -> "leanprover-community/batteries"
"PatrickMassot/GlimpseOfLean" -> "lecopivo/SciLean"
"PatrickMassot/GlimpseOfLean" -> "dwrensha/compfiles"
"PatrickMassot/GlimpseOfLean" -> "leanprover-community/aesop"
"PatrickMassot/GlimpseOfLean" -> "haruhisa-enomoto/mathlib4-all-tactics"
"PatrickMassot/GlimpseOfLean" -> "leanprover/vscode-lean4"
"PatrickMassot/GlimpseOfLean" -> "loganrjmurphy/LeanEuclid"
"PatrickMassot/GlimpseOfLean" -> "teorth/equational_theories"
"PatrickMassot/GlimpseOfLean" -> "ImperialCollegeLondon/formalising-mathematics-2024"
"wellecks/ntptutorial" -> "zhangir-azerbayev/ProofNet"
"wellecks/ntptutorial" -> "albertqjiang/Portal-to-ISAbelle"
"wellecks/ntptutorial" -> "wellecks/llmstep"
"wellecks/ntptutorial" -> "albertqjiang/draft_sketch_prove"
"wellecks/ntptutorial" -> "zhaoyu-li/DL4TP"
"wellecks/ntptutorial" -> "cmu-l3/ntptutorial-II"
"wellecks/ntptutorial" -> "facebookresearch/miniF2F"
"lean-dojo/LeanDojo" -> "lean-dojo/ReProver"
"lean-dojo/LeanDojo" -> "lean-dojo/LeanCopilot"
"lean-dojo/LeanDojo" -> "zhangir-azerbayev/ProofNet"
"lean-dojo/LeanDojo" -> "openai/miniF2F"
"lean-dojo/LeanDojo" -> "leanprover-community/repl"
"lean-dojo/LeanDojo" -> "lean-dojo/LeanDojoChatGPT"
"lean-dojo/LeanDojo" -> "leanprover-community/aesop"
"lean-dojo/LeanDojo" -> "deepseek-ai/DeepSeek-Prover-V1.5"
"lean-dojo/LeanDojo" -> "wellecks/llmstep"
"lean-dojo/LeanDojo" -> "Paper-Proof/paperproof"
"lean-dojo/LeanDojo" -> "MoonshotAI/Kimina-Prover-Preview"
"lean-dojo/LeanDojo" -> "Goedel-LM/Goedel-Prover"
"lean-dojo/LeanDojo" -> "j991222/ai4math-papers"
"lean-dojo/LeanDojo" -> "kim-em/lean-training-data"
"lean-dojo/LeanDojo" -> "openai/lean-gym"
"j991222/ai4math-papers" -> "zhaoyu-li/DL4TP"
"j991222/ai4math-papers" -> "leanprover-community/repl"
"j991222/ai4math-papers" -> "loganrjmurphy/LeanEuclid"
"j991222/ai4math-papers" -> "albertqjiang/draft_sketch_prove"
"j991222/ai4math-papers" -> "project-numina/kimina-lean-server"
"j991222/ai4math-papers" -> "trishullab/PutnamBench"
"j991222/ai4math-papers" -> "kim-em/lean-training-data"
"j991222/ai4math-papers" -> "zhangir-azerbayev/ProofNet"
"j991222/ai4math-papers" -> "yangky11/miniF2F-lean4"
"j991222/ai4math-papers" -> "lean-dojo/ReProver"
"j991222/ai4math-papers" -> "albertqjiang/MMA"
"j991222/ai4math-papers" -> "rookie-joe/PDA"
"j991222/ai4math-papers" -> "optsuite/optlib"
"j991222/ai4math-papers" -> "wellecks/llmstep"
"j991222/ai4math-papers" -> "MoonshotAI/Kimina-Prover-Preview"
"albertqjiang/draft_sketch_prove" -> "kim-em/lean-training-data"
"albertqjiang/draft_sketch_prove" -> "jasonrute/lean_proof_recording"
"albertqjiang/draft_sketch_prove" -> "zhangir-azerbayev/ProofNet"
"albertqjiang/draft_sketch_prove" -> "chuanyang-Zheng/Lyra-theorem-prover"
"albertqjiang/draft_sketch_prove" -> "albertqjiang/Portal-to-ISAbelle"
"albertqjiang/draft_sketch_prove" -> "Eleanor-H/MUSTARD"
"albertqjiang/draft_sketch_prove" -> "project-numina/kimina-lean-server"
"albertqjiang/draft_sketch_prove" -> "facebookresearch/miniF2F"
"albertqjiang/draft_sketch_prove" -> "albertqjiang/INT"
"yangky11/miniF2F-lean4" -> "albertqjiang/draft_sketch_prove"
"lean-ja/lean-by-example" -> "FormalizedFormalLogic/Foundation"
"lean-dojo/LeanDojoChatGPT" -> "lean-dojo/ReProver"
"lean-dojo/LeanDojoChatGPT" -> "lean-dojo/LeanDojo"
"kim-em/lean-training-data" -> "cmu-l3/ntp-toolkit"
"kim-em/lean-training-data" -> "leanprover-community/repl"
"leanprover-community/repl" -> "kim-em/lean-training-data"
"leanprover-community/repl" -> "project-numina/kimina-lean-server"
"leanprover-community/repl" -> "stanford-centaur/PyPantograph"
"leanprover-community/repl" -> "zhangir-azerbayev/ProofNet"
"leanprover-community/repl" -> "wellecks/llmstep"
"leanprover-community/repl" -> "leanprover-community/duper"
"leanprover-community/repl" -> "leanprover-community/lean-auto"
"leanprover-community/repl" -> "leanprover-community/aesop"
"leanprover-community/repl" -> "rookie-joe/PDA"
"leanprover-community/repl" -> "dwrensha/compfiles"
"leanprover-community/repl" -> "albertqjiang/draft_sketch_prove"
"leanprover-community/repl" -> "ufmg-smite/lean-smt"
"leanprover-community/repl" -> "loganrjmurphy/LeanEuclid"
"wellecks/llmstep" -> "leanprover-community/repl"
"wellecks/llmstep" -> "kim-em/lean-training-data"
"wellecks/llmstep" -> "albertqjiang/Portal-to-ISAbelle"
"wellecks/llmstep" -> "siddhartha-gadgil/LeanAide"
"wellecks/llmstep" -> "zhangir-azerbayev/ProofNet"
"wellecks/llmstep" -> "cmu-l3/llmlean"
"wellecks/llmstep" -> "wellecks/naturalprover"
"wellecks/llmstep" -> "albertqjiang/draft_sketch_prove"
"wellecks/llmstep" -> "lean-dojo/ReProver"
"nomeata/loogle" -> "leanprover/doc-gen4"
"leanprover-community/NNG4" -> "leanprover-community/lean4game"
"leanprover-community/NNG4" -> "hhu-adam/Robo"
"leanprover-community/NNG4" -> "ImperialCollegeLondon/formalising-mathematics-2024"
"leanprover-community/NNG4" -> "nomeata/loogle"
"leanprover-community/NNG4" -> "leanprover-community/ProofWidgets4"
"leanprover-community/NNG4" -> "djvelleman/STG4"
"leanprover-community/lean-auto" -> "leanprover-community/duper"
"leanprover-community/lean-auto" -> "ufmg-smite/lean-smt"
"leanprover-community/lean-auto" -> "leanprover/LNSym"
"leanprover-community/lean-auto" -> "digama0/lean4lean"
"leanprover-community/lean-auto" -> "leanprover-community/aesop"
"FormalizedFormalLogic/Foundation" -> "haruhisa-enomoto/mathlib4-all-tactics"
"FormalizedFormalLogic/Foundation" -> "leanprover/doc-gen4"
"FormalizedFormalLogic/Foundation" -> "digama0/lean4lean"
"FormalizedFormalLogic/Foundation" -> "lean-ja/lean-by-example"
"ImperialCollegeLondon/FLT" -> "leanprover-community/batteries"
"ImperialCollegeLondon/FLT" -> "lecopivo/SciLean"
"ImperialCollegeLondon/FLT" -> "teorth/equational_theories"
"ImperialCollegeLondon/FLT" -> "dwrensha/compfiles"
"ImperialCollegeLondon/FLT" -> "HEPLean/PhysLean"
"ImperialCollegeLondon/FLT" -> "leanprover-community/mathlib4"
"ImperialCollegeLondon/FLT" -> "leanprover-community/lean-auto"
"ImperialCollegeLondon/FLT" -> "leanprover-community/aesop"
"ImperialCollegeLondon/FLT" -> "emilyriehl/infinity-cosmos"
"ImperialCollegeLondon/FLT" -> "teorth/pfr"
"ImperialCollegeLondon/FLT" -> "Paper-Proof/paperproof"
"ImperialCollegeLondon/FLT" -> "leanprover-community/lean4game"
"ImperialCollegeLondon/FLT" -> "ufmg-smite/lean-smt"
"ImperialCollegeLondon/FLT" -> "leanprover-community/lean4-metaprogramming-book"
"ImperialCollegeLondon/FLT" -> "fpvandoorn/carleson"
"leanprover/SampCert" -> "ammkrn/nanoda_lib"
"deepseek-ai/DeepSeek-Math" -> "deepseek-ai/DeepSeek-Prover-V1.5" ["e"=1]
"google-deepmind/alphageometry" -> "leanprover/lean4" ["e"=1]
"google-deepmind/alphageometry" -> "lean-dojo/LeanDojo" ["e"=1]
"google-deepmind/alphageometry" -> "lean-dojo/LeanCopilot" ["e"=1]
"deepseek-ai/awesome-deepseek-coder" -> "deepseek-ai/DeepSeek-Prover-V1.5" ["e"=1]
"deepseek-ai/DeepSeek-MoE" -> "deepseek-ai/DeepSeek-Prover-V1.5" ["e"=1]
"google-deepmind/funsearch" -> "lean-dojo/LeanDojo" ["e"=1]
"google-deepmind/funsearch" -> "lean-dojo/LeanCopilot" ["e"=1]
"ImperialCollegeLondon/formalising-mathematics-2024" -> "leanprover-community/NNG4"
"ImperialCollegeLondon/formalising-mathematics-2024" -> "b-mehta/formalising-mathematics-notes"
"ImperialCollegeLondon/formalising-mathematics-2024" -> "Paper-Proof/paperproof"
"ImperialCollegeLondon/formalising-mathematics-2024" -> "PatrickMassot/GlimpseOfLean"
"ImperialCollegeLondon/formalising-mathematics-2024" -> "zhangir-azerbayev/ProofNet"
"ImperialCollegeLondon/formalising-mathematics-2024" -> "loganrjmurphy/LeanEuclid"
"ImperialCollegeLondon/formalising-mathematics-2024" -> "HEPLean/PhysLean"
"ImperialCollegeLondon/formalising-mathematics-2024" -> "leanprover-community/repl"
"ImperialCollegeLondon/formalising-mathematics-2024" -> "ImperialCollegeLondon/FLT"
"Lean-zh/tp-lean-zh" -> "subfish-zhou/theorem_proving_in_lean4_zh_CN"
"ccz181078/Coq-BB5" -> "leanprover-community/lean-auto" ["e"=1]
"GAIR-NLP/MathPile" -> "lean-dojo/LeanDojo" ["e"=1]
"cmu-l3/llmlean" -> "leanprover-community/repl"
"cmu-l3/llmlean" -> "wellecks/llmstep"
"cmu-l3/llmlean" -> "siddhartha-gadgil/LeanAide"
"stanford-centaur/PyPantograph" -> "GasStationManager/LeanTool"
"stanford-centaur/PyPantograph" -> "leanprover-community/repl"
"stanford-centaur/PyPantograph" -> "project-numina/kimina-lean-server"
"stanford-centaur/PyPantograph" -> "lenianiva/Pantograph"
"stanford-centaur/PyPantograph" -> "kim-em/lean-training-data"
"InternLM/InternLM-Math" -> "zhaoyu-li/DL4TP" ["e"=1]
"InternLM/InternLM-Math" -> "deepseek-ai/DeepSeek-Prover-V1.5" ["e"=1]
"wiio12/LEGO-Prover" -> "rookie-joe/PDA"
"wiio12/LEGO-Prover" -> "Eleanor-H/MUSTARD"
"wiio12/LEGO-Prover" -> "xqyww123/Isa-Mini"
"AlexKontorovich/PrimeNumberTheoremAnd" -> "teorth/pfr"
"AlexKontorovich/PrimeNumberTheoremAnd" -> "lecopivo/SciLean"
"AlexKontorovich/PrimeNumberTheoremAnd" -> "avigad/mathematics_in_lean_source"
"teorth/symmetric_project" -> "teorth/pfr"
"HEPLean/PhysLean" -> "lecopivo/SciLean"
"HEPLean/PhysLean" -> "leanprover-community/lean-auto"
"HEPLean/PhysLean" -> "ImperialCollegeLondon/FLT"
"HEPLean/PhysLean" -> "fpvandoorn/carleson"
"HEPLean/PhysLean" -> "ufmg-smite/lean-smt"
"HEPLean/PhysLean" -> "emilyriehl/infinity-cosmos"
"HEPLean/PhysLean" -> "leanprover/reference-manual"
"HEPLean/PhysLean" -> "digama0/lean4lean"
"HEPLean/PhysLean" -> "leanprover/verso"
"HEPLean/PhysLean" -> "leanprover/doc-gen4"
"HEPLean/PhysLean" -> "leanprover-community/batteries"
"HEPLean/PhysLean" -> "34j/best-of-lean4"
"HEPLean/PhysLean" -> "leanprover-community/iris-lean"
"HEPLean/PhysLean" -> "cmu-l3/llmlean"
"HEPLean/PhysLean" -> "YaelDillies/LeanCamCombi"
"LMFDB/lmfdb" -> "leanprover-community/lean-perfectoid-spaces" ["e"=1]
"leanprover/verso" -> "leanprover/doc-gen4"
"leanprover/verso" -> "leanprover-community/lean4-metaprogramming-book"
"leanprover/verso" -> "leanprover/reference-manual"
"leanprover/verso" -> "leanprover-community/ProofWidgets4"
"leanprover/verso" -> "alexkeizer/QpfTypes"
"leanprover/verso" -> "leanprover/LeanInk"
"leanprover/verso" -> "leanprover-community/batteries"
"leanprover/verso" -> "leanprover-community/plausible"
"leanprover/verso" -> "digama0/lean4lean"
"leanprover/verso" -> "lecopivo/SciLean"
"leanprover/verso" -> "leanprover-community/aesop"
"leanprover/verso" -> "ufmg-smite/lean-smt"
"leanprover/verso" -> "dwrensha/animate-lean-proofs"
"leanprover/verso" -> "leanprover/SampCert"
"leanprover/verso" -> "leanprover-community/iris-lean"
"teorth/pfr" -> "teorth/symmetric_project"
"dwrensha/animate-lean-proofs" -> "nomeata/lean-calcify"
"zhaoyu-li/DL4TP" -> "j991222/ai4math-papers"
"zhaoyu-li/DL4TP" -> "loganrjmurphy/LeanEuclid"
"zhaoyu-li/DL4TP" -> "albertqjiang/draft_sketch_prove"
"zhaoyu-li/DL4TP" -> "rookie-joe/PDA"
"zhaoyu-li/DL4TP" -> "trishullab/PutnamBench"
"zhaoyu-li/DL4TP" -> "lean-dojo/ReProver"
"zhaoyu-li/DL4TP" -> "leanprover-community/lean-auto"
"zhaoyu-li/DL4TP" -> "Lizn-zn/NeqLIPS"
"zhaoyu-li/DL4TP" -> "leanprover-community/repl"
"zhaoyu-li/DL4TP" -> "wellecks/llmstep"
"zhaoyu-li/DL4TP" -> "Sphere-AI-Lab/FormalMATH-Bench"
"zhaoyu-li/DL4TP" -> "kim-em/lean-training-data"
"zhaoyu-li/DL4TP" -> "project-numina/kimina-lean-server"
"zhaoyu-li/DL4TP" -> "wiio12/LEGO-Prover"
"zhaoyu-li/DL4TP" -> "albertqjiang/INT"
"trishullab/PutnamBench" -> "dwrensha/compfiles"
"trishullab/PutnamBench" -> "zhangir-azerbayev/ProofNet"
"trishullab/PutnamBench" -> "kfdong/STP"
"trishullab/PutnamBench" -> "rookie-joe/PDA"
"trishullab/PutnamBench" -> "leanprover-community/repl"
"trishullab/PutnamBench" -> "project-numina/kimina-lean-server"
"fpvandoorn/carleson" -> "Ivan-Sergeyev/seymour"
"fpvandoorn/carleson" -> "nomeata/lean-calcify"
"rookie-joe/automatic-lean4-compilation" -> "rookie-joe/PDA"
"leanprover/LNSym" -> "draperlaboratory/ELFSage"
"leanprover/LNSym" -> "leanprover-community/lean-auto"
"leanprover/LNSym" -> "leanprover/leansat"
"albertqjiang/MMA" -> "rookie-joe/PDA"
"Eleanor-H/MUSTARD" -> "albertqjiang/draft_sketch_prove"
"Eleanor-H/MUSTARD" -> "chuanyang-Zheng/Lyra-theorem-prover"
"digama0/lean4lean" -> "leanprover-community/quote4"
"digama0/lean4lean" -> "ammkrn/nanoda_lib"
"digama0/lean4lean" -> "leanprover-community/aesop"
"digama0/lean4lean" -> "leanprover-community/lean-auto"
"digama0/lean4lean" -> "leanprover/lean4checker"
"digama0/lean4lean" -> "leanprover/doc-gen4"
"digama0/lean4lean" -> "leanprover-community/duper"
"digama0/lean4lean" -> "leanprover-community/batteries"
"digama0/lean4lean" -> "digama0/lean-type-theory"
"cmu-l3/ntptutorial-II" -> "jesse-michael-han/lean-tpe-public"
"deepseek-ai/DeepSeek-Prover-V1.5" -> "leanprover-community/repl"
"deepseek-ai/DeepSeek-Prover-V1.5" -> "lean-dojo/ReProver"
"deepseek-ai/DeepSeek-Prover-V1.5" -> "deepseek-ai/awesome-deepseek-coder" ["e"=1]
"deepseek-ai/DeepSeek-Prover-V1.5" -> "zhaoyu-li/DL4TP"
"deepseek-ai/DeepSeek-Prover-V1.5" -> "lean-dojo/LeanDojo"
"deepseek-ai/DeepSeek-Prover-V1.5" -> "deepseek-ai/ESFT" ["e"=1]
"deepseek-ai/DeepSeek-Prover-V1.5" -> "openai/miniF2F"
"deepseek-ai/DeepSeek-Prover-V1.5" -> "Goedel-LM/Goedel-Prover"
"deepseek-ai/DeepSeek-Prover-V1.5" -> "MoonshotAI/Kimina-Prover-Preview"
"deepseek-ai/DeepSeek-Prover-V1.5" -> "j991222/ai4math-papers"
"deepseek-ai/DeepSeek-Prover-V1.5" -> "InternLM/InternLM-Math" ["e"=1]
"deepseek-ai/DeepSeek-Prover-V1.5" -> "deepseek-ai/DeepSeek-MoE" ["e"=1]
"deepseek-ai/DeepSeek-Prover-V1.5" -> "trishullab/PutnamBench"
"deepseek-ai/DeepSeek-Prover-V1.5" -> "project-numina/kimina-lean-server"
"deepseek-ai/DeepSeek-Prover-V1.5" -> "dwrensha/compfiles"
"Crispher/MathlibExplorer" -> "leanprover-community/mathlib4"
"Crispher/MathlibExplorer" -> "subfish-zhou/theorem_proving_in_lean4_zh_CN"
"teorth/equational_theories" -> "ImperialCollegeLondon/FLT"
"teorth/equational_theories" -> "leanprover-community/aesop"
"teorth/equational_theories" -> "teorth/pfr"
"teorth/equational_theories" -> "leanprover/verso"
"teorth/equational_theories" -> "ufmg-smite/lean-smt"
"teorth/equational_theories" -> "dwrensha/compfiles"
"teorth/equational_theories" -> "pitmonticone/LeanProject"
"teorth/equational_theories" -> "dwrensha/animate-lean-proofs"
"teorth/equational_theories" -> "loganrjmurphy/LeanEuclid"
"teorth/equational_theories" -> "PatrickMassot/GlimpseOfLean"
"teorth/equational_theories" -> "leanprover-community/batteries"
"teorth/equational_theories" -> "lecopivo/SciLean"
"teorth/equational_theories" -> "kmill/lean4-raytracer"
"teorth/equational_theories" -> "leanprover/LNSym"
"teorth/equational_theories" -> "teorth/symmetric_project"
"project-numina/aimo-progress-prize" -> "microsoft/ToRA" ["e"=1]
"project-numina/aimo-progress-prize" -> "zhaoyu-li/DL4TP"
"project-numina/aimo-progress-prize" -> "tongyx361/Awesome-LLM4Math" ["e"=1]
"project-numina/aimo-progress-prize" -> "MoonshotAI/Kimina-Prover-Preview"
"project-numina/aimo-progress-prize" -> "MARIO-Math-Reasoning/Super_MARIO" ["e"=1]
"project-numina/aimo-progress-prize" -> "YuxiXie/MCTS-DPO" ["e"=1]
"project-numina/aimo-progress-prize" -> "InternLM/InternLM-Math" ["e"=1]
"project-numina/aimo-progress-prize" -> "leanprover-community/repl"
"project-numina/aimo-progress-prize" -> "AIMO-CMU-MATH/CMU_MATH-AIMO"
"project-numina/aimo-progress-prize" -> "hkust-nlp/dart-math" ["e"=1]
"project-numina/aimo-progress-prize" -> "ZubinGou/math-evaluation-harness" ["e"=1]
"project-numina/aimo-progress-prize" -> "dvlab-research/Step-DPO" ["e"=1]
"project-numina/aimo-progress-prize" -> "j991222/ai4math-papers"
"project-numina/aimo-progress-prize" -> "project-numina/kimina-lean-server"
"project-numina/aimo-progress-prize" -> "Goedel-LM/Goedel-Prover"
"deepseek-ai/ESFT" -> "deepseek-ai/DeepSeek-Prover-V1.5" ["e"=1]
"loganrjmurphy/LeanEuclid" -> "rookie-joe/PDA"
"loganrjmurphy/LeanEuclid" -> "jjdishere/EG"
"loganrjmurphy/LeanEuclid" -> "leanprover-community/repl"
"loganrjmurphy/LeanEuclid" -> "zhaoyu-li/DL4TP"
"loganrjmurphy/LeanEuclid" -> "Lizn-zn/NeqLIPS"
"rookie-joe/PDA" -> "rookie-joe/FormalAlign"
"rookie-joe/PDA" -> "rookie-joe/automatic-lean4-compilation"
"rookie-joe/PDA" -> "Miracle-Messi/Isa-AutoFormal"
"rookie-joe/FormalAlign" -> "rookie-joe/PDA"
"xqyww123/Isa-REPL" -> "xqyww123/Isa-Mini"
"GasStationManager/LeanTool" -> "stanford-centaur/PyPantograph"
"GasStationManager/LeanTool" -> "trishullab/itp-interface"
"dvlab-research/Mr-Ben" -> "rookie-joe/FormalAlign"
"dvlab-research/Mr-Ben" -> "zhxieml/remiss-jailbreak"
"xqyww123/Isa-Mini" -> "xqyww123/Isa-REPL"
"deepseek-ai/DeepSeek-Prover-V2" -> "deepseek-ai/DeepSeek-Prover-V1.5"
"deepseek-ai/DeepSeek-Prover-V2" -> "MoonshotAI/Kimina-Prover-Preview"
"deepseek-ai/DeepSeek-Prover-V2" -> "project-numina/kimina-lean-server"
"deepseek-ai/DeepSeek-Prover-V2" -> "deepseek-ai/EPLB" ["e"=1]
"deepseek-ai/DeepSeek-Prover-V2" -> "lean-dojo/LeanCopilot"
"deepseek-ai/DeepSeek-Prover-V2" -> "XiaomiMiMo/MiMo" ["e"=1]
"deepseek-ai/DeepSeek-Prover-V2" -> "Goedel-LM/Goedel-Prover"
"deepseek-ai/DeepSeek-Prover-V2" -> "dwrensha/compfiles"
"deepseek-ai/DeepSeek-Prover-V2" -> "zhaoyu-li/DL4TP"
"deepseek-ai/DeepSeek-Prover-V2" -> "ByteDance-Seed/Seed-Thinking-v1.5" ["e"=1]
"deepseek-ai/DeepSeek-Prover-V2" -> "deepseek-ai/DualPipe" ["e"=1]
"deepseek-ai/DeepSeek-Prover-V2" -> "leanprover-community/mathlib4"
"deepseek-ai/DeepSeek-Prover-V2" -> "deepseek-ai/profile-data" ["e"=1]
"deepseek-ai/DeepSeek-Prover-V2" -> "zwhe99/DeepMath" ["e"=1]
"deepseek-ai/DeepSeek-Prover-V2" -> "stanford-centaur/PyPantograph"
"leanprover-community/mathlib3" -> "leanprover-community/mathlib4"
"leanprover-community/mathlib3" -> "leanprover-community/lean"
"leanprover-community/mathlib3" -> "leanprover/lean4"
"leanprover-community/mathlib3" -> "leanprover/lean3" ["e"=1]
"leanprover-community/mathlib3" -> "leanprover-community/batteries"
"leanprover-community/mathlib3" -> "leanprover-community/lean-liquid"
"leanprover-community/mathlib3" -> "lecopivo/SciLean"
"leanprover-community/mathlib3" -> "UniMath/UniMath" ["e"=1]
"leanprover-community/mathlib3" -> "leanprover/elan"
"leanprover-community/mathlib3" -> "leanprover-community/aesop"
"leanprover-community/mathlib3" -> "ImperialCollegeLondon/FLT"
"leanprover-community/mathlib3" -> "kbuzzard/xena"
"leanprover-community/mathlib3" -> "leanprover-community/lean4-metaprogramming-book"
"leanprover-community/mathlib3" -> "leanprover-community/tutorials"
"leanprover-community/mathlib3" -> "HoTT/Coq-HoTT" ["e"=1]
"XiaomiMiMo/MiMo" -> "deepseek-ai/DeepSeek-Prover-V2" ["e"=1]
"MoonshotAI/Kimina-Prover-Preview" -> "project-numina/kimina-lean-server"
"MoonshotAI/Kimina-Prover-Preview" -> "leanprover-community/repl"
"MoonshotAI/Kimina-Prover-Preview" -> "Sphere-AI-Lab/FormalMATH-Bench"
"MoonshotAI/Kimina-Prover-Preview" -> "trishullab/PutnamBench"
"MoonshotAI/Kimina-Prover-Preview" -> "kfdong/STP"
"MoonshotAI/Kimina-Prover-Preview" -> "Goedel-LM/Goedel-Prover"
"MoonshotAI/Kimina-Prover-Preview" -> "MoonshotAI/CombiBench"
"MoonshotAI/Kimina-Prover-Preview" -> "lean-dojo/ReProver"
"MoonshotAI/Kimina-Prover-Preview" -> "stanford-centaur/PyPantograph"
"MoonshotAI/Kimina-Prover-Preview" -> "j991222/ai4math-papers"
"MoonshotAI/Kimina-Prover-Preview" -> "deepseek-ai/DeepSeek-Prover-V1.5"
"MoonshotAI/Kimina-Prover-Preview" -> "lean-dojo/LeanDojo"
"MoonshotAI/Kimina-Prover-Preview" -> "loganrjmurphy/LeanEuclid"
"MoonshotAI/Kimina-Prover-Preview" -> "rookie-joe/PDA"
"MoonshotAI/Kimina-Prover-Preview" -> "zhangir-azerbayev/ProofNet"
"SkyworkAI/Skywork-OR1" -> "MoonshotAI/Kimina-Prover-Preview" ["e"=1]
"formalabstracts/formalabstracts" -> "leanprover-community/lean-perfectoid-spaces"
"formalabstracts/formalabstracts" -> "kbuzzard/lean-stacks-project"
"formalabstracts/formalabstracts" -> "ramonfmir/lean-scheme"
"formalabstracts/formalabstracts" -> "formalabstracts/CNL-CIC"
"formalabstracts/formalabstracts" -> "leanprover-community/format_lean"
"formalabstracts/formalabstracts" -> "flypitch/flypitch"
"formalabstracts/formalabstracts" -> "GaloisInc/lean4-balance-car"
"formalabstracts/formalabstracts" -> "IMO-grand-challenge/formal-encoding"
"MoonshotAI/Kimi-VL" -> "MoonshotAI/Kimina-Prover-Preview" ["e"=1]
"Goedel-LM/Goedel-Prover" -> "kfdong/STP"
"Goedel-LM/Goedel-Prover" -> "Sphere-AI-Lab/FormalMATH-Bench"
"Goedel-LM/Goedel-Prover" -> "MoonshotAI/Kimina-Prover-Preview"
"Goedel-LM/Goedel-Prover" -> "stanford-centaur/PyPantograph"
"Goedel-LM/Goedel-Prover" -> "project-numina/kimina-lean-server"
"Goedel-LM/Goedel-Prover" -> "deepseek-ai/DeepSeek-Prover-V1.5"
"Goedel-LM/Goedel-Prover" -> "lean-dojo/LeanDojo"
"Goedel-LM/Goedel-Prover" -> "roozbeh-yz/IMO-Steps"
"Goedel-LM/Goedel-Prover" -> "lean-dojo/ReProver"
"centerforaisafety/hle" -> "Goedel-LM/Goedel-Prover" ["e"=1]
"project-numina/kimina-lean-server" -> "MoonshotAI/CombiBench"
"project-numina/kimina-lean-server" -> "leanprover-community/repl"
"project-numina/kimina-lean-server" -> "albertqjiang/MMA"
"kfdong/STP" -> "trishullab/PutnamBench"
"varkor/quiver" ["l"="-21.888,-20.109", "c"=447]
"leanprover-community/mathlib3" ["l"="-21.457,-19.153"]
"leanprover/elan" ["l"="-21.412,-19.123"]
"leanprover-community/batteries" ["l"="-21.399,-19.146"]
"leanprover/vscode-lean4" ["l"="-21.392,-19.118"]
"leanprover-community/aesop" ["l"="-21.387,-19.145"]
"leanprover/verso" ["l"="-21.411,-19.165"]
"leanprover/theorem_proving_in_lean4" ["l"="-21.367,-19.094"]
"leanprover-community/ProofWidgets4" ["l"="-21.409,-19.135"]
"leanprover-community/mathematics_in_lean" ["l"="-21.372,-19.141"]
"lecopivo/SciLean" ["l"="-21.412,-19.151"]
"leanprover-community/lean" ["l"="-21.439,-19.129"]
"leanprover-community/lean-liquid" ["l"="-21.438,-19.091"]
"leanprover/vscode-lean" ["l"="-21.421,-19.082"]
"Julian/lean.nvim" ["l"="-21.398,-19.098"]
"leanprover-community/lean-perfectoid-spaces" ["l"="-21.453,-19.059"]
"leanprover-community/mathlib4" ["l"="-21.377,-19.186"]
"jesse-michael-han/lean-gptf" ["l"="-21.357,-19.121"]
"kbuzzard/xena" ["l"="-21.477,-19.092"]
"formalabstracts/formalabstracts" ["l"="-21.472,-19.039"]
"ImperialCollegeLondon/natural_number_game" ["l"="-21.457,-19.096"]
"ImperialCollegeLondon/M40001_lean" ["l"="-21.513,-19.09"]
"leanprover-community/lftcm2020" ["l"="-21.474,-19.107"]
"ramonfmir/lean-scheme" ["l"="-21.467,-19.056"]
"mpedramfar/Lean-game-maker" ["l"="-21.499,-19.072"]
"ImperialCollegeLondon/real-number-game" ["l"="-21.499,-19.088"]
"ImperialCollegeLondon/M4P33" ["l"="-21.544,-19.1"]
"leanprover-community/tutorials" ["l"="-21.436,-19.104"]
"ImperialCollegeLondon/formalising-mathematics-2022" ["l"="-21.499,-19.11"]
"kbuzzard/lean-stacks-project" ["l"="-21.467,-19.07"]
"rocq-prover/rocq" ["l"="-22.311,-19.446", "c"=392]
"leanprover/lean4" ["l"="-21.469,-19.222"]
"leanprover/lean3" ["l"="-22.268,-19.388", "c"=392]
"agda/agda" ["l"="-21.963,-20.135", "c"=447]
"idris-lang/Idris2" ["l"="-22.422,-21.627", "c"=474]
"koka-lang/koka" ["l"="-22.47,-21.657", "c"=474]
"FStarLang/FStar" ["l"="-22.298,-19.414", "c"=392]
"HigherOrderCO/Kind" ["l"="-22.459,-21.626", "c"=474]
"Z3Prover/z3" ["l"="-45.232,-34.368", "c"=282]
"HigherOrderCO/HVM" ["l"="-22.441,-21.573", "c"=474]
"ImperialCollegeLondon/FLT" ["l"="-21.396,-19.179"]
"leanprover-community/lean4-metaprogramming-book" ["l"="-21.396,-19.134"]
"teorth/pfr" ["l"="-21.466,-19.181"]
"ImperialCollegeLondon/formalising-mathematics" ["l"="-21.459,-19.122"]
"vEnhance/napkin" ["l"="-21.845,-20.045", "c"=447]
"plastex/plastex" ["l"="-4.259,21.923", "c"=276]
"PatrickMassot/leanblueprint" ["l"="-21.379,-19.204"]
"digama0/lean-type-theory" ["l"="-21.391,-19.08"]
"digama0/lean4lean" ["l"="-21.385,-19.13"]
"leanprover/lean4-cli" ["l"="-21.395,-19.067"]
"flypitch/flypitch" ["l"="-21.445,-19.039"]
"b-mehta/topos" ["l"="-21.484,-19.059"]
"jasonrute/lean_proof_recording" ["l"="-21.311,-19.125"]
"openai/lean-gym" ["l"="-21.31,-19.146"]
"leanprover-community/format_lean" ["l"="-21.503,-19.046"]
"kmill/lean4-raytracer" ["l"="-21.435,-19.146"]
"digama0/mm0" ["l"="-21.416,-19.058"]
"ryankeleti/ega" ["l"="-21.956,-20.071", "c"=447]
"formalabstracts/CNL-CIC" ["l"="-21.511,-19.017"]
"princeton-vl/CoqGym" ["l"="-22.227,-19.433", "c"=392]
"zhangir-azerbayev/ProofNet" ["l"="-21.296,-19.158"]
"stanford-centaur/PyPantograph" ["l"="-21.255,-19.122"]
"Deducteam/Dedukti" ["l"="-22.19,-19.318", "c"=392]
"metamath/set.mm" ["l"="-21.419,-18.957"]
"cpitclaudel/alectryon" ["l"="-22.172,-19.485", "c"=392]
"leanprover-community/quote4" ["l"="-21.405,-19.11"]
"metamath/metamath-exe" ["l"="-21.412,-18.979"]
"digama0/mmj2" ["l"="-21.439,-18.948"]
"metamath/metamath-knife" ["l"="-21.432,-18.93"]
"b-mehta/maths-notes" ["l"="-21.545,-19.021"]
"Name-Kompsky/tripos" ["l"="-21.569,-19.009"]
"cmu-phil/Spectral" ["l"="-21.49,-19.02"]
"IMO-grand-challenge/formal-encoding" ["l"="-21.47,-19.012"]
"kim-em/lean-category-theory" ["l"="-21.45,-19.008"]
"metamath/metamath-book" ["l"="-21.394,-18.962"]
"expln/metamath-lamp" ["l"="-21.402,-18.949"]
"Naproche-SAD/Naproche-SAD" ["l"="-21.533,-18.991"]
"bgavran/Category_Theory_Machine_Learning" ["l"="-21.953,-19.993", "c"=447]
"dalcde/cam-notes" ["l"="-4.582,22.091", "c"=276]
"seL4/l4v" ["l"="-22.22,-19.361", "c"=392]
"seL4/isabelle" ["l"="-21.45,-18.913"]
"ImperialCollegeLondon/group-theory-game" ["l"="-21.527,-19.066"]
"hrmacbeth/math2001" ["l"="-21.395,-19.159"]
"avigad/mathematics_in_lean_source" ["l"="-21.423,-19.182"]
"PatrickMassot/GlimpseOfLean" ["l"="-21.365,-19.171"]
"dwrensha/compfiles" ["l"="-21.333,-19.161"]
"Paper-Proof/paperproof" ["l"="-21.372,-19.159"]
"leanprover-community/lean4game" ["l"="-21.358,-19.134"]
"trishullab/PutnamBench" ["l"="-21.293,-19.141"]
"leanprover-community/NNG4" ["l"="-21.371,-19.119"]
"dominique-unruh/scala-isabelle" ["l"="-21.181,-19.173"]
"inpefess/isabelle-client" ["l"="-21.148,-19.17"]
"leanprover/LeanInk" ["l"="-21.421,-19.134"]
"ImperialCollegeLondon/complex-number-game" ["l"="-21.555,-19.079"]
"ImperialCollegeLondon/Example-Lean-Projects" ["l"="-21.543,-19.066"]
"kex-y/M4000x_LEAN_formalisation" ["l"="-21.533,-19.083"]
"lean-dojo/LeanCopilot" ["l"="-21.33,-19.175"]
"Crispher/MathlibExplorer" ["l"="-21.351,-19.28"]
"lean-dojo/LeanDojo" ["l"="-21.303,-19.189"]
"leanprover-community/lean-auto" ["l"="-21.353,-19.163"]
"leanprover/doc-gen4" ["l"="-21.425,-19.158"]
"leanprover-community/duper" ["l"="-21.357,-19.149"]
"leanprover-community/repl" ["l"="-21.31,-19.161"]
"ufmg-smite/lean-smt" ["l"="-21.388,-19.17"]
"siddhartha-gadgil/LeanAide" ["l"="-21.35,-19.201"]
"leanprover/lake" ["l"="-21.379,-19.1"]
"ImperialCollegeLondon/formalising-mathematics-2023" ["l"="-21.518,-19.121"]
"avigad/lamr" ["l"="-21.443,-19.173"]
"zhangir-azerbayev/lean-chat" ["l"="-21.524,-19.138"]
"IPDSnelting/tba-2021" ["l"="-21.487,-19.125"]
"wellecks/naturalproofs" ["l"="-21.136,-19.268"]
"wellecks/naturalprover" ["l"="-21.188,-19.242"]
"wellecks/mgs" ["l"="-21.113,-19.28"]
"argumentcomputer/yatima" ["l"="-21.372,-19.071"]
"mk12/vim-lean" ["l"="-21.384,-19.051"]
"whonore/Coqtail" ["l"="-22.173,-19.468", "c"=392]
"leanprover-community/lean4-mode" ["l"="-21.384,-19.028"]
"hendrycks/math" ["l"="37.364,-0.251", "c"=126]
"openai/miniF2F" ["l"="-21.302,-19.171"]
"facebookresearch/miniF2F" ["l"="-21.269,-19.189"]
"lean-dojo/ReProver" ["l"="-21.285,-19.182"]
"wiio12/LEGO-Prover" ["l"="-21.246,-19.206"]
"deepseek-ai/DeepSeek-Prover-V1.5" ["l"="-21.28,-19.153"]
"jesse-michael-han/lean-step-public" ["l"="-21.302,-19.114"]
"albertqjiang/draft_sketch_prove" ["l"="-21.27,-19.167"]
"yangky11/miniF2F-lean4" ["l"="-21.263,-19.202"]
"j991222/ai4math-papers" ["l"="-21.259,-19.178"]
"patrik-cihal/lean-graph" ["l"="-21.372,-19.249"]
"dwrensha/animate-lean-proofs" ["l"="-21.402,-19.229"]
"PatrickMassot/verbose-lean4" ["l"="-21.382,-19.265"]
"frenzymath/jixia" ["l"="-21.328,-19.147"]
"haruhisa-enomoto/mathlib4-all-tactics" ["l"="-21.423,-19.202"]
"lurk-lab/lurk-beta" ["l"="-18.751,12.911", "c"=173]
"raphlinus/ghilbert" ["l"="-21.412,-18.918"]
"david-a-wheeler/mmverify.py" ["l"="-21.395,-18.929"]
"sorear/metamath-turing-machines" ["l"="-21.421,-18.885"]
"awslabs/s2n-bignum" ["l"="-18.856,-25.465", "c"=10]
"leanprover/LNSym" ["l"="-21.367,-19.229"]
"leanprover/reference-manual" ["l"="-21.426,-19.17"]
"leanprover-community/lean4web" ["l"="-21.338,-19.111"]
"albertqjiang/Portal-to-ISAbelle" ["l"="-21.246,-19.175"]
"leanprover-community/lean-client-python" ["l"="-21.317,-19.102"]
"wellecks/llmstep" ["l"="-21.286,-19.196"]
"kim-em/lean-training-data" ["l"="-21.275,-19.175"]
"dselsam/binport" ["l"="-21.425,-19.11"]
"siddhartha-gadgil/Saturn" ["l"="-21.433,-19.216"]
"Seasawher/mdgen" ["l"="-21.456,-19.256"]
"jesse-michael-han/lean-tpe-public" ["l"="-21.282,-19.1"]
"zhangir-azerbayev/repl" ["l"="-21.296,-19.086"]
"HEPLean/PhysLean" ["l"="-21.395,-19.198"]
"sagemath/sage-archive-2023-02-01" ["l"="20.576,14.204", "c"=1146]
"albertqjiang/INT" ["l"="-21.219,-19.167"]
"argumentcomputer/LSpec" ["l"="-21.348,-19.028"]
"sgraf812/mpl" ["l"="-21.384,-19.225"]
"leanprover-community/iris-lean" ["l"="-21.442,-19.197"]
"marcusrossel/lean-egg" ["l"="-21.419,-19.236"]
"alexkeizer/QpfTypes" ["l"="-21.472,-19.197"]
"JamesGallicchio/LeanColls" ["l"="-21.506,-19.224"]
"eric-wieser/lean-matrix-cookbook" ["l"="-21.334,-19.197"]
"ammkrn/nanoda_lib" ["l"="-21.336,-19.131"]
"subfish-zhou/theorem_proving_in_lean4_zh_CN" ["l"="-21.345,-19.329"]
"Lean-zh/tp-lean-zh" ["l"="-21.344,-19.351"]
"leanprover-community/plausible" ["l"="-21.455,-19.192"]
"tydeu/lean4-alloy" ["l"="-21.544,-19.246"]
"BartoszPiotrowski/lean-premise-selection" ["l"="-21.156,-19.245"]
"ai4reason/ATP_Proofs" ["l"="-21.168,-19.257"]
"T-Brick/c0deine" ["l"="-21.864,-19.226", "c"=392]
"emilyriehl/infinity-cosmos" ["l"="-21.409,-19.213"]
"sagemath/sage" ["l"="-45.545,-34.669", "c"=282]
"mrcjkb/haskell-tools.nvim" ["l"="-20.624,-20.121", "c"=118]
"adamyedidia/parsimony" ["l"="-21.423,-18.836"]
"lupantech/dl4math" ["l"="37.487,-0.344", "c"=126]
"zhaoyu-li/DL4TP" ["l"="-21.259,-19.165"]
"EleutherAI/math-lm" ["l"="-21.265,-19.229"]
"microsoft/ToRA" ["l"="37.411,-0.365", "c"=126]
"openai/prm800k" ["l"="37.238,-0.297", "c"=126]
"TIGER-AI-Lab/MAmmoTH" ["l"="37.513,-0.334", "c"=126]
"mathllm/MathCoder" ["l"="37.462,-0.358", "c"=126]
"ZubinGou/math-evaluation-harness" ["l"="37.388,-0.402", "c"=126]
"GAIR-NLP/MathPile" ["l"="37.527,-0.432", "c"=126]
"hhu-adam/Robo" ["l"="-21.341,-19.095"]
"leanprover/SampCert" ["l"="-21.353,-19.107"]
"hhu-adam/GameSkeleton" ["l"="-21.326,-19.083"]
"project-numina/kimina-lean-server" ["l"="-21.27,-19.143"]
"loganrjmurphy/LeanEuclid" ["l"="-21.289,-19.171"]
"YaelDillies/LeanCamCombi" ["l"="-21.35,-19.221"]
"meta-math/MetaMath" ["l"="37.38,-0.387", "c"=126]
"Sphere-AI-Lab/FormalMATH-Bench" ["l"="-21.231,-19.133"]
"optsuite/optlib" ["l"="-21.191,-19.197"]
"jjdishere/EG" ["l"="-21.216,-19.196"]
"damek/gd-lean" ["l"="-21.157,-19.204"]
"Goedel-LM/Goedel-Prover" ["l"="-21.259,-19.138"]
"project-numina/aimo-progress-prize" ["l"="-21.216,-19.143"]
"lean-dojo/LeanDojoChatGPT" ["l"="-21.29,-19.218"]
"teorth/equational_theories" ["l"="-21.408,-19.193"]
"ImperialCollegeLondon/formalising-mathematics-2024" ["l"="-21.347,-19.182"]
"wellecks/ntptutorial" ["l"="-21.238,-19.163"]
"cmu-l3/ntptutorial-II" ["l"="-21.236,-19.107"]
"MoonshotAI/Kimina-Prover-Preview" ["l"="-21.258,-19.151"]
"albertqjiang/MMA" ["l"="-21.229,-19.178"]
"rookie-joe/PDA" ["l"="-21.246,-19.189"]
"chuanyang-Zheng/Lyra-theorem-prover" ["l"="-21.215,-19.181"]
"Eleanor-H/MUSTARD" ["l"="-21.232,-19.193"]
"lean-ja/lean-by-example" ["l"="-21.527,-19.174"]
"FormalizedFormalLogic/Foundation" ["l"="-21.482,-19.166"]
"cmu-l3/ntp-toolkit" ["l"="-21.236,-19.217"]
"cmu-l3/llmlean" ["l"="-21.321,-19.218"]
"nomeata/loogle" ["l"="-21.472,-19.134"]
"djvelleman/STG4" ["l"="-21.343,-19.071"]
"fpvandoorn/carleson" ["l"="-21.404,-19.249"]
"deepseek-ai/DeepSeek-Math" ["l"="39.016,-0.838", "c"=39]
"google-deepmind/alphageometry" ["l"="38.804,-0.866", "c"=39]
"deepseek-ai/awesome-deepseek-coder" ["l"="39.042,-0.774", "c"=39]
"deepseek-ai/DeepSeek-MoE" ["l"="38.899,-0.682", "c"=39]
"google-deepmind/funsearch" ["l"="51.14,26.537", "c"=490]
"b-mehta/formalising-mathematics-notes" ["l"="-21.33,-19.241"]
"ccz181078/Coq-BB5" ["l"="-22.085,-19.505", "c"=392]
"GasStationManager/LeanTool" ["l"="-21.229,-19.087"]
"lenianiva/Pantograph" ["l"="-21.214,-19.096"]
"InternLM/InternLM-Math" ["l"="38.763,-1.817", "c"=202]
"xqyww123/Isa-Mini" ["l"="-21.221,-19.25"]
"AlexKontorovich/PrimeNumberTheoremAnd" ["l"="-21.489,-19.182"]
"teorth/symmetric_project" ["l"="-21.493,-19.2"]
"34j/best-of-lean4" ["l"="-21.428,-19.273"]
"LMFDB/lmfdb" ["l"="-21.888,-20.045", "c"=447]
"nomeata/lean-calcify" ["l"="-21.408,-19.269"]
"Lizn-zn/NeqLIPS" ["l"="-21.238,-19.149"]
"kfdong/STP" ["l"="-21.26,-19.109"]
"Ivan-Sergeyev/seymour" ["l"="-21.412,-19.292"]
"rookie-joe/automatic-lean4-compilation" ["l"="-21.222,-19.209"]
"draperlaboratory/ELFSage" ["l"="-21.354,-19.257"]
"leanprover/leansat" ["l"="-21.377,-19.288"]
"leanprover/lean4checker" ["l"="-21.355,-19.076"]
"deepseek-ai/ESFT" ["l"="39.042,-0.74", "c"=39]
"pitmonticone/LeanProject" ["l"="-21.435,-19.25"]
"tongyx361/Awesome-LLM4Math" ["l"="37.429,-0.382", "c"=126]
"MARIO-Math-Reasoning/Super_MARIO" ["l"="37.323,-0.416", "c"=126]
"YuxiXie/MCTS-DPO" ["l"="37.317,-0.397", "c"=126]
"AIMO-CMU-MATH/CMU_MATH-AIMO" ["l"="-21.165,-19.127"]
"hkust-nlp/dart-math" ["l"="37.443,-0.346", "c"=126]
"dvlab-research/Step-DPO" ["l"="37.324,-0.361", "c"=126]
"rookie-joe/FormalAlign" ["l"="-21.216,-19.226"]
"Miracle-Messi/Isa-AutoFormal" ["l"="-21.208,-19.21"]
"xqyww123/Isa-REPL" ["l"="-21.212,-19.272"]
"trishullab/itp-interface" ["l"="-21.208,-19.063"]
"dvlab-research/Mr-Ben" ["l"="-21.185,-19.271"]
"zhxieml/remiss-jailbreak" ["l"="-21.168,-19.297"]
"deepseek-ai/DeepSeek-Prover-V2" ["l"="-21.282,-19.119"]
"deepseek-ai/EPLB" ["l"="39.084,-0.577", "c"=39]
"XiaomiMiMo/MiMo" ["l"="37.168,-0.572", "c"=126]
"ByteDance-Seed/Seed-Thinking-v1.5" ["l"="37.217,-0.551", "c"=126]
"deepseek-ai/DualPipe" ["l"="39.097,-0.553", "c"=39]
"deepseek-ai/profile-data" ["l"="39.065,-0.58", "c"=39]
"zwhe99/DeepMath" ["l"="37.344,-0.543", "c"=126]
"UniMath/UniMath" ["l"="-21.94,-20.103", "c"=447]
"HoTT/Coq-HoTT" ["l"="-21.935,-20.123", "c"=447]
"MoonshotAI/CombiBench" ["l"="-21.238,-19.123"]
"SkyworkAI/Skywork-OR1" ["l"="37.265,-0.507", "c"=126]
"GaloisInc/lean4-balance-car" ["l"="-21.494,-18.997"]
"MoonshotAI/Kimi-VL" ["l"="47.261,30.105", "c"=254]
"roozbeh-yz/IMO-Steps" ["l"="-21.216,-19.115"]
"centerforaisafety/hle" ["l"="37.358,-0.346", "c"=126]
}