digraph G {
"btford/write-good" -> "kdzwinel/Proofreader" ["e"=1]
"philipperemy/name-dataset" -> "smashew/NameDatabases"
"philipperemy/name-dataset" -> "solvenium/names-dataset"
"philipperemy/name-dataset" -> "keredson/wordninja"
"philipperemy/name-dataset" -> "openvenues/pypostal" ["e"=1]
"philipperemy/name-dataset" -> "sigpwned/popular-names-by-country-dataset"
"philipperemy/name-dataset" -> "carltonnorthern/nicknames"
"philipperemy/name-dataset" -> "treyhunner/names"
"philipperemy/name-dataset" -> "datamade/probablepeople" ["e"=1]
"philipperemy/name-dataset" -> "appeler/ethnicolr" ["e"=1]
"philipperemy/name-dataset" -> "MatthiasWinkelmann/firstname-database"
"philipperemy/name-dataset" -> "mammothb/symspellpy"
"philipperemy/name-dataset" -> "neuspell/neuspell"
"philipperemy/name-dataset" -> "MaartenGr/PolyFuzz" ["e"=1]
"LibreOffice/dictionaries" -> "wooorm/dictionaries"
"LibreOffice/dictionaries" -> "hunspell/hunspell"
"LibreOffice/dictionaries" -> "aarondandy/WeCantSpell.Hunspell"
"ztane/python-Levenshtein" -> "mammothb/symspellpy" ["e"=1]
"Wulf/nodehun" -> "kdzwinel/Proofreader"
"Wulf/nodehun" -> "GitbookIO/hunspell-spellchecker"
"Wulf/nodehun" -> "wooorm/nspell"
"Wulf/nodehun" -> "mscdex/spellcheck"
"google-research-datasets/paws" -> "google-research/lasertagger" ["e"=1]
"smashew/NameDatabases" -> "aakashkag/People-Name-List"
"smashew/NameDatabases" -> "philipperemy/name-dataset"
"liuhuanyong/WordMultiSenseDisambiguation" -> "luofuli/word-sense-disambiguation" ["e"=1]
"myint/language-check" -> "jxmorris12/language_tool_python" ["e"=1]
"myint/language-check" -> "bencmbrook/grammar-checker"
"myint/language-check" -> "atpaino/deep-text-corrector"
"myint/language-check" -> "chrisjbryant/errant"
"myint/language-check" -> "viraja1/grammar-check"
"myint/language-check" -> "bakwc/JamSpell"
"myint/language-check" -> "ian-beaver/pycontractions"
"cfinke/Typo.js" -> "wooorm/nspell"
"cfinke/Typo.js" -> "Wulf/nodehun"
"cfinke/Typo.js" -> "GitbookIO/hunspell-spellchecker"
"cfinke/Typo.js" -> "atom/node-spellchecker" ["e"=1]
"cfinke/Typo.js" -> "wooorm/dictionaries"
"cfinke/Typo.js" -> "badsyntax/jquery-spellchecker"
"wolfgarbe/SymSpell" -> "mammothb/symspellpy"
"wolfgarbe/SymSpell" -> "bakwc/JamSpell"
"wolfgarbe/SymSpell" -> "barrust/pyspellchecker"
"wolfgarbe/SymSpell" -> "hunspell/hunspell"
"wolfgarbe/SymSpell" -> "neuspell/neuspell"
"wolfgarbe/SymSpell" -> "huggingface/neuralcoref" ["e"=1]
"wolfgarbe/SymSpell" -> "atpaino/deep-text-corrector"
"wolfgarbe/SymSpell" -> "flairNLP/flair" ["e"=1]
"wolfgarbe/SymSpell" -> "makcedward/nlpaug" ["e"=1]
"wolfgarbe/SymSpell" -> "allenai/allennlp" ["e"=1]
"wolfgarbe/SymSpell" -> "wolfgarbe/PruningRadixTrie" ["e"=1]
"wolfgarbe/SymSpell" -> "kpu/kenlm" ["e"=1]
"wolfgarbe/SymSpell" -> "google/sentencepiece" ["e"=1]
"wolfgarbe/SymSpell" -> "R1j1t/contextualSpellCheck"
"wolfgarbe/SymSpell" -> "hermitdave/FrequencyWords" ["e"=1]
"roy-ht/editdistance" -> "mammothb/symspellpy" ["e"=1]
"grammatical/pretraining-bea2019" -> "kakaobrain/helo-word"
"grammatical/pretraining-bea2019" -> "butsugiri/gec-pseudodata"
"grammatical/pretraining-bea2019" -> "grammatical/neural-naacl2018"
"barrust/pyspellchecker" -> "mammothb/symspellpy"
"barrust/pyspellchecker" -> "filyp/autocorrect"
"barrust/pyspellchecker" -> "bakwc/JamSpell"
"barrust/pyspellchecker" -> "R1j1t/contextualSpellCheck"
"barrust/pyspellchecker" -> "wolfgarbe/SymSpell"
"barrust/pyspellchecker" -> "jxmorris12/language_tool_python" ["e"=1]
"barrust/pyspellchecker" -> "pyhunspell/pyhunspell"
"barrust/pyspellchecker" -> "pyenchant/pyenchant"
"barrust/pyspellchecker" -> "keredson/wordninja"
"barrust/pyspellchecker" -> "neuspell/neuspell"
"barrust/pyspellchecker" -> "mhagiwara/github-typo-corpus"
"barrust/pyspellchecker" -> "hermitdave/FrequencyWords" ["e"=1]
"barrust/pyspellchecker" -> "kootenpv/contractions"
"barrust/pyspellchecker" -> "hunspell/hunspell"
"barrust/pyspellchecker" -> "zverok/spylls"
"bjascob/LemmInflect" -> "bjascob/pyInflect"
"bjascob/LemmInflect" -> "jenojp/negspacy" ["e"=1]
"bakwc/JamSpell" -> "R1j1t/contextualSpellCheck"
"bakwc/JamSpell" -> "barrust/pyspellchecker"
"bakwc/JamSpell" -> "neuspell/neuspell"
"bakwc/JamSpell" -> "mammothb/symspellpy"
"bakwc/JamSpell" -> "wolfgarbe/SymSpell"
"bakwc/JamSpell" -> "IlyaGusev/rnnmorph" ["e"=1]
"bakwc/JamSpell" -> "VKCOM/YouTokenToMe" ["e"=1]
"bakwc/JamSpell" -> "mhagiwara/github-typo-corpus"
"bakwc/JamSpell" -> "dkulagin/kartaslov" ["e"=1]
"bakwc/JamSpell" -> "vlarine/transformers-ru" ["e"=1]
"bakwc/JamSpell" -> "hunspell/hunspell"
"bakwc/JamSpell" -> "MajorTal/DeepSpell"
"bakwc/JamSpell" -> "snakers4/open_stt" ["e"=1]
"bakwc/JamSpell" -> "odaykhovskaya/obscene_words_ru" ["e"=1]
"bakwc/JamSpell" -> "atpaino/deep-text-corrector"
"explosion/spacy-stanza" -> "bjascob/LemmInflect" ["e"=1]
"mammothb/symspellpy" -> "wolfgarbe/SymSpell"
"mammothb/symspellpy" -> "barrust/pyspellchecker"
"mammothb/symspellpy" -> "bakwc/JamSpell"
"mammothb/symspellpy" -> "neuspell/neuspell"
"mammothb/symspellpy" -> "R1j1t/contextualSpellCheck"
"mammothb/symspellpy" -> "filyp/autocorrect"
"mammothb/symspellpy" -> "atpaino/deep-text-corrector"
"mammothb/symspellpy" -> "MSeal/cython_hunspell"
"mammothb/symspellpy" -> "luozhouyang/python-string-similarity" ["e"=1]
"mammothb/symspellpy" -> "glample/fastBPE" ["e"=1]
"mammothb/symspellpy" -> "mhagiwara/github-typo-corpus"
"mammothb/symspellpy" -> "roy-ht/editdistance" ["e"=1]
"mammothb/symspellpy" -> "MajorTal/DeepSpell"
"mammothb/symspellpy" -> "chrisjbryant/errant"
"mammothb/symspellpy" -> "grammarly/gector"
"luozhouyang/python-string-similarity" -> "mammothb/symspellpy" ["e"=1]
"alvations/pywsd" -> "google-research-datasets/word_sense_disambigation_corpora"
"alvations/pywsd" -> "luofuli/word-sense-disambiguation" ["e"=1]
"alvations/pywsd" -> "Sshanu/Hierarchical-Word-Sense-Disambiguation-using-WordNet-Senses"
"alvations/pywsd" -> "orenmel/context2vec" ["e"=1]
"alvations/pywsd" -> "getalp/disambiguate"
"alvations/pywsd" -> "asoroa/ukb" ["e"=1]
"alvations/pywsd" -> "liuhuanyong/WordMultiSenseDisambiguation"
"alvations/pywsd" -> "gsi-upm/sematch" ["e"=1]
"alvations/pywsd" -> "dice-group/AGDISTIS" ["e"=1]
"alvations/pywsd" -> "snkim/AutomaticKeyphraseExtraction" ["e"=1]
"alvations/pywsd" -> "explosion/sense2vec" ["e"=1]
"alvations/pywsd" -> "atpaino/deep-text-corrector"
"alvations/pywsd" -> "lalchand-pandia/Word-Sense-Disambiguation-by-learning-long-term-dependencies"
"alvations/pywsd" -> "pippokill/lesk-wsd-dsm"
"alvations/pywsd" -> "Kyubyong/word_prediction" ["e"=1]
"rspeer/wordfreq" -> "gutfeeling/word_forms" ["e"=1]
"rspeer/wordfreq" -> "wolfgarbe/SymSpell" ["e"=1]
"pyhunspell/pyhunspell" -> "MSeal/cython_hunspell"
"jfilter/clean-text" -> "kootenpv/contractions" ["e"=1]
"rrthomas/enchant" -> "GNUAspell/aspell"
"rrthomas/enchant" -> "pyenchant/pyenchant"
"rrthomas/enchant" -> "keisks/jfleg"
"chrisjbryant/lmgec-lite" -> "nusnlp/smtgec2017"
"kanyun-inc/fairseq-gec" -> "awasthiabhijeet/PIE"
"kanyun-inc/fairseq-gec" -> "nusnlp/mlconvgec2018"
"kanyun-inc/fairseq-gec" -> "butsugiri/gec-pseudodata"
"kanyun-inc/fairseq-gec" -> "kanekomasahiro/bert-gec"
"kanyun-inc/fairseq-gec" -> "chrisjbryant/errant"
"kanyun-inc/fairseq-gec" -> "grammatical/neural-naacl2018"
"kanyun-inc/fairseq-gec" -> "rgcottrell/pytorch-human-performance-gec"
"kanyun-inc/fairseq-gec" -> "grammatical/pretraining-bea2019"
"kanyun-inc/fairseq-gec" -> "nusnlp/m2scorer"
"kanyun-inc/fairseq-gec" -> "kakaobrain/helo-word"
"kanyun-inc/fairseq-gec" -> "keisks/jfleg"
"kanyun-inc/fairseq-gec" -> "nusnlp/neuqe"
"kanyun-inc/fairseq-gec" -> "nusnlp/crosentgec"
"kanyun-inc/fairseq-gec" -> "grammatical/baselines-emnlp2016"
"kanyun-inc/fairseq-gec" -> "grammarly/gector"
"bjascob/pyInflect" -> "bjascob/LemmInflect"
"nusnlp/mlconvgec2018" -> "grammatical/neural-naacl2018"
"nusnlp/mlconvgec2018" -> "grammatical/baselines-emnlp2016"
"nusnlp/mlconvgec2018" -> "kanyun-inc/fairseq-gec"
"nusnlp/mlconvgec2018" -> "rgcottrell/pytorch-human-performance-gec"
"nusnlp/mlconvgec2018" -> "keisks/jfleg"
"nusnlp/mlconvgec2018" -> "kanekomasahiro/bert-gec"
"nusnlp/mlconvgec2018" -> "nusnlp/neuqe"
"nusnlp/mlconvgec2018" -> "chrisjbryant/errant"
"nusnlp/mlconvgec2018" -> "nusnlp/nbest-reranker"
"nusnlp/mlconvgec2018" -> "nusnlp/m2scorer"
"nusnlp/mlconvgec2018" -> "nusnlp/smtgec2017"
"nusnlp/mlconvgec2018" -> "nusnlp/crosentgec"
"nusnlp/mlconvgec2018" -> "awasthiabhijeet/PIE"
"nusnlp/mlconvgec2018" -> "grammatical/pretraining-bea2019"
"nusnlp/mlconvgec2018" -> "getao/human-performance-gec"
"getalp/disambiguate" -> "getalp/UFSAC"
"getalp/disambiguate" -> "uhh-lt/bert-sense"
"getalp/disambiguate" -> "danlou/LMMS"
"getalp/disambiguate" -> "SI3P/supWSD"
"grantjenks/python-runstats" -> "grantjenks/python-tribool"
"emanuelegiona/neural_WSD" -> "cltl/wsd-dynamic-sense-vector"
"Sshanu/Hierarchical-Word-Sense-Disambiguation-using-WordNet-Senses" -> "lalchand-pandia/Word-Sense-Disambiguation-by-learning-long-term-dependencies"
"danlou/LMMS" -> "uhh-lt/bert-sense"
"danlou/LMMS" -> "getalp/disambiguate"
"danlou/LMMS" -> "getalp/UFSAC"
"danlou/LMMS" -> "HSLCY/GlossBERT"
"danlou/LMMS" -> "SapienzaNLP/ewiser"
"danlou/LMMS" -> "malllabiisc/EWISE"
"grammatical/neural-naacl2018" -> "nusnlp/mlconvgec2018"
"grammatical/neural-naacl2018" -> "grammatical/baselines-emnlp2016"
"grammatical/neural-naacl2018" -> "grammatical/pretraining-bea2019"
"grammatical/neural-naacl2018" -> "keisks/jfleg"
"grammatical/neural-naacl2018" -> "nusnlp/nbest-reranker"
"grammatical/neural-naacl2018" -> "kanyun-inc/fairseq-gec"
"grammatical/neural-naacl2018" -> "nusnlp/neuqe"
"grammatical/neural-naacl2018" -> "getao/human-performance-gec"
"grammatical/neural-naacl2018" -> "rgcottrell/pytorch-human-performance-gec"
"grammatical/neural-naacl2018" -> "butsugiri/gec-pseudodata"
"grammatical/neural-naacl2018" -> "nusnlp/smtgec2017"
"grammatical/neural-naacl2018" -> "kanekomasahiro/bert-gec"
"grammatical/neural-naacl2018" -> "nusnlp/m2scorer"
"grammatical/neural-naacl2018" -> "raymondhs/lang-8-process"
"grammatical/neural-naacl2018" -> "kakaobrain/helo-word"
"nusnlp/neuqe" -> "rgcottrell/pytorch-human-performance-gec"
"nusnlp/neuqe" -> "grammatical/baselines-emnlp2016"
"nusnlp/neuqe" -> "nusnlp/nbest-reranker"
"nusnlp/neuqe" -> "nusnlp/mlconvgec2018"
"nusnlp/neuqe" -> "grammatical/neural-naacl2018"
"snukky/wikiedits" -> "grammatical/pretraining-bea2019"
"grantjenks/python-pattern-matching" -> "grantjenks/python-runstats"
"grantjenks/python-pattern-matching" -> "grantjenks/python-tribool"
"getao/human-performance-gec" -> "grammatical/baselines-emnlp2016"
"blcuicall/NLPCC_2018_TASK2_GEC" -> "nusnlp/m2scorer" ["e"=1]
"nusnlp/crosentgec" -> "kakaobrain/helo-word"
"rezafuad/vehicle-color-recognition" -> "arxyzan/crnn-pytorch"
"rezafuad/vehicle-color-recognition" -> "namini40/na_map_tools"
"rgcottrell/pytorch-human-performance-gec" -> "nusnlp/neuqe"
"rgcottrell/pytorch-human-performance-gec" -> "nusnlp/mlconvgec2018"
"rgcottrell/pytorch-human-performance-gec" -> "grammatical/baselines-emnlp2016"
"rgcottrell/pytorch-human-performance-gec" -> "kanyun-inc/fairseq-gec"
"rgcottrell/pytorch-human-performance-gec" -> "grammatical/neural-naacl2018"
"zhaoyyoo/NLPCC2018_GEC" -> "nusnlp/m2scorer" ["e"=1]
"getalp/UFSAC" -> "getalp/disambiguate"
"pbloem/former" -> "google-research/lasertagger" ["e"=1]
"google-research/lasertagger" -> "425776024/lasertagger-chinese"
"google-research/lasertagger" -> "tongchangD/text_data_enhancement_with_LaserTagger"
"google-research/lasertagger" -> "Mleader2/text_scalpel"
"google-research/lasertagger" -> "chrisjbryant/errant"
"google-research/lasertagger" -> "awasthiabhijeet/PIE"
"google-research/lasertagger" -> "kanyun-inc/fairseq-gec"
"google-research/lasertagger" -> "grammarly/gector"
"google-research/lasertagger" -> "NingMiao/CGMH" ["e"=1]
"google-research/lasertagger" -> "google-research/bleurt" ["e"=1]
"google-research/lasertagger" -> "wdimmy/Automatic-Corpus-Generation" ["e"=1]
"google-research/lasertagger" -> "kanekomasahiro/bert-gec"
"google-research/lasertagger" -> "ACL2020SpellGCN/SpellGCN" ["e"=1]
"google-research/lasertagger" -> "hiyoung123/SoftMaskedBert" ["e"=1]
"google-research/lasertagger" -> "ChineseGLUE/ChineseGLUE" ["e"=1]
"google-research/lasertagger" -> "google-research-datasets/paws" ["e"=1]
"google-research/bleurt" -> "google-research/lasertagger" ["e"=1]
"filyp/autocorrect" -> "barrust/pyspellchecker"
"filyp/autocorrect" -> "mammothb/symspellpy"
"filyp/autocorrect" -> "R1j1t/contextualSpellCheck"
"filyp/autocorrect" -> "PrithivirajDamodaran/Gramformer" ["e"=1]
"filyp/autocorrect" -> "phatpiglet/autocorrect"
"filyp/autocorrect" -> "neuspell/neuspell"
"filyp/autocorrect" -> "jxmorris12/language_tool_python" ["e"=1]
"filyp/autocorrect" -> "bakwc/JamSpell"
"filyp/autocorrect" -> "grammarly/gector"
"google-research/pegasus" -> "google-research/lasertagger" ["e"=1]
"minimaxir/aitextgen" -> "EricFillion/happy-transformer" ["e"=1]
"grammarly/gector" -> "chrisjbryant/errant"
"grammarly/gector" -> "awasthiabhijeet/PIE"
"grammarly/gector" -> "kanekomasahiro/bert-gec"
"grammarly/gector" -> "kanyun-inc/fairseq-gec"
"grammarly/gector" -> "nusnlp/m2scorer"
"grammarly/gector" -> "google-research-datasets/clang8"
"grammarly/gector" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"grammarly/gector" -> "PrithivirajDamodaran/Gramformer" ["e"=1]
"grammarly/gector" -> "MaksTarnavskyi/gector-large"
"grammarly/gector" -> "butsugiri/gec-pseudodata"
"grammarly/gector" -> "nusnlp/mlconvgec2018"
"grammarly/gector" -> "destwang/CTC2021" ["e"=1]
"grammarly/gector" -> "HillZhang1999/MuCGEC" ["e"=1]
"grammarly/gector" -> "wdimmy/Automatic-Corpus-Generation" ["e"=1]
"grammarly/gector" -> "destwang/CTCResources" ["e"=1]
"textstat/textstat" -> "R1j1t/contextualSpellCheck" ["e"=1]
"textstat/textstat" -> "bjascob/LemmInflect" ["e"=1]
"EricFillion/happy-transformer" -> "Xirider/finetune-gpt2xl" ["e"=1]
"EricFillion/happy-transformer" -> "neuspell/neuspell"
"EricFillion/happy-transformer" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"EricFillion/happy-transformer" -> "asahi417/tner" ["e"=1]
"neuspell/neuspell" -> "R1j1t/contextualSpellCheck"
"neuspell/neuspell" -> "mhagiwara/github-typo-corpus"
"neuspell/neuspell" -> "bakwc/JamSpell"
"neuspell/neuspell" -> "mammothb/symspellpy"
"neuspell/neuspell" -> "awasthiabhijeet/PIE"
"neuspell/neuspell" -> "mhagiwara/xfspell"
"neuspell/neuspell" -> "grammarly/gector"
"neuspell/neuspell" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"neuspell/neuspell" -> "NorskRegnesentral/skweak" ["e"=1]
"neuspell/neuspell" -> "PrithivirajDamodaran/Gramformer" ["e"=1]
"neuspell/neuspell" -> "chrisjbryant/errant"
"neuspell/neuspell" -> "notAI-tech/fastPunct" ["e"=1]
"neuspell/neuspell" -> "michiyasunaga/LM-Critic"
"neuspell/neuspell" -> "EricFillion/happy-transformer"
"neuspell/neuspell" -> "MSeal/cython_hunspell"
"renatoviolin/next_word_prediction" -> "EricFillion/happy-transformer" ["e"=1]
"getalp/Flaubert" -> "TheophileBlard/french-sentiment-analysis-with-bert"
"getalp/Flaubert" -> "getalp/UFSAC"
"getalp/Flaubert" -> "getalp/wikIR"
"getalp/Flaubert" -> "tchambon/deepfrench"
"TheophileBlard/french-sentiment-analysis-with-bert" -> "getalp/Flaubert"
"TheophileBlard/french-sentiment-analysis-with-bert" -> "moussaKam/BARThez"
"bert-nmt/bert-nmt" -> "kanekomasahiro/bert-gec" ["e"=1]
"bert-nmt/bert-nmt" -> "nusnlp/m2scorer" ["e"=1]
"bert-nmt/bert-nmt" -> "chrisjbryant/errant" ["e"=1]
"bert-nmt/bert-nmt" -> "butsugiri/gec-pseudodata" ["e"=1]
"bminixhofer/nlprule" -> "grammarly/gector" ["e"=1]
"bminixhofer/nlprule" -> "pluots/zspell" ["e"=1]
"mhagiwara/xfspell" -> "namini40/na_map_tools"
"mhagiwara/xfspell" -> "mhagiwara/github-typo-corpus"
"zverok/spylls" -> "MSeal/cython_hunspell"
"grantjenks/python-wordsegment" -> "grantjenks/python-runstats"
"kdzwinel/Proofreader" -> "Wulf/nodehun"
"425776024/lasertagger-chinese" -> "Mleader2/text_scalpel"
"mhagiwara/github-typo-corpus" -> "mhagiwara/xfspell"
"mhagiwara/github-typo-corpus" -> "neuspell/neuspell"
"mhagiwara/github-typo-corpus" -> "chrisjbryant/errant"
"mhagiwara/github-typo-corpus" -> "grammarly/gector"
"mhagiwara/github-typo-corpus" -> "nusnlp/m2scorer"
"mhagiwara/github-typo-corpus" -> "kanekomasahiro/bert-gec"
"mhagiwara/github-typo-corpus" -> "awasthiabhijeet/PIE"
"mhagiwara/github-typo-corpus" -> "emorynlp/ud-korean" ["e"=1]
"mhagiwara/github-typo-corpus" -> "grammatical/pretraining-bea2019"
"mhagiwara/github-typo-corpus" -> "nusnlp/mlconvgec2018"
"mhagiwara/github-typo-corpus" -> "snukky/wikiedits"
"mhagiwara/github-typo-corpus" -> "tbai2019/HanBert-54k-N" ["e"=1]
"mhagiwara/github-typo-corpus" -> "bakwc/JamSpell"
"mhagiwara/github-typo-corpus" -> "mhagiwara/realworldnlp" ["e"=1]
"mhagiwara/github-typo-corpus" -> "kakaobrain/nlp-paper-reading" ["e"=1]
"Mleader2/text_scalpel" -> "425776024/lasertagger-chinese"
"Mleader2/text_scalpel" -> "Mleader2/simple_effective_text_matching_Chinese"
"Mleader2/text_scalpel" -> "tongchangD/text_data_enhancement_with_LaserTagger"
"Mleader2/text_scalpel" -> "Mleader2/pytorch_lstmcrf_intent_slot"
"Mleader2/text_scalpel" -> "Mleader2/albert_sentence_vector"
"Mleader2/text_scalpel" -> "Mleader2/generate_couplet"
"Mleader2/text_scalpel" -> "google-research/lasertagger"
"Mleader2/text_scalpel" -> "pkucoli/PKU-Paraphrase-Bank"
"R1j1t/contextualSpellCheck" -> "neuspell/neuspell"
"R1j1t/contextualSpellCheck" -> "bakwc/JamSpell"
"R1j1t/contextualSpellCheck" -> "mammothb/symspellpy"
"R1j1t/contextualSpellCheck" -> "barrust/pyspellchecker"
"R1j1t/contextualSpellCheck" -> "mmxgn/spacy-clausie" ["e"=1]
"R1j1t/contextualSpellCheck" -> "graphbrain/graphbrain" ["e"=1]
"R1j1t/contextualSpellCheck" -> "filyp/autocorrect"
"R1j1t/contextualSpellCheck" -> "bjascob/LemmInflect"
"R1j1t/contextualSpellCheck" -> "nipunsadvilkar/pySBD" ["e"=1]
"awasthiabhijeet/PIE" -> "kanyun-inc/fairseq-gec"
"awasthiabhijeet/PIE" -> "chrisjbryant/errant"
"awasthiabhijeet/PIE" -> "kanekomasahiro/bert-gec"
"awasthiabhijeet/PIE" -> "nusnlp/m2scorer"
"awasthiabhijeet/PIE" -> "butsugiri/gec-pseudodata"
"awasthiabhijeet/PIE" -> "grammatical/pretraining-bea2019"
"awasthiabhijeet/PIE" -> "grammarly/gector"
"awasthiabhijeet/PIE" -> "kakaobrain/helo-word"
"awasthiabhijeet/PIE" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"awasthiabhijeet/PIE" -> "google-research-datasets/clang8"
"awasthiabhijeet/PIE" -> "nusnlp/crosentgec"
"awasthiabhijeet/PIE" -> "nusnlp/mlconvgec2018"
"awasthiabhijeet/PIE" -> "michiyasunaga/LM-Critic"
"awasthiabhijeet/PIE" -> "keisks/jfleg"
"awasthiabhijeet/PIE" -> "MaksTarnavskyi/gector-large"
"tongchangD/text_data_enhancement_with_LaserTagger" -> "Mleader2/text_scalpel"
"tongchangD/text_data_enhancement_with_LaserTagger" -> "google-research/lasertagger"
"tongchangD/text_data_enhancement_with_LaserTagger" -> "tongchangD/bert_for_corrector" ["e"=1]
"kanekomasahiro/bert-gec" -> "butsugiri/gec-pseudodata"
"kanekomasahiro/bert-gec" -> "nusnlp/m2scorer"
"kanekomasahiro/bert-gec" -> "kanyun-inc/fairseq-gec"
"kanekomasahiro/bert-gec" -> "awasthiabhijeet/PIE"
"kanekomasahiro/bert-gec" -> "chrisjbryant/errant"
"kanekomasahiro/bert-gec" -> "kakaobrain/helo-word"
"kanekomasahiro/bert-gec" -> "nusnlp/mlconvgec2018"
"kanekomasahiro/bert-gec" -> "Katsumata420/generic-pretrained-GEC"
"kanekomasahiro/bert-gec" -> "grammatical/pretraining-bea2019"
"kanekomasahiro/bert-gec" -> "zhaoyyoo/NLPCC2018_GEC" ["e"=1]
"kanekomasahiro/bert-gec" -> "grammatical/neural-naacl2018"
"kanekomasahiro/bert-gec" -> "rgcottrell/pytorch-human-performance-gec"
"kanekomasahiro/bert-gec" -> "bert-nmt/bert-nmt" ["e"=1]
"kanekomasahiro/bert-gec" -> "grammarly/GMEG"
"kanekomasahiro/bert-gec" -> "nusnlp/neuqe"
"HSLCY/GlossBERT" -> "danlou/LMMS"
"HSLCY/GlossBERT" -> "getalp/disambiguate"
"HSLCY/GlossBERT" -> "uhh-lt/bert-sense"
"Jason3900/M2Convertor" -> "Jason3900/corenlp_client"
"Mleader2/information-extraction-pytorch" -> "Mleader2/pytorch_lstmcrf_intent_slot"
"Mleader2/information-extraction-pytorch" -> "Mleader2/albert_sentence_vector"
"Mleader2/information-extraction-pytorch" -> "Mleader2/simple_effective_text_matching_Chinese"
"butsugiri/gec-pseudodata" -> "kanekomasahiro/bert-gec"
"butsugiri/gec-pseudodata" -> "kakaobrain/helo-word"
"butsugiri/gec-pseudodata" -> "grammatical/pretraining-bea2019"
"butsugiri/gec-pseudodata" -> "kanyun-inc/fairseq-gec"
"butsugiri/gec-pseudodata" -> "awasthiabhijeet/PIE"
"butsugiri/gec-pseudodata" -> "nusnlp/neuqe"
"butsugiri/gec-pseudodata" -> "grammatical/neural-naacl2018"
"butsugiri/gec-pseudodata" -> "Jason3900/M2Convertor"
"SapienzaNLP/ewiser" -> "SapienzaNLP/consec"
"kakaobrain/helo-word" -> "grammatical/pretraining-bea2019"
"kakaobrain/helo-word" -> "butsugiri/gec-pseudodata"
"kakaobrain/helo-word" -> "nusnlp/crosentgec"
"kakaobrain/helo-word" -> "kanekomasahiro/bert-gec"
"kakaobrain/helo-word" -> "awasthiabhijeet/PIE"
"kakaobrain/helo-word" -> "kanyun-inc/fairseq-gec"
"uhh-lt/bert-sense" -> "getalp/disambiguate"
"uhh-lt/bert-sense" -> "danlou/LMMS"
"Mleader2/generate_couplet" -> "Mleader2/pytorch_lstmcrf_intent_slot"
"Mleader2/generate_couplet" -> "Mleader2/albert_sentence_vector"
"Mleader2/pytorch_lstmcrf_intent_slot" -> "Mleader2/albert_sentence_vector"
"Mleader2/pytorch_lstmcrf_intent_slot" -> "Mleader2/simple_effective_text_matching_Chinese"
"Mleader2/albert_sentence_vector" -> "Mleader2/pytorch_lstmcrf_intent_slot"
"Mleader2/albert_sentence_vector" -> "Mleader2/simple_effective_text_matching_Chinese"
"Mleader2/albert_sentence_vector" -> "Mleader2/generate_couplet"
"Mleader2/simple_effective_text_matching_Chinese" -> "Mleader2/pytorch_lstmcrf_intent_slot"
"Mleader2/simple_effective_text_matching_Chinese" -> "Mleader2/albert_sentence_vector"
"Mleader2/simple_effective_text_matching_Chinese" -> "Mleader2/generate_couplet"
"PrithivirajDamodaran/Styleformer" -> "grammarly/gector" ["e"=1]
"PrithivirajDamodaran/Parrot_Paraphraser" -> "awasthiabhijeet/PIE" ["e"=1]
"hunspell/hunspell" -> "wooorm/dictionaries"
"hunspell/hunspell" -> "rrthomas/enchant"
"hunspell/hunspell" -> "bakwc/JamSpell"
"hunspell/hunspell" -> "nuspell/nuspell"
"hunspell/hunspell" -> "wolfgarbe/SymSpell"
"hunspell/hunspell" -> "LibreOffice/dictionaries"
"hunspell/hunspell" -> "pyhunspell/pyhunspell"
"hunspell/hunspell" -> "GNUAspell/aspell"
"hunspell/hunspell" -> "zverok/spylls"
"hunspell/hunspell" -> "wooorm/nspell"
"hunspell/hunspell" -> "mammothb/symspellpy"
"hunspell/hunspell" -> "MSeal/cython_hunspell"
"hunspell/hunspell" -> "barrust/pyspellchecker"
"hunspell/hunspell" -> "cfinke/Typo.js"
"hunspell/hunspell" -> "hunspell/mythes"
"google-research-datasets/clang8" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"google-research-datasets/clang8" -> "gotutiyan/GEC-Info"
"google-research-datasets/clang8" -> "MaksTarnavskyi/gector-large"
"google-research-datasets/clang8" -> "michiyasunaga/LM-Critic"
"google-research-datasets/clang8" -> "nusnlp/esc"
"google-research-datasets/clang8" -> "awasthiabhijeet/PIE"
"google-research-datasets/clang8" -> "thunlp/VERNet"
"google-research-datasets/clang8" -> "nusnlp/m2scorer"
"google-research-datasets/clang8" -> "kanekomasahiro/bert-gec"
"CamDavidsonPilon/tdigest" -> "grantjenks/python-runstats" ["e"=1]
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "google-research-datasets/clang8"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "michiyasunaga/LM-Critic"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "gotutiyan/GEC-Info"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "awasthiabhijeet/PIE"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "chrisjbryant/errant"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "grammatical/coling2020-tutorial"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "kanekomasahiro/bert-gec"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "lorafei/Explainable_GEC"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "thunlp/VERNet"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "MaksTarnavskyi/gector-large"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "nusnlp/esc"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "grammarly/gector"
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" -> "nusnlp/m2scorer"
"carltonnorthern/nicknames" -> "MrCsabaToth/SOEMPI"
"PrithivirajDamodaran/Gramformer" -> "grammarly/gector" ["e"=1]
"PrithivirajDamodaran/Gramformer" -> "chrisjbryant/errant" ["e"=1]
"PrithivirajDamodaran/Gramformer" -> "neuspell/neuspell" ["e"=1]
"PrithivirajDamodaran/Gramformer" -> "awasthiabhijeet/PIE" ["e"=1]
"cnap/gec-ranking" -> "nusnlp/m2scorer"
"ciprian-chelba/1-billion-word-language-modeling-benchmark" -> "chrisjbryant/errant" ["e"=1]
"moussaKam/BARThez" -> "Tixierae/OrangeSum"
"moussaKam/BARThez" -> "moussaKam/FrugalScore"
"MaksTarnavskyi/gector-large" -> "nusnlp/esc"
"MaksTarnavskyi/gector-large" -> "AlexeySorokin/EditScorer"
"MaksTarnavskyi/gector-large" -> "google-research-datasets/clang8"
"MaksTarnavskyi/gector-large" -> "michiyasunaga/LM-Critic"
"MaksTarnavskyi/gector-large" -> "grammarly/pillars-of-gec"
"wooorm/dictionaries" -> "hunspell/hunspell"
"wooorm/dictionaries" -> "wooorm/nspell"
"wooorm/dictionaries" -> "titoBouzout/Dictionaries" ["e"=1]
"wooorm/dictionaries" -> "cfinke/Typo.js"
"wooorm/dictionaries" -> "LibreOffice/dictionaries"
"wooorm/dictionaries" -> "Wulf/nodehun"
"wooorm/dictionaries" -> "elastic/hunspell"
"wooorm/dictionaries" -> "pluots/zspell"
"wooorm/dictionaries" -> "MSeal/cython_hunspell"
"wooorm/dictionaries" -> "aarondandy/WeCantSpell.Hunspell"
"wooorm/dictionaries" -> "NuGetPackageExplorer/NuGetPackageExplorer" ["e"=1]
"wooorm/dictionaries" -> "nuspell/nuspell"
"wooorm/dictionaries" -> "itkach/slob" ["e"=1]
"wooorm/dictionaries" -> "OpenTaal/opentaal-hunspell"
"wooorm/dictionaries" -> "AnySoftKeyboard/LanguagePack"
"SapienzaNLP/consec" -> "nusnlp/esr"
"SapienzaNLP/consec" -> "SapienzaNLP/ewiser"
"akoumjian/datefinder" -> "kootenpv/contractions" ["e"=1]
"titoBouzout/Dictionaries" -> "wooorm/dictionaries" ["e"=1]
"titoBouzout/Dictionaries" -> "hunspell/hunspell" ["e"=1]
"titoBouzout/Dictionaries" -> "LibreOffice/dictionaries" ["e"=1]
"tasdikrahman/vocabulary" -> "gutfeeling/word_forms" ["e"=1]
"blcuicall/YACLC" -> "Jason3900/corenlp_client" ["e"=1]
"michiyasunaga/LM-Critic" -> "MaksTarnavskyi/gector-large"
"michiyasunaga/LM-Critic" -> "google-research-datasets/clang8"
"michiyasunaga/LM-Critic" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"michiyasunaga/LM-Critic" -> "AlexeySorokin/EditScorer"
"gotutiyan/GEC-Info" -> "google-research-datasets/clang8"
"gotutiyan/GEC-Info" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"gotutiyan/GEC-Info" -> "THUKElab/CLEME"
"gotutiyan/GEC-Info" -> "li-aolong/TemplateGEC" ["e"=1]
"gotutiyan/GEC-Info" -> "kanekomasahiro/bert-gec"
"gotutiyan/GEC-Info" -> "chrisjbryant/errant"
"nusnlp/esc" -> "nusnlp/greco"
"nusnlp/esc" -> "AlexeySorokin/EditScorer"
"nusnlp/esc" -> "MaksTarnavskyi/gector-large"
"geekjuruo/ProbExpan" -> "THUKElab/CCL2023-CLTC-THU_KELab"
"geekjuruo/ProbExpan" -> "THUKElab/Visual-C3"
"geekjuruo/ProbExpan" -> "THUKElab/CLEME"
"graphbrain/graphbrain" -> "R1j1t/contextualSpellCheck" ["e"=1]
"MajorTal/DeepSpell" -> "surmenok/DeepSpell"
"MajorTal/DeepSpell" -> "Currie32/Spell-Checker"
"MajorTal/DeepSpell" -> "mdcramer/Deep-Speeling"
"stanfordmlgroup/nlc" -> "grammatical/baselines-emnlp2016"
"stanfordmlgroup/nlc" -> "joiharalds/rnnicespellchecker"
"stanfordmlgroup/nlc" -> "stanfordmlgroup/dq"
"nghuyong/cscd-ns" -> "THUKElab/CLEME" ["e"=1]
"nusnlp/m2scorer" -> "chrisjbryant/errant"
"nusnlp/m2scorer" -> "kanekomasahiro/bert-gec"
"nusnlp/m2scorer" -> "awasthiabhijeet/PIE"
"nusnlp/m2scorer" -> "cnap/gec-ranking"
"nusnlp/m2scorer" -> "zhaoyyoo/NLPCC2018_GEC" ["e"=1]
"nusnlp/m2scorer" -> "blcuicall/NLPCC_2018_TASK2_GEC" ["e"=1]
"nusnlp/m2scorer" -> "grammatical/pretraining-bea2019"
"nusnlp/m2scorer" -> "kanyun-inc/fairseq-gec"
"nusnlp/m2scorer" -> "keisks/jfleg"
"nusnlp/m2scorer" -> "grammatical/neural-naacl2018"
"nusnlp/m2scorer" -> "grammatical/baselines-emnlp2016"
"nusnlp/m2scorer" -> "butsugiri/gec-pseudodata"
"nusnlp/m2scorer" -> "nusnlp/mlconvgec2018"
"nusnlp/m2scorer" -> "rgcottrell/pytorch-human-performance-gec"
"nusnlp/m2scorer" -> "google-research-datasets/clang8"
"cofe-ai/fast-gector" -> "Jason3900/gector-fast"
"cofe-ai/fast-gector" -> "Jason3900/M2Convertor"
"Jason3900/gector-fast" -> "cofe-ai/fast-gector"
"hermitdave/FrequencyWords" -> "barrust/pyspellchecker" ["e"=1]
"hermitdave/FrequencyWords" -> "wolfgarbe/SymSpell" ["e"=1]
"hermitdave/FrequencyWords" -> "mammothb/symspellpy" ["e"=1]
"wooorm/nspell" -> "Wulf/nodehun"
"bofenghuang/vigogne" -> "getalp/Flaubert"
"bofenghuang/vigogne" -> "moussaKam/BARThez"
"bofenghuang/vigogne" -> "linhduongtuan/BLOOM-LORA" ["e"=1]
"bofenghuang/vigogne" -> "TheophileBlard/french-sentiment-analysis-with-bert"
"nusnlp/nea" -> "nusnlp/mlconvgec2018" ["e"=1]
"nusnlp/nea" -> "nusnlp/smtgec2017" ["e"=1]
"lorafei/Explainable_GEC" -> "li-aolong/TemplateGEC" ["e"=1]
"lorafei/Explainable_GEC" -> "AlexeySorokin/EditScorer"
"grammatical/baselines-emnlp2016" -> "nusnlp/mlconvgec2018"
"grammatical/baselines-emnlp2016" -> "nusnlp/smtgec2017"
"grammatical/baselines-emnlp2016" -> "grammatical/neural-naacl2018"
"grammatical/baselines-emnlp2016" -> "getao/human-performance-gec"
"grammatical/baselines-emnlp2016" -> "keisks/jfleg"
"grammatical/baselines-emnlp2016" -> "nusnlp/neuqe"
"grammatical/baselines-emnlp2016" -> "rgcottrell/pytorch-human-performance-gec"
"grammatical/baselines-emnlp2016" -> "nusnlp/nbest-reranker"
"grammatical/baselines-emnlp2016" -> "mfelice/imeasure"
"grammatical/baselines-emnlp2016" -> "grammatical/pretraining-bea2019"
"THUKElab/CCL2023-CLTC-THU_KELab" -> "THUKElab/CLEME"
"THUKElab/CCL2023-CLTC-THU_KELab" -> "THUKElab/Visual-C3"
"THUKElab/CCL2023-CLTC-THU_KELab" -> "THUKElab/MixEdit"
"GNUAspell/aspell" -> "rrthomas/enchant"
"nusnlp/greco" -> "grammarly/pillars-of-gec"
"nusnlp/greco" -> "nusnlp/esc"
"grammarly/pillars-of-gec" -> "nusnlp/greco"
"atpaino/deep-text-corrector" -> "andabi/deep-text-corrector"
"atpaino/deep-text-corrector" -> "nusnlp/mlconvgec2018"
"atpaino/deep-text-corrector" -> "stanfordmlgroup/nlc"
"atpaino/deep-text-corrector" -> "Kyubyong/word_prediction" ["e"=1]
"atpaino/deep-text-corrector" -> "Currie32/Spell-Checker"
"atpaino/deep-text-corrector" -> "keisks/jfleg"
"atpaino/deep-text-corrector" -> "grammatical/baselines-emnlp2016"
"atpaino/deep-text-corrector" -> "PKULCWM/PKUSUMSUM" ["e"=1]
"atpaino/deep-text-corrector" -> "Kyubyong/neural_chinese_transliterator" ["e"=1]
"atpaino/deep-text-corrector" -> "chrisjbryant/errant"
"atpaino/deep-text-corrector" -> "farizrahman4u/seq2seq" ["e"=1]
"atpaino/deep-text-corrector" -> "alvations/pywsd"
"atpaino/deep-text-corrector" -> "MajorTal/DeepSpell"
"atpaino/deep-text-corrector" -> "cmusphinx/g2p-seq2seq" ["e"=1]
"atpaino/deep-text-corrector" -> "kpu/kenlm" ["e"=1]
"pyenchant/pyenchant" -> "rrthomas/enchant"
"pyenchant/pyenchant" -> "pyhunspell/pyhunspell"
"pyenchant/pyenchant" -> "barrust/pyspellchecker"
"gutfeeling/word_forms" -> "awasthiabhijeet/PIE"
"gutfeeling/word_forms" -> "chrisjbryant/errant"
"gutfeeling/word_forms" -> "bjascob/LemmInflect"
"gutfeeling/word_forms" -> "tasdikrahman/vocabulary" ["e"=1]
"gutfeeling/word_forms" -> "grammatical/pretraining-bea2019"
"gutfeeling/word_forms" -> "grammarly/gector"
"gutfeeling/word_forms" -> "geekpradd/PyDictionary" ["e"=1]
"gutfeeling/word_forms" -> "kanekomasahiro/bert-gec"
"gutfeeling/word_forms" -> "kanyun-inc/fairseq-gec"
"gutfeeling/word_forms" -> "dolph/dictionary" ["e"=1]
"gutfeeling/word_forms" -> "nipunsadvilkar/pySBD" ["e"=1]
"gutfeeling/word_forms" -> "EducationalTestingService/TOEFL-Spell"
"jaraco/inflect" -> "jpvanhal/inflection"
"jaraco/inflect" -> "bjascob/LemmInflect"
"jaraco/inflect" -> "bjascob/pyInflect"
"jaraco/inflect" -> "gutfeeling/word_forms"
"jaraco/inflect" -> "scrapinghub/dateparser" ["e"=1]
"jaraco/inflect" -> "boxed/mutmut" ["e"=1]
"jaraco/inflect" -> "marshmallow-code/marshmallow-sqlalchemy" ["e"=1]
"jaraco/inflect" -> "jamesturk/jellyfish" ["e"=1]
"marekrei/sequence-labeler" -> "chrisjbryant/errant" ["e"=1]
"kootenpv/contractions" -> "ian-beaver/pycontractions"
"THUKElab/CLEME" -> "THUKElab/Visual-C3"
"THUKElab/CLEME" -> "THUKElab/MixEdit"
"THUKElab/CLEME" -> "THUKElab/CCL2023-CLTC-THU_KELab"
"THUKElab/MixEdit" -> "THUKElab/CLEME"
"THUKElab/MixEdit" -> "THUKElab/Visual-C3"
"google-research-datasets/word_sense_disambigation_corpora" -> "cltl/wsd-dynamic-sense-vector"
"google-research-datasets/word_sense_disambigation_corpora" -> "Sshanu/Hierarchical-Word-Sense-Disambiguation-using-WordNet-Senses"
"google-research-datasets/word_sense_disambigation_corpora" -> "alvations/pywsd"
"THUKElab/Visual-C3" -> "THUKElab/CLEME"
"THUKElab/Visual-C3" -> "THUKElab/MixEdit"
"THUKElab/Visual-C3" -> "THUKElab/CCL2023-CLTC-THU_KELab"
"THUKElab/FLUB" -> "THUKElab/CLEME"
"THUKElab/FLUB" -> "THUKElab/Visual-C3"
"keredson/wordninja" -> "barrust/pyspellchecker"
"keredson/wordninja" -> "yishuihanhan/wordninja"
"keredson/wordninja" -> "grantjenks/python-wordsegment"
"keredson/wordninja" -> "jbesomi/texthero" ["e"=1]
"keredson/wordninja" -> "Hironsan/bertsearch" ["e"=1]
"keredson/wordninja" -> "mammothb/symspellpy"
"keredson/wordninja" -> "kootenpv/contractions"
"keredson/wordninja" -> "philipperemy/name-dataset"
"keredson/wordninja" -> "nipunsadvilkar/pySBD" ["e"=1]
"chrisjbryant/errant" -> "nusnlp/m2scorer"
"chrisjbryant/errant" -> "awasthiabhijeet/PIE"
"chrisjbryant/errant" -> "kanyun-inc/fairseq-gec"
"chrisjbryant/errant" -> "kanekomasahiro/bert-gec"
"chrisjbryant/errant" -> "grammarly/gector"
"chrisjbryant/errant" -> "nusnlp/mlconvgec2018"
"chrisjbryant/errant" -> "keisks/jfleg"
"chrisjbryant/errant" -> "google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction"
"chrisjbryant/errant" -> "grammatical/pretraining-bea2019"
"chrisjbryant/errant" -> "butsugiri/gec-pseudodata"
"chrisjbryant/errant" -> "grammatical/neural-naacl2018"
"chrisjbryant/errant" -> "gotutiyan/GEC-Info"
"chrisjbryant/errant" -> "google-research-datasets/clang8"
"chrisjbryant/errant" -> "kakaobrain/helo-word"
"chrisjbryant/errant" -> "grammatical/baselines-emnlp2016"
"adambom/dictionary" -> "gutfeeling/word_forms" ["e"=1]
"cbaziotis/ekphrasis" -> "grantjenks/python-wordsegment" ["e"=1]
"keisks/jfleg" -> "grammatical/baselines-emnlp2016"
"keisks/jfleg" -> "grammatical/neural-naacl2018"
"keisks/jfleg" -> "nusnlp/mlconvgec2018"
"keisks/jfleg" -> "nusnlp/smtgec2017"
"keisks/jfleg" -> "nusnlp/m2scorer"
"keisks/jfleg" -> "chrisjbryant/errant"
"keisks/jfleg" -> "getao/human-performance-gec"
"keisks/jfleg" -> "kanyun-inc/fairseq-gec"
"keisks/jfleg" -> "nusnlp/neuqe"
"keisks/jfleg" -> "kanekomasahiro/bert-gec"
"keisks/jfleg" -> "rgcottrell/pytorch-human-performance-gec"
"keisks/jfleg" -> "snukky/wikiedits"
"keisks/jfleg" -> "awasthiabhijeet/PIE"
"keisks/jfleg" -> "nusnlp/crosentgec"
"keisks/jfleg" -> "mfelice/imeasure"
"stanfordmlgroup/nlm-noising" -> "stanfordmlgroup/dq"
"bfelbo/DeepMoji" -> "atpaino/deep-text-corrector" ["e"=1]
"cltl/wsd-dynamic-sense-vector" -> "emanuelegiona/neural_WSD"
"nipunsadvilkar/pySBD" -> "R1j1t/contextualSpellCheck" ["e"=1]
"Currie32/Spell-Checker" -> "surmenok/DeepSpell"
"Currie32/Spell-Checker" -> "MajorTal/DeepSpell"
"Currie32/Spell-Checker" -> "stanfordmlgroup/nlc"
"Currie32/Spell-Checker" -> "mdcramer/Deep-Speeling"
"Currie32/Spell-Checker" -> "clips/clinspell"
"Currie32/Spell-Checker" -> "pirate/spellchecker"
"andabi/deep-text-corrector" -> "nusnlp/smtgec2017"
"nusnlp/smtgec2017" -> "grammatical/baselines-emnlp2016"
"btford/write-good" ["l"="23.07,-26.584", "c"=28]
"kdzwinel/Proofreader" ["l"="52.518,24.276"]
"philipperemy/name-dataset" ["l"="52.857,24.235"]
"smashew/NameDatabases" ["l"="52.859,24.187"]
"solvenium/names-dataset" ["l"="52.878,24.213"]
"keredson/wordninja" ["l"="52.81,24.245"]
"openvenues/pypostal" ["l"="52.392,26.176", "c"=172]
"sigpwned/popular-names-by-country-dataset" ["l"="52.846,24.208"]
"carltonnorthern/nicknames" ["l"="52.925,24.201"]
"treyhunner/names" ["l"="52.897,24.17"]
"datamade/probablepeople" ["l"="52.416,26.128", "c"=172]
"appeler/ethnicolr" ["l"="18.949,13.961", "c"=1213]
"MatthiasWinkelmann/firstname-database" ["l"="52.897,24.227"]
"mammothb/symspellpy" ["l"="52.813,24.337"]
"neuspell/neuspell" ["l"="52.786,24.368"]
"MaartenGr/PolyFuzz" ["l"="52.49,25.706", "c"=172]
"LibreOffice/dictionaries" ["l"="52.645,24.335"]
"wooorm/dictionaries" ["l"="52.615,24.32"]
"hunspell/hunspell" ["l"="52.693,24.323"]
"aarondandy/WeCantSpell.Hunspell" ["l"="52.605,24.355"]
"ztane/python-Levenshtein" ["l"="52.555,25.984", "c"=172]
"Wulf/nodehun" ["l"="52.562,24.282"]
"GitbookIO/hunspell-spellchecker" ["l"="52.575,24.256"]
"wooorm/nspell" ["l"="52.596,24.296"]
"mscdex/spellcheck" ["l"="52.54,24.256"]
"google-research-datasets/paws" ["l"="57.488,29.327", "c"=1082]
"google-research/lasertagger" ["l"="52.88,24.377"]
"aakashkag/People-Name-List" ["l"="52.86,24.152"]
"liuhuanyong/WordMultiSenseDisambiguation" ["l"="53.068,24.44"]
"luofuli/word-sense-disambiguation" ["l"="-51.57,-14.71", "c"=788]
"myint/language-check" ["l"="52.876,24.347"]
"jxmorris12/language_tool_python" ["l"="-1.161,3.324", "c"=258]
"bencmbrook/grammar-checker" ["l"="52.932,24.357"]
"atpaino/deep-text-corrector" ["l"="52.9,24.407"]
"chrisjbryant/errant" ["l"="52.832,24.409"]
"viraja1/grammar-check" ["l"="52.894,24.319"]
"bakwc/JamSpell" ["l"="52.803,24.353"]
"ian-beaver/pycontractions" ["l"="52.874,24.298"]
"cfinke/Typo.js" ["l"="52.611,24.276"]
"atom/node-spellchecker" ["l"="9.067,-44.171", "c"=677]
"badsyntax/jquery-spellchecker" ["l"="52.599,24.238"]
"wolfgarbe/SymSpell" ["l"="52.751,24.349"]
"barrust/pyspellchecker" ["l"="52.774,24.311"]
"huggingface/neuralcoref" ["l"="52.83,25.597", "c"=172]
"flairNLP/flair" ["l"="52.897,25.764", "c"=172]
"makcedward/nlpaug" ["l"="52.729,25.717", "c"=172]
"allenai/allennlp" ["l"="53.002,25.738", "c"=172]
"wolfgarbe/PruningRadixTrie" ["l"="-34.861,-0.393", "c"=8]
"kpu/kenlm" ["l"="35.58,2.371", "c"=308]
"google/sentencepiece" ["l"="53.057,25.762", "c"=172]
"R1j1t/contextualSpellCheck" ["l"="52.779,24.346"]
"hermitdave/FrequencyWords" ["l"="52.164,25.559", "c"=172]
"roy-ht/editdistance" ["l"="52.53,26.041", "c"=172]
"grammatical/pretraining-bea2019" ["l"="52.829,24.434"]
"kakaobrain/helo-word" ["l"="52.833,24.452"]
"butsugiri/gec-pseudodata" ["l"="52.822,24.452"]
"grammatical/neural-naacl2018" ["l"="52.849,24.448"]
"filyp/autocorrect" ["l"="52.808,24.318"]
"pyhunspell/pyhunspell" ["l"="52.728,24.289"]
"pyenchant/pyenchant" ["l"="52.755,24.275"]
"mhagiwara/github-typo-corpus" ["l"="52.819,24.38"]
"kootenpv/contractions" ["l"="52.842,24.274"]
"zverok/spylls" ["l"="52.708,24.297"]
"bjascob/LemmInflect" ["l"="52.741,24.478"]
"bjascob/pyInflect" ["l"="52.721,24.504"]
"jenojp/negspacy" ["l"="-33.44,16.268", "c"=404]
"IlyaGusev/rnnmorph" ["l"="-44.026,26.032", "c"=551]
"VKCOM/YouTokenToMe" ["l"="-44.182,26.034", "c"=551]
"dkulagin/kartaslov" ["l"="-44.062,26.028", "c"=551]
"vlarine/transformers-ru" ["l"="-44.101,26.042", "c"=551]
"MajorTal/DeepSpell" ["l"="52.91,24.375"]
"snakers4/open_stt" ["l"="-44.14,25.983", "c"=551]
"odaykhovskaya/obscene_words_ru" ["l"="-44.118,26.059", "c"=551]
"explosion/spacy-stanza" ["l"="52.639,25.541", "c"=172]
"MSeal/cython_hunspell" ["l"="52.721,24.328"]
"luozhouyang/python-string-similarity" ["l"="53.493,27.221", "c"=60]
"glample/fastBPE" ["l"="53.823,24.755", "c"=492]
"grammarly/gector" ["l"="52.809,24.407"]
"alvations/pywsd" ["l"="53.022,24.456"]
"google-research-datasets/word_sense_disambigation_corpora" ["l"="53.049,24.484"]
"Sshanu/Hierarchical-Word-Sense-Disambiguation-using-WordNet-Senses" ["l"="53.053,24.465"]
"orenmel/context2vec" ["l"="53.087,25.294", "c"=172]
"getalp/disambiguate" ["l"="53.142,24.498"]
"asoroa/ukb" ["l"="-15.828,-8.383", "c"=1915]
"gsi-upm/sematch" ["l"="55.351,27.055", "c"=476]
"dice-group/AGDISTIS" ["l"="-0.365,-42.077", "c"=934]
"snkim/AutomaticKeyphraseExtraction" ["l"="52.439,25.809", "c"=172]
"explosion/sense2vec" ["l"="52.681,25.598", "c"=172]
"lalchand-pandia/Word-Sense-Disambiguation-by-learning-long-term-dependencies" ["l"="53.046,24.451"]
"pippokill/lesk-wsd-dsm" ["l"="53.02,24.482"]
"Kyubyong/word_prediction" ["l"="52.565,27.299", "c"=60]
"rspeer/wordfreq" ["l"="52.427,25.543", "c"=172]
"gutfeeling/word_forms" ["l"="52.793,24.471"]
"jfilter/clean-text" ["l"="52.603,25.667", "c"=172]
"rrthomas/enchant" ["l"="52.738,24.309"]
"GNUAspell/aspell" ["l"="52.694,24.278"]
"keisks/jfleg" ["l"="52.85,24.422"]
"chrisjbryant/lmgec-lite" ["l"="52.903,24.495"]
"nusnlp/smtgec2017" ["l"="52.881,24.458"]
"kanyun-inc/fairseq-gec" ["l"="52.84,24.438"]
"awasthiabhijeet/PIE" ["l"="52.813,24.426"]
"nusnlp/mlconvgec2018" ["l"="52.854,24.433"]
"kanekomasahiro/bert-gec" ["l"="52.833,24.425"]
"rgcottrell/pytorch-human-performance-gec" ["l"="52.853,24.456"]
"nusnlp/m2scorer" ["l"="52.82,24.439"]
"nusnlp/neuqe" ["l"="52.863,24.449"]
"nusnlp/crosentgec" ["l"="52.84,24.464"]
"grammatical/baselines-emnlp2016" ["l"="52.87,24.439"]
"nusnlp/nbest-reranker" ["l"="52.884,24.451"]
"getao/human-performance-gec" ["l"="52.869,24.46"]
"getalp/UFSAC" ["l"="53.192,24.506"]
"uhh-lt/bert-sense" ["l"="53.149,24.518"]
"danlou/LMMS" ["l"="53.169,24.523"]
"SI3P/supWSD" ["l"="53.152,24.479"]
"grantjenks/python-runstats" ["l"="52.785,24.103"]
"grantjenks/python-tribool" ["l"="52.791,24.081"]
"emanuelegiona/neural_WSD" ["l"="53.074,24.528"]
"cltl/wsd-dynamic-sense-vector" ["l"="53.066,24.511"]
"HSLCY/GlossBERT" ["l"="53.166,24.504"]
"SapienzaNLP/ewiser" ["l"="53.18,24.562"]
"malllabiisc/EWISE" ["l"="53.195,24.537"]
"raymondhs/lang-8-process" ["l"="52.86,24.483"]
"snukky/wikiedits" ["l"="52.85,24.397"]
"grantjenks/python-pattern-matching" ["l"="52.776,24.067"]
"blcuicall/NLPCC_2018_TASK2_GEC" ["l"="53.783,27.51", "c"=60]
"rezafuad/vehicle-color-recognition" ["l"="52.769,24.232"]
"arxyzan/crnn-pytorch" ["l"="52.759,24.207"]
"namini40/na_map_tools" ["l"="52.783,24.276"]
"zhaoyyoo/NLPCC2018_GEC" ["l"="53.797,27.486", "c"=60]
"pbloem/former" ["l"="44.779,28.548", "c"=771]
"425776024/lasertagger-chinese" ["l"="52.922,24.328"]
"tongchangD/text_data_enhancement_with_LaserTagger" ["l"="52.915,24.346"]
"Mleader2/text_scalpel" ["l"="52.944,24.336"]
"NingMiao/CGMH" ["l"="57.622,29.31", "c"=1082]
"google-research/bleurt" ["l"="53.797,24.848", "c"=492]
"wdimmy/Automatic-Corpus-Generation" ["l"="53.72,27.466", "c"=60]
"ACL2020SpellGCN/SpellGCN" ["l"="53.712,27.456", "c"=60]
"hiyoung123/SoftMaskedBert" ["l"="-55.259,-14.315", "c"=842]
"ChineseGLUE/ChineseGLUE" ["l"="53.442,27.238", "c"=60]
"PrithivirajDamodaran/Gramformer" ["l"="57.409,29.377", "c"=1082]
"phatpiglet/autocorrect" ["l"="52.813,24.279"]
"google-research/pegasus" ["l"="58.354,29.067", "c"=665]
"minimaxir/aitextgen" ["l"="53.454,25.907", "c"=172]
"EricFillion/happy-transformer" ["l"="52.738,24.397"]
"google-research-datasets/clang8" ["l"="52.792,24.431"]
"google-research-datasets/C4_200M-synthetic-dataset-for-grammatical-error-correction" ["l"="52.785,24.418"]
"MaksTarnavskyi/gector-large" ["l"="52.768,24.434"]
"destwang/CTC2021" ["l"="53.743,27.456", "c"=60]
"HillZhang1999/MuCGEC" ["l"="53.734,27.422", "c"=60]
"destwang/CTCResources" ["l"="53.706,27.429", "c"=60]
"textstat/textstat" ["l"="52.578,25.652", "c"=172]
"Xirider/finetune-gpt2xl" ["l"="53.808,25.92", "c"=172]
"asahi417/tner" ["l"="41.161,1.174", "c"=7]
"mhagiwara/xfspell" ["l"="52.792,24.331"]
"NorskRegnesentral/skweak" ["l"="52.47,25.62", "c"=172]
"notAI-tech/fastPunct" ["l"="35.839,2.666", "c"=308]
"michiyasunaga/LM-Critic" ["l"="52.768,24.416"]
"renatoviolin/next_word_prediction" ["l"="52.702,25.427", "c"=172]
"getalp/Flaubert" ["l"="53.271,24.517"]
"TheophileBlard/french-sentiment-analysis-with-bert" ["l"="53.301,24.502"]
"getalp/wikIR" ["l"="53.288,24.541"]
"tchambon/deepfrench" ["l"="53.261,24.545"]
"moussaKam/BARThez" ["l"="53.338,24.497"]
"bert-nmt/bert-nmt" ["l"="53.869,24.738", "c"=492]
"bminixhofer/nlprule" ["l"="-10.557,-6.083", "c"=5]
"pluots/zspell" ["l"="52.575,24.316"]
"grantjenks/python-wordsegment" ["l"="52.792,24.155"]
"emorynlp/ud-korean" ["l"="-5.109,-22.989", "c"=164]
"tbai2019/HanBert-54k-N" ["l"="-5.141,-23.045", "c"=164]
"mhagiwara/realworldnlp" ["l"="54.109,27.184", "c"=60]
"kakaobrain/nlp-paper-reading" ["l"="-5.121,-23.182", "c"=164]
"Mleader2/simple_effective_text_matching_Chinese" ["l"="52.981,24.335"]
"Mleader2/pytorch_lstmcrf_intent_slot" ["l"="52.968,24.323"]
"Mleader2/albert_sentence_vector" ["l"="52.978,24.323"]
"Mleader2/generate_couplet" ["l"="52.968,24.335"]
"pkucoli/PKU-Paraphrase-Bank" ["l"="52.973,24.302"]
"mmxgn/spacy-clausie" ["l"="-0.681,-42.033", "c"=934]
"graphbrain/graphbrain" ["l"="52.474,25.531", "c"=172]
"nipunsadvilkar/pySBD" ["l"="52.556,25.628", "c"=172]
"tongchangD/bert_for_corrector" ["l"="53.723,27.52", "c"=60]
"Katsumata420/generic-pretrained-GEC" ["l"="52.88,24.425"]
"grammarly/GMEG" ["l"="52.869,24.412"]
"Jason3900/M2Convertor" ["l"="52.832,24.519"]
"Jason3900/corenlp_client" ["l"="52.835,24.541"]
"Mleader2/information-extraction-pytorch" ["l"="52.993,24.322"]
"SapienzaNLP/consec" ["l"="53.19,24.582"]
"PrithivirajDamodaran/Styleformer" ["l"="57.5,29.389", "c"=1082]
"PrithivirajDamodaran/Parrot_Paraphraser" ["l"="57.444,29.351", "c"=1082]
"nuspell/nuspell" ["l"="52.639,24.36"]
"hunspell/mythes" ["l"="52.663,24.298"]
"gotutiyan/GEC-Info" ["l"="52.788,24.395"]
"nusnlp/esc" ["l"="52.754,24.443"]
"thunlp/VERNet" ["l"="52.774,24.449"]
"CamDavidsonPilon/tdigest" ["l"="-5.819,10.688", "c"=452]
"grammatical/coling2020-tutorial" ["l"="52.758,24.458"]
"lorafei/Explainable_GEC" ["l"="52.742,24.422"]
"MrCsabaToth/SOEMPI" ["l"="52.952,24.185"]
"cnap/gec-ranking" ["l"="52.823,24.479"]
"ciprian-chelba/1-billion-word-language-modeling-benchmark" ["l"="46.216,27.81", "c"=277]
"Tixierae/OrangeSum" ["l"="53.355,24.48"]
"moussaKam/FrugalScore" ["l"="53.363,24.5"]
"AlexeySorokin/EditScorer" ["l"="52.741,24.435"]
"grammarly/pillars-of-gec" ["l"="52.725,24.444"]
"titoBouzout/Dictionaries" ["l"="25.483,-24.247", "c"=328]
"elastic/hunspell" ["l"="52.558,24.329"]
"NuGetPackageExplorer/NuGetPackageExplorer" ["l"="-34.659,-1.244", "c"=8]
"itkach/slob" ["l"="51.71,25.505", "c"=172]
"OpenTaal/opentaal-hunspell" ["l"="52.584,24.337"]
"AnySoftKeyboard/LanguagePack" ["l"="52.568,24.357"]
"nusnlp/esr" ["l"="53.2,24.602"]
"akoumjian/datefinder" ["l"="49.069,23.255", "c"=125]
"tasdikrahman/vocabulary" ["l"="59.843,34.149", "c"=699]
"blcuicall/YACLC" ["l"="53.347,27.296", "c"=60]
"THUKElab/CLEME" ["l"="52.737,24.274"]
"li-aolong/TemplateGEC" ["l"="53.853,27.431", "c"=60]
"nusnlp/greco" ["l"="52.732,24.456"]
"geekjuruo/ProbExpan" ["l"="52.732,24.236"]
"THUKElab/CCL2023-CLTC-THU_KELab" ["l"="52.74,24.252"]
"THUKElab/Visual-C3" ["l"="52.725,24.251"]
"surmenok/DeepSpell" ["l"="52.941,24.384"]
"Currie32/Spell-Checker" ["l"="52.954,24.402"]
"mdcramer/Deep-Speeling" ["l"="52.959,24.377"]
"stanfordmlgroup/nlc" ["l"="52.937,24.446"]
"joiharalds/rnnicespellchecker" ["l"="52.961,24.462"]
"stanfordmlgroup/dq" ["l"="52.956,24.486"]
"nghuyong/cscd-ns" ["l"="53.774,27.437", "c"=60]
"cofe-ai/fast-gector" ["l"="52.839,24.563"]
"Jason3900/gector-fast" ["l"="52.842,24.582"]
"bofenghuang/vigogne" ["l"="53.321,24.52"]
"linhduongtuan/BLOOM-LORA" ["l"="42.278,-1.925", "c"=1097]
"nusnlp/nea" ["l"="36.445,2.425", "c"=308]
"mfelice/imeasure" ["l"="52.888,24.437"]
"THUKElab/MixEdit" ["l"="52.725,24.261"]
"andabi/deep-text-corrector" ["l"="52.911,24.449"]
"PKULCWM/PKUSUMSUM" ["l"="52.497,27.299", "c"=60]
"Kyubyong/neural_chinese_transliterator" ["l"="52.674,27.314", "c"=60]
"farizrahman4u/seq2seq" ["l"="55.837,28.49", "c"=513]
"cmusphinx/g2p-seq2seq" ["l"="35.569,2.419", "c"=308]
"geekpradd/PyDictionary" ["l"="59.873,34.117", "c"=699]
"dolph/dictionary" ["l"="51.968,25.619", "c"=172]
"EducationalTestingService/TOEFL-Spell" ["l"="52.788,24.505"]
"jaraco/inflect" ["l"="52.732,24.533"]
"jpvanhal/inflection" ["l"="52.704,24.585"]
"scrapinghub/dateparser" ["l"="48.893,23.298", "c"=125]
"boxed/mutmut" ["l"="45.239,21.139", "c"=20]
"marshmallow-code/marshmallow-sqlalchemy" ["l"="42.154,22.047", "c"=280]
"jamesturk/jellyfish" ["l"="52.505,25.991", "c"=172]
"marekrei/sequence-labeler" ["l"="35.913,2.671", "c"=308]
"THUKElab/FLUB" ["l"="52.713,24.243"]
"yishuihanhan/wordninja" ["l"="52.802,24.208"]
"jbesomi/texthero" ["l"="52.727,25.752", "c"=172]
"Hironsan/bertsearch" ["l"="-2.445,8.83", "c"=1024]
"adambom/dictionary" ["l"="51.987,25.603", "c"=172]
"cbaziotis/ekphrasis" ["l"="54.3,28.329", "c"=707]
"stanfordmlgroup/nlm-noising" ["l"="52.972,24.514"]
"bfelbo/DeepMoji" ["l"="53.115,25.56", "c"=172]
"clips/clinspell" ["l"="52.998,24.389"]
"pirate/spellchecker" ["l"="52.993,24.413"]
}