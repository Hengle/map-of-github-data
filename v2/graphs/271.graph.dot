digraph G {
"microsoft/nni" -> "IntelLabs/distiller" ["e"=1]
"Adamdad/keras-YOLOv3-mobilenet" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"Adamdad/keras-YOLOv3-mobilenet" -> "reu2018DL/YOLO-LITE" ["e"=1]
"fsx950223/mobilenetv2-yolov3" -> "coldlarry/YOLOv3-complete-pruning" ["e"=1]
"tensorflow/model-optimization" -> "IntelLabs/distiller" ["e"=1]
"tensorflow/model-optimization" -> "Tencent/PocketFlow" ["e"=1]
"tensorflow/model-optimization" -> "666DZY666/micronet" ["e"=1]
"tensorflow/model-optimization" -> "quic/aimet" ["e"=1]
"tensorflow/model-optimization" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"Stinky-Tofu/Stronger-yolo" -> "talebolano/yolov3-network-slimming" ["e"=1]
"Stinky-Tofu/Stronger-yolo" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"Stinky-Tofu/Stronger-yolo" -> "PengyiZhang/SlimYOLOv3" ["e"=1]
"Stinky-Tofu/Stronger-yolo" -> "generalized-iou/g-darknet" ["e"=1]
"Tencent/ObjectDetection-OneStageDet" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"Tencent/ObjectDetection-OneStageDet" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"princeton-vl/CornerNet-Lite" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"xiaolai-sqlai/mobilenetv3" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"eric612/MobileNet-YOLO" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"microsoft/MMdnn" -> "IntelLabs/distiller" ["e"=1]
"microsoft/MMdnn" -> "Tencent/PocketFlow" ["e"=1]
"allenbai01/ProxQuant" -> "houlu369/Loss-aware-weight-quantization"
"allenbai01/ProxQuant" -> "tajanthan/pmf"
"alibaba/MNN" -> "IntelLabs/distiller" ["e"=1]
"alibaba/MNN" -> "Tencent/PocketFlow" ["e"=1]
"Swall0w/torchstat" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"Swall0w/torchstat" -> "666DZY666/micronet" ["e"=1]
"Swall0w/torchstat" -> "IntelLabs/distiller" ["e"=1]
"YunYang1994/tensorflow-yolov3" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"MingSun-Tse/Efficient-Deep-Learning" -> "he-y/Awesome-Pruning"
"MingSun-Tse/Efficient-Deep-Learning" -> "Eric-mingjie/rethinking-network-pruning"
"MingSun-Tse/Efficient-Deep-Learning" -> "csyhhu/Awesome-Deep-Neural-Network-Compression"
"MingSun-Tse/Efficient-Deep-Learning" -> "memoiry/Awesome-model-compression-and-acceleration"
"MingSun-Tse/Efficient-Deep-Learning" -> "IntelLabs/distiller"
"MingSun-Tse/Efficient-Deep-Learning" -> "JiahuiYu/slimmable_networks" ["e"=1]
"MingSun-Tse/Efficient-Deep-Learning" -> "cedrickchee/awesome-ml-model-compression"
"MingSun-Tse/Efficient-Deep-Learning" -> "chester256/Model-Compression-Papers"
"MingSun-Tse/Efficient-Deep-Learning" -> "yehuitang/Pruning"
"MingSun-Tse/Efficient-Deep-Learning" -> "guan-yuan/awesome-AutoML-and-Lightweight-Models" ["e"=1]
"MingSun-Tse/Efficient-Deep-Learning" -> "Efficient-ML/Awesome-Model-Quantization"
"MingSun-Tse/Efficient-Deep-Learning" -> "csarron/awesome-emdl"
"MingSun-Tse/Efficient-Deep-Learning" -> "liuzechun/MetaPruning"
"MingSun-Tse/Efficient-Deep-Learning" -> "he-y/soft-filter-pruning"
"MingSun-Tse/Efficient-Deep-Learning" -> "NVlabs/Taylor_pruning"
"ai-techsystems/deepC" -> "larq/larq" ["e"=1]
"NVIDIA/DALI" -> "IntelLabs/distiller" ["e"=1]
"BobLiu20/YOLOv3_PyTorch" -> "talebolano/yolov3-network-slimming" ["e"=1]
"tomgoldstein/loss-landscape" -> "amirgholami/PyHessian" ["e"=1]
"enyac-group/LeGR" -> "lmbxmu/ABCPruner"
"enyac-group/LeGR" -> "liuzechun/MetaPruning"
"enyac-group/LeGR" -> "ofsoundof/group_sparsity"
"enyac-group/LeGR" -> "lmbxmu/HRank"
"Lyken17/pytorch-OpCounter" -> "IntelLabs/distiller" ["e"=1]
"Lyken17/pytorch-OpCounter" -> "he-y/Awesome-Pruning" ["e"=1]
"daquexian/onnx-simplifier" -> "OpenPPL/ppq" ["e"=1]
"daquexian/onnx-simplifier" -> "666DZY666/micronet" ["e"=1]
"Paperspace/DataAugmentationForObjectDetection" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"crespum/edge-ai" -> "Bisonai/awesome-edge-machine-learning" ["e"=1]
"fritzlabs/Awesome-Mobile-Machine-Learning" -> "csarron/awesome-emdl" ["e"=1]
"fritzlabs/Awesome-Mobile-Machine-Learning" -> "Bisonai/awesome-edge-machine-learning" ["e"=1]
"marcellodebernardi/loss-landscapes" -> "amirgholami/PyHessian" ["e"=1]
"carpedm20/ENAS-pytorch" -> "IntelLabs/distiller" ["e"=1]
"pytorch/glow" -> "IntelLabs/distiller" ["e"=1]
"Tencent/tencent-ml-images" -> "Tencent/PocketFlow" ["e"=1]
"onnx/tutorials" -> "IntelLabs/distiller" ["e"=1]
"SpikeKing/keras-yolo3-detection" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"Qidian213/deep_sort_yolov3" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"AberHu/Knowledge-Distillation-Zoo" -> "he-y/Awesome-Pruning" ["e"=1]
"AberHu/Knowledge-Distillation-Zoo" -> "IntelLabs/distiller" ["e"=1]
"jiecaoyu/XNOR-Net-PyTorch" -> "itayhubara/BinaryNet.pytorch"
"jiecaoyu/XNOR-Net-PyTorch" -> "allenai/XNOR-Net"
"jiecaoyu/XNOR-Net-PyTorch" -> "cooooorn/Pytorch-XNOR-Net"
"jiecaoyu/XNOR-Net-PyTorch" -> "liuzechun/Bi-Real-net"
"jiecaoyu/XNOR-Net-PyTorch" -> "MatthieuCourbariaux/BinaryNet"
"jiecaoyu/XNOR-Net-PyTorch" -> "AngusG/tensorflow-xnor-bnn"
"jiecaoyu/XNOR-Net-PyTorch" -> "liuzechun/ReActNet"
"jiecaoyu/XNOR-Net-PyTorch" -> "itayhubara/BinaryNet"
"jiecaoyu/XNOR-Net-PyTorch" -> "zzzxxxttt/pytorch_DoReFaNet"
"jiecaoyu/XNOR-Net-PyTorch" -> "hpi-xnor/BMXNet-v2"
"jiecaoyu/XNOR-Net-PyTorch" -> "htqin/IR-Net"
"jiecaoyu/XNOR-Net-PyTorch" -> "TropComplique/trained-ternary-quantization"
"jiecaoyu/XNOR-Net-PyTorch" -> "MatthieuCourbariaux/BinaryConnect"
"jiecaoyu/XNOR-Net-PyTorch" -> "hukim93/BWN-XNOR-caffe"
"jiecaoyu/XNOR-Net-PyTorch" -> "microsoft/LQ-Nets"
"sun254/awesome-model-compression-and-acceleration" -> "memoiry/Awesome-model-compression-and-acceleration"
"sun254/awesome-model-compression-and-acceleration" -> "chester256/Model-Compression-Papers"
"sun254/awesome-model-compression-and-acceleration" -> "antspy/quantized_distillation"
"sun254/awesome-model-compression-and-acceleration" -> "jack-willturner/deep-compression"
"sun254/awesome-model-compression-and-acceleration" -> "hiteshvaidya/Model-Compression"
"sun254/awesome-model-compression-and-acceleration" -> "may0324/DeepCompression-caffe"
"sun254/awesome-model-compression-and-acceleration" -> "chengshengchan/model_compression" ["e"=1]
"sun254/awesome-model-compression-and-acceleration" -> "guan-yuan/awesome-AutoML-and-Lightweight-Models" ["e"=1]
"sun254/awesome-model-compression-and-acceleration" -> "jacobgil/pytorch-pruning"
"sun254/awesome-model-compression-and-acceleration" -> "zssloth/Embedded-Neural-Network"
"sun254/awesome-model-compression-and-acceleration" -> "Tencent/PocketFlow"
"sun254/awesome-model-compression-and-acceleration" -> "pytorch/QNNPACK" ["e"=1]
"sun254/awesome-model-compression-and-acceleration" -> "MingSun-Tse/Efficient-Deep-Learning"
"pytorch/QNNPACK" -> "Tencent/PocketFlow" ["e"=1]
"pytorch/QNNPACK" -> "IntelLabs/distiller" ["e"=1]
"Bisonai/awesome-edge-machine-learning" -> "csarron/awesome-emdl"
"Bisonai/awesome-edge-machine-learning" -> "Bisonai/quantized-mobilenetv3-mnist-android"
"openai/blocksparse" -> "IntelLabs/SkimCaffe" ["e"=1]
"D-X-Y/Awesome-AutoDL" -> "he-y/Awesome-Pruning" ["e"=1]
"inisis/brocolli" -> "deepglint/EasyQuant" ["e"=1]
"XiaoMi/mace" -> "Tencent/PocketFlow" ["e"=1]
"XiaoMi/mace" -> "IntelLabs/distiller" ["e"=1]
"PengyiZhang/SlimYOLOv3" -> "Lam1360/YOLOv3-model-pruning"
"PengyiZhang/SlimYOLOv3" -> "coldlarry/YOLOv3-complete-pruning"
"PengyiZhang/SlimYOLOv3" -> "tanluren/yolov3-channel-and-layer-pruning"
"PengyiZhang/SlimYOLOv3" -> "talebolano/yolov3-network-slimming"
"PengyiZhang/SlimYOLOv3" -> "jwchoi384/Gaussian_YOLOv3"
"PengyiZhang/SlimYOLOv3" -> "eric612/MobileNet-YOLO" ["e"=1]
"PengyiZhang/SlimYOLOv3" -> "princeton-vl/CornerNet-Lite" ["e"=1]
"PengyiZhang/SlimYOLOv3" -> "GOATmessi8/ASFF" ["e"=1]
"PengyiZhang/SlimYOLOv3" -> "Tencent/ObjectDetection-OneStageDet" ["e"=1]
"PengyiZhang/SlimYOLOv3" -> "Stinky-Tofu/Stronger-yolo" ["e"=1]
"PengyiZhang/SlimYOLOv3" -> "WongKinYiu/CrossStagePartialNetworks" ["e"=1]
"PengyiZhang/SlimYOLOv3" -> "toandaominh1997/EfficientDet.Pytorch" ["e"=1]
"PengyiZhang/SlimYOLOv3" -> "foolwood/pytorch-slimming"
"PengyiZhang/SlimYOLOv3" -> "YonghaoHe/LFFD-A-Light-and-Fast-Face-Detector-for-Edge-Devices" ["e"=1]
"PengyiZhang/SlimYOLOv3" -> "SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone"
"BUG1989/caffe-int8-convert-tools" -> "deepglint/EasyQuant" ["e"=1]
"BUG1989/caffe-int8-convert-tools" -> "jakc4103/DFQ" ["e"=1]
"quark0/darts" -> "IntelLabs/distiller" ["e"=1]
"Tencent/PocketFlow" -> "IntelLabs/distiller"
"Tencent/PocketFlow" -> "pytorch/QNNPACK" ["e"=1]
"Tencent/PocketFlow" -> "ethanhe42/channel-pruning"
"Tencent/PocketFlow" -> "XiaoMi/mace" ["e"=1]
"Tencent/PocketFlow" -> "Tencent/FeatherCNN" ["e"=1]
"Tencent/PocketFlow" -> "666DZY666/micronet"
"Tencent/PocketFlow" -> "Eric-mingjie/rethinking-network-pruning"
"Tencent/PocketFlow" -> "mit-han-lab/proxylessnas" ["e"=1]
"Tencent/PocketFlow" -> "tensorflow/adanet" ["e"=1]
"Tencent/PocketFlow" -> "BUG1989/caffe-int8-convert-tools" ["e"=1]
"Tencent/PocketFlow" -> "alibaba/MNN" ["e"=1]
"Tencent/PocketFlow" -> "Tencent/TNN" ["e"=1]
"Tencent/PocketFlow" -> "Eric-mingjie/network-slimming"
"Tencent/PocketFlow" -> "he-y/Awesome-Pruning"
"Tencent/PocketFlow" -> "google/gemmlowp" ["e"=1]
"TropComplique/trained-ternary-quantization" -> "czhu95/ternarynet"
"TropComplique/trained-ternary-quantization" -> "buaabai/Ternary-Weights-Network"
"TropComplique/trained-ternary-quantization" -> "zzzxxxttt/pytorch_DoReFaNet"
"TropComplique/trained-ternary-quantization" -> "fengfu-chris/caffe-twns"
"TropComplique/trained-ternary-quantization" -> "Mxbonn/INQ-pytorch"
"TropComplique/trained-ternary-quantization" -> "antspy/quantized_distillation"
"TropComplique/trained-ternary-quantization" -> "AngusG/tensorflow-xnor-bnn"
"AojunZhou/Incremental-Network-Quantization" -> "yiwenguo/Dynamic-Network-Surgery"
"AojunZhou/Incremental-Network-Quantization" -> "dongyp13/Stochastic-Quantization"
"AojunZhou/Incremental-Network-Quantization" -> "DAVIDNEWGATE/Project"
"AojunZhou/Incremental-Network-Quantization" -> "microsoft/LQ-Nets"
"AojunZhou/Incremental-Network-Quantization" -> "Mxbonn/INQ-pytorch"
"AojunZhou/Incremental-Network-Quantization" -> "may0324/DeepCompression-caffe"
"AojunZhou/Incremental-Network-Quantization" -> "AojunZhou/Efficient-Deep-Learning"
"AojunZhou/Incremental-Network-Quantization" -> "CAS-CLab/quantized-cnn"
"AojunZhou/Incremental-Network-Quantization" -> "antspy/quantized_distillation"
"AojunZhou/Incremental-Network-Quantization" -> "hukim93/BWN-XNOR-caffe"
"AojunZhou/Incremental-Network-Quantization" -> "boluoweifenda/WAGE"
"AojunZhou/Incremental-Network-Quantization" -> "allenai/XNOR-Net"
"AojunZhou/Incremental-Network-Quantization" -> "zssloth/Embedded-Neural-Network"
"AojunZhou/Incremental-Network-Quantization" -> "liuzechun/Bi-Real-net"
"AojunZhou/Incremental-Network-Quantization" -> "AngusG/tensorflow-xnor-bnn"
"microsoft/LQ-Nets" -> "zhaoweicai/hwgq"
"microsoft/LQ-Nets" -> "antspy/quantized_distillation"
"microsoft/LQ-Nets" -> "liuzechun/Bi-Real-net"
"microsoft/LQ-Nets" -> "mit-han-lab/haq"
"microsoft/LQ-Nets" -> "eladhoffer/quantized.pytorch"
"microsoft/LQ-Nets" -> "submission2019/cnn-quantization"
"microsoft/LQ-Nets" -> "boluoweifenda/WAGE"
"microsoft/LQ-Nets" -> "AojunZhou/Incremental-Network-Quantization"
"microsoft/LQ-Nets" -> "amirgholami/ZeroQ"
"microsoft/LQ-Nets" -> "julianfaraone/SYQ"
"microsoft/LQ-Nets" -> "Mxbonn/INQ-pytorch"
"microsoft/LQ-Nets" -> "moranshkolnik/RobustQuantization"
"microsoft/LQ-Nets" -> "allenbai01/ProxQuant"
"microsoft/LQ-Nets" -> "czhu95/ternarynet"
"microsoft/LQ-Nets" -> "nowgood/QuantizeCNNModel"
"caiwenpu/Compression_Paper" -> "csyhhu/L-DNQ"
"lhyfst/knowledge-distillation-papers" -> "memoiry/Awesome-model-compression-and-acceleration" ["e"=1]
"lhyfst/knowledge-distillation-papers" -> "chester256/Model-Compression-Papers" ["e"=1]
"lhyfst/knowledge-distillation-papers" -> "MingSun-Tse/Efficient-Deep-Learning" ["e"=1]
"lars76/kmeans-anchor-boxes" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"lars76/kmeans-anchor-boxes" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"lars76/kmeans-anchor-boxes" -> "PengyiZhang/SlimYOLOv3" ["e"=1]
"lars76/kmeans-anchor-boxes" -> "coldlarry/YOLOv3-complete-pruning" ["e"=1]
"mystic123/tensorflow-yolo-v3" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"mil-ad/snip" -> "namhoonlee/snip-public"
"mil-ad/snip" -> "sjmikler/snip-pruning"
"mil-ad/snip" -> "alecwangcq/GraSP"
"mil-ad/snip" -> "ganguli-lab/Synaptic-Flow"
"mil-ad/snip" -> "JingtongSu/sanity-checking-pruning"
"mil-ad/snip" -> "VITA-Group/GraNet"
"he-y/Awesome-Pruning" -> "Eric-mingjie/rethinking-network-pruning"
"he-y/Awesome-Pruning" -> "VainF/Torch-Pruning"
"he-y/Awesome-Pruning" -> "MingSun-Tse/Efficient-Deep-Learning"
"he-y/Awesome-Pruning" -> "Efficient-ML/Awesome-Model-Quantization"
"he-y/Awesome-Pruning" -> "IntelLabs/distiller"
"he-y/Awesome-Pruning" -> "he-y/filter-pruning-geometric-median"
"he-y/Awesome-Pruning" -> "Eric-mingjie/network-slimming"
"he-y/Awesome-Pruning" -> "666DZY666/micronet"
"he-y/Awesome-Pruning" -> "he-y/soft-filter-pruning"
"he-y/Awesome-Pruning" -> "dkozlov/awesome-knowledge-distillation" ["e"=1]
"he-y/Awesome-Pruning" -> "D-X-Y/Awesome-AutoDL" ["e"=1]
"he-y/Awesome-Pruning" -> "FLHonker/Awesome-Knowledge-Distillation" ["e"=1]
"he-y/Awesome-Pruning" -> "memoiry/Awesome-model-compression-and-acceleration"
"he-y/Awesome-Pruning" -> "ethanhe42/channel-pruning"
"he-y/Awesome-Pruning" -> "csyhhu/Awesome-Deep-Neural-Network-Compression"
"mingx9527/Data_Label_Tools" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"amusi/TensorFlow-From-Zero-To-One" -> "amusi/YOLO-Reproduce-Summary" ["e"=1]
"1adrianb/pytorch-estimate-flops" -> "1adrianb/binary-networks-pytorch"
"1adrianb/pytorch-estimate-flops" -> "vra/flopth"
"Xilinx/brevitas" -> "666DZY666/micronet" ["e"=1]
"Xilinx/brevitas" -> "Zhen-Dong/HAWQ" ["e"=1]
"Xilinx/brevitas" -> "Efficient-ML/Awesome-Model-Quantization" ["e"=1]
"Xilinx/brevitas" -> "quic/aimet" ["e"=1]
"Xilinx/brevitas" -> "IntelLabs/distiller" ["e"=1]
"Xilinx/brevitas" -> "ModelTC/MQBench" ["e"=1]
"tobegit3hub/advisor" -> "Tencent/PocketFlow" ["e"=1]
"tensorflow/adanet" -> "Tencent/PocketFlow" ["e"=1]
"Eric-mingjie/rethinking-network-pruning" -> "he-y/Awesome-Pruning"
"Eric-mingjie/rethinking-network-pruning" -> "Eric-mingjie/network-slimming"
"Eric-mingjie/rethinking-network-pruning" -> "jacobgil/pytorch-pruning"
"Eric-mingjie/rethinking-network-pruning" -> "he-y/soft-filter-pruning"
"Eric-mingjie/rethinking-network-pruning" -> "he-y/filter-pruning-geometric-median"
"Eric-mingjie/rethinking-network-pruning" -> "IntelLabs/distiller"
"Eric-mingjie/rethinking-network-pruning" -> "JiahuiYu/slimmable_networks" ["e"=1]
"Eric-mingjie/rethinking-network-pruning" -> "ethanhe42/channel-pruning"
"Eric-mingjie/rethinking-network-pruning" -> "666DZY666/micronet"
"Eric-mingjie/rethinking-network-pruning" -> "NVlabs/Taylor_pruning"
"Eric-mingjie/rethinking-network-pruning" -> "foolwood/pytorch-slimming"
"Eric-mingjie/rethinking-network-pruning" -> "Lam1360/YOLOv3-model-pruning"
"Eric-mingjie/rethinking-network-pruning" -> "liuzhuang13/slimming"
"Eric-mingjie/rethinking-network-pruning" -> "D-X-Y/AutoDL-Projects" ["e"=1]
"Eric-mingjie/rethinking-network-pruning" -> "MingSun-Tse/Efficient-Deep-Learning"
"haitongli/knowledge-distillation-pytorch" -> "IntelLabs/distiller" ["e"=1]
"haitongli/knowledge-distillation-pytorch" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"haitongli/knowledge-distillation-pytorch" -> "he-y/Awesome-Pruning" ["e"=1]
"haitongli/knowledge-distillation-pytorch" -> "666DZY666/micronet" ["e"=1]
"chester256/Model-Compression-Papers" -> "memoiry/Awesome-model-compression-and-acceleration"
"chester256/Model-Compression-Papers" -> "sun254/awesome-model-compression-and-acceleration"
"chester256/Model-Compression-Papers" -> "cedrickchee/awesome-ml-model-compression"
"chester256/Model-Compression-Papers" -> "mrgloom/Network-Speed-and-Compression"
"chester256/Model-Compression-Papers" -> "MingSun-Tse/Efficient-Deep-Learning"
"chester256/Model-Compression-Papers" -> "csyhhu/Awesome-Deep-Neural-Network-Compression"
"chester256/Model-Compression-Papers" -> "zssloth/Embedded-Neural-Network"
"chester256/Model-Compression-Papers" -> "lhyfst/knowledge-distillation-papers" ["e"=1]
"chester256/Model-Compression-Papers" -> "mightydeveloper/Deep-Compression-PyTorch"
"chester256/Model-Compression-Papers" -> "ChanChiChoi/awesome-model-compression"
"chester256/Model-Compression-Papers" -> "Eric-mingjie/rethinking-network-pruning"
"chester256/Model-Compression-Papers" -> "guan-yuan/awesome-AutoML-and-Lightweight-Models" ["e"=1]
"chester256/Model-Compression-Papers" -> "he-y/Awesome-Pruning"
"chester256/Model-Compression-Papers" -> "wojciechmo/deep-compression"
"chester256/Model-Compression-Papers" -> "mit-han-lab/amc"
"TimDettmers/sparse_learning" -> "google-research/rigl" ["e"=1]
"sovrasov/flops-counter.pytorch" -> "IntelLabs/distiller" ["e"=1]
"sovrasov/flops-counter.pytorch" -> "he-y/Awesome-Pruning" ["e"=1]
"tz28/Chinese-number-gestures-recognition" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"open-edge-platform/training_extensions" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"jiweibo/ImageNet" -> "htqin/IR-Net" ["e"=1]
"akamaster/pytorch_resnet_cifar10" -> "he-y/Awesome-Pruning" ["e"=1]
"akamaster/pytorch_resnet_cifar10" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"BBuf/Darknet" -> "hgpvision/darknet" ["e"=1]
"BBuf/Darknet" -> "ChenCVer/darknet"
"BBuf/Darknet" -> "msnh2012/Msnhnet" ["e"=1]
"BBuf/Darknet" -> "tanluren/yolov3-channel-and-layer-pruning"
"BBuf/Darknet" -> "coldlarry/YOLOv3-complete-pruning"
"BBuf/Darknet" -> "Zzh-tju/DIoU-darknet"
"BBuf/Darknet" -> "GiantPandaCV/yolov3-point" ["e"=1]
"BBuf/Darknet" -> "enazoe/yolo-tensorrt" ["e"=1]
"BBuf/Darknet" -> "BBuf/cv_tools"
"BBuf/Darknet" -> "generalized-iou/g-darknet"
"BBuf/Darknet" -> "ChenYingpeng/darknet2caffe" ["e"=1]
"BBuf/Darknet" -> "WongKinYiu/CrossStagePartialNetworks" ["e"=1]
"BBuf/Darknet" -> "talebolano/yolov3-network-slimming"
"BBuf/Darknet" -> "PengyiZhang/SlimYOLOv3"
"Efficient-ML/Awesome-Model-Quantization" -> "Zhen-Dong/Awesome-Quantization-Papers"
"Efficient-ML/Awesome-Model-Quantization" -> "he-y/Awesome-Pruning"
"Efficient-ML/Awesome-Model-Quantization" -> "ModelTC/MQBench"
"Efficient-ML/Awesome-Model-Quantization" -> "666DZY666/micronet"
"Efficient-ML/Awesome-Model-Quantization" -> "Zhen-Dong/HAWQ"
"Efficient-ML/Awesome-Model-Quantization" -> "mit-han-lab/smoothquant" ["e"=1]
"Efficient-ML/Awesome-Model-Quantization" -> "OpenPPL/ppq"
"Efficient-ML/Awesome-Model-Quantization" -> "HuangOwen/Awesome-LLM-Compression" ["e"=1]
"Efficient-ML/Awesome-Model-Quantization" -> "csyhhu/Awesome-Deep-Neural-Network-Compression"
"Efficient-ML/Awesome-Model-Quantization" -> "horseee/Awesome-Efficient-LLM" ["e"=1]
"Efficient-ML/Awesome-Model-Quantization" -> "quic/aimet"
"Efficient-ML/Awesome-Model-Quantization" -> "IST-DASLab/gptq" ["e"=1]
"Efficient-ML/Awesome-Model-Quantization" -> "yhhhli/BRECQ"
"Efficient-ML/Awesome-Model-Quantization" -> "megvii-research/FQ-ViT"
"Efficient-ML/Awesome-Model-Quantization" -> "Efficient-ML/Awesome-Efficient-AIGC" ["e"=1]
"lietoumai/Awesome-offer" -> "he-y/filter-pruning-geometric-median" ["e"=1]
"DeNA/PyTorch_YOLOv3" -> "motokimura/PyTorch_Gaussian_YOLOv3" ["e"=1]
"DeNA/PyTorch_YOLOv3" -> "jwchoi384/Gaussian_YOLOv3" ["e"=1]
"IntelLabs/distiller" -> "Tencent/PocketFlow"
"IntelLabs/distiller" -> "Eric-mingjie/rethinking-network-pruning"
"IntelLabs/distiller" -> "666DZY666/micronet"
"IntelLabs/distiller" -> "he-y/Awesome-Pruning"
"IntelLabs/distiller" -> "dkozlov/awesome-knowledge-distillation" ["e"=1]
"IntelLabs/distiller" -> "pytorch/QNNPACK" ["e"=1]
"IntelLabs/distiller" -> "mit-han-lab/once-for-all" ["e"=1]
"IntelLabs/distiller" -> "Lyken17/pytorch-OpCounter" ["e"=1]
"IntelLabs/distiller" -> "ethanhe42/channel-pruning"
"IntelLabs/distiller" -> "Eric-mingjie/network-slimming"
"IntelLabs/distiller" -> "mit-han-lab/proxylessnas" ["e"=1]
"IntelLabs/distiller" -> "quark0/darts" ["e"=1]
"IntelLabs/distiller" -> "haitongli/knowledge-distillation-pytorch" ["e"=1]
"IntelLabs/distiller" -> "google/gemmlowp" ["e"=1]
"IntelLabs/distiller" -> "Lam1360/YOLOv3-model-pruning"
"onnx/onnx-tensorflow" -> "IntelLabs/distiller" ["e"=1]
"BBuf/Image-processing-algorithm" -> "BBuf/Darknet" ["e"=1]
"ayooshkathuria/YOLO_v3_tutorial_from_scratch" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"d-li14/mobilenetv2.pytorch" -> "Eric-mingjie/network-slimming" ["e"=1]
"d-li14/mobilenetv2.pytorch" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"JiahuiYu/slimmable_networks" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"JiahuiYu/slimmable_networks" -> "Eric-mingjie/network-slimming" ["e"=1]
"JiahuiYu/slimmable_networks" -> "liuzechun/MetaPruning" ["e"=1]
"JiahuiYu/slimmable_networks" -> "anonymous47823493/EagleEye" ["e"=1]
"JiahuiYu/slimmable_networks" -> "he-y/filter-pruning-geometric-median" ["e"=1]
"wizyoung/YOLOv3_TensorFlow" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"Lam1360/YOLOv3-model-pruning" -> "tanluren/yolov3-channel-and-layer-pruning"
"Lam1360/YOLOv3-model-pruning" -> "coldlarry/YOLOv3-complete-pruning"
"Lam1360/YOLOv3-model-pruning" -> "PengyiZhang/SlimYOLOv3"
"Lam1360/YOLOv3-model-pruning" -> "talebolano/yolov3-network-slimming"
"Lam1360/YOLOv3-model-pruning" -> "Eric-mingjie/network-slimming"
"Lam1360/YOLOv3-model-pruning" -> "Tencent/ObjectDetection-OneStageDet" ["e"=1]
"Lam1360/YOLOv3-model-pruning" -> "666DZY666/micronet"
"Lam1360/YOLOv3-model-pruning" -> "GOATmessi8/ASFF" ["e"=1]
"Lam1360/YOLOv3-model-pruning" -> "princeton-vl/CornerNet-Lite" ["e"=1]
"Lam1360/YOLOv3-model-pruning" -> "foolwood/pytorch-slimming"
"Lam1360/YOLOv3-model-pruning" -> "Eric-mingjie/rethinking-network-pruning"
"Lam1360/YOLOv3-model-pruning" -> "eriklindernoren/PyTorch-YOLOv3" ["e"=1]
"Lam1360/YOLOv3-model-pruning" -> "eric612/MobileNet-YOLO" ["e"=1]
"Lam1360/YOLOv3-model-pruning" -> "Stinky-Tofu/Stronger-yolo" ["e"=1]
"Lam1360/YOLOv3-model-pruning" -> "princeton-vl/CornerNet" ["e"=1]
"mariogeiger/hessian" -> "noahgolmant/pytorch-hessian-eigenthings"
"mariogeiger/hessian" -> "toiaydcdyywlhzvlob/backpack"
"pytorchbearer/torchbearer" -> "Enderdead/Pytorch_Quantize_impls" ["e"=1]
"Eric-mingjie/network-slimming" -> "liuzhuang13/slimming"
"Eric-mingjie/network-slimming" -> "foolwood/pytorch-slimming"
"Eric-mingjie/network-slimming" -> "Eric-mingjie/rethinking-network-pruning"
"Eric-mingjie/network-slimming" -> "Lam1360/YOLOv3-model-pruning"
"Eric-mingjie/network-slimming" -> "he-y/soft-filter-pruning"
"Eric-mingjie/network-slimming" -> "tanluren/yolov3-channel-and-layer-pruning"
"Eric-mingjie/network-slimming" -> "talebolano/yolov3-network-slimming"
"Eric-mingjie/network-slimming" -> "he-y/filter-pruning-geometric-median"
"Eric-mingjie/network-slimming" -> "JiahuiYu/slimmable_networks" ["e"=1]
"Eric-mingjie/network-slimming" -> "he-y/Awesome-Pruning"
"Eric-mingjie/network-slimming" -> "jacobgil/pytorch-pruning"
"Eric-mingjie/network-slimming" -> "666DZY666/micronet"
"Eric-mingjie/network-slimming" -> "coldlarry/YOLOv3-complete-pruning"
"Eric-mingjie/network-slimming" -> "ethanhe42/channel-pruning"
"Eric-mingjie/network-slimming" -> "IntelLabs/distiller"
"kuan-wang/pytorch-mobilenet-v3" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"foolwood/pytorch-slimming" -> "Eric-mingjie/network-slimming"
"foolwood/pytorch-slimming" -> "liuzhuang13/slimming"
"foolwood/pytorch-slimming" -> "he-y/soft-filter-pruning"
"foolwood/pytorch-slimming" -> "he-y/filter-pruning-geometric-median"
"foolwood/pytorch-slimming" -> "jacobgil/pytorch-pruning"
"foolwood/pytorch-slimming" -> "Eric-mingjie/rethinking-network-pruning"
"foolwood/pytorch-slimming" -> "Lam1360/YOLOv3-model-pruning"
"foolwood/pytorch-slimming" -> "talebolano/yolov3-network-slimming"
"foolwood/pytorch-slimming" -> "tanluren/yolov3-channel-and-layer-pruning"
"foolwood/pytorch-slimming" -> "eeric/channel_prune"
"foolwood/pytorch-slimming" -> "ethanhe42/channel-pruning"
"foolwood/pytorch-slimming" -> "coldlarry/YOLOv3-complete-pruning"
"foolwood/pytorch-slimming" -> "he-y/Awesome-Pruning"
"foolwood/pytorch-slimming" -> "PengyiZhang/SlimYOLOv3"
"foolwood/pytorch-slimming" -> "liuzechun/MetaPruning"
"memoiry/Awesome-model-compression-and-acceleration" -> "chester256/Model-Compression-Papers"
"memoiry/Awesome-model-compression-and-acceleration" -> "cedrickchee/awesome-ml-model-compression"
"memoiry/Awesome-model-compression-and-acceleration" -> "sun254/awesome-model-compression-and-acceleration"
"memoiry/Awesome-model-compression-and-acceleration" -> "guan-yuan/awesome-AutoML-and-Lightweight-Models" ["e"=1]
"memoiry/Awesome-model-compression-and-acceleration" -> "he-y/Awesome-Pruning"
"memoiry/Awesome-model-compression-and-acceleration" -> "MingSun-Tse/Efficient-Deep-Learning"
"memoiry/Awesome-model-compression-and-acceleration" -> "csyhhu/Awesome-Deep-Neural-Network-Compression"
"memoiry/Awesome-model-compression-and-acceleration" -> "Eric-mingjie/network-slimming"
"memoiry/Awesome-model-compression-and-acceleration" -> "666DZY666/micronet"
"memoiry/Awesome-model-compression-and-acceleration" -> "lhyfst/knowledge-distillation-papers" ["e"=1]
"memoiry/Awesome-model-compression-and-acceleration" -> "Eric-mingjie/rethinking-network-pruning"
"memoiry/Awesome-model-compression-and-acceleration" -> "zssloth/Embedded-Neural-Network"
"memoiry/Awesome-model-compression-and-acceleration" -> "dkozlov/awesome-knowledge-distillation" ["e"=1]
"memoiry/Awesome-model-compression-and-acceleration" -> "antspy/quantized_distillation"
"memoiry/Awesome-model-compression-and-acceleration" -> "IntelLabs/distiller"
"google-research/morph-net" -> "facebookresearch/kill-the-bits" ["e"=1]
"google-research/morph-net" -> "Tencent/PocketFlow" ["e"=1]
"google-research/morph-net" -> "liuzechun/MetaPruning" ["e"=1]
"google-research/morph-net" -> "IntelLabs/distiller" ["e"=1]
"Captain1986/CaptainBlackboard" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"Captain1986/CaptainBlackboard" -> "666DZY666/micronet" ["e"=1]
"Tencent/FeatherCNN" -> "Tencent/PocketFlow" ["e"=1]
"liuzhuang13/slimming" -> "Eric-mingjie/network-slimming"
"liuzhuang13/slimming" -> "foolwood/pytorch-slimming"
"liuzhuang13/slimming" -> "talebolano/yolov3-network-slimming"
"liuzhuang13/slimming" -> "Eric-mingjie/rethinking-network-pruning"
"liuzhuang13/slimming" -> "Lam1360/YOLOv3-model-pruning"
"liuzhuang13/slimming" -> "he-y/filter-pruning-geometric-median"
"liuzhuang13/slimming" -> "jacobgil/pytorch-pruning"
"liuzhuang13/slimming" -> "he-y/soft-filter-pruning"
"liuzhuang13/slimming" -> "ethanhe42/channel-pruning"
"liuzhuang13/slimming" -> "JiahuiYu/slimmable_networks" ["e"=1]
"liuzhuang13/slimming" -> "coldlarry/YOLOv3-complete-pruning"
"liuzhuang13/slimming" -> "tanluren/yolov3-channel-and-layer-pruning"
"liuzhuang13/slimming" -> "songhan/Deep-Compression-AlexNet"
"liuzhuang13/slimming" -> "he-y/Awesome-Pruning"
"liuzhuang13/slimming" -> "wenwei202/caffe"
"hjmshi/PyTorch-LBFGS" -> "rfeinman/pytorch-minimize"
"hjmshi/PyTorch-LBFGS" -> "sbarratt/torch_cg"
"hjmshi/PyTorch-LBFGS" -> "f-dangel/backpack" ["e"=1]
"hjmshi/PyTorch-LBFGS" -> "cybertronai/pytorch-sso"
"hjmshi/PyTorch-LBFGS" -> "nlesc-dirac/pytorch"
"hjmshi/PyTorch-LBFGS" -> "noahgolmant/pytorch-hessian-eigenthings"
"hjmshi/PyTorch-LBFGS" -> "lezcano/geotorch" ["e"=1]
"hjmshi/PyTorch-LBFGS" -> "harryliew/SdLBFGS"
"hjmshi/PyTorch-LBFGS" -> "Thrandis/EKFAC-pytorch"
"hjmshi/PyTorch-LBFGS" -> "tensorflow/kfac"
"hjmshi/PyTorch-LBFGS" -> "google/jaxopt" ["e"=1]
"noahgolmant/pytorch-hessian-eigenthings" -> "amirgholami/PyHessian"
"noahgolmant/pytorch-hessian-eigenthings" -> "amirgholami/HessianFlow"
"noahgolmant/pytorch-hessian-eigenthings" -> "mariogeiger/hessian"
"noahgolmant/pytorch-hessian-eigenthings" -> "google/spectral-density"
"noahgolmant/pytorch-hessian-eigenthings" -> "timgaripov/dnn-mode-connectivity" ["e"=1]
"noahgolmant/pytorch-hessian-eigenthings" -> "alecwangcq/EigenDamage-Pytorch"
"noahgolmant/pytorch-hessian-eigenthings" -> "f-dangel/backpack" ["e"=1]
"noahgolmant/pytorch-hessian-eigenthings" -> "locuslab/edge-of-stability" ["e"=1]
"noahgolmant/pytorch-hessian-eigenthings" -> "alecwangcq/KFAC-Pytorch"
"guan-yuan/awesome-AutoML-and-Lightweight-Models" -> "memoiry/Awesome-model-compression-and-acceleration" ["e"=1]
"guan-yuan/awesome-AutoML-and-Lightweight-Models" -> "mit-han-lab/amc" ["e"=1]
"guan-yuan/awesome-AutoML-and-Lightweight-Models" -> "liuzechun/MetaPruning" ["e"=1]
"guan-yuan/awesome-AutoML-and-Lightweight-Models" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"Mxbonn/INQ-pytorch" -> "Enderdead/Pytorch_Quantize_impls"
"Mxbonn/INQ-pytorch" -> "zzzxxxttt/pytorch_DoReFaNet"
"Mxbonn/INQ-pytorch" -> "eladhoffer/quantized.pytorch"
"Mxbonn/INQ-pytorch" -> "allenbai01/ProxQuant"
"Mxbonn/INQ-pytorch" -> "submission2019/cnn-quantization"
"Mxbonn/INQ-pytorch" -> "AojunZhou/Incremental-Network-Quantization"
"Mxbonn/INQ-pytorch" -> "mit-han-lab/haq"
"generalized-iou/g-darknet" -> "generalized-iou/g-tensorflow-models"
"generalized-iou/g-darknet" -> "Zzh-tju/DIoU-darknet"
"generalized-iou/g-darknet" -> "generalized-iou/Detectron.pytorch"
"generalized-iou/g-darknet" -> "jwchoi384/Gaussian_YOLOv3"
"generalized-iou/g-darknet" -> "Stinky-Tofu/Stronger-yolo" ["e"=1]
"generalized-iou/g-darknet" -> "Zzh-tju/DIoU"
"generalized-iou/g-darknet" -> "xingyizhou/ExtremeNet" ["e"=1]
"generalized-iou/g-darknet" -> "Zzh-tju/DIoU-pytorch-detectron"
"generalized-iou/g-darknet" -> "hjimce/darknet_mobilenet" ["e"=1]
"generalized-iou/g-darknet" -> "talebolano/yolov3-network-slimming"
"cedrickchee/awesome-ml-model-compression" -> "memoiry/Awesome-model-compression-and-acceleration"
"cedrickchee/awesome-ml-model-compression" -> "chester256/Model-Compression-Papers"
"cedrickchee/awesome-ml-model-compression" -> "ChanChiChoi/awesome-model-compression"
"cedrickchee/awesome-ml-model-compression" -> "he-y/Awesome-Pruning"
"cedrickchee/awesome-ml-model-compression" -> "csyhhu/Awesome-Deep-Neural-Network-Compression"
"cedrickchee/awesome-ml-model-compression" -> "MingSun-Tse/Efficient-Deep-Learning"
"cedrickchee/awesome-ml-model-compression" -> "Efficient-ML/Awesome-Model-Quantization"
"cedrickchee/awesome-ml-model-compression" -> "Zhen-Dong/Awesome-Quantization-Papers"
"cedrickchee/awesome-ml-model-compression" -> "Efficient-ML/Awesome-Efficient-AIGC" ["e"=1]
"cedrickchee/awesome-ml-model-compression" -> "guan-yuan/awesome-AutoML-and-Lightweight-Models" ["e"=1]
"cedrickchee/awesome-ml-model-compression" -> "HuangOwen/Awesome-LLM-Compression" ["e"=1]
"cedrickchee/awesome-ml-model-compression" -> "horseee/Awesome-Efficient-LLM" ["e"=1]
"cedrickchee/awesome-ml-model-compression" -> "sun254/awesome-model-compression-and-acceleration"
"cedrickchee/awesome-ml-model-compression" -> "mit-han-lab/smoothquant" ["e"=1]
"cedrickchee/awesome-ml-model-compression" -> "horseee/LLM-Pruner" ["e"=1]
"SEAL-UCSB/NVSim" -> "stevenygd/WAGE.pytorch" ["e"=1]
"ruizhoud/DistributionLoss" -> "bczhangbczhang/Bayesian-Optimized-1-bit-CNNs"
"ruizhoud/DistributionLoss" -> "plumerai/rethinking-bnn-optimization"
"ruizhoud/DistributionLoss" -> "team-approx-bayes/BayesBiNN"
"walkerning/aw_nas" -> "mit-han-lab/haq" ["e"=1]
"ethanhe42/channel-pruning" -> "Eric-mingjie/rethinking-network-pruning"
"ethanhe42/channel-pruning" -> "jacobgil/pytorch-pruning"
"ethanhe42/channel-pruning" -> "Tencent/PocketFlow"
"ethanhe42/channel-pruning" -> "Eric-mingjie/network-slimming"
"ethanhe42/channel-pruning" -> "songhan/Deep-Compression-AlexNet"
"ethanhe42/channel-pruning" -> "he-y/soft-filter-pruning"
"ethanhe42/channel-pruning" -> "IntelLabs/distiller"
"ethanhe42/channel-pruning" -> "soeaver/caffe-model" ["e"=1]
"ethanhe42/channel-pruning" -> "he-y/filter-pruning-geometric-median"
"ethanhe42/channel-pruning" -> "he-y/Awesome-Pruning"
"ethanhe42/channel-pruning" -> "yonghenglh6/DepthwiseConvolution" ["e"=1]
"ethanhe42/channel-pruning" -> "foolwood/pytorch-slimming"
"ethanhe42/channel-pruning" -> "shicai/MobileNet-Caffe" ["e"=1]
"ethanhe42/channel-pruning" -> "wenwei202/caffe"
"ethanhe42/channel-pruning" -> "Lam1360/YOLOv3-model-pruning"
"submission2019/cnn-quantization" -> "amirgholami/ZeroQ"
"submission2019/cnn-quantization" -> "jakc4103/DFQ"
"submission2019/cnn-quantization" -> "itayhubara/CalibTIP"
"submission2019/cnn-quantization" -> "yhhhli/BRECQ"
"submission2019/cnn-quantization" -> "eladhoffer/quantized.pytorch"
"submission2019/cnn-quantization" -> "ynahshan/nn-quantization-pytorch"
"submission2019/cnn-quantization" -> "cornell-zhang/dnn-quant-ocs" ["e"=1]
"submission2019/cnn-quantization" -> "peiswang/BitSplit"
"submission2019/cnn-quantization" -> "yhhhli/APoT_Quantization"
"submission2019/cnn-quantization" -> "Enderdead/Pytorch_Quantize_impls"
"submission2019/cnn-quantization" -> "microsoft/LQ-Nets"
"submission2019/cnn-quantization" -> "jun-fang/PWLQ"
"submission2019/cnn-quantization" -> "mit-han-lab/haq"
"submission2019/cnn-quantization" -> "Mxbonn/INQ-pytorch"
"submission2019/cnn-quantization" -> "sony-si/ai-research"
"KimSoybean/ScratchDet" -> "generalized-iou/Detectron.pytorch" ["e"=1]
"uber-research/sbnet" -> "Roll920/ThiNet" ["e"=1]
"uber-research/sbnet" -> "yiwenguo/Dynamic-Network-Surgery" ["e"=1]
"f-dangel/backpack" -> "fKunstner/limitations-empirical-fisher" ["e"=1]
"f-dangel/backpack" -> "amirgholami/adahessian" ["e"=1]
"f-dangel/backpack" -> "tfjgeorge/nngeometry" ["e"=1]
"f-dangel/backpack" -> "toiaydcdyywlhzvlob/backpack" ["e"=1]
"f-dangel/backpack" -> "cybertronai/pytorch-sso" ["e"=1]
"f-dangel/backpack" -> "Thrandis/EKFAC-pytorch" ["e"=1]
"f-dangel/backpack" -> "tensorflow/kfac" ["e"=1]
"f-dangel/backpack" -> "noahgolmant/pytorch-hessian-eigenthings" ["e"=1]
"google-research/lottery-ticket-hypothesis" -> "rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch"
"google-research/lottery-ticket-hypothesis" -> "facebookresearch/open_lth"
"google-research/lottery-ticket-hypothesis" -> "Eric-mingjie/rethinking-network-pruning"
"google-research/lottery-ticket-hypothesis" -> "uber-research/deconstructing-lottery-tickets"
"google-research/lottery-ticket-hypothesis" -> "namhoonlee/snip-public"
"google-research/lottery-ticket-hypothesis" -> "alecwangcq/GraSP"
"google-research/lottery-ticket-hypothesis" -> "ganguli-lab/Synaptic-Flow"
"google-research/lottery-ticket-hypothesis" -> "varungohil/Generalizing-Lottery-Tickets"
"google-research/lottery-ticket-hypothesis" -> "mil-ad/snip"
"google-research/lottery-ticket-hypothesis" -> "he-y/Awesome-Pruning"
"google-research/lottery-ticket-hypothesis" -> "NVlabs/Taylor_pruning"
"google-research/lottery-ticket-hypothesis" -> "he-y/filter-pruning-geometric-median"
"google-research/lottery-ticket-hypothesis" -> "JiahuiYu/slimmable_networks" ["e"=1]
"google-research/lottery-ticket-hypothesis" -> "D-X-Y/AutoDL-Projects" ["e"=1]
"google-research/lottery-ticket-hypothesis" -> "enyac-group/single-path-nas" ["e"=1]
"PINTO0309/OpenVINO-YoloV3" -> "coldlarry/YOLOv3-complete-pruning" ["e"=1]
"leikunx/AI_projects" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"leikunx/AI_projects" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"leikunx/AI_projects" -> "Zzh-tju/DIoU-darknet" ["e"=1]
"dcmocanu/sparse-evolutionary-artificial-neural-networks" -> "AlliedToasters/synapses"
"dcmocanu/sparse-evolutionary-artificial-neural-networks" -> "IntelAI/dynamic-reparameterization"
"dcmocanu/sparse-evolutionary-artificial-neural-networks" -> "google-research/rigl"
"dcmocanu/sparse-evolutionary-artificial-neural-networks" -> "namhoonlee/snip-public"
"mit-han-lab/amc-models" -> "mit-han-lab/amc"
"mit-han-lab/amc-models" -> "han-cai/PathLevel-EAS" ["e"=1]
"mit-han-lab/amc-models" -> "mit-han-lab/haq"
"mit-han-lab/amc-models" -> "Zx55/dmcp"
"mit-han-lab/amc-models" -> "enyac-group/single-path-nas" ["e"=1]
"facebookresearch/kill-the-bits" -> "mit-han-lab/haq"
"facebookresearch/kill-the-bits" -> "submission2019/cnn-quantization"
"facebookresearch/kill-the-bits" -> "antspy/quantized_distillation"
"facebookresearch/kill-the-bits" -> "mit-han-lab/amc"
"facebookresearch/kill-the-bits" -> "guan-yuan/awesome-AutoML-and-Lightweight-Models" ["e"=1]
"facebookresearch/kill-the-bits" -> "Eric-mingjie/rethinking-network-pruning"
"facebookresearch/kill-the-bits" -> "pytorch/QNNPACK" ["e"=1]
"facebookresearch/kill-the-bits" -> "aliyun/alibabacloud-quantization-networks"
"facebookresearch/kill-the-bits" -> "deepglint/EasyQuant"
"facebookresearch/kill-the-bits" -> "Mxbonn/INQ-pytorch"
"facebookresearch/kill-the-bits" -> "mit-han-lab/amc-models"
"facebookresearch/kill-the-bits" -> "jakc4103/DFQ"
"facebookresearch/kill-the-bits" -> "eladhoffer/quantized.pytorch"
"facebookresearch/kill-the-bits" -> "liuzechun/MetaPruning"
"facebookresearch/kill-the-bits" -> "enyac-group/single-path-nas" ["e"=1]
"asteroidhouse/self-tuning-networks" -> "pomonam/NoisyNaturalGradient"
"asteroidhouse/self-tuning-networks" -> "renmengye/meta-optim-public"
"asteroidhouse/self-tuning-networks" -> "pomonam/Self-Tuning-Networks"
"in66-dev/In-Prestissimo" -> "PerfXLab/embedded_ai" ["e"=1]
"itayhubara/BinaryNet.tf" -> "AngusG/tensorflow-xnor-bnn"
"itayhubara/BinaryNet.tf" -> "jonathanmarek1/binarynet-tensorflow"
"itayhubara/BinaryNet.tf" -> "MatthieuCourbariaux/BinaryNet"
"itayhubara/BinaryNet.tf" -> "uranusx86/BinaryNet-on-tensorflow"
"itayhubara/BinaryNet.tf" -> "itayhubara/BinaryNet.pytorch"
"itayhubara/BinaryNet.tf" -> "allenai/XNOR-Net"
"itayhubara/BinaryNet.tf" -> "yaysummeriscoming/BinaryNet_and_XNORNet"
"itayhubara/BinaryNet.tf" -> "itayhubara/BinaryNet"
"itayhubara/BinaryNet.tf" -> "DingKe/nn_playground"
"itayhubara/BinaryNet.tf" -> "MatthieuCourbariaux/BinaryConnect"
"itayhubara/BinaryNet.tf" -> "layog/Accurate-Binary-Convolution-Network"
"boluoweifenda/WAGE" -> "stevenygd/WAGE.pytorch"
"boluoweifenda/WAGE" -> "Tiiiger/QPyTorch"
"boluoweifenda/WAGE" -> "eladhoffer/quantized.pytorch"
"boluoweifenda/WAGE" -> "julianfaraone/SYQ"
"boluoweifenda/WAGE" -> "microsoft/LQ-Nets"
"boluoweifenda/WAGE" -> "antspy/quantized_distillation"
"yaroslavvb/kfac_pytorch" -> "alecwangcq/KFAC-Pytorch"
"yaroslavvb/kfac_pytorch" -> "Thrandis/EKFAC-pytorch"
"yaroslavvb/kfac_pytorch" -> "tensorflow/kfac"
"tensorflow/kfac" -> "alecwangcq/KFAC-Pytorch"
"tensorflow/kfac" -> "yaroslavvb/kfac_pytorch"
"tensorflow/kfac" -> "Thrandis/EKFAC-pytorch"
"tensorflow/kfac" -> "gpauloski/kfac-pytorch"
"tensorflow/kfac" -> "tyohei/chainerkfac"
"tensorflow/kfac" -> "gd-zhang/noisy-K-FAC"
"tensorflow/kfac" -> "pomonam/NoisyNaturalGradient"
"tensorflow/kfac" -> "fKunstner/limitations-empirical-fisher"
"tensorflow/kfac" -> "toiaydcdyywlhzvlob/backpack"
"tensorflow/kfac" -> "rgrosse/csc2541_examples"
"reu2018DL/YOLO-LITE" -> "Adamdad/keras-YOLOv3-mobilenet" ["e"=1]
"reu2018DL/YOLO-LITE" -> "liux0614/yolo_nano"
"reu2018DL/YOLO-LITE" -> "Stinky-Tofu/Stronger-yolo" ["e"=1]
"reu2018DL/YOLO-LITE" -> "eric612/MobileNet-YOLO" ["e"=1]
"reu2018DL/YOLO-LITE" -> "Robert-JunWang/Pelee" ["e"=1]
"reu2018DL/YOLO-LITE" -> "PengyiZhang/SlimYOLOv3"
"alecwangcq/KFAC-Pytorch" -> "tensorflow/kfac"
"alecwangcq/KFAC-Pytorch" -> "Thrandis/EKFAC-pytorch"
"alecwangcq/KFAC-Pytorch" -> "yaroslavvb/kfac_pytorch"
"alecwangcq/KFAC-Pytorch" -> "gpauloski/kfac-pytorch"
"alecwangcq/KFAC-Pytorch" -> "pomonam/NoisyNaturalGradient"
"alecwangcq/KFAC-Pytorch" -> "YiwenShaoStephen/NGD-SGD"
"itayhubara/BinaryNet.pytorch" -> "jiecaoyu/XNOR-Net-PyTorch"
"itayhubara/BinaryNet.pytorch" -> "MatthieuCourbariaux/BinaryNet"
"itayhubara/BinaryNet.pytorch" -> "itayhubara/BinaryNet"
"itayhubara/BinaryNet.pytorch" -> "liuzechun/ReActNet"
"itayhubara/BinaryNet.pytorch" -> "eladhoffer/convNet.pytorch"
"itayhubara/BinaryNet.pytorch" -> "cooooorn/Pytorch-XNOR-Net"
"itayhubara/BinaryNet.pytorch" -> "liuzechun/Bi-Real-net"
"itayhubara/BinaryNet.pytorch" -> "1adrianb/binary-networks-pytorch"
"itayhubara/BinaryNet.pytorch" -> "htqin/IR-Net"
"itayhubara/BinaryNet.pytorch" -> "allenai/XNOR-Net"
"itayhubara/BinaryNet.pytorch" -> "hpi-xnor/BMXNet-v2"
"itayhubara/BinaryNet.pytorch" -> "itayhubara/BinaryNet.tf"
"itayhubara/BinaryNet.pytorch" -> "MatthieuCourbariaux/BinaryConnect"
"itayhubara/BinaryNet.pytorch" -> "Akashmathwani/Binarized-Neural-networks-using-pytorch"
"itayhubara/BinaryNet.pytorch" -> "larq/larq"
"larq/larq" -> "larq/compute-engine"
"larq/larq" -> "larq/zoo"
"larq/larq" -> "itayhubara/BinaryNet.pytorch"
"larq/larq" -> "JDAI-CV/dabnn" ["e"=1]
"larq/larq" -> "plumerai/rethinking-bnn-optimization"
"larq/larq" -> "liuzechun/ReActNet"
"larq/larq" -> "google/qkeras" ["e"=1]
"larq/larq" -> "1adrianb/binary-networks-pytorch"
"larq/larq" -> "hpi-xnor/BMXNet-v2"
"larq/larq" -> "Zhen-Dong/HAWQ"
"larq/larq" -> "Xilinx/brevitas" ["e"=1]
"larq/larq" -> "liuzechun/Bi-Real-net"
"larq/larq" -> "jiecaoyu/XNOR-Net-PyTorch"
"larq/larq" -> "larq/zookeeper"
"larq/larq" -> "cpetig/tflite_micro_compiler" ["e"=1]
"KarenUllrich/Tutorial_BayesianCompressionForDL" -> "KarenUllrich/Tutorial-SoftWeightSharingForNNCompression"
"KarenUllrich/Tutorial_BayesianCompressionForDL" -> "bayesgroup/variational-dropout-sparsifies-dnn"
"KarenUllrich/Tutorial_BayesianCompressionForDL" -> "Lyken17/Bayesian-Compression-for-Deep-Learning"
"KarenUllrich/Tutorial_BayesianCompressionForDL" -> "yiwenguo/Dynamic-Network-Surgery"
"ralbertazzi/bnn" -> "Stuart0l/BNN"
"mightydeveloper/Deep-Compression-PyTorch" -> "wojciechmo/deep-compression"
"mightydeveloper/Deep-Compression-PyTorch" -> "songhan/Deep-Compression-AlexNet"
"mightydeveloper/Deep-Compression-PyTorch" -> "jack-willturner/deep-compression"
"mightydeveloper/Deep-Compression-PyTorch" -> "mit-han-lab/amc"
"mightydeveloper/Deep-Compression-PyTorch" -> "may0324/DeepCompression-caffe"
"mightydeveloper/Deep-Compression-PyTorch" -> "Eric-mingjie/rethinking-network-pruning"
"mightydeveloper/Deep-Compression-PyTorch" -> "csyhhu/Awesome-Deep-Neural-Network-Compression"
"mightydeveloper/Deep-Compression-PyTorch" -> "chester256/Model-Compression-Papers"
"mightydeveloper/Deep-Compression-PyTorch" -> "xinyaoliu/Deep-Compression-for-Neural-Networks"
"mightydeveloper/Deep-Compression-PyTorch" -> "Eric-mingjie/network-slimming"
"mightydeveloper/Deep-Compression-PyTorch" -> "jacobgil/pytorch-pruning"
"mightydeveloper/Deep-Compression-PyTorch" -> "ruihangdu/PyTorch-Deep-Compression"
"mightydeveloper/Deep-Compression-PyTorch" -> "he-y/soft-filter-pruning"
"mightydeveloper/Deep-Compression-PyTorch" -> "666DZY666/micronet"
"mightydeveloper/Deep-Compression-PyTorch" -> "wenwei202/caffe"
"sjmikler/snip-pruning" -> "mil-ad/snip"
"namhoonlee/snip-public" -> "mil-ad/snip"
"namhoonlee/snip-public" -> "sjmikler/snip-pruning"
"namhoonlee/snip-public" -> "namhoonlee/spp-public"
"namhoonlee/snip-public" -> "alecwangcq/GraSP"
"namhoonlee/snip-public" -> "ganguli-lab/Synaptic-Flow"
"talebolano/yolov3-network-slimming" -> "Lam1360/YOLOv3-model-pruning"
"talebolano/yolov3-network-slimming" -> "coldlarry/YOLOv3-complete-pruning"
"talebolano/yolov3-network-slimming" -> "PengyiZhang/SlimYOLOv3"
"talebolano/yolov3-network-slimming" -> "Eric-mingjie/network-slimming"
"talebolano/yolov3-network-slimming" -> "liuzhuang13/slimming"
"talebolano/yolov3-network-slimming" -> "tanluren/yolov3-channel-and-layer-pruning"
"talebolano/yolov3-network-slimming" -> "Stinky-Tofu/Stronger-yolo" ["e"=1]
"talebolano/yolov3-network-slimming" -> "foolwood/pytorch-slimming"
"talebolano/yolov3-network-slimming" -> "eric612/MobileNet-YOLO" ["e"=1]
"talebolano/yolov3-network-slimming" -> "violet17/yolov3-channel-pruning"
"talebolano/yolov3-network-slimming" -> "ChenYingpeng/caffe-yolov3" ["e"=1]
"talebolano/yolov3-network-slimming" -> "lewes6369/TensorRT-Yolov3" ["e"=1]
"talebolano/yolov3-network-slimming" -> "Tencent/ObjectDetection-OneStageDet" ["e"=1]
"talebolano/yolov3-network-slimming" -> "GOATmessi8/ASFF" ["e"=1]
"talebolano/yolov3-network-slimming" -> "marvis/pytorch-caffe-darknet-convert" ["e"=1]
"BIGBALLON/CIFAR-ZOO" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"BIGBALLON/CIFAR-ZOO" -> "MingSun-Tse/Efficient-Deep-Learning" ["e"=1]
"timgaripov/dnn-mode-connectivity" -> "noahgolmant/pytorch-hessian-eigenthings" ["e"=1]
"timgaripov/dnn-mode-connectivity" -> "amirgholami/PyHessian" ["e"=1]
"amusi/YOLO-Reproduce-Summary" -> "jwchoi384/Gaussian_YOLOv3"
"amusi/YOLO-Reproduce-Summary" -> "Lam1360/YOLOv3-model-pruning"
"amusi/YOLO-Reproduce-Summary" -> "Robert-JunWang/PeleeNet" ["e"=1]
"amusi/YOLO-Reproduce-Summary" -> "fsx950223/mobilenetv2-yolov3" ["e"=1]
"JaryHuang/awesome_SSD_FPN_GIoU" -> "Zzh-tju/DIoU-SSD-pytorch"
"he-y/filter-pruning-geometric-median" -> "he-y/soft-filter-pruning"
"he-y/filter-pruning-geometric-median" -> "Eric-mingjie/rethinking-network-pruning"
"he-y/filter-pruning-geometric-median" -> "Eric-mingjie/network-slimming"
"he-y/filter-pruning-geometric-median" -> "he-y/Awesome-Pruning"
"he-y/filter-pruning-geometric-median" -> "liuzechun/MetaPruning"
"he-y/filter-pruning-geometric-median" -> "ShadowMusk/QingLong-framework" ["e"=1]
"he-y/filter-pruning-geometric-median" -> "foolwood/pytorch-slimming"
"he-y/filter-pruning-geometric-median" -> "zhensherlock/intellij-platform-git-stats-plugin" ["e"=1]
"he-y/filter-pruning-geometric-median" -> "mislav/contacts" ["e"=1]
"he-y/filter-pruning-geometric-median" -> "lmbxmu/HRank"
"he-y/filter-pruning-geometric-median" -> "ordylan/OrdylanNote" ["e"=1]
"he-y/filter-pruning-geometric-median" -> "jacobgil/pytorch-pruning"
"he-y/filter-pruning-geometric-median" -> "geektcp/UeWoW" ["e"=1]
"he-y/filter-pruning-geometric-median" -> "tyui592/Pruning_filters_for_efficient_convnets"
"he-y/filter-pruning-geometric-median" -> "zhensherlock/company-autocomplete" ["e"=1]
"Thrandis/EKFAC-pytorch" -> "alecwangcq/KFAC-Pytorch"
"Thrandis/EKFAC-pytorch" -> "yaroslavvb/kfac_pytorch"
"Thrandis/EKFAC-pytorch" -> "tensorflow/kfac"
"Thrandis/EKFAC-pytorch" -> "fKunstner/limitations-empirical-fisher"
"Thrandis/EKFAC-pytorch" -> "gpauloski/kfac-pytorch"
"Thrandis/EKFAC-pytorch" -> "cybertronai/pytorch-sso"
"yizt/cv-papers" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"yizt/cv-papers" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"uranusx86/BinaryNet-on-tensorflow" -> "jonathanmarek1/binarynet-tensorflow"
"uranusx86/BinaryNet-on-tensorflow" -> "jaygshah/Binary-Neural-Networks"
"sseung0703/KD_methods_with_TF" -> "antspy/quantized_distillation" ["e"=1]
"wojciechmo/deep-compression" -> "mightydeveloper/Deep-Compression-PyTorch"
"wojciechmo/deep-compression" -> "younghwanoh/impl-pruning-TF"
"necludov/group-sparsity-sbp" -> "bayesgroup/variational-dropout-sparsifies-dnn"
"gd-zhang/noisy-K-FAC" -> "pomonam/NoisyNaturalGradient"
"microsoft/deterministic-variational-inference" -> "pomonam/NoisyNaturalGradient" ["e"=1]
"pomonam/NoisyNaturalGradient" -> "gd-zhang/noisy-K-FAC"
"pomonam/NoisyNaturalGradient" -> "gd-zhang/Weight-Decay"
"hessamb/label-refinery" -> "zhaoweicai/EdMIPS" ["e"=1]
"generalized-iou/Detectron.pytorch" -> "Zzh-tju/DIoU-pytorch-detectron"
"generalized-iou/Detectron.pytorch" -> "generalized-iou/g-darknet"
"generalized-iou/Detectron.pytorch" -> "generalized-iou/g-tensorflow-models"
"generalized-iou/Detectron.pytorch" -> "diggerdu/Generalized-Intersection-over-Union"
"YunYang1994/face_recognition" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"alibaba/ai-matrix" -> "AngusG/tensorflow-xnor-bnn" ["e"=1]
"liuzechun/MetaPruning" -> "anonymous47823493/EagleEye"
"liuzechun/MetaPruning" -> "Zx55/dmcp"
"liuzechun/MetaPruning" -> "lmbxmu/HRank"
"liuzechun/MetaPruning" -> "lmbxmu/ABCPruner"
"liuzechun/MetaPruning" -> "NVlabs/Taylor_pruning"
"liuzechun/MetaPruning" -> "he-y/filter-pruning-geometric-median"
"liuzechun/MetaPruning" -> "enyac-group/LeGR"
"liuzechun/MetaPruning" -> "he-y/soft-filter-pruning"
"liuzechun/MetaPruning" -> "mit-han-lab/amc"
"liuzechun/MetaPruning" -> "megvii-model/MetaPruning"
"liuzechun/MetaPruning" -> "megvii-model/SinglePathOneShot" ["e"=1]
"liuzechun/MetaPruning" -> "liuzechun/Bi-Real-net"
"liuzechun/MetaPruning" -> "JiahuiYu/slimmable_networks" ["e"=1]
"liuzechun/MetaPruning" -> "Eric-mingjie/rethinking-network-pruning"
"liuzechun/MetaPruning" -> "DingXiaoH/ResRep"
"cooooorn/Pytorch-XNOR-Net" -> "jiecaoyu/XNOR-Net-PyTorch"
"cooooorn/Pytorch-XNOR-Net" -> "liuzechun/Bi-Real-net"
"maozezhong/CV_ToolBox" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"mit-han-lab/amc" -> "mit-han-lab/amc-models"
"mit-han-lab/amc" -> "mit-han-lab/haq"
"mit-han-lab/amc" -> "liuzechun/MetaPruning"
"mit-han-lab/amc" -> "zhijian-liu/torchprofile" ["e"=1]
"mit-han-lab/amc" -> "mit-han-lab/proxylessnas" ["e"=1]
"mit-han-lab/amc" -> "Zx55/dmcp"
"mit-han-lab/amc" -> "he-y/soft-filter-pruning"
"mit-han-lab/amc" -> "guan-yuan/awesome-AutoML-and-Lightweight-Models" ["e"=1]
"mit-han-lab/amc" -> "Eric-mingjie/rethinking-network-pruning"
"mit-han-lab/amc" -> "mightydeveloper/Deep-Compression-PyTorch"
"mit-han-lab/amc" -> "lmbxmu/HRank"
"mit-han-lab/amc" -> "mit-han-lab/apq"
"mit-han-lab/amc" -> "SCUT-AILab/DCP" ["e"=1]
"mit-han-lab/amc" -> "he-y/filter-pruning-geometric-median"
"mit-han-lab/amc" -> "enyac-group/single-path-nas" ["e"=1]
"google/spectral-density" -> "deep-lab/DeepnetHessian"
"google/spectral-density" -> "AnonymousNIPS2019/DeepnetHessian"
"google/spectral-density" -> "noahgolmant/pytorch-hessian-eigenthings"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "amirgholami/ZeroQ"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "Efficient-ML/Awesome-Model-Quantization"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "MingSun-Tse/Efficient-Deep-Learning"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "submission2019/cnn-quantization"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "he-y/Awesome-Pruning"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "ModelTC/MQBench"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "memoiry/Awesome-model-compression-and-acceleration"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "yhhhli/BRECQ"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "666DZY666/micronet"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "Zhen-Dong/HAWQ"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "zhutmost/lsq-net"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "cedrickchee/awesome-ml-model-compression"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "Jermmy/pytorch-quantization-demo"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "Eric-mingjie/rethinking-network-pruning"
"csyhhu/Awesome-Deep-Neural-Network-Compression" -> "yhhhli/APoT_Quantization"
"mit-han-lab/haq" -> "mit-han-lab/amc"
"mit-han-lab/haq" -> "Zhen-Dong/HAWQ"
"mit-han-lab/haq" -> "amirgholami/ZeroQ"
"mit-han-lab/haq" -> "zhaoweicai/EdMIPS"
"mit-han-lab/haq" -> "mit-han-lab/apq"
"mit-han-lab/haq" -> "microsoft/LQ-Nets"
"mit-han-lab/haq" -> "yhhhli/BRECQ"
"mit-han-lab/haq" -> "submission2019/cnn-quantization"
"mit-han-lab/haq" -> "mit-han-lab/proxylessnas" ["e"=1]
"mit-han-lab/haq" -> "yhhhli/APoT_Quantization"
"mit-han-lab/haq" -> "facebookresearch/kill-the-bits"
"mit-han-lab/haq" -> "Mxbonn/INQ-pytorch"
"mit-han-lab/haq" -> "mit-han-lab/amc-models"
"mit-han-lab/haq" -> "zhijian-liu/torchprofile" ["e"=1]
"mit-han-lab/haq" -> "EECS-NTNU/bismo" ["e"=1]
"AlliedToasters/synapses" -> "dcmocanu/sparse-evolutionary-artificial-neural-networks"
"ChenYingpeng/caffe-yolov3" -> "talebolano/yolov3-network-slimming" ["e"=1]
"BenWhetton/keras-surgeon" -> "jacobgil/pytorch-pruning"
"BenWhetton/keras-surgeon" -> "Raukk/tf-keras-surgeon"
"BenWhetton/keras-surgeon" -> "DwangoMediaVillage/keras_compressor" ["e"=1]
"BenWhetton/keras-surgeon" -> "gaborvecsei/Ridurre-Network-Filter-Pruning-Keras"
"BenWhetton/keras-surgeon" -> "Eric-mingjie/rethinking-network-pruning"
"BenWhetton/keras-surgeon" -> "antspy/quantized_distillation"
"BenWhetton/keras-surgeon" -> "he-y/soft-filter-pruning"
"BenWhetton/keras-surgeon" -> "wanglouis49/pytorch-weights_pruning"
"BenWhetton/keras-surgeon" -> "titu1994/keras-squeeze-excite-network" ["e"=1]
"bhushan23/ADMM" -> "nirum/ADMM"
"bhushan23/ADMM" -> "mihirchakradeo/admm"
"bhushan23/ADMM" -> "bzantium/pytorch-admm-pruning"
"eladhoffer/quantized.pytorch" -> "eladhoffer/convNet.pytorch"
"eladhoffer/quantized.pytorch" -> "submission2019/cnn-quantization"
"eladhoffer/quantized.pytorch" -> "Tiiiger/QPyTorch"
"eladhoffer/quantized.pytorch" -> "microsoft/LQ-Nets"
"eladhoffer/quantized.pytorch" -> "Mxbonn/INQ-pytorch"
"eladhoffer/quantized.pytorch" -> "boluoweifenda/WAGE"
"eladhoffer/quantized.pytorch" -> "Enderdead/Pytorch_Quantize_impls"
"eladhoffer/quantized.pytorch" -> "antspy/quantized_distillation"
"eladhoffer/quantized.pytorch" -> "ynahshan/nn-quantization-pytorch"
"eladhoffer/quantized.pytorch" -> "nowgood/QuantizeCNNModel"
"eladhoffer/quantized.pytorch" -> "NVlabs/Taylor_pruning"
"eladhoffer/quantized.pytorch" -> "mit-han-lab/haq"
"antspy/quantized_distillation" -> "microsoft/LQ-Nets"
"antspy/quantized_distillation" -> "sun254/awesome-model-compression-and-acceleration"
"antspy/quantized_distillation" -> "czhu95/ternarynet"
"antspy/quantized_distillation" -> "eladhoffer/quantized.pytorch"
"antspy/quantized_distillation" -> "liuzechun/Bi-Real-net"
"antspy/quantized_distillation" -> "Mxbonn/INQ-pytorch"
"antspy/quantized_distillation" -> "nowgood/QuantizeCNNModel"
"antspy/quantized_distillation" -> "TropComplique/trained-ternary-quantization"
"antspy/quantized_distillation" -> "boluoweifenda/WAGE"
"antspy/quantized_distillation" -> "aliyun/alibabacloud-quantization-networks"
"antspy/quantized_distillation" -> "AojunZhou/Incremental-Network-Quantization"
"antspy/quantized_distillation" -> "submission2019/cnn-quantization"
"antspy/quantized_distillation" -> "chengshengchan/model_compression" ["e"=1]
"antspy/quantized_distillation" -> "facebookresearch/kill-the-bits"
"antspy/quantized_distillation" -> "mit-han-lab/haq"
"eeric/channel_prune" -> "jacobgil/pytorch-pruning"
"eeric/channel_prune" -> "foolwood/pytorch-slimming"
"eeric/channel_prune" -> "he-y/soft-filter-pruning"
"eeric/channel_prune" -> "jack-willturner/batchnorm-pruning"
"eeric/channel_prune" -> "mengrang/Slimming-pytorch"
"eeric/channel_prune" -> "Eric-mingjie/network-slimming"
"eeric/channel_prune" -> "tyui592/Pruning_filters_for_efficient_convnets"
"Tiiiger/QPyTorch" -> "eladhoffer/quantized.pytorch"
"Tiiiger/QPyTorch" -> "boluoweifenda/WAGE"
"Tiiiger/QPyTorch" -> "stevenygd/WAGE.pytorch"
"Tiiiger/QPyTorch" -> "submission2019/cnn-quantization"
"Tiiiger/QPyTorch" -> "stevenygd/SWALP"
"Tiiiger/QPyTorch" -> "EECS-NTNU/bismo" ["e"=1]
"Tiiiger/QPyTorch" -> "wangmaolin/niti"
"Tiiiger/QPyTorch" -> "mit-han-lab/haq"
"Tiiiger/QPyTorch" -> "microsoft/LQ-Nets"
"Tiiiger/QPyTorch" -> "Zhen-Dong/HAWQ"
"Tiiiger/QPyTorch" -> "Mxbonn/INQ-pytorch"
"Tiiiger/QPyTorch" -> "microsoft/microxcaling" ["e"=1]
"Tiiiger/QPyTorch" -> "eladhoffer/convNet.pytorch"
"Tiiiger/QPyTorch" -> "clevercool/ANT-Quantization" ["e"=1]
"generalized-iou/g-tensorflow-models" -> "generalized-iou/g-darknet"
"twangnh/Distilling-Object-Detectors" -> "SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" ["e"=1]
"nirum/ADMM" -> "bhushan23/ADMM"
"he-y/soft-filter-pruning" -> "he-y/filter-pruning-geometric-median"
"he-y/soft-filter-pruning" -> "Eric-mingjie/rethinking-network-pruning"
"he-y/soft-filter-pruning" -> "jacobgil/pytorch-pruning"
"he-y/soft-filter-pruning" -> "Eric-mingjie/network-slimming"
"he-y/soft-filter-pruning" -> "lmbxmu/HRank"
"he-y/soft-filter-pruning" -> "foolwood/pytorch-slimming"
"he-y/soft-filter-pruning" -> "SCUT-AILab/DCP" ["e"=1]
"he-y/soft-filter-pruning" -> "liuzechun/MetaPruning"
"he-y/soft-filter-pruning" -> "he-y/Awesome-Pruning"
"he-y/soft-filter-pruning" -> "NVlabs/Taylor_pruning"
"he-y/soft-filter-pruning" -> "tyui592/Pruning_filters_for_efficient_convnets"
"he-y/soft-filter-pruning" -> "ethanhe42/channel-pruning"
"he-y/soft-filter-pruning" -> "enyac-group/LeGR"
"he-y/soft-filter-pruning" -> "wanglouis49/pytorch-weights_pruning"
"he-y/soft-filter-pruning" -> "mit-han-lab/amc"
"ChanChiChoi/awesome-model-compression" -> "cedrickchee/awesome-ml-model-compression"
"ChanChiChoi/awesome-model-compression" -> "mrgloom/Network-Speed-and-Compression"
"Xilinx/graffitist" -> "submission2019/cnn-quantization"
"Xilinx/graffitist" -> "allenbai01/ProxQuant"
"wanglouis49/pytorch-weights_pruning" -> "jacobgil/pytorch-pruning"
"wanglouis49/pytorch-weights_pruning" -> "zepx/pytorch-weight-prune"
"wanglouis49/pytorch-weights_pruning" -> "jack-willturner/deep-compression"
"wanglouis49/pytorch-weights_pruning" -> "he-y/soft-filter-pruning"
"wanglouis49/pytorch-weights_pruning" -> "AlumLuther/PruningFilters"
"wanglouis49/pytorch-weights_pruning" -> "tyui592/Pruning_filters_for_efficient_convnets"
"zzzxxxttt/pytorch_DoReFaNet" -> "Jzz24/pytorch_quantization"
"zzzxxxttt/pytorch_DoReFaNet" -> "Mxbonn/INQ-pytorch"
"zzzxxxttt/pytorch_DoReFaNet" -> "allenbai01/ProxQuant"
"zzzxxxttt/pytorch_DoReFaNet" -> "SHI-Labs/Any-Precision-DNNs"
"zzzxxxttt/pytorch_DoReFaNet" -> "zhaoweicai/EdMIPS"
"jack-willturner/batchnorm-pruning" -> "bobye/batchnorm_prune"
"jack-willturner/batchnorm-pruning" -> "ReProduceByYQ/Channel_pruning_yq"
"bobye/batchnorm_prune" -> "jack-willturner/batchnorm-pruning"
"amirgholami/HessianFlow" -> "AnonymousNIPS2019/DeepnetHessian"
"amirgholami/HessianFlow" -> "noahgolmant/pytorch-hessian-eigenthings"
"nephashi/DeepCompression" -> "hiteshvaidya/Model-Compression"
"jack-willturner/deep-compression" -> "mightydeveloper/Deep-Compression-PyTorch"
"jack-willturner/deep-compression" -> "ruihangdu/PyTorch-Deep-Compression"
"jack-willturner/deep-compression" -> "wanglouis49/pytorch-weights_pruning"
"jack-willturner/deep-compression" -> "sun254/awesome-model-compression-and-acceleration"
"jack-willturner/deep-compression" -> "hiteshvaidya/Model-Compression"
"jack-willturner/deep-compression" -> "Guoning-Chen/SimplePruning-PyTorch"
"jack-willturner/deep-compression" -> "songhan/Deep-Compression-AlexNet"
"jack-willturner/deep-compression" -> "he-y/soft-filter-pruning"
"jack-willturner/deep-compression" -> "may0324/DeepCompression-caffe"
"jack-willturner/deep-compression" -> "nephashi/DeepCompression"
"jack-willturner/deep-compression" -> "wenwei202/caffe"
"j-min/Dropouts" -> "kefirski/variational_dropout"
"NVlabs/Taylor_pruning" -> "liuzechun/MetaPruning"
"NVlabs/Taylor_pruning" -> "Eric-mingjie/rethinking-network-pruning"
"NVlabs/Taylor_pruning" -> "he-y/soft-filter-pruning"
"NVlabs/Taylor_pruning" -> "anonymous47823493/EagleEye"
"NVlabs/Taylor_pruning" -> "youzhonghui/gate-decorator-pruning"
"NVlabs/Taylor_pruning" -> "he-y/filter-pruning-geometric-median"
"NVlabs/Taylor_pruning" -> "eladhoffer/quantized.pytorch"
"NVlabs/Taylor_pruning" -> "enyac-group/LeGR"
"NVlabs/Taylor_pruning" -> "csyhhu/L-OBS"
"NVlabs/Taylor_pruning" -> "mil-ad/snip"
"NVlabs/Taylor_pruning" -> "he-y/Awesome-Pruning"
"NVlabs/Taylor_pruning" -> "jacobgil/pytorch-pruning"
"NVlabs/Taylor_pruning" -> "lmbxmu/HRank"
"NVlabs/Taylor_pruning" -> "Zx55/dmcp"
"NVlabs/Taylor_pruning" -> "changlin31/DS-Net" ["e"=1]
"wiseodd/natural-gradients" -> "tudor-berariu/fisher-information-matrix"
"wiseodd/natural-gradients" -> "tfjgeorge/nngeometry"
"larq/zookeeper" -> "nikvaessen/Rethinking-Binarized-Neural-Network-Optimization"
"larq/zoo" -> "larq/compute-engine"
"larq/zoo" -> "larq/larq"
"larq/zoo" -> "larq/zookeeper"
"larq/zoo" -> "liuzechun/Bi-Real-net"
"liuzechun/Bi-Real-net" -> "liuzechun/ReActNet"
"liuzechun/Bi-Real-net" -> "htqin/IR-Net"
"liuzechun/Bi-Real-net" -> "plumerai/rethinking-bnn-optimization"
"liuzechun/Bi-Real-net" -> "hpi-xnor/BMXNet-v2"
"liuzechun/Bi-Real-net" -> "brais-martinez/real2binary"
"liuzechun/Bi-Real-net" -> "jiecaoyu/XNOR-Net-PyTorch"
"liuzechun/Bi-Real-net" -> "lmbxmu/RBNN"
"liuzechun/Bi-Real-net" -> "LaVieEnRoseSMZ/AutoBNN"
"liuzechun/Bi-Real-net" -> "sajaddarabi/BiRealNet"
"liuzechun/Bi-Real-net" -> "mil-ad/studying-binary-neural-networks"
"liuzechun/Bi-Real-net" -> "ZiweiWangTHU/BiDet"
"liuzechun/Bi-Real-net" -> "ruizhoud/DistributionLoss"
"liuzechun/Bi-Real-net" -> "larq/zoo"
"liuzechun/Bi-Real-net" -> "microsoft/LQ-Nets"
"liuzechun/Bi-Real-net" -> "VITA-Group/BNN_NoBN"
"BertMoons/QuantizedNeuralNetworks-Keras-Tensorflow" -> "qinyao-he/bit-rnn"
"BertMoons/QuantizedNeuralNetworks-Keras-Tensorflow" -> "google/qkeras" ["e"=1]
"jwfromm/Riptide" -> "hpi-xnor/BMXNet-v2"
"jwfromm/Riptide" -> "LaVieEnRoseSMZ/AutoBNN"
"hpi-xnor/BMXNet-v2" -> "liuzechun/Bi-Real-net"
"hpi-xnor/BMXNet-v2" -> "mil-ad/studying-binary-neural-networks"
"hpi-xnor/BMXNet-v2" -> "htqin/IR-Net"
"hpi-xnor/BMXNet-v2" -> "liuzechun/ReActNet"
"hpi-xnor/BMXNet-v2" -> "blueardour/model-quantization"
"hpi-xnor/BMXNet-v2" -> "hpi-xnor/BMXNet"
"hpi-xnor/BMXNet-v2" -> "brais-martinez/real2binary"
"hpi-xnor/BMXNet-v2" -> "jwfromm/Riptide"
"hpi-xnor/BMXNet-v2" -> "plumerai/rethinking-bnn-optimization"
"hpi-xnor/BMXNet-v2" -> "itayhubara/BinaryNet.pytorch"
"hpi-xnor/BMXNet-v2" -> "JDAI-CV/dabnn" ["e"=1]
"hpi-xnor/BMXNet-v2" -> "1adrianb/binary-nas"
"hpi-xnor/BMXNet-v2" -> "hpi-xnor/bitorch"
"hpi-xnor/BMXNet-v2" -> "jaygshah/Binary-Neural-Networks"
"hpi-xnor/BMXNet-v2" -> "z-hXu/ReCU"
"xingyul/sparse-winograd-cnn" -> "IntelLabs/SkimCaffe" ["e"=1]
"layog/Accurate-Binary-Convolution-Network" -> "zhuyinheng/ABC-Net-pytorch"
"plumerai/rethinking-bnn-optimization" -> "ruizhoud/DistributionLoss"
"plumerai/rethinking-bnn-optimization" -> "team-approx-bayes/BayesBiNN"
"plumerai/rethinking-bnn-optimization" -> "liuzechun/Bi-Real-net"
"plumerai/rethinking-bnn-optimization" -> "mil-ad/studying-binary-neural-networks"
"plumerai/rethinking-bnn-optimization" -> "bczhangbczhang/Bayesian-Optimized-1-bit-CNNs"
"kefirski/variational_dropout" -> "j-min/Dropouts"
"kefirski/variational_dropout" -> "gngdb/variational-dropout"
"KaiqiZhang/caffe-admm" -> "kaiqzhan/ADAM-ADMM"
"Enderdead/Pytorch_Quantize_impls" -> "nowgood/QuantizeCNNModel"
"Enderdead/Pytorch_Quantize_impls" -> "Mxbonn/INQ-pytorch"
"Enderdead/Pytorch_Quantize_impls" -> "allenbai01/ProxQuant"
"eezywu/Pruned-MobileNet_v2" -> "apxlwl/MobileNet-v2-pruning"
"houlu369/Loss-aware-weight-quantization" -> "houlu369/Loss-aware-Binarization"
"houlu369/Loss-aware-weight-quantization" -> "allenbai01/ProxQuant"
"mrusci/training-mixed-precision-quantized-networks" -> "moranshkolnik/RobustQuantization"
"kaiqzhan/admm-pruning" -> "bzantium/pytorch-admm-pruning"
"kaiqzhan/admm-pruning" -> "kaiqzhan/ADAM-ADMM"
"kaiqzhan/admm-pruning" -> "KaiqiZhang/caffe-admm"
"kaiqzhan/admm-pruning" -> "yeshaokai/Robustness-Aware-Pruning-ADMM"
"eghouti/BinaryConnect" -> "makora9143/binarynet"
"SCUT-AILab/DCP" -> "he-y/soft-filter-pruning" ["e"=1]
"SCUT-AILab/DCP" -> "enyac-group/LeGR" ["e"=1]
"SCUT-AILab/DCP" -> "youzhonghui/gate-decorator-pruning" ["e"=1]
"gaborvecsei/Ridurre-Network-Filter-Pruning-Keras" -> "Tony607/prune-keras"
"violet17/yolov3-channel-pruning" -> "shentanyue/Pytorch-yolov3-prune-v4"
"zhaohui-yang/LegoNet_pytorch" -> "iamhankai/Full-Stack-Filters"
"julianfaraone/SYQ" -> "peiswang/Two-Step-Quantization-AlexNet"
"julianfaraone/SYQ" -> "ChanganVR/ConstraintAwareCompression"
"fKunstner/limitations-empirical-fisher" -> "ermongroup/higher_order_invariance"
"fKunstner/limitations-empirical-fisher" -> "toiaydcdyywlhzvlob/backpack"
"guoxiaolu/model_compression" -> "ReProduceByYQ/Channel_pruning_yq"
"mil-ad/studying-binary-neural-networks" -> "team-approx-bayes/BayesBiNN"
"mil-ad/studying-binary-neural-networks" -> "ruizhoud/DistributionLoss"
"mil-ad/studying-binary-neural-networks" -> "plumerai/rethinking-bnn-optimization"
"kaiqzhan/ADAM-ADMM" -> "KaiqiZhang/caffe-admm"
"makora9143/binarynet" -> "eghouti/BinaryConnect"
"jaygshah/Binary-Neural-Networks" -> "akshaychawla/Binary-Neural-Networks"
"stevenygd/WAGE.pytorch" -> "boluoweifenda/WAGE"
"deep-lab/DeepnetHessian" -> "AnonymousNIPS2019/DeepnetHessian"
"AnonymousNIPS2019/DeepnetHessian" -> "deep-lab/DeepnetHessian"
"HobbitLong/RepDistiller" -> "IntelLabs/distiller" ["e"=1]
"HobbitLong/RepDistiller" -> "he-y/Awesome-Pruning" ["e"=1]
"tanluren/yolov3-channel-and-layer-pruning" -> "Lam1360/YOLOv3-model-pruning"
"tanluren/yolov3-channel-and-layer-pruning" -> "coldlarry/YOLOv3-complete-pruning"
"tanluren/yolov3-channel-and-layer-pruning" -> "PengyiZhang/SlimYOLOv3"
"tanluren/yolov3-channel-and-layer-pruning" -> "ZJU-lishuang/yolov5_prune" ["e"=1]
"tanluren/yolov3-channel-and-layer-pruning" -> "Syencil/mobile-yolov5-pruning-distillation" ["e"=1]
"tanluren/yolov3-channel-and-layer-pruning" -> "SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone"
"tanluren/yolov3-channel-and-layer-pruning" -> "Eric-mingjie/network-slimming"
"tanluren/yolov3-channel-and-layer-pruning" -> "666DZY666/micronet"
"tanluren/yolov3-channel-and-layer-pruning" -> "GOATmessi8/ASFF" ["e"=1]
"tanluren/yolov3-channel-and-layer-pruning" -> "midasklr/yolov5prune" ["e"=1]
"tanluren/yolov3-channel-and-layer-pruning" -> "talebolano/yolov3-network-slimming"
"tanluren/yolov3-channel-and-layer-pruning" -> "enazoe/yolo-tensorrt" ["e"=1]
"tanluren/yolov3-channel-and-layer-pruning" -> "HaloTrouvaille/YOLO-Multi-Backbones-Attention" ["e"=1]
"tanluren/yolov3-channel-and-layer-pruning" -> "Tencent/ObjectDetection-OneStageDet" ["e"=1]
"tanluren/yolov3-channel-and-layer-pruning" -> "WongKinYiu/PyTorch_YOLOv4" ["e"=1]
"Syencil/tensorRT" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"PaddlePaddle/PaddleSlim" -> "666DZY666/micronet" ["e"=1]
"PaddlePaddle/PaddleSlim" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"PaddlePaddle/PaddleSlim" -> "OpenPPL/ppq" ["e"=1]
"PaddlePaddle/PaddleSlim" -> "coldlarry/YOLOv3-complete-pruning" ["e"=1]
"jwchoi384/Gaussian_YOLOv3" -> "motokimura/PyTorch_Gaussian_YOLOv3"
"jwchoi384/Gaussian_YOLOv3" -> "Zzh-tju/DIoU-darknet"
"jwchoi384/Gaussian_YOLOv3" -> "xuannianz/keras-GaussianYOLOv3"
"jwchoi384/Gaussian_YOLOv3" -> "GOATmessi8/ASFF" ["e"=1]
"jwchoi384/Gaussian_YOLOv3" -> "PengyiZhang/SlimYOLOv3"
"jwchoi384/Gaussian_YOLOv3" -> "generalized-iou/g-darknet"
"jwchoi384/Gaussian_YOLOv3" -> "coldlarry/YOLOv3-complete-pruning"
"jwchoi384/Gaussian_YOLOv3" -> "liux0614/yolo_nano"
"jwchoi384/Gaussian_YOLOv3" -> "princeton-vl/CornerNet-Lite" ["e"=1]
"jwchoi384/Gaussian_YOLOv3" -> "ethanhe42/KL-Loss" ["e"=1]
"jwchoi384/Gaussian_YOLOv3" -> "tanluren/yolov3-channel-and-layer-pruning"
"jwchoi384/Gaussian_YOLOv3" -> "Lam1360/YOLOv3-model-pruning"
"jwchoi384/Gaussian_YOLOv3" -> "Stinky-Tofu/Stronger-yolo" ["e"=1]
"jwchoi384/Gaussian_YOLOv3" -> "Duankaiwen/CenterNet" ["e"=1]
"jwchoi384/Gaussian_YOLOv3" -> "sfzhang15/ATSS" ["e"=1]
"dog-qiuqiu/Yolo-Fastest" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"dog-qiuqiu/Yolo-Fastest" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"huawei-noah/Efficient-AI-Backbones" -> "huawei-noah/Efficient-Computing" ["e"=1]
"apxlwl/MobileNet-v2-pruning" -> "eezywu/Pruned-MobileNet_v2"
"apxlwl/MobileNet-v2-pruning" -> "ivclab/Multistage_Pruning"
"apxlwl/MobileNet-v2-pruning" -> "liuzechun/MetaPruning"
"apxlwl/MobileNet-v2-pruning" -> "apxlwl/MNN-yolov3" ["e"=1]
"apxlwl/MobileNet-v2-pruning" -> "he-y/soft-filter-pruning"
"WongKinYiu/PyTorch_YOLOv4" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"WongKinYiu/PyTorch_YOLOv4" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"njvisionpower/Safety-Helmet-Wearing-Dataset" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"njvisionpower/Safety-Helmet-Wearing-Dataset" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"666DZY666/micronet" -> "IntelLabs/distiller"
"666DZY666/micronet" -> "tanluren/yolov3-channel-and-layer-pruning"
"666DZY666/micronet" -> "Eric-mingjie/rethinking-network-pruning"
"666DZY666/micronet" -> "Lam1360/YOLOv3-model-pruning"
"666DZY666/micronet" -> "he-y/Awesome-Pruning"
"666DZY666/micronet" -> "ModelTC/MQBench"
"666DZY666/micronet" -> "Efficient-ML/Awesome-Model-Quantization"
"666DZY666/micronet" -> "Eric-mingjie/network-slimming"
"666DZY666/micronet" -> "coldlarry/YOLOv3-complete-pruning"
"666DZY666/micronet" -> "Jermmy/pytorch-quantization-demo"
"666DZY666/micronet" -> "OpenPPL/ppq"
"666DZY666/micronet" -> "Xilinx/brevitas" ["e"=1]
"666DZY666/micronet" -> "Tencent/PocketFlow"
"666DZY666/micronet" -> "daquexian/onnx-simplifier" ["e"=1]
"666DZY666/micronet" -> "VainF/Torch-Pruning"
"deepglint/EasyQuant" -> "BUG1989/caffe-int8-convert-tools" ["e"=1]
"deepglint/EasyQuant" -> "aovoc/nnieqat-pytorch" ["e"=1]
"deepglint/EasyQuant" -> "yhhhli/BRECQ"
"deepglint/EasyQuant" -> "itayhubara/CalibTIP"
"deepglint/EasyQuant" -> "amirgholami/ZeroQ"
"deepglint/EasyQuant" -> "jakc4103/DFQ"
"deepglint/EasyQuant" -> "hahnyuan/PTQ4ViT"
"deepglint/EasyQuant" -> "ModelTC/MQBench"
"deepglint/EasyQuant" -> "ynahshan/nn-quantization-pytorch"
"deepglint/EasyQuant" -> "Zhen-Dong/HAWQ"
"deepglint/EasyQuant" -> "megvii-research/FQ-ViT"
"deepglint/EasyQuant" -> "submission2019/cnn-quantization"
"deepglint/EasyQuant" -> "kssteven418/I-BERT"
"deepglint/EasyQuant" -> "Jermmy/pytorch-quantization-demo"
"deepglint/EasyQuant" -> "666DZY666/micronet"
"zhiqwang/yolort" -> "OpenPPL/ppq" ["e"=1]
"Syencil/mobile-yolov5-pruning-distillation" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"Syencil/mobile-yolov5-pruning-distillation" -> "coldlarry/YOLOv3-complete-pruning" ["e"=1]
"Syencil/mobile-yolov5-pruning-distillation" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"fxmeng/Pruning-Filter-in-Filter" -> "cfs6/AChat" ["e"=1]
"huawei-noah/Efficient-Computing" -> "huawei-noah/Efficient-AI-Backbones" ["e"=1]
"huawei-noah/Efficient-Computing" -> "NVlabs/DeepInversion" ["e"=1]
"huawei-noah/Efficient-Computing" -> "FLHonker/Awesome-Knowledge-Distillation" ["e"=1]
"huawei-noah/Efficient-Computing" -> "he-y/Awesome-Pruning"
"huawei-noah/Efficient-Computing" -> "yehuitang/Pruning"
"huawei-noah/Efficient-Computing" -> "666DZY666/micronet"
"huawei-noah/Efficient-Computing" -> "MingSun-Tse/Efficient-Deep-Learning"
"huawei-noah/Efficient-Computing" -> "VainF/Torch-Pruning"
"huawei-noah/Efficient-Computing" -> "HobbitLong/RepDistiller" ["e"=1]
"huawei-noah/Efficient-Computing" -> "huawei-noah/VanillaNet" ["e"=1]
"huawei-noah/Efficient-Computing" -> "Eric-mingjie/rethinking-network-pruning"
"huawei-noah/Efficient-Computing" -> "yuanli2333/Teacher-free-Knowledge-Distillation" ["e"=1]
"huawei-noah/Efficient-Computing" -> "Efficient-ML/Awesome-Model-Quantization"
"huawei-noah/Efficient-Computing" -> "DingXiaoH/RepVGG" ["e"=1]
"huawei-noah/Efficient-Computing" -> "huawei-noah/AdderNet" ["e"=1]
"coldlarry/YOLOv3-complete-pruning" -> "tanluren/yolov3-channel-and-layer-pruning"
"coldlarry/YOLOv3-complete-pruning" -> "Lam1360/YOLOv3-model-pruning"
"coldlarry/YOLOv3-complete-pruning" -> "PengyiZhang/SlimYOLOv3"
"coldlarry/YOLOv3-complete-pruning" -> "SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone"
"coldlarry/YOLOv3-complete-pruning" -> "talebolano/yolov3-network-slimming"
"coldlarry/YOLOv3-complete-pruning" -> "GOATmessi8/ASFF" ["e"=1]
"coldlarry/YOLOv3-complete-pruning" -> "666DZY666/micronet"
"coldlarry/YOLOv3-complete-pruning" -> "HaloTrouvaille/YOLO-Multi-Backbones-Attention" ["e"=1]
"coldlarry/YOLOv3-complete-pruning" -> "Syencil/mobile-yolov5-pruning-distillation" ["e"=1]
"coldlarry/YOLOv3-complete-pruning" -> "Eric-mingjie/network-slimming"
"coldlarry/YOLOv3-complete-pruning" -> "ZJU-lishuang/yolov5_prune" ["e"=1]
"coldlarry/YOLOv3-complete-pruning" -> "foolwood/pytorch-slimming"
"coldlarry/YOLOv3-complete-pruning" -> "Tencent/ObjectDetection-OneStageDet" ["e"=1]
"coldlarry/YOLOv3-complete-pruning" -> "jwchoi384/Gaussian_YOLOv3"
"coldlarry/YOLOv3-complete-pruning" -> "midasklr/yolov5prune" ["e"=1]
"prabhuomkar/pytorch-cpp" -> "IntelLabs/distiller" ["e"=1]
"VainF/Torch-Pruning" -> "he-y/Awesome-Pruning"
"VainF/Torch-Pruning" -> "horseee/LLM-Pruner" ["e"=1]
"VainF/Torch-Pruning" -> "666DZY666/micronet"
"VainF/Torch-Pruning" -> "Eric-mingjie/network-slimming"
"VainF/Torch-Pruning" -> "Eric-mingjie/rethinking-network-pruning"
"VainF/Torch-Pruning" -> "IntelLabs/distiller"
"VainF/Torch-Pruning" -> "Efficient-ML/Awesome-Model-Quantization"
"VainF/Torch-Pruning" -> "Syencil/mobile-yolov5-pruning-distillation" ["e"=1]
"VainF/Torch-Pruning" -> "open-mmlab/mmrazor" ["e"=1]
"VainF/Torch-Pruning" -> "OpenPPL/ppq"
"VainF/Torch-Pruning" -> "quic/aimet"
"VainF/Torch-Pruning" -> "midasklr/yolov5prune" ["e"=1]
"VainF/Torch-Pruning" -> "tanluren/yolov3-channel-and-layer-pruning"
"VainF/Torch-Pruning" -> "DingXiaoH/RepVGG" ["e"=1]
"VainF/Torch-Pruning" -> "ZJU-lishuang/yolov5_prune" ["e"=1]
"FLHonker/Awesome-Knowledge-Distillation" -> "he-y/Awesome-Pruning" ["e"=1]
"FLHonker/Awesome-Knowledge-Distillation" -> "IntelLabs/distiller" ["e"=1]
"FLHonker/Awesome-Knowledge-Distillation" -> "huawei-noah/Efficient-Computing" ["e"=1]
"megvii-model/ShuffleNet-Series" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"enazoe/yolo-tensorrt" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"mit-han-lab/once-for-all" -> "IntelLabs/distiller" ["e"=1]
"mit-han-lab/once-for-all" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"libxsmm/libxsmm" -> "IntelLabs/SkimCaffe" ["e"=1]
"Byronnar/tensorflow-serving-yolov3" -> "coldlarry/YOLOv3-complete-pruning" ["e"=1]
"tczhangzhi/pytorch-distributed" -> "666DZY666/micronet" ["e"=1]
"Zzh-tju/DIoU-SSD-pytorch" -> "Zzh-tju/DIoU-pytorch-detectron"
"Zzh-tju/DIoU-SSD-pytorch" -> "Zzh-tju/DIoU"
"Zzh-tju/DIoU-SSD-pytorch" -> "Zzh-tju/DIoU-darknet"
"Zzh-tju/DIoU-SSD-pytorch" -> "JaryHuang/awesome_SSD_FPN_GIoU"
"Zzh-tju/DIoU" -> "Zzh-tju/DIoU-pytorch-detectron"
"Zzh-tju/DIoU" -> "Zzh-tju/DIoU-darknet"
"Zzh-tju/DIoU" -> "Zzh-tju/DIoU-SSD-pytorch"
"Zzh-tju/DIoU" -> "Zzh-tju/CIoU"
"Zzh-tju/DIoU" -> "generalized-iou/g-darknet"
"Adlik/Adlik" -> "OpenPPL/ppq" ["e"=1]
"Adlik/Adlik" -> "ModelTC/MQBench" ["e"=1]
"Adlik/Adlik" -> "666DZY666/micronet" ["e"=1]
"huggingface/pytorch_block_sparse" -> "google-research/rigl" ["e"=1]
"google-research/rigl" -> "verbose-void/rigl-torch"
"google-research/rigl" -> "TimDettmers/sparse_learning" ["e"=1]
"google-research/rigl" -> "RAIVNLab/STR"
"google-research/rigl" -> "namhoonlee/snip-public"
"google-research/rigl" -> "Shiweiliuiiiiiii/In-Time-Over-Parameterization"
"google-research/rigl" -> "mil-ad/snip"
"google-research/rigl" -> "google-research/sputnik" ["e"=1]
"google-research/rigl" -> "VITA-Group/GraNet"
"google-research/rigl" -> "varun19299/rigl-reproducibility"
"google-research/rigl" -> "facebookresearch/open_lth"
"google-research/rigl" -> "dcmocanu/sparse-evolutionary-artificial-neural-networks"
"google-research/rigl" -> "allenai/hidden-networks"
"david8862/keras-YOLOv3-model-set" -> "liux0614/yolo_nano" ["e"=1]
"david8862/keras-YOLOv3-model-set" -> "PengyiZhang/SlimYOLOv3" ["e"=1]
"Tencent/TNN" -> "666DZY666/micronet" ["e"=1]
"Tencent/TNN" -> "Tencent/PocketFlow" ["e"=1]
"VITA-Group/AutoGAN" -> "yehuitang/Pruning" ["e"=1]
"youzhonghui/gate-decorator-pruning" -> "Zx55/dmcp"
"youzhonghui/gate-decorator-pruning" -> "SCUT-AILab/DCP" ["e"=1]
"youzhonghui/gate-decorator-pruning" -> "enyac-group/LeGR"
"youzhonghui/gate-decorator-pruning" -> "NVlabs/Taylor_pruning"
"youzhonghui/gate-decorator-pruning" -> "frankwang345/pruning-from-scratch"
"youzhonghui/gate-decorator-pruning" -> "he-y/filter-pruning-geometric-median"
"youzhonghui/gate-decorator-pruning" -> "liuzechun/MetaPruning"
"youzhonghui/gate-decorator-pruning" -> "mit-han-lab/amc-models"
"youzhonghui/gate-decorator-pruning" -> "anonymous47823493/EagleEye"
"youzhonghui/gate-decorator-pruning" -> "Roll920/AutoPruner"
"jakc4103/DFQ" -> "amirgholami/ZeroQ"
"jakc4103/DFQ" -> "submission2019/cnn-quantization"
"jakc4103/DFQ" -> "yhhhli/BRECQ"
"jakc4103/DFQ" -> "itayhubara/CalibTIP"
"jakc4103/DFQ" -> "Zhen-Dong/HAWQ"
"jakc4103/DFQ" -> "deepglint/EasyQuant"
"jakc4103/DFQ" -> "peiswang/BitSplit"
"jakc4103/DFQ" -> "ynahshan/nn-quantization-pytorch"
"jakc4103/DFQ" -> "megvii-research/FQ-ViT"
"jakc4103/DFQ" -> "clevercool/SQuant"
"jakc4103/DFQ" -> "ModelTC/MQBench"
"jakc4103/DFQ" -> "Qualcomm-AI-research/transformer-quantization"
"jakc4103/DFQ" -> "skmhrk1209/QuanTorch"
"jakc4103/DFQ" -> "BUG1989/caffe-int8-convert-tools" ["e"=1]
"jakc4103/DFQ" -> "kssteven418/I-BERT"
"intel/neural-compressor" -> "quic/aimet" ["e"=1]
"intel/neural-compressor" -> "OpenPPL/ppq" ["e"=1]
"intel/neural-compressor" -> "Efficient-ML/Awesome-Model-Quantization" ["e"=1]
"intel/neural-compressor" -> "ModelTC/MQBench" ["e"=1]
"intel/neural-compressor" -> "VainF/Torch-Pruning" ["e"=1]
"pytorch/android-demo-app" -> "666DZY666/micronet" ["e"=1]
"ganguli-lab/Synaptic-Flow" -> "mil-ad/snip"
"ganguli-lab/Synaptic-Flow" -> "alecwangcq/GraSP"
"ganguli-lab/Synaptic-Flow" -> "RAIVNLab/STR"
"ganguli-lab/Synaptic-Flow" -> "hoonyyhoon/Synflow_SNIP_GraSP"
"ganguli-lab/Synaptic-Flow" -> "namhoonlee/snip-public"
"ganguli-lab/Synaptic-Flow" -> "JingtongSu/sanity-checking-pruning"
"ganguli-lab/Synaptic-Flow" -> "mil-ad/prospr"
"ganguli-lab/Synaptic-Flow" -> "facebookresearch/open_lth"
"ganguli-lab/Synaptic-Flow" -> "lmbxmu/ABCPruner"
"ganguli-lab/Synaptic-Flow" -> "allenai/hidden-networks"
"ganguli-lab/Synaptic-Flow" -> "JJGO/shrinkbench"
"ganguli-lab/Synaptic-Flow" -> "VITA-Group/Random_Pruning"
"ganguli-lab/Synaptic-Flow" -> "verbose-void/rigl-torch"
"ganguli-lab/Synaptic-Flow" -> "VITA-Group/GraNet"
"ganguli-lab/Synaptic-Flow" -> "GATECH-EIC/Early-Bird-Tickets"
"zchrissirhcz/awesome-ncnn" -> "deepglint/EasyQuant" ["e"=1]
"anonymous47823493/EagleEye" -> "lmbxmu/HRank"
"anonymous47823493/EagleEye" -> "liuzechun/MetaPruning"
"anonymous47823493/EagleEye" -> "Zx55/dmcp"
"anonymous47823493/EagleEye" -> "lmbxmu/ABCPruner"
"anonymous47823493/EagleEye" -> "lmbxmu/HRankPlus"
"anonymous47823493/EagleEye" -> "polarizationpruning/PolarizationPruning"
"anonymous47823493/EagleEye" -> "NVlabs/Taylor_pruning"
"anonymous47823493/EagleEye" -> "ofsoundof/group_sparsity"
"anonymous47823493/EagleEye" -> "DingXiaoH/ResRep"
"anonymous47823493/EagleEye" -> "Eric-mingjie/rethinking-network-pruning"
"anonymous47823493/EagleEye" -> "enyac-group/LeGR"
"anonymous47823493/EagleEye" -> "yehuitang/Pruning"
"anonymous47823493/EagleEye" -> "JiahuiYu/slimmable_networks" ["e"=1]
"anonymous47823493/EagleEye" -> "he-y/filter-pruning-geometric-median"
"anonymous47823493/EagleEye" -> "Eric-mingjie/network-slimming"
"hhaAndroid/mmdetection-mini" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"amirgholami/PyHessian" -> "noahgolmant/pytorch-hessian-eigenthings"
"amirgholami/PyHessian" -> "amirgholami/adahessian"
"amirgholami/PyHessian" -> "Zhen-Dong/HAWQ"
"amirgholami/PyHessian" -> "timgaripov/dnn-mode-connectivity" ["e"=1]
"amirgholami/PyHessian" -> "tomgoldstein/loss-landscape" ["e"=1]
"amirgholami/PyHessian" -> "google/spectral-density"
"amirgholami/PyHessian" -> "yhhhli/BRECQ"
"amirgholami/PyHessian" -> "amirgholami/HessianFlow"
"amirgholami/PyHessian" -> "f-dangel/backpack" ["e"=1]
"amirgholami/PyHessian" -> "amirgholami/ZeroQ"
"amirgholami/PyHessian" -> "cybertronai/pytorch-sso"
"amirgholami/PyHessian" -> "davda54/sam" ["e"=1]
"amirgholami/PyHessian" -> "tfjgeorge/nngeometry"
"amirgholami/PyHessian" -> "mit-han-lab/haq"
"amirgholami/PyHessian" -> "Thrandis/EKFAC-pytorch"
"WongKinYiu/CrossStagePartialNetworks" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"WongKinYiu/CrossStagePartialNetworks" -> "PengyiZhang/SlimYOLOv3" ["e"=1]
"WongKinYiu/CrossStagePartialNetworks" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"WongKinYiu/CrossStagePartialNetworks" -> "coldlarry/YOLOv3-complete-pruning" ["e"=1]
"NVlabs/DeepInversion" -> "huawei-noah/Efficient-Computing" ["e"=1]
"NVlabs/DeepInversion" -> "amirgholami/ZeroQ" ["e"=1]
"openvinotoolkit/nncf" -> "quic/aimet" ["e"=1]
"openvinotoolkit/nncf" -> "ModelTC/MQBench" ["e"=1]
"openvinotoolkit/nncf" -> "Zhen-Dong/HAWQ" ["e"=1]
"openvinotoolkit/nncf" -> "jakc4103/DFQ" ["e"=1]
"openvinotoolkit/nncf" -> "deepglint/EasyQuant" ["e"=1]
"openvinotoolkit/nncf" -> "IntelLabs/distiller" ["e"=1]
"openvinotoolkit/nncf" -> "666DZY666/micronet" ["e"=1]
"openvinotoolkit/nncf" -> "megvii-research/FQ-ViT" ["e"=1]
"quic/aimet" -> "quic/aimet-model-zoo" ["e"=1]
"quic/aimet" -> "ModelTC/MQBench"
"quic/aimet" -> "OpenPPL/ppq"
"quic/aimet" -> "Efficient-ML/Awesome-Model-Quantization"
"quic/aimet" -> "666DZY666/micronet"
"quic/aimet" -> "IntelLabs/distiller"
"quic/aimet" -> "openvinotoolkit/nncf" ["e"=1]
"quic/aimet" -> "daquexian/onnx-simplifier" ["e"=1]
"quic/aimet" -> "Zhen-Dong/HAWQ"
"quic/aimet" -> "Xilinx/brevitas" ["e"=1]
"quic/aimet" -> "intel/neural-compressor" ["e"=1]
"quic/aimet" -> "jakc4103/DFQ"
"quic/aimet" -> "VainF/Torch-Pruning"
"quic/aimet" -> "alibaba/TinyNeuralNetwork" ["e"=1]
"quic/aimet" -> "Jermmy/pytorch-quantization-demo"
"lezcano/geotorch" -> "rfeinman/pytorch-minimize" ["e"=1]
"pprp/SimpleCVReproduction" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"JJGO/shrinkbench" -> "he-y/Awesome-Pruning"
"JJGO/shrinkbench" -> "Eric-mingjie/rethinking-network-pruning"
"JJGO/shrinkbench" -> "ganguli-lab/Synaptic-Flow"
"JJGO/shrinkbench" -> "facebookresearch/open_lth"
"JJGO/shrinkbench" -> "MingSun-Tse/Efficient-Deep-Learning"
"JJGO/shrinkbench" -> "lmbxmu/HRank"
"JJGO/shrinkbench" -> "RAIVNLab/STR"
"JJGO/shrinkbench" -> "anonymous47823493/EagleEye"
"JJGO/shrinkbench" -> "Zx55/dmcp"
"JJGO/shrinkbench" -> "mil-ad/snip"
"JJGO/shrinkbench" -> "NVlabs/Taylor_pruning"
"JJGO/shrinkbench" -> "mit-han-lab/amc"
"JJGO/shrinkbench" -> "liuzechun/MetaPruning"
"JJGO/shrinkbench" -> "lmbxmu/HRankPlus"
"JJGO/shrinkbench" -> "hoonyyhoon/Synflow_SNIP_GraSP"
"zhutmost/lsq-net" -> "hustzxd/LSQuantization"
"zhutmost/lsq-net" -> "yhhhli/BRECQ"
"zhutmost/lsq-net" -> "ZouJiu1/LSQplus"
"zhutmost/lsq-net" -> "yhhhli/APoT_Quantization"
"zhutmost/lsq-net" -> "Zhen-Dong/HAWQ"
"zhutmost/lsq-net" -> "cvlab-yonsei/EWGS"
"zhutmost/lsq-net" -> "ModelTC/MQBench"
"zhutmost/lsq-net" -> "ricky40403/DSQ"
"zhutmost/lsq-net" -> "liuzechun/Nonuniform-to-Uniform-Quantization"
"zhutmost/lsq-net" -> "wimh966/QDrop"
"zhutmost/lsq-net" -> "amirgholami/ZeroQ"
"zhutmost/lsq-net" -> "hustzxd/EfficientPyTorch"
"zhutmost/lsq-net" -> "liuzechun/ReActNet"
"zhutmost/lsq-net" -> "itayhubara/CalibTIP"
"zhutmost/lsq-net" -> "hahnyuan/PTQ4ViT"
"yoshitomo-matsubara/torchdistill" -> "VainF/Torch-Pruning" ["e"=1]
"yoshitomo-matsubara/torchdistill" -> "IntelLabs/distiller" ["e"=1]
"yoshitomo-matsubara/torchdistill" -> "he-y/Awesome-Pruning" ["e"=1]
"yhhhli/APoT_Quantization" -> "yhhhli/BRECQ"
"yhhhli/APoT_Quantization" -> "hustzxd/LSQuantization"
"yhhhli/APoT_Quantization" -> "zhutmost/lsq-net"
"yhhhli/APoT_Quantization" -> "liuzechun/Nonuniform-to-Uniform-Quantization"
"yhhhli/APoT_Quantization" -> "Zhen-Dong/HAWQ"
"yhhhli/APoT_Quantization" -> "cvlab-yonsei/EWGS"
"yhhhli/APoT_Quantization" -> "submission2019/cnn-quantization"
"yhhhli/APoT_Quantization" -> "kssteven418/I-BERT"
"yhhhli/APoT_Quantization" -> "itayhubara/CalibTIP"
"yhhhli/APoT_Quantization" -> "ricky40403/DSQ"
"yhhhli/APoT_Quantization" -> "mit-han-lab/haq"
"yhhhli/APoT_Quantization" -> "amirgholami/ZeroQ"
"yhhhli/APoT_Quantization" -> "ModelTC/MQBench"
"yhhhli/APoT_Quantization" -> "zzzxxxttt/pytorch_DoReFaNet"
"yhhhli/APoT_Quantization" -> "megvii-research/FQ-ViT"
"Jermmy/pytorch-quantization-demo" -> "ModelTC/MQBench"
"Jermmy/pytorch-quantization-demo" -> "666DZY666/micronet"
"Jermmy/pytorch-quantization-demo" -> "OpenPPL/ppq"
"Jermmy/pytorch-quantization-demo" -> "zhutmost/lsq-net"
"Jermmy/pytorch-quantization-demo" -> "yhhhli/BRECQ"
"Jermmy/pytorch-quantization-demo" -> "hahnyuan/PTQ4ViT"
"Jermmy/pytorch-quantization-demo" -> "csyhhu/Awesome-Deep-Neural-Network-Compression"
"Jermmy/pytorch-quantization-demo" -> "wimh966/QDrop"
"Jermmy/pytorch-quantization-demo" -> "megvii-research/FQ-ViT"
"Jermmy/pytorch-quantization-demo" -> "deepglint/EasyQuant"
"Jermmy/pytorch-quantization-demo" -> "jakc4103/DFQ"
"Jermmy/pytorch-quantization-demo" -> "Efficient-ML/Awesome-Model-Quantization"
"Jermmy/pytorch-quantization-demo" -> "hustzxd/LSQuantization"
"Jermmy/pytorch-quantization-demo" -> "yhhhli/APoT_Quantization"
"Jermmy/pytorch-quantization-demo" -> "aovoc/nnieqat-pytorch" ["e"=1]
"lartpang/PyTorchTricks" -> "666DZY666/micronet" ["e"=1]
"huawei-noah/AdderNet" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"huawei-noah/AdderNet" -> "huawei-noah/Efficient-Computing" ["e"=1]
"hustzxd/LSQuantization" -> "zhutmost/lsq-net"
"hustzxd/LSQuantization" -> "hustzxd/EfficientPyTorch"
"hustzxd/LSQuantization" -> "ZouJiu1/LSQplus"
"hustzxd/LSQuantization" -> "yhhhli/APoT_Quantization"
"hustzxd/LSQuantization" -> "ricky40403/DSQ"
"hustzxd/LSQuantization" -> "yhhhli/BRECQ"
"hustzxd/LSQuantization" -> "itayhubara/CalibTIP"
"hustzxd/LSQuantization" -> "A-suozhang/awesome-quantization-and-fixed-point-training"
"zhaohui-yang/CARS" -> "iamhankai/Full-Stack-Filters"
"zhaohui-yang/CARS" -> "xiaomi-automl/FairDARTS" ["e"=1]
"zhaohui-yang/CARS" -> "iamhankai/Versatile-Filters"
"mit-han-lab/hardware-aware-transformers" -> "mit-han-lab/apq" ["e"=1]
"mit-han-lab/hardware-aware-transformers" -> "mit-han-lab/haq" ["e"=1]
"mit-han-lab/hardware-aware-transformers" -> "mit-han-lab/amc" ["e"=1]
"larq/compute-engine" -> "larq/larq"
"larq/compute-engine" -> "larq/zoo"
"larq/compute-engine" -> "larq/zookeeper"
"larq/compute-engine" -> "jwfromm/Riptide"
"GOATmessi8/ASFF" -> "coldlarry/YOLOv3-complete-pruning" ["e"=1]
"GOATmessi8/ASFF" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"GOATmessi8/ASFF" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"GOATmessi8/ASFF" -> "jwchoi384/Gaussian_YOLOv3" ["e"=1]
"GOATmessi8/ASFF" -> "Zzh-tju/DIoU-darknet" ["e"=1]
"lessw2020/Best-Deep-Learning-Optimizers" -> "amirgholami/adahessian" ["e"=1]
"lessw2020/Best-Deep-Learning-Optimizers" -> "davda54/ada-hessian" ["e"=1]
"onnx/optimizer" -> "OpenPPL/ppq" ["e"=1]
"zhijian-liu/torchprofile" -> "mit-han-lab/amc" ["e"=1]
"zhijian-liu/torchprofile" -> "mit-han-lab/haq" ["e"=1]
"zhijian-liu/torchprofile" -> "mit-han-lab/amc-models" ["e"=1]
"google/qkeras" -> "BertMoons/QuantizedNeuralNetworks-Keras-Tensorflow" ["e"=1]
"google/qkeras" -> "larq/larq" ["e"=1]
"google/qkeras" -> "Zhen-Dong/HAWQ" ["e"=1]
"google/qkeras" -> "mit-han-lab/haq" ["e"=1]
"facebookresearch/open_lth" -> "rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch"
"facebookresearch/open_lth" -> "google-research/lottery-ticket-hypothesis"
"facebookresearch/open_lth" -> "ganguli-lab/Synaptic-Flow"
"facebookresearch/open_lth" -> "uber-research/deconstructing-lottery-tickets"
"facebookresearch/open_lth" -> "JJGO/shrinkbench"
"facebookresearch/open_lth" -> "google-research/rigl"
"facebookresearch/open_lth" -> "allenai/hidden-networks"
"facebookresearch/open_lth" -> "varungohil/Generalizing-Lottery-Tickets"
"facebookresearch/open_lth" -> "alecwangcq/GraSP"
"facebookresearch/open_lth" -> "Eric-mingjie/rethinking-network-pruning"
"facebookresearch/open_lth" -> "amirgholami/PyHessian"
"facebookresearch/open_lth" -> "VITA-Group/BERT-Tickets" ["e"=1]
"facebookresearch/open_lth" -> "lottery-ticket/rewinding-iclr20-public"
"facebookresearch/open_lth" -> "facebookresearch/higher" ["e"=1]
"facebookresearch/open_lth" -> "timgaripov/dnn-mode-connectivity" ["e"=1]
"DingXiaoH/ResRep" -> "anonymous47823493/EagleEye"
"DingXiaoH/ResRep" -> "lmbxmu/HRank"
"DingXiaoH/ResRep" -> "polarizationpruning/PolarizationPruning"
"DingXiaoH/ResRep" -> "Zx55/dmcp"
"DingXiaoH/ResRep" -> "liuzechun/MetaPruning"
"DingXiaoH/ResRep" -> "RAIVNLab/STR"
"DingXiaoH/ResRep" -> "fxmeng/RMNet" ["e"=1]
"DingXiaoH/ResRep" -> "DingXiaoH/DiverseBranchBlock" ["e"=1]
"DingXiaoH/ResRep" -> "he-y/soft-filter-pruning"
"DingXiaoH/ResRep" -> "fxmeng/Pruning-Filter-in-Filter"
"DingXiaoH/ResRep" -> "dvlab-research/ReviewKD" ["e"=1]
"DingXiaoH/ResRep" -> "Eric-mingjie/network-slimming"
"DingXiaoH/ResRep" -> "lmbxmu/ABCPruner"
"DingXiaoH/ResRep" -> "he-y/filter-pruning-geometric-median"
"DingXiaoH/ResRep" -> "enyac-group/LeGR"
"tfjgeorge/nngeometry" -> "wiseodd/natural-gradients"
"tfjgeorge/nngeometry" -> "fKunstner/limitations-empirical-fisher"
"tfjgeorge/nngeometry" -> "Thrandis/EKFAC-pytorch"
"VDIGPKU/CBNet_caffe" -> "Zzh-tju/DIoU-darknet" ["e"=1]
"Zzh-tju/DIoU-darknet" -> "Zzh-tju/DIoU"
"Zzh-tju/DIoU-darknet" -> "Zzh-tju/DIoU-SSD-pytorch"
"Zzh-tju/DIoU-darknet" -> "generalized-iou/g-darknet"
"Zzh-tju/DIoU-darknet" -> "Zzh-tju/DIoU-pytorch-detectron"
"Zzh-tju/DIoU-darknet" -> "Zzh-tju/CIoU"
"Zzh-tju/DIoU-darknet" -> "jwchoi384/Gaussian_YOLOv3"
"Zzh-tju/DIoU-darknet" -> "GOATmessi8/ASFF" ["e"=1]
"Zzh-tju/DIoU-darknet" -> "miemie2013/Keras-DIOU-YOLOv3"
"Zzh-tju/DIoU-darknet" -> "PengyiZhang/SlimYOLOv3"
"DeepVAC/deepvac" -> "Jermmy/pytorch-quantization-demo" ["e"=1]
"DeepVAC/deepvac" -> "ModelTC/MQBench" ["e"=1]
"DeepVAC/deepvac" -> "666DZY666/micronet" ["e"=1]
"DeepVAC/deepvac" -> "foolwood/pytorch-slimming" ["e"=1]
"msnh2012/Msnhnet" -> "BBuf/Darknet" ["e"=1]
"msnh2012/Msnhnet" -> "deepglint/EasyQuant" ["e"=1]
"msnh2012/Msnhnet" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"lmbxmu/RBNN" -> "z-hXu/ReCU"
"lmbxmu/RBNN" -> "htqin/IR-Net"
"lmbxmu/RBNN" -> "VITA-Group/BNN_NoBN"
"lmbxmu/RBNN" -> "plumerai/rethinking-bnn-optimization"
"lmbxmu/RBNN" -> "bczhangbczhang/Bayesian-Optimized-1-bit-CNNs"
"lmbxmu/RBNN" -> "ruizhoud/DistributionLoss"
"Yonghongwei/Gradient-Centralization" -> "anonymous47823493/EagleEye" ["e"=1]
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "google-research/lottery-ticket-hypothesis"
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "facebookresearch/open_lth"
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "uber-research/deconstructing-lottery-tickets"
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "varungohil/Generalizing-Lottery-Tickets"
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "ktkth5/lottery-ticket-hyopothesis"
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "ganguli-lab/Synaptic-Flow"
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "mil-ad/snip"
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "VITA-Group/ATMC"
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "Eric-mingjie/rethinking-network-pruning"
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "GATECH-EIC/Early-Bird-Tickets"
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "allenai/hidden-networks"
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" -> "alecwangcq/GraSP"
"htqin/IR-Net" -> "liuzechun/ReActNet"
"htqin/IR-Net" -> "liuzechun/Bi-Real-net"
"htqin/IR-Net" -> "lmbxmu/RBNN"
"htqin/IR-Net" -> "ruizhoud/DistributionLoss"
"htqin/IR-Net" -> "htqin/BiBERT"
"htqin/IR-Net" -> "hpi-xnor/BMXNet-v2"
"htqin/IR-Net" -> "z-hXu/ReCU"
"htqin/IR-Net" -> "ZiweiWangTHU/BiDet"
"htqin/IR-Net" -> "htqin/BiBench"
"htqin/IR-Net" -> "plumerai/rethinking-bnn-optimization"
"htqin/IR-Net" -> "amirgholami/ZeroQ"
"htqin/IR-Net" -> "ricky40403/DSQ"
"htqin/IR-Net" -> "csyhhu/MetaQuant"
"clevercool/TileSparsity" -> "clevercool/SQuant"
"szq0214/MEAL-V2" -> "liuzechun/MetaPruning" ["e"=1]
"szq0214/MEAL-V2" -> "szq0214/FKD" ["e"=1]
"Zzh-tju/CIoU" -> "Zzh-tju/DIoU"
"Zzh-tju/CIoU" -> "Zzh-tju/DIoU-darknet"
"Zzh-tju/CIoU" -> "Zzh-tju/yolov5"
"Zzh-tju/CIoU" -> "Zzh-tju/ultralytics-YOLOv3-Cluster-NMS"
"Zzh-tju/CIoU" -> "kkhoot/PAA" ["e"=1]
"Zzh-tju/CIoU" -> "jshilong/SEPC" ["e"=1]
"Zzh-tju/CIoU" -> "implus/GFocal" ["e"=1]
"Zzh-tju/CIoU" -> "hyz-xmaster/VarifocalNet" ["e"=1]
"Zzh-tju/CIoU" -> "Zzh-tju/DIoU-SSD-pytorch"
"Zzh-tju/CIoU" -> "ming71/rotate-yolov3" ["e"=1]
"Zzh-tju/CIoU" -> "implus/GFocalV2" ["e"=1]
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "coldlarry/YOLOv3-complete-pruning"
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "tanluren/yolov3-channel-and-layer-pruning"
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "HaloTrouvaille/YOLO-Multi-Backbones-Attention" ["e"=1]
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "Lam1360/YOLOv3-model-pruning"
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "ZJU-lishuang/yolov5_prune" ["e"=1]
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "Syencil/mobile-yolov5-pruning-distillation" ["e"=1]
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "666DZY666/micronet"
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "twangnh/Distilling-Object-Detectors" ["e"=1]
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "PengyiZhang/SlimYOLOv3"
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "midasklr/yolov5prune" ["e"=1]
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "GOATmessi8/ASFF" ["e"=1]
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "talebolano/yolov3-network-slimming"
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "Gumpest/YOLOv5-Multibackbone-Compression" ["e"=1]
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "Syencil/tensorRT" ["e"=1]
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" -> "cwq159/PyTorch-Spiking-YOLOv3" ["e"=1]
"ZiweiWangTHU/BiDet" -> "htqin/IR-Net"
"ZiweiWangTHU/BiDet" -> "plumerai/rethinking-bnn-optimization"
"ZiweiWangTHU/BiDet" -> "liuzechun/ReActNet"
"ZiweiWangTHU/BiDet" -> "liuzechun/Bi-Real-net"
"ZiweiWangTHU/BiDet" -> "z-hXu/ReCU"
"ZiweiWangTHU/BiDet" -> "LaVieEnRoseSMZ/AutoBNN"
"ZiweiWangTHU/BiDet" -> "lmbxmu/RBNN"
"ZiweiWangTHU/BiDet" -> "amirgholami/ZeroQ"
"ZiweiWangTHU/BiDet" -> "ggjy/HitDet.pytorch" ["e"=1]
"ZiweiWangTHU/BiDet" -> "Zx55/dmcp"
"ZiweiWangTHU/BiDet" -> "blueardour/model-quantization"
"ZiweiWangTHU/BiDet" -> "VITA-Group/BNN_NoBN"
"sh1r0/caffe-android-lib" -> "pmgysel/caffe" ["e"=1]
"sh1r0/caffe-android-lib" -> "songhan/SqueezeNet-Deep-Compression" ["e"=1]
"pprp/voc2007_for_yolo_torch" -> "BBuf/cv_tools" ["e"=1]
"amirgholami/ZeroQ" -> "jakc4103/DFQ"
"amirgholami/ZeroQ" -> "yhhhli/BRECQ"
"amirgholami/ZeroQ" -> "itayhubara/CalibTIP"
"amirgholami/ZeroQ" -> "Zhen-Dong/HAWQ"
"amirgholami/ZeroQ" -> "submission2019/cnn-quantization"
"amirgholami/ZeroQ" -> "xushoukai/GDFQ"
"amirgholami/ZeroQ" -> "mit-han-lab/haq"
"amirgholami/ZeroQ" -> "peiswang/BitSplit"
"amirgholami/ZeroQ" -> "kssteven418/I-BERT"
"amirgholami/ZeroQ" -> "htqin/IR-Net"
"amirgholami/ZeroQ" -> "ricky40403/DSQ"
"amirgholami/ZeroQ" -> "jun-fang/PWLQ"
"amirgholami/ZeroQ" -> "sony-si/ai-research"
"amirgholami/ZeroQ" -> "deepglint/EasyQuant"
"amirgholami/ZeroQ" -> "zhutmost/lsq-net"
"davda54/ada-hessian" -> "amirgholami/adahessian"
"kssteven418/I-BERT" -> "hahnyuan/PTQ4ViT"
"kssteven418/I-BERT" -> "megvii-research/FQ-ViT"
"kssteven418/I-BERT" -> "amirgholami/ZeroQ"
"kssteven418/I-BERT" -> "yhhhli/BRECQ"
"kssteven418/I-BERT" -> "zkkli/I-ViT" ["e"=1]
"kssteven418/I-BERT" -> "Zhen-Dong/HAWQ"
"kssteven418/I-BERT" -> "kssteven418/Q-ASR"
"kssteven418/I-BERT" -> "GATECH-EIC/ViTCoD" ["e"=1]
"kssteven418/I-BERT" -> "yhhhli/APoT_Quantization"
"kssteven418/I-BERT" -> "wimh966/QDrop"
"kssteven418/I-BERT" -> "zkkli/RepQ-ViT" ["e"=1]
"kssteven418/I-BERT" -> "zhutmost/lsq-net"
"kssteven418/I-BERT" -> "itayhubara/CalibTIP"
"kssteven418/I-BERT" -> "zkkli/PSAQ-ViT"
"kssteven418/I-BERT" -> "Qualcomm-AI-research/transformer-quantization"
"skmhrk1209/QuanTorch" -> "jameszampa/ECE-570-Implementation"
"uber-research/deconstructing-lottery-tickets" -> "rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch"
"uber-research/deconstructing-lottery-tickets" -> "varungohil/Generalizing-Lottery-Tickets"
"uber-research/deconstructing-lottery-tickets" -> "ktkth5/lottery-ticket-hyopothesis"
"uber-research/deconstructing-lottery-tickets" -> "google-research/lottery-ticket-hypothesis"
"uber-research/deconstructing-lottery-tickets" -> "yosinski/GitResultsManager"
"MAC-AutoML/rethinking_performance_estimation_in_NAS" -> "zhaohui-yang/CARS" ["e"=1]
"MAC-AutoML/rethinking_performance_estimation_in_NAS" -> "ShaohuiLin/GAL" ["e"=1]
"itayhubara/CalibTIP" -> "ynahshan/nn-quantization-pytorch"
"itayhubara/CalibTIP" -> "yhhhli/BRECQ"
"itayhubara/CalibTIP" -> "sony-si/ai-research"
"itayhubara/CalibTIP" -> "amirgholami/ZeroQ"
"itayhubara/CalibTIP" -> "wimh966/QDrop"
"liux0614/yolo_nano" -> "Abraham-M97/YOLOV3-NANO"
"liux0614/yolo_nano" -> "ardeal/yolo_nano"
"liux0614/yolo_nano" -> "jwchoi384/Gaussian_YOLOv3"
"liux0614/yolo_nano" -> "talebolano/yolov3-network-slimming"
"liux0614/yolo_nano" -> "PengyiZhang/SlimYOLOv3"
"liux0614/yolo_nano" -> "coldlarry/YOLOv3-complete-pruning"
"liux0614/yolo_nano" -> "reu2018DL/YOLO-LITE"
"liux0614/yolo_nano" -> "tanluren/mobilenetv3-yolov3" ["e"=1]
"liux0614/yolo_nano" -> "wangsssky/YOLO-Nano"
"liux0614/yolo_nano" -> "tanluren/yolov3-channel-and-layer-pruning"
"liux0614/yolo_nano" -> "GOATmessi8/ASFF" ["e"=1]
"liux0614/yolo_nano" -> "Lam1360/YOLOv3-model-pruning"
"liux0614/yolo_nano" -> "Bubble-water/YOLO-Summary"
"1adrianb/binary-networks-pytorch" -> "1adrianb/expert-binary-networks"
"1adrianb/binary-networks-pytorch" -> "facebookresearch/bit"
"1adrianb/binary-networks-pytorch" -> "itayhubara/BinaryNet.pytorch"
"1adrianb/binary-networks-pytorch" -> "CAS-CLab/Training-Tricks-for-Binarized-Neural-Networks"
"1adrianb/binary-networks-pytorch" -> "liuzechun/ReActNet"
"1adrianb/binary-networks-pytorch" -> "cooooorn/Pytorch-XNOR-Net"
"ardeal/yolo_nano" -> "lingtengqiu/Yolo_Nano" ["e"=1]
"ardeal/yolo_nano" -> "liux0614/yolo_nano"
"ardeal/yolo_nano" -> "Abraham-M97/YOLOV3-NANO"
"alecwangcq/GraSP" -> "mil-ad/snip"
"alecwangcq/GraSP" -> "ganguli-lab/Synaptic-Flow"
"alecwangcq/GraSP" -> "IntelAI/dynamic-reparameterization"
"alecwangcq/GraSP" -> "mil-ad/prospr"
"mit-han-lab/gan-compression" -> "yehuitang/Pruning" ["e"=1]
"bzantium/pytorch-admm-pruning" -> "kaiqzhan/admm-pruning"
"bzantium/pytorch-admm-pruning" -> "yeshaokai/Robustness-Aware-Pruning-ADMM"
"lmbxmu/HRank" -> "lmbxmu/HRankPlus"
"lmbxmu/HRank" -> "lmbxmu/ABCPruner"
"lmbxmu/HRank" -> "anonymous47823493/EagleEye"
"lmbxmu/HRank" -> "liuzechun/MetaPruning"
"lmbxmu/HRank" -> "he-y/soft-filter-pruning"
"lmbxmu/HRank" -> "he-y/filter-pruning-geometric-median"
"lmbxmu/HRank" -> "enyac-group/LeGR"
"lmbxmu/HRank" -> "lmbxmu/FilterSketch"
"lmbxmu/HRank" -> "Zx55/dmcp"
"lmbxmu/HRank" -> "DingXiaoH/ResRep"
"lmbxmu/HRank" -> "fxmeng/filter-grafting" ["e"=1]
"lmbxmu/HRank" -> "tyui592/Pruning_filters_for_efficient_convnets"
"lmbxmu/HRank" -> "SCUT-AILab/DCP" ["e"=1]
"lmbxmu/HRank" -> "ofsoundof/group_sparsity"
"lmbxmu/HRank" -> "polarizationpruning/PolarizationPruning"
"SHI-Labs/Any-Precision-DNNs" -> "deJQK/AdaBits"
"mit-han-lab/apq" -> "mit-han-lab/haq"
"mit-han-lab/apq" -> "zhaoweicai/EdMIPS"
"blueardour/model-quantization" -> "bohanzhuang/model-quantization"
"blueardour/model-quantization" -> "1adrianb/binary-nas"
"blueardour/model-quantization" -> "caiwenpu/Compression_Paper"
"liuzechun/ReActNet" -> "liuzechun/Bi-Real-net"
"liuzechun/ReActNet" -> "htqin/IR-Net"
"liuzechun/ReActNet" -> "lmbxmu/RBNN"
"liuzechun/ReActNet" -> "hpi-xnor/BMXNet-v2"
"liuzechun/ReActNet" -> "ZiweiWangTHU/BiDet"
"liuzechun/ReActNet" -> "z-hXu/ReCU"
"liuzechun/ReActNet" -> "VITA-Group/BNN_NoBN"
"liuzechun/ReActNet" -> "liuzechun/AdamBNN"
"liuzechun/ReActNet" -> "itayhubara/BinaryNet.pytorch"
"liuzechun/ReActNet" -> "brais-martinez/real2binary"
"liuzechun/ReActNet" -> "plumerai/rethinking-bnn-optimization"
"liuzechun/ReActNet" -> "htqin/BiBERT"
"liuzechun/ReActNet" -> "hustzxd/LSQuantization"
"liuzechun/ReActNet" -> "ricky40403/DSQ"
"liuzechun/ReActNet" -> "zhutmost/lsq-net"
"GATECH-EIC/Early-Bird-Tickets" -> "GATECH-EIC/CPT"
"motokimura/PyTorch_Gaussian_YOLOv3" -> "xuannianz/keras-GaussianYOLOv3"
"motokimura/PyTorch_Gaussian_YOLOv3" -> "jwchoi384/Gaussian_YOLOv3"
"zhaoweicai/EdMIPS" -> "deJQK/AdaBits"
"amirgholami/adahessian" -> "davda54/ada-hessian"
"amirgholami/adahessian" -> "amirgholami/PyHessian"
"amirgholami/adahessian" -> "lessw2020/Best-Deep-Learning-Optimizers" ["e"=1]
"amirgholami/adahessian" -> "cybertronai/pytorch-sso"
"amirgholami/adahessian" -> "gpauloski/kfac-pytorch"
"amirgholami/adahessian" -> "f-dangel/backpack" ["e"=1]
"amirgholami/adahessian" -> "tensorflow/kfac"
"amirgholami/adahessian" -> "Thrandis/EKFAC-pytorch"
"amirgholami/adahessian" -> "fKunstner/limitations-empirical-fisher"
"Jzz24/pytorch_quantization" -> "zzzxxxttt/pytorch_DoReFaNet"
"Jzz24/pytorch_quantization" -> "amirgholami/ZeroQ"
"jun-fang/PWLQ" -> "hustvl/PD-Quant"
"cybertronai/pytorch-sso" -> "team-approx-bayes/dl-with-bayes" ["e"=1]
"cybertronai/pytorch-sso" -> "fKunstner/limitations-empirical-fisher"
"cybertronai/pytorch-sso" -> "toiaydcdyywlhzvlob/backpack"
"iamhankai/Versatile-Filters" -> "iamhankai/Full-Stack-Filters"
"mepeichun/Efficient-Neural-Network-Bilibili" -> "csyhhu/Awesome-Deep-Neural-Network-Compression"
"mepeichun/Efficient-Neural-Network-Bilibili" -> "Jermmy/pytorch-quantization-demo"
"mepeichun/Efficient-Neural-Network-Bilibili" -> "he-y/Awesome-Pruning"
"mepeichun/Efficient-Neural-Network-Bilibili" -> "666DZY666/micronet"
"mepeichun/Efficient-Neural-Network-Bilibili" -> "coldlarry/YOLOv3-complete-pruning"
"mepeichun/Efficient-Neural-Network-Bilibili" -> "SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone"
"gpauloski/kfac-pytorch" -> "tyohei/chainerkfac"
"gpauloski/kfac-pytorch" -> "alecwangcq/KFAC-Pytorch"
"gpauloski/kfac-pytorch" -> "gpauloski/BERT-PyTorch"
"szq0214/Un-Mix" -> "szq0214/S2-BNN"
"szq0214/Un-Mix" -> "szq0214/SReT"
"aovoc/nnieqat-pytorch" -> "deepglint/EasyQuant" ["e"=1]
"aovoc/nnieqat-pytorch" -> "ModelTC/MQBench" ["e"=1]
"DequanWang/CoDeNet" -> "Zhen-Dong/CoDeNet"
"DequanWang/CoDeNet" -> "hqjenny/CoDeNet"
"RAIVNLab/STR" -> "VITA-Group/GraNet"
"RAIVNLab/STR" -> "papers-submission/structured_transposable_masks"
"RAIVNLab/STR" -> "IntelAI/dynamic-reparameterization"
"lmbxmu/HRankPlus" -> "lmbxmu/HRank"
"lmbxmu/HRankPlus" -> "lmbxmu/ABCPruner"
"lmbxmu/HRankPlus" -> "Eclipsess/CHIP_NeurIPS2021"
"lmbxmu/HRankPlus" -> "anonymous47823493/EagleEye"
"lmbxmu/HRankPlus" -> "lmbxmu/FilterSketch"
"lmbxmu/HRankPlus" -> "enyac-group/LeGR"
"wuzhihao7788/yolodet-pytorch" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"wuzhihao7788/yolodet-pytorch" -> "coldlarry/YOLOv3-complete-pruning" ["e"=1]
"marcoancona/TorchPruner" -> "tyui592/Pruning_filters_for_efficient_convnets"
"marcoancona/TorchPruner" -> "lucaslie/torchprune"
"allenai/hidden-networks" -> "yueb17/PEMN"
"allenai/hidden-networks" -> "ganguli-lab/Synaptic-Flow"
"allenai/hidden-networks" -> "RAIVNLab/supsup"
"allenai/hidden-networks" -> "JingtongSu/sanity-checking-pruning"
"DayBreak-u/Thundernet_Pytorch" -> "jwchoi384/Gaussian_YOLOv3" ["e"=1]
"VITA-Group/ATMC" -> "yeshaokai/Robustness-Aware-Pruning-ADMM"
"team-approx-bayes/dl-with-bayes" -> "cybertronai/pytorch-sso" ["e"=1]
"ynahshan/nn-quantization-pytorch" -> "itayhubara/CalibTIP"
"ynahshan/nn-quantization-pytorch" -> "sony-si/ai-research"
"yehuitang/Pruning" -> "anonymous47823493/EagleEye"
"yehuitang/Pruning" -> "VITA-Group/AutoGAN" ["e"=1]
"yehuitang/Pruning" -> "changlin31/DS-Net" ["e"=1]
"yehuitang/Pruning" -> "iamhankai/Full-Stack-Filters"
"yehuitang/Pruning" -> "Zx55/dmcp"
"yehuitang/Pruning" -> "zhaohui-yang/LegoNet"
"yehuitang/Pruning" -> "MingSun-Tse/Efficient-Deep-Learning"
"yehuitang/Pruning" -> "mit-han-lab/apq"
"yehuitang/Pruning" -> "liuzechun/MetaPruning"
"BBuf/model-compression" -> "Eric-mingjie/network-slimming"
"Zx55/dmcp" -> "anonymous47823493/EagleEye"
"Zx55/dmcp" -> "lmbxmu/ABCPruner"
"Zx55/dmcp" -> "liuzechun/MetaPruning"
"Zx55/dmcp" -> "youzhonghui/gate-decorator-pruning"
"Zx55/dmcp" -> "ofsoundof/group_sparsity"
"Zx55/dmcp" -> "blueardour/model-quantization"
"clovaai/overhaul-distillation" -> "liuzechun/MetaPruning" ["e"=1]
"toiaydcdyywlhzvlob/backpack" -> "fKunstner/limitations-empirical-fisher"
"Zzh-tju/yolov5" -> "Zzh-tju/ultralytics-YOLOv3-Cluster-NMS"
"lmbxmu/ABCPruner" -> "lmbxmu/HRankPlus"
"lmbxmu/ABCPruner" -> "lmbxmu/HRank"
"lmbxmu/ABCPruner" -> "lmbxmu/FilterSketch"
"lmbxmu/ABCPruner" -> "Zx55/dmcp"
"lmbxmu/ABCPruner" -> "anonymous47823493/EagleEye"
"lmbxmu/ABCPruner" -> "enyac-group/LeGR"
"lmbxmu/ABCPruner" -> "liuzechun/MetaPruning"
"lmbxmu/ABCPruner" -> "zyxxmu/lottery-jackpots"
"lmbxmu/ABCPruner" -> "ShaohuiLin/GAL"
"lmbxmu/ABCPruner" -> "Roll920/CURL"
"lmbxmu/ABCPruner" -> "polarizationpruning/PolarizationPruning"
"lmbxmu/ABCPruner" -> "lmbxmu/SuperViT"
"tyui592/Pruning_filters_for_efficient_convnets" -> "AlumLuther/PruningFilters"
"tyui592/Pruning_filters_for_efficient_convnets" -> "EstherBear/implementation-of-pruning-filters"
"tyui592/Pruning_filters_for_efficient_convnets" -> "he-y/filter-pruning-geometric-median"
"tyui592/Pruning_filters_for_efficient_convnets" -> "he-y/soft-filter-pruning"
"tyui592/Pruning_filters_for_efficient_convnets" -> "lmbxmu/HRank"
"A-suozhang/awesome-quantization-and-fixed-point-training" -> "hustzxd/LSQuantization"
"xuannianz/keras-GaussianYOLOv3" -> "motokimura/PyTorch_Gaussian_YOLOv3"
"bohanzhuang/model-quantization" -> "aim-uofa/model-quantization-to-be-deleted-recently"
"bohanzhuang/model-quantization" -> "xiezheng-cs/DTQ"
"AI-performance/embedded-ai.bench" -> "deepglint/EasyQuant" ["e"=1]
"zhaohui-yang/LegoNet" -> "iamhankai/Full-Stack-Filters"
"ofsoundof/group_sparsity" -> "ofsoundof/dhp"
"team-approx-bayes/BayesBiNN" -> "ruizhoud/DistributionLoss"
"team-approx-bayes/BayesBiNN" -> "bczhangbczhang/Bayesian-Optimized-1-bit-CNNs"
"team-approx-bayes/BayesBiNN" -> "plumerai/rethinking-bnn-optimization"
"team-approx-bayes/BayesBiNN" -> "mil-ad/studying-binary-neural-networks"
"ricky40403/DSQ" -> "cvlab-yonsei/EWGS"
"ricky40403/DSQ" -> "hustzxd/LSQuantization"
"ricky40403/DSQ" -> "cvlab-yonsei/DAQ"
"ricky40403/DSQ" -> "ynahshan/nn-quantization-pytorch"
"ricky40403/DSQ" -> "sony-si/ai-research"
"ricky40403/DSQ" -> "itayhubara/CalibTIP"
"ricky40403/DSQ" -> "amirgholami/ZeroQ"
"ricky40403/DSQ" -> "zhutmost/lsq-net"
"ricky40403/DSQ" -> "htqin/IR-Net"
"ricky40403/DSQ" -> "zhaoweicai/EdMIPS"
"ricky40403/DSQ" -> "yhhhli/BRECQ"
"ricky40403/DSQ" -> "jakc4103/scale-adjusted-training"
"AlumLuther/PruningFilters" -> "EstherBear/implementation-of-pruning-filters"
"AlumLuther/PruningFilters" -> "tyui592/Pruning_filters_for_efficient_convnets"
"sony-si/ai-research" -> "itayhubara/CalibTIP"
"sony-si/ai-research" -> "ynahshan/nn-quantization-pytorch"
"ofsoundof/dhp" -> "ofsoundof/group_sparsity"
"aliyun/alibabacloud-quantization-networks" -> "ynahshan/nn-quantization-pytorch"
"aliyun/alibabacloud-quantization-networks" -> "ricky40403/DSQ"
"aliyun/alibabacloud-quantization-networks" -> "allenbai01/ProxQuant"
"csyhhu/MetaQuant" -> "allenbai01/ProxQuant"
"lmbxmu/FilterSketch" -> "lmbxmu/ABCPruner"
"Zzh-tju/DIoU-pytorch-detectron" -> "Zzh-tju/DIoU"
"Zzh-tju/DIoU-pytorch-detectron" -> "Zzh-tju/DIoU-SSD-pytorch"
"Zzh-tju/DIoU-pytorch-detectron" -> "Zzh-tju/DIoU-darknet"
"Zzh-tju/DIoU-pytorch-detectron" -> "generalized-iou/Detectron.pytorch"
"peiswang/BitSplit" -> "WeixiangXu/STTN"
"LaVieEnRoseSMZ/AutoBNN" -> "iamhankai/Full-Stack-Filters"
"Zzh-tju/ultralytics-YOLOv3-Cluster-NMS" -> "Zzh-tju/yolov5"
"EstherBear/implementation-of-pruning-filters" -> "AlumLuther/PruningFilters"
"xushoukai/GDFQ" -> "iamkanghyunchoi/qimera"
"xushoukai/GDFQ" -> "lihuantong/HAST"
"xushoukai/GDFQ" -> "FLHonker/ZAQ-code"
"Roll920/CURL" -> "Roll920/AutoPruner"
"yeshaokai/Robustness-Aware-Pruning-ADMM" -> "VITA-Group/ATMC"
"yeshaokai/Robustness-Aware-Pruning-ADMM" -> "yeshaokai/ADMM-NN"
"iamhankai/Full-Stack-Filters" -> "zhaohui-yang/LegoNet_pytorch"
"gistvision/bnas" -> "bczhangbczhang/Bayesian-Optimized-1-bit-CNNs"
"bohanzhuang/Group-Net-semantic-segmentation" -> "bohanzhuang/Group-Net-image-classification"
"aim-uofa/model-quantization-to-be-deleted-recently" -> "bohanzhuang/model-quantization"
"aim-uofa/model-quantization-to-be-deleted-recently" -> "deJQK/FracBits"
"ZJU-lishuang/yolov5_prune" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"ZJU-lishuang/yolov5_prune" -> "coldlarry/YOLOv3-complete-pruning" ["e"=1]
"ZJU-lishuang/yolov5_prune" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"RangiLyu/nanodet" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"shouxieai/tensorRT_Pro" -> "OpenPPL/ppq" ["e"=1]
"microsoft/onnxruntime-inference-examples" -> "OpenPPL/ppq" ["e"=1]
"DingXiaoH/RepVGG" -> "666DZY666/micronet" ["e"=1]
"NVIDIA/trt-samples-for-hackathon-cn" -> "OpenPPL/ppq" ["e"=1]
"neuralmagic/sparseml" -> "VainF/Torch-Pruning" ["e"=1]
"neuralmagic/sparseml" -> "he-y/Awesome-Pruning" ["e"=1]
"neuralmagic/sparseml" -> "quic/aimet" ["e"=1]
"wenwei202/caffe" -> "yiwenguo/Dynamic-Network-Surgery"
"wenwei202/caffe" -> "IntelLabs/SkimCaffe"
"wenwei202/caffe" -> "may0324/DeepCompression-caffe"
"wenwei202/caffe" -> "songhan/Deep-Compression-AlexNet"
"wenwei202/caffe" -> "yuanyuanli85/CaffeModelCompression"
"wenwei202/caffe" -> "pmgysel/caffe"
"wenwei202/caffe" -> "Roll920/ThiNet"
"wenwei202/caffe" -> "zssloth/Embedded-Neural-Network"
"wenwei202/caffe" -> "ethanhe42/channel-pruning"
"wenwei202/caffe" -> "chengtaipu/lowrankcnn" ["e"=1]
"wenwei202/caffe" -> "wenwei202/iss-rnns"
"wenwei202/caffe" -> "kaiqzhan/admm-pruning"
"wenwei202/caffe" -> "wenwei202/terngrad" ["e"=1]
"wenwei202/caffe" -> "CAS-CLab/quantized-cnn"
"wenwei202/caffe" -> "OAID/Caffe-HRT" ["e"=1]
"google/gemmlowp" -> "IntelLabs/distiller" ["e"=1]
"google/gemmlowp" -> "MatthieuCourbariaux/BinaryNet" ["e"=1]
"zetane/viewer" -> "OpenPPL/ppq" ["e"=1]
"OpenPPL/ppl.nn" -> "OpenPPL/ppq" ["e"=1]
"OpenPPL/ppl.nn" -> "ModelTC/MQBench" ["e"=1]
"ethereon/netscope" -> "dgschwend/netscope" ["e"=1]
"godweiyang/NN-CUDA-Example" -> "OpenPPL/ppq" ["e"=1]
"davda54/sam" -> "amirgholami/PyHessian" ["e"=1]
"midasklr/yolov5prune" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"midasklr/yolov5prune" -> "coldlarry/YOLOv3-complete-pruning" ["e"=1]
"google-research/sam" -> "google/spectral-density" ["e"=1]
"Tencent/PatrickStar" -> "ucbrise/actnn" ["e"=1]
"neuralmagic/deepsparse" -> "VainF/Torch-Pruning" ["e"=1]
"yhhhli/BRECQ" -> "wimh966/QDrop"
"yhhhli/BRECQ" -> "itayhubara/CalibTIP"
"yhhhli/BRECQ" -> "amirgholami/ZeroQ"
"yhhhli/BRECQ" -> "ModelTC/MQBench"
"yhhhli/BRECQ" -> "zhutmost/lsq-net"
"yhhhli/BRECQ" -> "yhhhli/APoT_Quantization"
"yhhhli/BRECQ" -> "Zhen-Dong/HAWQ"
"yhhhli/BRECQ" -> "hustvl/PD-Quant"
"yhhhli/BRECQ" -> "jakc4103/DFQ"
"yhhhli/BRECQ" -> "submission2019/cnn-quantization"
"yhhhli/BRECQ" -> "clevercool/SQuant"
"yhhhli/BRECQ" -> "megvii-research/FQ-ViT"
"yhhhli/BRECQ" -> "peiswang/BitSplit"
"yhhhli/BRECQ" -> "ynahshan/nn-quantization-pytorch"
"yhhhli/BRECQ" -> "hustzxd/LSQuantization"
"WongKinYiu/ScaledYOLOv4" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"VITA-Group/BNN_NoBN" -> "lmbxmu/RBNN"
"quic/aimet-model-zoo" -> "quic/aimet" ["e"=1]
"Zhen-Dong/HAWQ" -> "mit-han-lab/haq"
"Zhen-Dong/HAWQ" -> "amirgholami/ZeroQ"
"Zhen-Dong/HAWQ" -> "yhhhli/BRECQ"
"Zhen-Dong/HAWQ" -> "Zhen-Dong/Awesome-Quantization-Papers"
"Zhen-Dong/HAWQ" -> "ModelTC/MQBench"
"Zhen-Dong/HAWQ" -> "zhutmost/lsq-net"
"Zhen-Dong/HAWQ" -> "yhhhli/APoT_Quantization"
"Zhen-Dong/HAWQ" -> "Zhen-Dong/BitPack"
"Zhen-Dong/HAWQ" -> "amirgholami/PyHessian"
"Zhen-Dong/HAWQ" -> "kssteven418/I-BERT"
"Zhen-Dong/HAWQ" -> "Efficient-ML/Awesome-Model-Quantization"
"Zhen-Dong/HAWQ" -> "megvii-research/FQ-ViT"
"Zhen-Dong/HAWQ" -> "jakc4103/DFQ"
"Zhen-Dong/HAWQ" -> "yanghr/BSQ"
"Zhen-Dong/HAWQ" -> "submission2019/cnn-quantization"
"cvlab-yonsei/EWGS" -> "cvlab-yonsei/DAQ"
"cvlab-yonsei/EWGS" -> "cvlab-yonsei/FlowGRU" ["e"=1]
"cvlab-yonsei/EWGS" -> "ricky40403/DSQ"
"mit-han-lab/tinyml" -> "mit-han-lab/amc" ["e"=1]
"rfeinman/pytorch-minimize" -> "gngdb/pytorch-minimize"
"rfeinman/pytorch-minimize" -> "hahnec/torchimize"
"rfeinman/pytorch-minimize" -> "hjmshi/PyTorch-LBFGS"
"rfeinman/pytorch-minimize" -> "lezcano/geotorch" ["e"=1]
"rfeinman/pytorch-minimize" -> "nlesc-dirac/pytorch"
"ModelTC/MQBench" -> "yhhhli/BRECQ"
"ModelTC/MQBench" -> "OpenPPL/ppq"
"ModelTC/MQBench" -> "wimh966/QDrop"
"ModelTC/MQBench" -> "Jermmy/pytorch-quantization-demo"
"ModelTC/MQBench" -> "Efficient-ML/Awesome-Model-Quantization"
"ModelTC/MQBench" -> "Zhen-Dong/HAWQ"
"ModelTC/MQBench" -> "ModelTC/Dipoorlet"
"ModelTC/MQBench" -> "zhutmost/lsq-net"
"ModelTC/MQBench" -> "666DZY666/micronet"
"ModelTC/MQBench" -> "ModelTC/United-Perception" ["e"=1]
"ModelTC/MQBench" -> "megvii-research/FQ-ViT"
"ModelTC/MQBench" -> "hahnyuan/PTQ4ViT"
"ModelTC/MQBench" -> "ModelTC/llmc" ["e"=1]
"ModelTC/MQBench" -> "mit-han-lab/smoothquant" ["e"=1]
"ModelTC/MQBench" -> "quic/aimet"
"lessw2020/Ranger21" -> "amirgholami/adahessian" ["e"=1]
"Zhen-Dong/CoDeNet" -> "hqjenny/CoDeNet"
"Zhen-Dong/CoDeNet" -> "DequanWang/CoDeNet"
"jshilong/FisherPruning" -> "polarizationpruning/PolarizationPruning" ["e"=1]
"MegEngine/MegFlow" -> "deepglint/EasyQuant" ["e"=1]
"Tencent/Forward" -> "deepglint/EasyQuant" ["e"=1]
"htqin/BiPointNet" -> "htqin/BiBERT"
"facebookresearch/madgrad" -> "amirgholami/adahessian" ["e"=1]
"OpenPPL/ppl.cv" -> "OpenPPL/ppq" ["e"=1]
"OpenPPL/ppl.cv" -> "ModelTC/MQBench" ["e"=1]
"sony/model_optimization" -> "Zhen-Dong/HAWQ" ["e"=1]
"yaozhewei/HAP" -> "kssteven418/Q-ASR"
"FLHonker/ZAQ-code" -> "xushoukai/GDFQ"
"FLHonker/ZAQ-code" -> "zysxmu/IntraQ"
"aojunzz/NM-sparsity" -> "papers-submission/structured_transposable_masks"
"aojunzz/NM-sparsity" -> "aojunzz/DominoSearch"
"aojunzz/NM-sparsity" -> "zyxxmu/LBC"
"aojunzz/NM-sparsity" -> "usyd-fsalab/fp6_llm" ["e"=1]
"CMU-SAFARI/prim-benchmarks" -> "AIS-SNU/PID-Comm" ["e"=1]
"dvlab-research/ReviewKD" -> "DingXiaoH/ResRep" ["e"=1]
"DingXiaoH/DiverseBranchBlock" -> "DingXiaoH/ResRep" ["e"=1]
"verbose-void/rigl-torch" -> "varun19299/rigl-reproducibility"
"verbose-void/rigl-torch" -> "VITA-Group/GraNet"
"Shiweiliuiiiiiii/In-Time-Over-Parameterization" -> "VITA-Group/GraNet"
"Shiweiliuiiiiiii/In-Time-Over-Parameterization" -> "varun19299/rigl-reproducibility"
"Shiweiliuiiiiiii/In-Time-Over-Parameterization" -> "Shiweiliuiiiiiii/Selfish-RNN"
"liuzechun/AdamBNN" -> "szq0214/S2-BNN"
"cvlab-yonsei/DAQ" -> "cvlab-yonsei/EWGS"
"cvlab-yonsei/DAQ" -> "cvlab-yonsei/FlowGRU" ["e"=1]
"ucbrise/actnn" -> "LiuXiaoxuanPKU/GACT-ICML"
"ucbrise/actnn" -> "cjf00000/StatQuant"
"ucbrise/actnn" -> "ruizhoud/DistributionLoss"
"VITA-Group/GraNet" -> "Shiweiliuiiiiiii/In-Time-Over-Parameterization"
"gngdb/pytorch-minimize" -> "rfeinman/pytorch-minimize"
"hustzxd/EfficientPyTorch" -> "hustzxd/LSQuantization"
"zhaohui-yang/Binary-Neural-Networks" -> "iamhankai/Full-Stack-Filters"
"zhaohui-yang/Binary-Neural-Networks" -> "zhaohui-yang/LegoNet_pytorch"
"zyxxmu/White-Box" -> "chenbong/PSS-Net"
"pomonam/Self-Tuning-Networks" -> "asteroidhouse/self-tuning-networks"
"lmbxmu/1xN" -> "zyxxmu/Bi-Mask"
"z-hXu/ReCU" -> "lmbxmu/RBNN"
"zyxxmu/lottery-jackpots" -> "chenbong/PSS-Net"
"zyxxmu/lottery-jackpots" -> "zyxxmu/White-Box"
"szq0214/S2-BNN" -> "liuzechun/AdamBNN"
"varun19299/rigl-reproducibility" -> "verbose-void/rigl-torch"
"varun19299/rigl-reproducibility" -> "Shiweiliuiiiiiii/In-Time-Over-Parameterization"
"hqjenny/CoDeNet" -> "Zhen-Dong/CoDeNet"
"hqjenny/CoDeNet" -> "DequanWang/CoDeNet"
"Zhen-Dong/BitPack" -> "Zhen-Dong/CoDeNet"
"Zhen-Dong/BitPack" -> "DequanWang/CoDeNet"
"open-mmlab/mmrazor" -> "ModelTC/MQBench" ["e"=1]
"open-mmlab/mmrazor" -> "OpenPPL/ppq" ["e"=1]
"open-mmlab/mmrazor" -> "VainF/Torch-Pruning" ["e"=1]
"hibiken/stories" -> "he-y/filter-pruning-geometric-median" ["e"=1]
"ZhangGe6/onnx-modifier" -> "OpenPPL/ppq" ["e"=1]
"ZhangGe6/onnx-modifier" -> "ModelTC/MQBench" ["e"=1]
"ZhangGe6/onnx-modifier" -> "quic/aimet" ["e"=1]
"ZhangGe6/onnx-modifier" -> "VainF/Torch-Pruning" ["e"=1]
"ENOT-AutoDL/onnx2torch" -> "ModelTC/MQBench" ["e"=1]
"ENOT-AutoDL/onnx2torch" -> "OpenPPL/ppq" ["e"=1]
"facebookarchive/fb-caffe-exts" -> "pmgysel/caffe" ["e"=1]
"open-mmlab/mmdeploy" -> "OpenPPL/ppq" ["e"=1]
"pytorch/executorch" -> "quic/aimet" ["e"=1]
"OpenPPL/ppq" -> "ModelTC/MQBench"
"OpenPPL/ppq" -> "OpenPPL/ppl.nn" ["e"=1]
"OpenPPL/ppq" -> "NVIDIA/trt-samples-for-hackathon-cn" ["e"=1]
"OpenPPL/ppq" -> "ZhangGe6/onnx-modifier" ["e"=1]
"OpenPPL/ppq" -> "shouxieai/tensorRT_Pro" ["e"=1]
"OpenPPL/ppq" -> "Efficient-ML/Awesome-Model-Quantization"
"OpenPPL/ppq" -> "nndeploy/nndeploy" ["e"=1]
"OpenPPL/ppq" -> "daquexian/onnx-simplifier" ["e"=1]
"OpenPPL/ppq" -> "open-mmlab/mmdeploy" ["e"=1]
"OpenPPL/ppq" -> "BBuf/tvm_mlir_learn" ["e"=1]
"OpenPPL/ppq" -> "quic/aimet"
"OpenPPL/ppq" -> "666DZY666/micronet"
"OpenPPL/ppq" -> "Jermmy/pytorch-quantization-demo"
"OpenPPL/ppq" -> "OpenPPL/ppl.cv" ["e"=1]
"OpenPPL/ppq" -> "BBuf/how-to-optim-algorithm-in-cuda" ["e"=1]
"Zhen-Dong/Awesome-Quantization-Papers" -> "Efficient-ML/Awesome-Model-Quantization"
"Zhen-Dong/Awesome-Quantization-Papers" -> "Zhen-Dong/HAWQ"
"Zhen-Dong/Awesome-Quantization-Papers" -> "zkkli/RepQ-ViT" ["e"=1]
"Zhen-Dong/Awesome-Quantization-Papers" -> "megvii-research/FQ-ViT"
"Zhen-Dong/Awesome-Quantization-Papers" -> "OpenGVLab/OmniQuant" ["e"=1]
"Zhen-Dong/Awesome-Quantization-Papers" -> "zkkli/I-ViT" ["e"=1]
"Zhen-Dong/Awesome-Quantization-Papers" -> "ModelTC/MQBench"
"Zhen-Dong/Awesome-Quantization-Papers" -> "mit-han-lab/smoothquant" ["e"=1]
"Zhen-Dong/Awesome-Quantization-Papers" -> "spcl/QuaRot" ["e"=1]
"Zhen-Dong/Awesome-Quantization-Papers" -> "Efficient-ML/Awesome-Efficient-AIGC" ["e"=1]
"Zhen-Dong/Awesome-Quantization-Papers" -> "wimh966/QDrop"
"Zhen-Dong/Awesome-Quantization-Papers" -> "HuangOwen/Awesome-LLM-Compression" ["e"=1]
"Zhen-Dong/Awesome-Quantization-Papers" -> "horseee/Awesome-Efficient-LLM" ["e"=1]
"Zhen-Dong/Awesome-Quantization-Papers" -> "ModelTC/llmc" ["e"=1]
"Zhen-Dong/Awesome-Quantization-Papers" -> "yhhhli/BRECQ"
"alibaba/TinyNeuralNetwork" -> "quic/aimet" ["e"=1]
"alibaba/TinyNeuralNetwork" -> "ModelTC/MQBench" ["e"=1]
"alibaba/TinyNeuralNetwork" -> "OpenPPL/ppq" ["e"=1]
"alibaba/TinyNeuralNetwork" -> "666DZY666/micronet" ["e"=1]
"alibaba/TinyNeuralNetwork" -> "VainF/Torch-Pruning" ["e"=1]
"alibaba/TinyNeuralNetwork" -> "Jermmy/pytorch-quantization-demo" ["e"=1]
"megvii-research/FQ-ViT" -> "hahnyuan/PTQ4ViT"
"megvii-research/FQ-ViT" -> "zkkli/RepQ-ViT" ["e"=1]
"megvii-research/FQ-ViT" -> "YanjingLi0202/Q-ViT"
"megvii-research/FQ-ViT" -> "yhhhli/BRECQ"
"megvii-research/FQ-ViT" -> "zkkli/I-ViT" ["e"=1]
"megvii-research/FQ-ViT" -> "Qualcomm-AI-research/transformer-quantization"
"megvii-research/FQ-ViT" -> "kssteven418/I-BERT"
"megvii-research/FQ-ViT" -> "wimh966/QDrop"
"megvii-research/FQ-ViT" -> "megvii-research/Sparsebit" ["e"=1]
"megvii-research/FQ-ViT" -> "ModelTC/MQBench"
"megvii-research/FQ-ViT" -> "Zhen-Dong/HAWQ"
"megvii-research/FQ-ViT" -> "zkkli/PSAQ-ViT"
"megvii-research/FQ-ViT" -> "hustzxd/LSQuantization"
"megvii-research/FQ-ViT" -> "Zhen-Dong/Awesome-Quantization-Papers"
"megvii-research/FQ-ViT" -> "Qualcomm-AI-research/FP8-quantization" ["e"=1]
"zysxmu/IntraQ" -> "lihuantong/HAST"
"zysxmu/IntraQ" -> "zysxmu/FDDA"
"zysxmu/IntraQ" -> "iamkanghyunchoi/qimera"
"HeKun-NVIDIA/TensorRT-Developer_Guide_in_Chinese" -> "OpenPPL/ppq" ["e"=1]
"MatthieuCourbariaux/BinaryConnect" -> "MatthieuCourbariaux/BinaryNet"
"MatthieuCourbariaux/BinaryConnect" -> "itayhubara/BinaryNet"
"MatthieuCourbariaux/BinaryConnect" -> "hantek/BinaryConnect"
"MatthieuCourbariaux/BinaryConnect" -> "allenai/XNOR-Net"
"MatthieuCourbariaux/BinaryConnect" -> "itayhubara/BinaryNet.pytorch"
"MatthieuCourbariaux/BinaryConnect" -> "fengfu-chris/caffe-twns"
"MatthieuCourbariaux/BinaryConnect" -> "luhaofang/CACU"
"MatthieuCourbariaux/BinaryConnect" -> "AngusG/tensorflow-xnor-bnn"
"MatthieuCourbariaux/BinaryConnect" -> "liuzechun/Bi-Real-net"
"MatthieuCourbariaux/BinaryConnect" -> "czhu95/ternarynet"
"MatthieuCourbariaux/BinaryConnect" -> "CAS-CLab/quantized-cnn"
"MatthieuCourbariaux/BinaryConnect" -> "jiecaoyu/XNOR-Net-PyTorch"
"MatthieuCourbariaux/BinaryConnect" -> "DingKe/nn_playground"
"MatthieuCourbariaux/BinaryConnect" -> "eghouti/BinaryConnect"
"MatthieuCourbariaux/BinaryConnect" -> "hpi-xnor/BMXNet"
"ducha-aiki/caffenet-benchmark" -> "wenwei202/caffe" ["e"=1]
"Jacobi93/Alpha-IoU" -> "Zzh-tju/yolov5" ["e"=1]
"kssteven418/Squeezeformer" -> "kssteven418/Q-ASR" ["e"=1]
"clevercool/SQuant" -> "clevercool/TileSparsity"
"clevercool/SQuant" -> "iamkanghyunchoi/qimera"
"szq0214/FKD" -> "szq0214/SReT"
"szq0214/FKD" -> "szq0214/Un-Mix"
"iamkanghyunchoi/ait" -> "iamkanghyunchoi/qimera"
"iamkanghyunchoi/ait" -> "AIS-SNU/Optimus-CC"
"hahnyuan/PTQ4ViT" -> "megvii-research/FQ-ViT"
"hahnyuan/PTQ4ViT" -> "zkkli/RepQ-ViT" ["e"=1]
"hahnyuan/PTQ4ViT" -> "YanjingLi0202/Q-ViT"
"hahnyuan/PTQ4ViT" -> "zkkli/I-ViT" ["e"=1]
"hahnyuan/PTQ4ViT" -> "yhhhli/BRECQ"
"hahnyuan/PTQ4ViT" -> "kssteven418/I-BERT"
"hahnyuan/PTQ4ViT" -> "zkkli/PSAQ-ViT"
"hahnyuan/PTQ4ViT" -> "hustvl/PD-Quant"
"hahnyuan/PTQ4ViT" -> "Qualcomm-AI-research/transformer-quantization"
"hahnyuan/PTQ4ViT" -> "wimh966/QDrop"
"hahnyuan/PTQ4ViT" -> "ModelTC/MQBench"
"hahnyuan/PTQ4ViT" -> "nbasyl/OFQ"
"hahnyuan/PTQ4ViT" -> "GATECH-EIC/ViTCoD" ["e"=1]
"hahnyuan/PTQ4ViT" -> "Zhen-Dong/HAWQ"
"hahnyuan/PTQ4ViT" -> "hahnyuan/RPTQ4LLM" ["e"=1]
"wimh966/QDrop" -> "yhhhli/BRECQ"
"wimh966/QDrop" -> "hustvl/PD-Quant"
"wimh966/QDrop" -> "itayhubara/CalibTIP"
"wimh966/QDrop" -> "liuzechun/Nonuniform-to-Uniform-Quantization"
"wimh966/QDrop" -> "ModelTC/MQBench"
"wimh966/QDrop" -> "42Shawn/PTQ4DM" ["e"=1]
"wimh966/QDrop" -> "wimh966/outlier_suppression" ["e"=1]
"wimh966/QDrop" -> "clevercool/SQuant"
"wimh966/QDrop" -> "Qualcomm-AI-research/oscillations-qat"
"wimh966/QDrop" -> "megvii-research/FQ-ViT"
"metaopt/torchopt" -> "rfeinman/pytorch-minimize" ["e"=1]
"ModelTC/United-Perception" -> "ModelTC/MQBench" ["e"=1]
"ModelTC/United-Perception" -> "ModelTC/Dipoorlet" ["e"=1]
"tianyic/only_train_once_personal_footprint" -> "VainF/Torch-Pruning" ["e"=1]
"Qualcomm-AI-research/transformer-quantization" -> "megvii-research/FQ-ViT"
"Qualcomm-AI-research/transformer-quantization" -> "hahnyuan/PTQ4ViT"
"Qualcomm-AI-research/transformer-quantization" -> "Qualcomm-AI-research/oscillations-qat"
"Qualcomm-AI-research/transformer-quantization" -> "jakc4103/DFQ"
"Qualcomm-AI-research/transformer-quantization" -> "itayhubara/CalibTIP"
"Qualcomm-AI-research/transformer-quantization" -> "kssteven418/I-BERT"
"fxmeng/RMNet" -> "DingXiaoH/ResRep" ["e"=1]
"lmbxmu/SuperViT" -> "zyxxmu/Bi-Mask"
"htqin/BiBERT" -> "facebookresearch/bit"
"htqin/BiBERT" -> "z-hXu/ReCU"
"htqin/BiBERT" -> "htqin/IR-Net"
"htqin/BiBERT" -> "htqin/BiPointNet"
"gngdb/variational-dropout" -> "BayesWatch/tf-variational-dropout"
"ZouJiu1/LSQplus" -> "hustzxd/LSQuantization"
"ZouJiu1/LSQplus" -> "zhutmost/lsq-net"
"liuzechun/Nonuniform-to-Uniform-Quantization" -> "wimh966/QDrop"
"liuzechun/Nonuniform-to-Uniform-Quantization" -> "yhhhli/APoT_Quantization"
"liuzechun/Nonuniform-to-Uniform-Quantization" -> "liuzechun/AdamBNN"
"liuzechun/Nonuniform-to-Uniform-Quantization" -> "hustvl/PD-Quant"
"liuzechun/Nonuniform-to-Uniform-Quantization" -> "yhhhli/BRECQ"
"liuzechun/Nonuniform-to-Uniform-Quantization" -> "zhutmost/lsq-net"
"liuzechun/Nonuniform-to-Uniform-Quantization" -> "nbasyl/OFQ"
"iamkanghyunchoi/qimera" -> "iamkanghyunchoi/ait"
"iamkanghyunchoi/qimera" -> "AIS-SNU/Optimus-CC"
"szq0214/SReT" -> "szq0214/FKD"
"szq0214/SReT" -> "liuzechun/AdamBNN"
"kong36088/BaiduImageSpider" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"forresti/SqueezeNet" -> "songhan/SqueezeNet-Deep-Compression" ["e"=1]
"forresti/SqueezeNet" -> "songhan/Deep-Compression-AlexNet" ["e"=1]
"forresti/SqueezeNet" -> "MatthieuCourbariaux/BinaryNet" ["e"=1]
"fengbintu/Neural-Networks-on-Silicon" -> "zssloth/Embedded-Neural-Network" ["e"=1]
"dgschwend/netscope" -> "pmgysel/caffe"
"dgschwend/netscope" -> "cwlacewe/netscope"
"yuanyuanli85/CaffeModelCompression" -> "marifnst/SampleCaffeModelCompression"
"yuanyuanli85/CaffeModelCompression" -> "may0324/DeepCompression-caffe"
"yuanyuanli85/CaffeModelCompression" -> "garion9013/impl-pruning-caffemodel"
"yuanyuanli85/CaffeModelCompression" -> "ChaunceZhou/caffe-pruned"
"yuanyuanli85/CaffeModelCompression" -> "yiwenguo/Dynamic-Network-Surgery"
"zjhellofss/KuiperInfer" -> "OpenPPL/ppq" ["e"=1]
"CAS-CLab/quantized-cnn" -> "pmgysel/caffe"
"CAS-CLab/quantized-cnn" -> "allenai/XNOR-Net"
"CAS-CLab/quantized-cnn" -> "gudovskiy/ShiftCNN" ["e"=1]
"CAS-CLab/quantized-cnn" -> "songhan/SqueezeNet-Deep-Compression"
"CAS-CLab/quantized-cnn" -> "zhaoweicai/hwgq"
"CAS-CLab/quantized-cnn" -> "AojunZhou/Incremental-Network-Quantization"
"CAS-CLab/quantized-cnn" -> "Roll920/ThiNet"
"CAS-CLab/quantized-cnn" -> "fengfu-chris/caffe-twns"
"CAS-CLab/quantized-cnn" -> "czhu95/ternarynet"
"CAS-CLab/quantized-cnn" -> "hukim93/BWN-XNOR-caffe"
"CAS-CLab/quantized-cnn" -> "liuzechun/Bi-Real-net"
"CAS-CLab/quantized-cnn" -> "zssloth/Embedded-Neural-Network"
"CAS-CLab/quantized-cnn" -> "MatthieuCourbariaux/BinaryConnect"
"CAS-CLab/quantized-cnn" -> "microsoft/LQ-Nets"
"CAS-CLab/quantized-cnn" -> "MatthieuCourbariaux/BinaryNet"
"songhan/SqueezeNet-Deep-Compression" -> "songhan/Deep-Compression-AlexNet"
"songhan/SqueezeNet-Deep-Compression" -> "pmgysel/caffe"
"songhan/SqueezeNet-Deep-Compression" -> "may0324/DeepCompression-caffe"
"songhan/SqueezeNet-Deep-Compression" -> "forresti/SqueezeNet" ["e"=1]
"songhan/SqueezeNet-Deep-Compression" -> "songhan/SqueezeNet-Residual"
"songhan/SqueezeNet-Deep-Compression" -> "CAS-CLab/quantized-cnn"
"songhan/SqueezeNet-Deep-Compression" -> "allenai/XNOR-Net"
"songhan/SqueezeNet-Deep-Compression" -> "xiaolonw/caffe-video_triplet" ["e"=1]
"songhan/SqueezeNet-Deep-Compression" -> "sanghoon/pva-faster-rcnn" ["e"=1]
"songhan/SqueezeNet-Deep-Compression" -> "xingwangsfu/caffe-yolo" ["e"=1]
"songhan/SqueezeNet-Deep-Compression" -> "ChenglongChen/caffe-windows" ["e"=1]
"songhan/SqueezeNet-Deep-Compression" -> "MatthieuCourbariaux/BinaryNet"
"songhan/SqueezeNet-Deep-Compression" -> "camel007/Caffe-ShuffleNet" ["e"=1]
"songhan/SqueezeNet-Deep-Compression" -> "BichenWuUCB/squeezeDet" ["e"=1]
"songhan/SqueezeNet-Deep-Compression" -> "ENCP/CNNdroid" ["e"=1]
"songhan/SqueezeNet-Residual" -> "songhan/SqueezeNet-DSD-Training"
"songhan/SqueezeNet-Residual" -> "songhan/SqueezeNet-Generator"
"MatthieuCourbariaux/BinaryNet" -> "itayhubara/BinaryNet"
"MatthieuCourbariaux/BinaryNet" -> "MatthieuCourbariaux/BinaryConnect"
"MatthieuCourbariaux/BinaryNet" -> "allenai/XNOR-Net"
"MatthieuCourbariaux/BinaryNet" -> "itayhubara/BinaryNet.pytorch"
"MatthieuCourbariaux/BinaryNet" -> "jiecaoyu/XNOR-Net-PyTorch"
"MatthieuCourbariaux/BinaryNet" -> "Xilinx/BNN-PYNQ" ["e"=1]
"MatthieuCourbariaux/BinaryNet" -> "cornell-zhang/bnn-fpga" ["e"=1]
"MatthieuCourbariaux/BinaryNet" -> "AngusG/tensorflow-xnor-bnn"
"MatthieuCourbariaux/BinaryNet" -> "itayhubara/BinaryNet.tf"
"MatthieuCourbariaux/BinaryNet" -> "hpi-xnor/BMXNet"
"MatthieuCourbariaux/BinaryNet" -> "DingKe/nn_playground"
"MatthieuCourbariaux/BinaryNet" -> "google/gemmlowp" ["e"=1]
"MatthieuCourbariaux/BinaryNet" -> "forresti/SqueezeNet" ["e"=1]
"MatthieuCourbariaux/BinaryNet" -> "CAS-CLab/quantized-cnn"
"MatthieuCourbariaux/BinaryNet" -> "songhan/Deep-Compression-AlexNet"
"PaddlePaddle/FastDeploy" -> "OpenPPL/ppq" ["e"=1]
"CVCUDA/CV-CUDA" -> "OpenPPL/ppq" ["e"=1]
"fengfu-chris/caffe-twns" -> "czhu95/ternarynet"
"fengfu-chris/caffe-twns" -> "dongyp13/Stochastic-Quantization"
"fengfu-chris/caffe-twns" -> "luhaofang/CACU"
"sherlockchou86/VideoPipe" -> "OpenPPL/ppq" ["e"=1]
"xie-lab-ml/deep-learning-dynamics-paper-list" -> "amirgholami/PyHessian" ["e"=1]
"mit-han-lab/smoothquant" -> "Efficient-ML/Awesome-Model-Quantization" ["e"=1]
"mit-han-lab/smoothquant" -> "ModelTC/MQBench" ["e"=1]
"zkkli/I-ViT" -> "zkkli/PSAQ-ViT" ["e"=1]
"Qualcomm-AI-research/oscillations-qat" -> "nbasyl/OFQ"
"megvii-research/Sparsebit" -> "megvii-research/FQ-ViT" ["e"=1]
"IST-DASLab/gptq" -> "Efficient-ML/Awesome-Model-Quantization" ["e"=1]
"songhan/Deep-Compression-AlexNet" -> "songhan/SqueezeNet-Deep-Compression"
"songhan/Deep-Compression-AlexNet" -> "may0324/DeepCompression-caffe"
"songhan/Deep-Compression-AlexNet" -> "mightydeveloper/Deep-Compression-PyTorch"
"songhan/Deep-Compression-AlexNet" -> "wenwei202/caffe"
"songhan/Deep-Compression-AlexNet" -> "yiwenguo/Dynamic-Network-Surgery"
"songhan/Deep-Compression-AlexNet" -> "ethanhe42/channel-pruning"
"songhan/Deep-Compression-AlexNet" -> "jack-willturner/deep-compression"
"songhan/Deep-Compression-AlexNet" -> "forresti/SqueezeNet" ["e"=1]
"songhan/Deep-Compression-AlexNet" -> "allenai/XNOR-Net"
"songhan/Deep-Compression-AlexNet" -> "yuanyuanli85/CaffeModelCompression"
"songhan/Deep-Compression-AlexNet" -> "MatthieuCourbariaux/BinaryNet"
"songhan/Deep-Compression-AlexNet" -> "wojciechmo/deep-compression"
"songhan/Deep-Compression-AlexNet" -> "jacobgil/pytorch-pruning"
"songhan/Deep-Compression-AlexNet" -> "zssloth/Embedded-Neural-Network"
"songhan/Deep-Compression-AlexNet" -> "CAS-CLab/quantized-cnn"
"Guangxuan-Xiao/torch-int" -> "hustvl/PD-Quant" ["e"=1]
"hustvl/PD-Quant" -> "bytedance/MRECG"
"hustvl/PD-Quant" -> "wimh966/QDrop"
"ENCP/CNNdroid" -> "songhan/SqueezeNet-Deep-Compression" ["e"=1]
"ENCP/CNNdroid" -> "CAS-CLab/quantized-cnn" ["e"=1]
"ENCP/CNNdroid" -> "IntelLabs/SkimCaffe" ["e"=1]
"soeaver/caffe-model" -> "ethanhe42/channel-pruning" ["e"=1]
"ThanatosShinji/onnx-tool" -> "OpenPPL/ppq" ["e"=1]
"zkkli/PSAQ-ViT" -> "tduckboot/tduck-platform" ["e"=1]
"hpi-xnor/BNext" -> "hpi-xnor/bitorch"
"hpi-xnor/BNext" -> "facebookresearch/Ternary_Binary_Transformer"
"pmgysel/caffe" -> "songhan/SqueezeNet-Deep-Compression"
"pmgysel/caffe" -> "CAS-CLab/quantized-cnn"
"pmgysel/caffe" -> "HirokiNakahara/GUINNESS" ["e"=1]
"pmgysel/caffe" -> "wenwei202/caffe"
"pmgysel/caffe" -> "gplhegde/caffepresso"
"pmgysel/caffe" -> "zhaoweicai/hwgq"
"pmgysel/caffe" -> "Harick1/caffe-yolo" ["e"=1]
"pmgysel/caffe" -> "zssloth/Embedded-Neural-Network"
"pmgysel/caffe" -> "czhu95/ternarynet"
"pmgysel/caffe" -> "may0324/DeepCompression-caffe"
"pmgysel/caffe" -> "yuanyuanli85/CaffeModelCompression"
"pmgysel/caffe" -> "yiwenguo/Dynamic-Network-Surgery"
"pmgysel/caffe" -> "luhaofang/CACU"
"pmgysel/caffe" -> "dgschwend/netscope"
"pmgysel/caffe" -> "allenai/XNOR-Net"
"YanjingLi0202/Q-ViT" -> "zhexinli/Q-ViT-DeiT"
"YanjingLi0202/Q-ViT" -> "hahnyuan/PTQ4ViT"
"YanjingLi0202/Q-ViT" -> "zkkli/PSAQ-ViT"
"YanjingLi0202/Q-ViT" -> "megvii-research/FQ-ViT"
"YanjingLi0202/Q-ViT" -> "zkkli/RepQ-ViT" ["e"=1]
"YanjingLi0202/Q-ViT" -> "zkkli/I-ViT" ["e"=1]
"itayhubara/BinaryNet" -> "MatthieuCourbariaux/BinaryNet"
"itayhubara/BinaryNet" -> "MatthieuCourbariaux/BinaryConnect"
"itayhubara/BinaryNet" -> "allenai/XNOR-Net"
"itayhubara/BinaryNet" -> "itayhubara/BinaryNet.pytorch"
"itayhubara/BinaryNet" -> "AngusG/tensorflow-xnor-bnn"
"itayhubara/BinaryNet" -> "czhu95/ternarynet"
"itayhubara/BinaryNet" -> "jiecaoyu/XNOR-Net-PyTorch"
"itayhubara/BinaryNet" -> "luhaofang/CACU"
"itayhubara/BinaryNet" -> "TropComplique/trained-ternary-quantization"
"itayhubara/BinaryNet" -> "qinyao-he/bit-rnn"
"itayhubara/BinaryNet" -> "itayhubara/BinaryNet.tf"
"itayhubara/BinaryNet" -> "CAS-CLab/quantized-cnn"
"itayhubara/BinaryNet" -> "hillbig/binary_net" ["e"=1]
"itayhubara/BinaryNet" -> "fengfu-chris/caffe-twns"
"itayhubara/BinaryNet" -> "DingKe/nn_playground"
"LiuXiaoxuanPKU/GACT-ICML" -> "cjf00000/StatQuant"
"songhan/SqueezeNet-DSD-Training" -> "songhan/SqueezeNet-Generator"
"songhan/SqueezeNet-DSD-Training" -> "miaow1988/SqueezeNet_v1.2"
"younghwanoh/impl-pruning-TF" -> "ex4sperans/pruning_with_tensorflow"
"younghwanoh/impl-pruning-TF" -> "gstaff/tfzip"
"younghwanoh/impl-pruning-TF" -> "hiteshvaidya/Model-Compression"
"younghwanoh/impl-pruning-TF" -> "wojciechmo/deep-compression"
"younghwanoh/impl-pruning-TF" -> "nephashi/DeepCompression"
"younghwanoh/impl-pruning-TF" -> "zssloth/Embedded-Neural-Network"
"younghwanoh/impl-pruning-TF" -> "yiwenguo/Dynamic-Network-Surgery"
"rarilurelo/XNOR-Net" -> "gplhegde/theano-xnor-net"
"ModelTC/NART" -> "ModelTC/lightx2v"
"ModelTC/NART" -> "ModelTC/EasyLLM"
"AIS-SNU/Optimus-CC" -> "hongsunjang/pipe-bd"
"hongsunjang/pipe-bd" -> "AIS-SNU/Optimus-CC"
"facebookresearch/bit" -> "htqin/BiBERT"
"facebookresearch/bit" -> "Phuoc-Hoan-Le/BinaryViT"
"facebookresearch/bit" -> "facebookresearch/Ternary_Binary_Transformer"
"facebookresearch/bit" -> "htqin/BiBench"
"zyxxmu/LBC" -> "zyxxmu/Bi-Mask"
"huawei-noah/VanillaNet" -> "huawei-noah/Efficient-Computing" ["e"=1]
"huawei-noah/VanillaNet" -> "yehuitang/Pruning" ["e"=1]
"e-lab/ENet-training" -> "songhan/SqueezeNet-Deep-Compression" ["e"=1]
"horseee/LLM-Pruner" -> "VainF/Torch-Pruning" ["e"=1]
"HuangOwen/Awesome-LLM-Compression" -> "Efficient-ML/Awesome-Model-Quantization" ["e"=1]
"Liuhong99/Sophia" -> "amirgholami/adahessian" ["e"=1]
"allenai/XNOR-Net" -> "jiecaoyu/XNOR-Net-PyTorch"
"allenai/XNOR-Net" -> "MatthieuCourbariaux/BinaryNet"
"allenai/XNOR-Net" -> "itayhubara/BinaryNet"
"allenai/XNOR-Net" -> "AngusG/tensorflow-xnor-bnn"
"allenai/XNOR-Net" -> "MatthieuCourbariaux/BinaryConnect"
"allenai/XNOR-Net" -> "hpi-xnor/BMXNet"
"allenai/XNOR-Net" -> "CAS-CLab/quantized-cnn"
"allenai/XNOR-Net" -> "itayhubara/BinaryNet.pytorch"
"allenai/XNOR-Net" -> "hukim93/BWN-XNOR-caffe"
"allenai/XNOR-Net" -> "liuzechun/Bi-Real-net"
"allenai/XNOR-Net" -> "songhan/SqueezeNet-Deep-Compression"
"allenai/XNOR-Net" -> "itayhubara/BinaryNet.tf"
"allenai/XNOR-Net" -> "soumith/imagenet-multiGPU.torch" ["e"=1]
"allenai/XNOR-Net" -> "pmgysel/caffe"
"allenai/XNOR-Net" -> "AojunZhou/Incremental-Network-Quantization"
"horseee/Awesome-Efficient-LLM" -> "Efficient-ML/Awesome-Model-Quantization" ["e"=1]
"horseee/Awesome-Efficient-LLM" -> "Zhen-Dong/Awesome-Quantization-Papers" ["e"=1]
"andravin/wincnn" -> "IntelLabs/SkimCaffe" ["e"=1]
"andravin/wincnn" -> "deepglint/EasyQuant" ["e"=1]
"andravin/wincnn" -> "pmgysel/caffe" ["e"=1]
"IntelLabs/SkimCaffe" -> "wenwei202/caffe"
"IntelLabs/SkimCaffe" -> "yiwenguo/Dynamic-Network-Surgery"
"IntelLabs/SkimCaffe" -> "xingyul/sparse-winograd-cnn" ["e"=1]
"IntelLabs/SkimCaffe" -> "garion9013/impl-pruning-caffemodel"
"IntelLabs/SkimCaffe" -> "OAID/Caffe-HRT" ["e"=1]
"IntelLabs/SkimCaffe" -> "NHZlX/Merge_bn_Caffe"
"IntelLabs/SkimCaffe" -> "dongyp13/Stochastic-Quantization"
"IntelLabs/SkimCaffe" -> "andravin/wincnn" ["e"=1]
"IntelLabs/SkimCaffe" -> "yuanyuanli85/CaffeModelCompression"
"IntelLabs/SkimCaffe" -> "IntelLabs/SpMP" ["e"=1]
"IntelLabs/SkimCaffe" -> "luhaofang/CACU"
"IntelLabs/SkimCaffe" -> "NHZlX/Auto_pruning"
"IntelLabs/SkimCaffe" -> "libxsmm/libxsmm" ["e"=1]
"zssloth/Embedded-Neural-Network" -> "fengbintu/Neural-Networks-on-Silicon" ["e"=1]
"zssloth/Embedded-Neural-Network" -> "dgschwend/zynqnet" ["e"=1]
"zssloth/Embedded-Neural-Network" -> "ysh329/embedded-ai.bi-weekly"
"zssloth/Embedded-Neural-Network" -> "doonny/PipeCNN" ["e"=1]
"zssloth/Embedded-Neural-Network" -> "wenwei202/caffe"
"zssloth/Embedded-Neural-Network" -> "cornell-zhang/bnn-fpga" ["e"=1]
"zssloth/Embedded-Neural-Network" -> "pmgysel/caffe"
"zssloth/Embedded-Neural-Network" -> "CAS-CLab/quantized-cnn"
"zssloth/Embedded-Neural-Network" -> "AojunZhou/Incremental-Network-Quantization"
"zssloth/Embedded-Neural-Network" -> "younghwanoh/impl-pruning-TF"
"zssloth/Embedded-Neural-Network" -> "csarron/awesome-emdl"
"zssloth/Embedded-Neural-Network" -> "czhu95/ternarynet"
"zssloth/Embedded-Neural-Network" -> "Xilinx/BNN-PYNQ" ["e"=1]
"zssloth/Embedded-Neural-Network" -> "allenai/XNOR-Net"
"zssloth/Embedded-Neural-Network" -> "memoiry/Awesome-model-compression-and-acceleration"
"huggingface/optimum-quanto" -> "yhhhli/BRECQ" ["e"=1]
"AIoT-MLSys-Lab/Efficient-LLMs-Survey" -> "Zhen-Dong/Awesome-Quantization-Papers" ["e"=1]
"AIoT-MLSys-Lab/Efficient-LLMs-Survey" -> "Efficient-ML/Awesome-Model-Quantization" ["e"=1]
"42Shawn/PTQ4DM" -> "wimh966/QDrop" ["e"=1]
"42Shawn/PTQ4DM" -> "yhhhli/BRECQ" ["e"=1]
"nndeploy/nndeploy" -> "OpenPPL/ppq" ["e"=1]
"DT42/squeezenet_demo" -> "songhan/SqueezeNet-Deep-Compression" ["e"=1]
"Xiuyu-Li/q-diffusion" -> "yhhhli/BRECQ" ["e"=1]
"Xiuyu-Li/q-diffusion" -> "wimh966/QDrop" ["e"=1]
"Harick1/caffe-yolo" -> "pmgysel/caffe" ["e"=1]
"Harick1/caffe-yolo" -> "hukim93/BWN-XNOR-caffe" ["e"=1]
"hukim93/BWN-XNOR-caffe" -> "luhaofang/CACU"
"hukim93/BWN-XNOR-caffe" -> "HongxingGao/XNOR-Net"
"hukim93/BWN-XNOR-caffe" -> "dongyp13/Stochastic-Quantization"
"Efficient-ML/Awesome-Efficient-AIGC" -> "htqin/BiBench" ["e"=1]
"Efficient-ML/Awesome-Efficient-AIGC" -> "Zhen-Dong/Awesome-Quantization-Papers" ["e"=1]
"Efficient-ML/Awesome-Efficient-AIGC" -> "Efficient-ML/Awesome-Model-Quantization" ["e"=1]
"HuangOwen/Quantization-Variation" -> "nbasyl/OFQ"
"garion9013/impl-pruning-caffemodel" -> "NHZlX/Auto_pruning"
"yiwenguo/Dynamic-Network-Surgery" -> "wenwei202/caffe"
"yiwenguo/Dynamic-Network-Surgery" -> "IntelLabs/SkimCaffe"
"yiwenguo/Dynamic-Network-Surgery" -> "AojunZhou/Incremental-Network-Quantization"
"yiwenguo/Dynamic-Network-Surgery" -> "may0324/DeepCompression-caffe"
"yiwenguo/Dynamic-Network-Surgery" -> "fengfu-chris/caffe-twns"
"yiwenguo/Dynamic-Network-Surgery" -> "dongyp13/Stochastic-Quantization"
"yiwenguo/Dynamic-Network-Surgery" -> "Roll920/ThiNet"
"yiwenguo/Dynamic-Network-Surgery" -> "yuanyuanli85/CaffeModelCompression"
"yiwenguo/Dynamic-Network-Surgery" -> "KarenUllrich/Tutorial-SoftWeightSharingForNNCompression"
"yiwenguo/Dynamic-Network-Surgery" -> "czhu95/ternarynet"
"yiwenguo/Dynamic-Network-Surgery" -> "songhan/Deep-Compression-AlexNet"
"yiwenguo/Dynamic-Network-Surgery" -> "AojunZhou/Efficient-Deep-Learning"
"yiwenguo/Dynamic-Network-Surgery" -> "hukim93/BWN-XNOR-caffe"
"yiwenguo/Dynamic-Network-Surgery" -> "luhaofang/CACU"
"yiwenguo/Dynamic-Network-Surgery" -> "bayesgroup/variational-dropout-sparsifies-dnn"
"Phuoc-Hoan-Le/BinaryViT" -> "ThisisBillhe/BiViT"
"ModelTC/Dipoorlet" -> "ModelTC/NART"
"ModelTC/Dipoorlet" -> "ModelTC/quant_horizon"
"ModelTC/Dipoorlet" -> "ModelTC/MQBench"
"ModelTC/Dipoorlet" -> "ModelTC/lightx2v"
"gplhegde/theano-xnor-net" -> "rarilurelo/XNOR-Net"
"bytedance/MRECG" -> "hustvl/PD-Quant"
"htqin/BiBench" -> "bohanzhuang/Group-Net-semantic-segmentation"
"htqin/BiBench" -> "Phuoc-Hoan-Le/BinaryViT"
"nbasyl/OFQ" -> "facebookresearch/Ternary_Binary_Transformer"
"nbasyl/OFQ" -> "HuangOwen/QAT-ACS"
"facebookresearch/Ternary_Binary_Transformer" -> "nbasyl/OFQ"
"zyxxmu/Bi-Mask" -> "zyxxmu/LBC"
"SamsungLabs/Genie" -> "lihuantong/HAST"
"ModelTC/awesome-lm-system" -> "ModelTC/lightx2v"
"ModelTC/awesome-lm-system" -> "ModelTC/quant_horizon"
"quic/ai-hub-models" -> "quic/aimet" ["e"=1]
"kuangliu/pytorch-cifar" -> "IntelLabs/distiller" ["e"=1]
"cornell-zhang/bnn-fpga" -> "MatthieuCourbariaux/BinaryNet" ["e"=1]
"xiaohu2015/DeepLearning_tutorials" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"doonny/PipeCNN" -> "zssloth/Embedded-Neural-Network" ["e"=1]
"openai/openai-gemm" -> "IntelLabs/SkimCaffe" ["e"=1]
"eladhoffer/convNet.pytorch" -> "eladhoffer/quantized.pytorch"
"eladhoffer/convNet.pytorch" -> "itayhubara/BinaryNet.pytorch"
"eladhoffer/convNet.pytorch" -> "Tiiiger/QPyTorch"
"eladhoffer/convNet.pytorch" -> "antspy/quantized_distillation"
"eladhoffer/convNet.pytorch" -> "microsoft/LQ-Nets"
"eladhoffer/convNet.pytorch" -> "jiecaoyu/XNOR-Net-PyTorch"
"eladhoffer/convNet.pytorch" -> "boluoweifenda/WAGE"
"eladhoffer/convNet.pytorch" -> "amirgholami/ZeroQ"
"eladhoffer/convNet.pytorch" -> "mit-han-lab/haq"
"czhu95/ternarynet" -> "fengfu-chris/caffe-twns"
"czhu95/ternarynet" -> "TropComplique/trained-ternary-quantization"
"czhu95/ternarynet" -> "luhaofang/CACU"
"czhu95/ternarynet" -> "AngusG/tensorflow-xnor-bnn"
"ModelTC/llmc" -> "ModelTC/MQBench" ["e"=1]
"ModelTC/EasyLLM" -> "ModelTC/NART"
"ModelTC/EasyLLM" -> "ModelTC/OmniBal"
"BichenWuUCB/squeezeDet" -> "songhan/SqueezeNet-Deep-Compression" ["e"=1]
"KimHanjung/VISAGE" -> "hongsunjang/pipe-bd" ["e"=1]
"NVIDIA/TensorRT-Model-Optimizer" -> "OpenPPL/ppq" ["e"=1]
"icoxfog417/tensorflow_qrnn" -> "DingKe/qrnn"
"HolmesShuan/ResNet-18-Caffemodel-on-ImageNet" -> "NHZlX/Merge_bn_Caffe" ["e"=1]
"AlexeyAB/Yolo_mark" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"DingKe/nn_playground" -> "DingKe/BinaryNet"
"DingKe/nn_playground" -> "MatthieuCourbariaux/BinaryNet"
"DingKe/nn_playground" -> "AngusG/tensorflow-xnor-bnn"
"DingKe/nn_playground" -> "MatthieuCourbariaux/BinaryConnect"
"DingKe/nn_playground" -> "itayhubara/BinaryNet.tf"
"DingKe/nn_playground" -> "jonathanmarek1/binarynet-tensorflow"
"DingKe/nn_playground" -> "czhu95/ternarynet"
"DingKe/nn_playground" -> "itayhubara/BinaryNet"
"DingKe/nn_playground" -> "DingKe/qrnn"
"DingKe/nn_playground" -> "allenai/XNOR-Net"
"DingKe/nn_playground" -> "uranusx86/BinaryNet-on-tensorflow"
"DingKe/nn_playground" -> "ralbertazzi/bnn"
"DingKe/nn_playground" -> "itayhubara/BinaryNet.pytorch"
"DingKe/nn_playground" -> "jiecaoyu/XNOR-Net-PyTorch"
"DingKe/nn_playground" -> "BertMoons/QuantizedNeuralNetworks-Keras-Tensorflow"
"qinyao-he/bit-rnn" -> "czhu95/ternarynet"
"luhaofang/CACU" -> "hukim93/BWN-XNOR-caffe"
"luhaofang/CACU" -> "czhu95/ternarynet"
"luhaofang/CACU" -> "luhaofang/CACUE"
"luhaofang/CACU" -> "fengfu-chris/caffe-twns"
"luhaofang/CACU" -> "AngusG/tensorflow-xnor-bnn"
"weiaicunzai/Bag_of_Tricks_for_Image_Classification_with_Convolutional_Neural_Networks" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"weiaicunzai/Bag_of_Tricks_for_Image_Classification_with_Convolutional_Neural_Networks" -> "666DZY666/micronet" ["e"=1]
"chengshengchan/model_compression" -> "hiteshvaidya/Model-Compression" ["e"=1]
"chengshengchan/model_compression" -> "antspy/quantized_distillation" ["e"=1]
"chengshengchan/model_compression" -> "sun254/awesome-model-compression-and-acceleration" ["e"=1]
"chengshengchan/model_compression" -> "yiwenguo/Dynamic-Network-Surgery" ["e"=1]
"chengshengchan/model_compression" -> "MatthieuCourbariaux/BinaryConnect" ["e"=1]
"readwrite112/AGAThA" -> "AIS-SNU/Optimus-CC"
"leesou/PIM-DL-ASPLOS" -> "AIS-SNU/PID-Comm" ["e"=1]
"AIS-SNU/PID-Comm" -> "jaewonalive/PeerAiD"
"AIS-SNU/PID-Comm" -> "AIS-SNU/Optimus-CC"
"DingKe/qrnn" -> "icoxfog417/tensorflow_qrnn"
"AIS-SNU/Smart-Infinity" -> "hongsunjang/pipe-bd"
"AIS-SNU/Smart-Infinity" -> "AIS-SNU/PID-Comm"
"AIS-SNU/Smart-Infinity" -> "AIS-SNU/Optimus-CC"
"AIS-SNU/Smart-Infinity" -> "jaewonalive/PeerAiD"
"jaewonalive/PeerAiD" -> "AIS-SNU/Optimus-CC"
"jaewonalive/PeerAiD" -> "AIS-SNU/PID-Comm"
"marifnst/SampleCaffeModelCompression" -> "yuanyuanli85/CaffeModelCompression"
"DT42/BerryNet" -> "allenai/XNOR-Net" ["e"=1]
"Xilinx/BNN-PYNQ" -> "MatthieuCourbariaux/BinaryNet" ["e"=1]
"ysh329/deep-learning-model-convertor" -> "Tencent/PocketFlow" ["e"=1]
"ysh329/deep-learning-model-convertor" -> "IntelLabs/distiller" ["e"=1]
"dkozlov/awesome-knowledge-distillation" -> "IntelLabs/distiller" ["e"=1]
"dkozlov/awesome-knowledge-distillation" -> "he-y/Awesome-Pruning" ["e"=1]
"dkozlov/awesome-knowledge-distillation" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"dkozlov/awesome-knowledge-distillation" -> "Tencent/PocketFlow" ["e"=1]
"dkozlov/awesome-knowledge-distillation" -> "666DZY666/micronet" ["e"=1]
"aaron-xichen/pytorch-playground" -> "IntelLabs/distiller" ["e"=1]
"aaron-xichen/pytorch-playground" -> "666DZY666/micronet" ["e"=1]
"aaron-xichen/pytorch-playground" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"hiteshvaidya/Model-Compression" -> "nephashi/DeepCompression"
"hiteshvaidya/Model-Compression" -> "gstaff/tfzip"
"hiteshvaidya/Model-Compression" -> "may0324/DeepCompression-caffe"
"RC4ML/BenchBF3" -> "RC4ML/RPCNIC"
"RC4ML/BenchBF3" -> "spcl/muliticast-based-allgather"
"pprp/Awesome-LLM-Quantization" -> "Zhen-Dong/Awesome-Quantization-Papers" ["e"=1]
"mrgloom/Network-Speed-and-Compression" -> "chester256/Model-Compression-Papers"
"mrgloom/Network-Speed-and-Compression" -> "ChanChiChoi/awesome-model-compression"
"marvis/pytorch-mobilenet" -> "jacobgil/pytorch-pruning" ["e"=1]
"kratzert/finetune_alexnet_with_tensorflow" -> "songhan/Deep-Compression-AlexNet" ["e"=1]
"bayesgroup/variational-dropout-sparsifies-dnn" -> "necludov/group-sparsity-sbp"
"bayesgroup/variational-dropout-sparsifies-dnn" -> "KarenUllrich/Tutorial_BayesianCompressionForDL"
"bayesgroup/variational-dropout-sparsifies-dnn" -> "BayesWatch/tf-variational-dropout"
"bayesgroup/variational-dropout-sparsifies-dnn" -> "HolyBayes/pytorch_ard"
"bayesgroup/variational-dropout-sparsifies-dnn" -> "kefirski/variational_dropout"
"bayesgroup/variational-dropout-sparsifies-dnn" -> "yiwenguo/Dynamic-Network-Surgery"
"bayesgroup/variational-dropout-sparsifies-dnn" -> "KarenUllrich/Tutorial-SoftWeightSharingForNNCompression"
"bayesgroup/variational-dropout-sparsifies-dnn" -> "da-molchanov/variance-networks"
"bayesgroup/variational-dropout-sparsifies-dnn" -> "gngdb/variational-dropout"
"bayesgroup/variational-dropout-sparsifies-dnn" -> "wenwei202/iss-rnns"
"KarenUllrich/Tutorial-SoftWeightSharingForNNCompression" -> "KarenUllrich/Tutorial_BayesianCompressionForDL"
"KarenUllrich/Tutorial-SoftWeightSharingForNNCompression" -> "yiwenguo/Dynamic-Network-Surgery"
"KarenUllrich/Tutorial-SoftWeightSharingForNNCompression" -> "sanghyun-son/clustering-kernels"
"solrex/caffe-mobile" -> "pmgysel/caffe" ["e"=1]
"HongxingGao/XNOR-Net" -> "hukim93/BWN-XNOR-caffe"
"HongxingGao/XNOR-Net" -> "rarilurelo/XNOR-Net"
"legolas123/cv-tricks.com" -> "jiecaoyu/XNOR-Net-PyTorch" ["e"=1]
"zhreshold/mxnet-yolo" -> "hpi-xnor/BMXNet" ["e"=1]
"LitLeo/TensorRT_Tutorial" -> "OpenPPL/ppq" ["e"=1]
"RC4ML/RPCNIC" -> "AIS-SNU/Optimus-CC"
"zhaoweicai/hwgq" -> "microsoft/LQ-Nets"
"houlu369/Loss-aware-Binarization" -> "houlu369/Loss-aware-weight-quantization"
"ModelTC/quant_horizon" -> "ModelTC/lightx2v"
"csarron/awesome-emdl" -> "ysh329/embedded-ai.bi-weekly"
"csarron/awesome-emdl" -> "zssloth/Embedded-Neural-Network"
"csarron/awesome-emdl" -> "MingSun-Tse/Efficient-Deep-Learning"
"csarron/awesome-emdl" -> "Bisonai/awesome-edge-machine-learning"
"csarron/awesome-emdl" -> "google/gemmlowp" ["e"=1]
"csarron/awesome-emdl" -> "JC1DA/DeepMon"
"csarron/awesome-emdl" -> "memoiry/Awesome-model-compression-and-acceleration"
"csarron/awesome-emdl" -> "ENCP/CNNdroid" ["e"=1]
"csarron/awesome-emdl" -> "IntelLabs/distiller"
"csarron/awesome-emdl" -> "Mxbonn/INQ-pytorch"
"csarron/awesome-emdl" -> "fengbintu/Neural-Networks-on-Silicon" ["e"=1]
"csarron/awesome-emdl" -> "XiaoMi/mobile-ai-bench" ["e"=1]
"csarron/awesome-emdl" -> "PerfXLab/embedded_ai"
"csarron/awesome-emdl" -> "submission2019/cnn-quantization"
"csarron/awesome-emdl" -> "CAS-CLab/quantized-cnn"
"OAID/Caffe-HRT" -> "IntelLabs/SkimCaffe" ["e"=1]
"OAID/Caffe-HRT" -> "pmgysel/caffe" ["e"=1]
"hpi-xnor/BMXNet" -> "hpi-xnor/BMXNet-v2"
"hpi-xnor/BMXNet" -> "KeyKy/mobilenet-mxnet" ["e"=1]
"hpi-xnor/BMXNet" -> "allenai/XNOR-Net"
"hpi-xnor/BMXNet" -> "luhaofang/CACU"
"hpi-xnor/BMXNet" -> "AngusG/tensorflow-xnor-bnn"
"hpi-xnor/BMXNet" -> "hukim93/BWN-XNOR-caffe"
"hpi-xnor/BMXNet" -> "MatthieuCourbariaux/BinaryNet"
"hpi-xnor/BMXNet" -> "tqchen/mxnet-gan" ["e"=1]
"hpi-xnor/BMXNet" -> "zhreshold/mxnet-yolo" ["e"=1]
"hpi-xnor/BMXNet" -> "MatthieuCourbariaux/BinaryConnect"
"hpi-xnor/BMXNet" -> "JDAI-CV/dabnn" ["e"=1]
"hpi-xnor/BMXNet" -> "gplhegde/theano-xnor-net"
"hpi-xnor/BMXNet" -> "tornadomeet/mxnet-face" ["e"=1]
"albanie/convnet-burden" -> "IntelLabs/distiller" ["e"=1]
"albanie/convnet-burden" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"amir-abdi/keras_to_tensorflow" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"ysh329/embedded-ai.bi-weekly" -> "PerfXLab/embedded_ai"
"ysh329/embedded-ai.bi-weekly" -> "csarron/awesome-emdl"
"ysh329/embedded-ai.bi-weekly" -> "zssloth/Embedded-Neural-Network"
"ysh329/embedded-ai.bi-weekly" -> "BUG1989/caffe-int8-convert-tools" ["e"=1]
"ysh329/embedded-ai.bi-weekly" -> "AI-performance/embedded-ai.bench" ["e"=1]
"ysh329/embedded-ai.bi-weekly" -> "AojunZhou/Incremental-Network-Quantization"
"ysh329/embedded-ai.bi-weekly" -> "AojunZhou/Efficient-Deep-Learning"
"ysh329/embedded-ai.bi-weekly" -> "camel007/Caffe-ShuffleNet" ["e"=1]
"ysh329/embedded-ai.bi-weekly" -> "CAS-CLab/quantized-cnn"
"szagoruyko/diracnets" -> "bayesgroup/variational-dropout-sparsifies-dnn" ["e"=1]
"AlexeyAB/yolo2_light" -> "talebolano/yolov3-network-slimming" ["e"=1]
"AlexeyAB/yolo2_light" -> "PengyiZhang/SlimYOLOv3" ["e"=1]
"bearpaw/pytorch-classification" -> "Eric-mingjie/rethinking-network-pruning" ["e"=1]
"microsoft/EdgeML" -> "larq/larq" ["e"=1]
"microsoft/EdgeML" -> "IntelLabs/distiller" ["e"=1]
"PerfXLab/embedded_ai" -> "ysh329/embedded-ai.bi-weekly"
"PerfXLab/embedded_ai" -> "in66-dev/In-Prestissimo" ["e"=1]
"jacobgil/pytorch-pruning" -> "Eric-mingjie/rethinking-network-pruning"
"jacobgil/pytorch-pruning" -> "he-y/soft-filter-pruning"
"jacobgil/pytorch-pruning" -> "wanglouis49/pytorch-weights_pruning"
"jacobgil/pytorch-pruning" -> "Eric-mingjie/network-slimming"
"jacobgil/pytorch-pruning" -> "foolwood/pytorch-slimming"
"jacobgil/pytorch-pruning" -> "eeric/channel_prune"
"jacobgil/pytorch-pruning" -> "ethanhe42/channel-pruning"
"jacobgil/pytorch-pruning" -> "he-y/filter-pruning-geometric-median"
"jacobgil/pytorch-pruning" -> "liuzhuang13/slimming"
"jacobgil/pytorch-pruning" -> "he-y/Awesome-Pruning"
"jacobgil/pytorch-pruning" -> "yiwenguo/Dynamic-Network-Surgery"
"jacobgil/pytorch-pruning" -> "IntelLabs/distiller"
"jacobgil/pytorch-pruning" -> "NVlabs/Taylor_pruning"
"jacobgil/pytorch-pruning" -> "Lam1360/YOLOv3-model-pruning"
"jacobgil/pytorch-pruning" -> "songhan/Deep-Compression-AlexNet"
"AngusG/tensorflow-xnor-bnn" -> "itayhubara/BinaryNet.tf"
"AngusG/tensorflow-xnor-bnn" -> "jonathanmarek1/binarynet-tensorflow"
"AngusG/tensorflow-xnor-bnn" -> "luhaofang/CACU"
"AngusG/tensorflow-xnor-bnn" -> "gplhegde/theano-xnor-net"
"AngusG/tensorflow-xnor-bnn" -> "allenai/XNOR-Net"
"AngusG/tensorflow-xnor-bnn" -> "czhu95/ternarynet"
"AngusG/tensorflow-xnor-bnn" -> "XJTUWYD/DoReFa_Cifar10"
"AngusG/tensorflow-xnor-bnn" -> "itayhubara/BinaryNet"
"AngusG/tensorflow-xnor-bnn" -> "MatthieuCourbariaux/BinaryNet"
"AngusG/tensorflow-xnor-bnn" -> "layog/Accurate-Binary-Convolution-Network"
"AngusG/tensorflow-xnor-bnn" -> "ayush29feb/Sketch-A-XNORNet"
"AngusG/tensorflow-xnor-bnn" -> "jiecaoyu/XNOR-Net-PyTorch"
"AngusG/tensorflow-xnor-bnn" -> "hpi-xnor/BMXNet"
"AngusG/tensorflow-xnor-bnn" -> "yaysummeriscoming/BinaryNet_and_XNORNet"
"AngusG/tensorflow-xnor-bnn" -> "cooooorn/Pytorch-XNOR-Net"
"ex4sperans/pruning_with_tensorflow" -> "younghwanoh/impl-pruning-TF"
"ex4sperans/pruning_with_tensorflow" -> "nephashi/DeepCompression"
"robi56/awesome-bayesian-deep-learning" -> "KarenUllrich/Tutorial_BayesianCompressionForDL" ["e"=1]
"hgpvision/darknet" -> "BBuf/Darknet" ["e"=1]
"hgpvision/darknet" -> "Lam1360/YOLOv3-model-pruning" ["e"=1]
"hgpvision/darknet" -> "tanluren/yolov3-channel-and-layer-pruning" ["e"=1]
"dongyp13/Stochastic-Quantization" -> "fengfu-chris/caffe-twns"
"jonathanmarek1/binarynet-tensorflow" -> "uranusx86/BinaryNet-on-tensorflow"
"jonathanmarek1/binarynet-tensorflow" -> "AngusG/tensorflow-xnor-bnn"
"may0324/DeepCompression-caffe" -> "wenwei202/caffe"
"may0324/DeepCompression-caffe" -> "yuanyuanli85/CaffeModelCompression"
"may0324/DeepCompression-caffe" -> "songhan/Deep-Compression-AlexNet"
"may0324/DeepCompression-caffe" -> "hiteshvaidya/Model-Compression"
"may0324/DeepCompression-caffe" -> "yiwenguo/Dynamic-Network-Surgery"
"may0324/DeepCompression-caffe" -> "ChaunceZhou/caffe-pruned"
"may0324/DeepCompression-caffe" -> "nephashi/DeepCompression"
"may0324/DeepCompression-caffe" -> "songhan/SqueezeNet-Deep-Compression"
"may0324/DeepCompression-caffe" -> "tostq/Caffe-Python-Tutorial"
"may0324/DeepCompression-caffe" -> "AojunZhou/Incremental-Network-Quantization"
"may0324/DeepCompression-caffe" -> "garion9013/impl-pruning-caffemodel"
"may0324/DeepCompression-caffe" -> "pmgysel/caffe"
"may0324/DeepCompression-caffe" -> "mightydeveloper/Deep-Compression-PyTorch"
"may0324/DeepCompression-caffe" -> "ethanhe42/channel-pruning"
"may0324/DeepCompression-caffe" -> "yonghenglh6/DepthwiseConvolution" ["e"=1]
"Roll920/ThiNet" -> "HolmesShuan/ShuffleNet-An-Extremely-Efficient-CNN-for-Mobile-Devices-Caffe-Reimplementation" ["e"=1]
"Roll920/ThiNet" -> "yiwenguo/Dynamic-Network-Surgery"
"Roll920/ThiNet" -> "yuanyuanli85/CaffeModelCompression"
"KeyKy/mobilenet-mxnet" -> "hpi-xnor/BMXNet" ["e"=1]
"HirokiNakahara/GUINNESS" -> "pmgysel/caffe" ["e"=1]
"BayesWatch/tf-variational-dropout" -> "gngdb/variational-dropout"
"DwangoMediaVillage/keras_compressor" -> "guoxiaolu/model_compression" ["e"=1]
"tostq/Caffe-Python-Tutorial" -> "may0324/DeepCompression-caffe"
"NHZlX/Merge_bn_Caffe" -> "NHZlX/Auto_pruning"
"ModelTC/lightx2v" -> "ModelTC/quant_horizon"
"ModelTC/lightx2v" -> "ModelTC/NART"
"microsoft/nni" ["l"="45.603,25.969", "c"=68]
"IntelLabs/distiller" ["l"="52.71,33.427"]
"Adamdad/keras-YOLOv3-mobilenet" ["l"="50.414,32.898", "c"=314]
"Lam1360/YOLOv3-model-pruning" ["l"="52.792,33.375"]
"reu2018DL/YOLO-LITE" ["l"="52.883,33.291"]
"fsx950223/mobilenetv2-yolov3" ["l"="50.448,32.83", "c"=314]
"coldlarry/YOLOv3-complete-pruning" ["l"="52.809,33.362"]
"tensorflow/model-optimization" ["l"="45.627,25.723", "c"=68]
"Tencent/PocketFlow" ["l"="52.744,33.373"]
"666DZY666/micronet" ["l"="52.669,33.387"]
"quic/aimet" ["l"="52.582,33.376"]
"Eric-mingjie/rethinking-network-pruning" ["l"="52.711,33.398"]
"Stinky-Tofu/Stronger-yolo" ["l"="50.773,30.163", "c"=83]
"talebolano/yolov3-network-slimming" ["l"="52.829,33.37"]
"PengyiZhang/SlimYOLOv3" ["l"="52.844,33.344"]
"generalized-iou/g-darknet" ["l"="52.951,33.324"]
"Tencent/ObjectDetection-OneStageDet" ["l"="50.764,30.065", "c"=83]
"tanluren/yolov3-channel-and-layer-pruning" ["l"="52.798,33.345"]
"princeton-vl/CornerNet-Lite" ["l"="50.807,30.139", "c"=83]
"xiaolai-sqlai/mobilenetv3" ["l"="50.773,30.036", "c"=83]
"eric612/MobileNet-YOLO" ["l"="51.673,33.285", "c"=354]
"microsoft/MMdnn" ["l"="50.438,29.84", "c"=83]
"allenbai01/ProxQuant" ["l"="52.527,33.516"]
"houlu369/Loss-aware-weight-quantization" ["l"="52.479,33.509"]
"tajanthan/pmf" ["l"="52.486,33.517"]
"alibaba/MNN" ["l"="50.189,29.806", "c"=83]
"Swall0w/torchstat" ["l"="50.893,29.934", "c"=83]
"YunYang1994/tensorflow-yolov3" ["l"="50.385,32.96", "c"=314]
"MingSun-Tse/Efficient-Deep-Learning" ["l"="52.66,33.421"]
"he-y/Awesome-Pruning" ["l"="52.686,33.403"]
"csyhhu/Awesome-Deep-Neural-Network-Compression" ["l"="52.622,33.431"]
"memoiry/Awesome-model-compression-and-acceleration" ["l"="52.673,33.454"]
"JiahuiYu/slimmable_networks" ["l"="52.823,34.024", "c"=708]
"cedrickchee/awesome-ml-model-compression" ["l"="52.645,33.447"]
"chester256/Model-Compression-Papers" ["l"="52.68,33.467"]
"yehuitang/Pruning" ["l"="52.619,33.377"]
"guan-yuan/awesome-AutoML-and-Lightweight-Models" ["l"="52.867,34.003", "c"=708]
"Efficient-ML/Awesome-Model-Quantization" ["l"="52.603,33.399"]
"csarron/awesome-emdl" ["l"="52.67,33.513"]
"liuzechun/MetaPruning" ["l"="52.7,33.379"]
"he-y/soft-filter-pruning" ["l"="52.735,33.409"]
"NVlabs/Taylor_pruning" ["l"="52.684,33.376"]
"ai-techsystems/deepC" ["l"="-16.146,-42.573", "c"=387]
"larq/larq" ["l"="52.486,33.589"]
"NVIDIA/DALI" ["l"="50.737,29.833", "c"=83]
"BobLiu20/YOLOv3_PyTorch" ["l"="50.825,30.133", "c"=83]
"tomgoldstein/loss-landscape" ["l"="38.946,-7.574", "c"=232]
"amirgholami/PyHessian" ["l"="52.782,33.51"]
"enyac-group/LeGR" ["l"="52.706,33.342"]
"lmbxmu/ABCPruner" ["l"="52.714,33.319"]
"ofsoundof/group_sparsity" ["l"="52.662,33.327"]
"lmbxmu/HRank" ["l"="52.717,33.354"]
"Lyken17/pytorch-OpCounter" ["l"="50.863,29.894", "c"=83]
"daquexian/onnx-simplifier" ["l"="50.2,29.876", "c"=83]
"OpenPPL/ppq" ["l"="52.571,33.354"]
"Paperspace/DataAugmentationForObjectDetection" ["l"="50.856,30.128", "c"=83]
"crespum/edge-ai" ["l"="-16.185,-42.571", "c"=387]
"Bisonai/awesome-edge-machine-learning" ["l"="52.745,33.529"]
"fritzlabs/Awesome-Mobile-Machine-Learning" ["l"="46.552,-24.185", "c"=656]
"marcellodebernardi/loss-landscapes" ["l"="38.938,-7.644", "c"=232]
"carpedm20/ENAS-pytorch" ["l"="52.891,33.983", "c"=708]
"pytorch/glow" ["l"="37.175,0.908", "c"=112]
"Tencent/tencent-ml-images" ["l"="50.724,30.011", "c"=83]
"onnx/tutorials" ["l"="50.191,29.845", "c"=83]
"SpikeKing/keras-yolo3-detection" ["l"="50.394,32.91", "c"=314]
"Qidian213/deep_sort_yolov3" ["l"="54.588,32.67", "c"=279]
"AberHu/Knowledge-Distillation-Zoo" ["l"="53.566,33.564", "c"=1263]
"jiecaoyu/XNOR-Net-PyTorch" ["l"="52.551,33.591"]
"itayhubara/BinaryNet.pytorch" ["l"="52.53,33.597"]
"allenai/XNOR-Net" ["l"="52.594,33.599"]
"cooooorn/Pytorch-XNOR-Net" ["l"="52.518,33.613"]
"liuzechun/Bi-Real-net" ["l"="52.525,33.557"]
"MatthieuCourbariaux/BinaryNet" ["l"="52.596,33.617"]
"AngusG/tensorflow-xnor-bnn" ["l"="52.579,33.635"]
"liuzechun/ReActNet" ["l"="52.496,33.547"]
"itayhubara/BinaryNet" ["l"="52.578,33.622"]
"zzzxxxttt/pytorch_DoReFaNet" ["l"="52.552,33.53"]
"hpi-xnor/BMXNet-v2" ["l"="52.487,33.57"]
"htqin/IR-Net" ["l"="52.489,33.536"]
"TropComplique/trained-ternary-quantization" ["l"="52.592,33.574"]
"MatthieuCourbariaux/BinaryConnect" ["l"="52.567,33.613"]
"hukim93/BWN-XNOR-caffe" ["l"="52.619,33.616"]
"microsoft/LQ-Nets" ["l"="52.589,33.536"]
"sun254/awesome-model-compression-and-acceleration" ["l"="52.691,33.486"]
"antspy/quantized_distillation" ["l"="52.623,33.519"]
"jack-willturner/deep-compression" ["l"="52.732,33.502"]
"hiteshvaidya/Model-Compression" ["l"="52.731,33.538"]
"may0324/DeepCompression-caffe" ["l"="52.703,33.558"]
"chengshengchan/model_compression" ["l"="53.626,33.674", "c"=1263]
"jacobgil/pytorch-pruning" ["l"="52.747,33.434"]
"zssloth/Embedded-Neural-Network" ["l"="52.669,33.545"]
"pytorch/QNNPACK" ["l"="37.176,0.796", "c"=112]
"Bisonai/quantized-mobilenetv3-mnist-android" ["l"="52.779,33.544"]
"openai/blocksparse" ["l"="48.863,33.895", "c"=556]
"IntelLabs/SkimCaffe" ["l"="52.714,33.614"]
"D-X-Y/Awesome-AutoDL" ["l"="52.837,34.003", "c"=708]
"inisis/brocolli" ["l"="51.637,33.228", "c"=354]
"deepglint/EasyQuant" ["l"="52.568,33.435"]
"XiaoMi/mace" ["l"="37.239,0.718", "c"=112]
"jwchoi384/Gaussian_YOLOv3" ["l"="52.887,33.325"]
"GOATmessi8/ASFF" ["l"="50.73,30.161", "c"=83]
"WongKinYiu/CrossStagePartialNetworks" ["l"="50.676,30.141", "c"=83]
"toandaominh1997/EfficientDet.Pytorch" ["l"="50.707,30.119", "c"=83]
"foolwood/pytorch-slimming" ["l"="52.776,33.396"]
"YonghaoHe/LFFD-A-Light-and-Fast-Face-Detector-for-Edge-Devices" ["l"="33.41,29.211", "c"=57]
"SpursLipu/YOLOv3v4-ModelCompression-MultidatasetTraining-Multibackbone" ["l"="52.776,33.341"]
"BUG1989/caffe-int8-convert-tools" ["l"="37.158,0.718", "c"=112]
"jakc4103/DFQ" ["l"="52.547,33.437"]
"quark0/darts" ["l"="52.854,33.982", "c"=708]
"ethanhe42/channel-pruning" ["l"="52.735,33.448"]
"Tencent/FeatherCNN" ["l"="37.183,0.734", "c"=112]
"mit-han-lab/proxylessnas" ["l"="52.87,34.021", "c"=708]
"tensorflow/adanet" ["l"="45.54,26.002", "c"=68]
"Tencent/TNN" ["l"="50.14,29.861", "c"=83]
"Eric-mingjie/network-slimming" ["l"="52.749,33.394"]
"google/gemmlowp" ["l"="37.151,0.815", "c"=112]
"czhu95/ternarynet" ["l"="52.615,33.6"]
"buaabai/Ternary-Weights-Network" ["l"="52.571,33.581"]
"fengfu-chris/caffe-twns" ["l"="52.63,33.61"]
"Mxbonn/INQ-pytorch" ["l"="52.599,33.513"]
"AojunZhou/Incremental-Network-Quantization" ["l"="52.633,33.569"]
"yiwenguo/Dynamic-Network-Surgery" ["l"="52.696,33.596"]
"dongyp13/Stochastic-Quantization" ["l"="52.662,33.619"]
"DAVIDNEWGATE/Project" ["l"="52.647,33.628"]
"AojunZhou/Efficient-Deep-Learning" ["l"="52.676,33.607"]
"CAS-CLab/quantized-cnn" ["l"="52.629,33.584"]
"boluoweifenda/WAGE" ["l"="52.605,33.537"]
"zhaoweicai/hwgq" ["l"="52.612,33.568"]
"mit-han-lab/haq" ["l"="52.605,33.479"]
"eladhoffer/quantized.pytorch" ["l"="52.606,33.497"]
"submission2019/cnn-quantization" ["l"="52.578,33.482"]
"amirgholami/ZeroQ" ["l"="52.564,33.478"]
"julianfaraone/SYQ" ["l"="52.558,33.555"]
"moranshkolnik/RobustQuantization" ["l"="52.62,33.556"]
"nowgood/QuantizeCNNModel" ["l"="52.606,33.523"]
"caiwenpu/Compression_Paper" ["l"="52.384,33.467"]
"csyhhu/L-DNQ" ["l"="52.344,33.452"]
"lhyfst/knowledge-distillation-papers" ["l"="53.553,33.584", "c"=1263]
"lars76/kmeans-anchor-boxes" ["l"="50.794,30.177", "c"=83]
"mystic123/tensorflow-yolo-v3" ["l"="50.405,32.966", "c"=314]
"mil-ad/snip" ["l"="52.674,33.265"]
"namhoonlee/snip-public" ["l"="52.662,33.234"]
"sjmikler/snip-pruning" ["l"="52.65,33.246"]
"alecwangcq/GraSP" ["l"="52.673,33.251"]
"ganguli-lab/Synaptic-Flow" ["l"="52.691,33.257"]
"JingtongSu/sanity-checking-pruning" ["l"="52.677,33.236"]
"VITA-Group/GraNet" ["l"="52.706,33.22"]
"VainF/Torch-Pruning" ["l"="52.647,33.355"]
"he-y/filter-pruning-geometric-median" ["l"="52.727,33.383"]
"dkozlov/awesome-knowledge-distillation" ["l"="53.5,33.586", "c"=1263]
"FLHonker/Awesome-Knowledge-Distillation" ["l"="53.517,33.556", "c"=1263]
"mingx9527/Data_Label_Tools" ["l"="50.275,29.573", "c"=83]
"amusi/TensorFlow-From-Zero-To-One" ["l"="50.565,28.241", "c"=104]
"amusi/YOLO-Reproduce-Summary" ["l"="52.843,33.299"]
"1adrianb/pytorch-estimate-flops" ["l"="52.382,33.68"]
"1adrianb/binary-networks-pytorch" ["l"="52.46,33.615"]
"vra/flopth" ["l"="52.347,33.709"]
"Xilinx/brevitas" ["l"="31.788,-2.649", "c"=212]
"Zhen-Dong/HAWQ" ["l"="52.575,33.451"]
"ModelTC/MQBench" ["l"="52.551,33.403"]
"tobegit3hub/advisor" ["l"="45.645,26.043", "c"=68]
"liuzhuang13/slimming" ["l"="52.769,33.418"]
"D-X-Y/AutoDL-Projects" ["l"="52.849,34.023", "c"=708]
"haitongli/knowledge-distillation-pytorch" ["l"="53.527,33.594", "c"=1263]
"mrgloom/Network-Speed-and-Compression" ["l"="52.666,33.491"]
"mightydeveloper/Deep-Compression-PyTorch" ["l"="52.713,33.478"]
"ChanChiChoi/awesome-model-compression" ["l"="52.65,33.478"]
"wojciechmo/deep-compression" ["l"="52.718,33.516"]
"mit-han-lab/amc" ["l"="52.677,33.427"]
"TimDettmers/sparse_learning" ["l"="23.517,14.923", "c"=728]
"google-research/rigl" ["l"="52.683,33.215"]
"sovrasov/flops-counter.pytorch" ["l"="50.866,29.917", "c"=83]
"tz28/Chinese-number-gestures-recognition" ["l"="30.413,29.36", "c"=1527]
"open-edge-platform/training_extensions" ["l"="64.163,-2.62", "c"=1153]
"jiweibo/ImageNet" ["l"="51.069,30.017", "c"=83]
"akamaster/pytorch_resnet_cifar10" ["l"="51.11,29.955", "c"=83]
"BBuf/Darknet" ["l"="52.897,33.349"]
"hgpvision/darknet" ["l"="50.587,29.99", "c"=83]
"ChenCVer/darknet" ["l"="52.949,33.366"]
"msnh2012/Msnhnet" ["l"="37.04,0.716", "c"=112]
"Zzh-tju/DIoU-darknet" ["l"="52.958,33.3"]
"GiantPandaCV/yolov3-point" ["l"="50.595,30.148", "c"=83]
"enazoe/yolo-tensorrt" ["l"="53.272,32.657", "c"=251]
"BBuf/cv_tools" ["l"="52.938,33.351"]
"ChenYingpeng/darknet2caffe" ["l"="51.596,33.241", "c"=354]
"Zhen-Dong/Awesome-Quantization-Papers" ["l"="52.56,33.42"]
"mit-han-lab/smoothquant" ["l"="38.848,-0.318", "c"=39]
"HuangOwen/Awesome-LLM-Compression" ["l"="38.841,-0.343", "c"=39]
"horseee/Awesome-Efficient-LLM" ["l"="38.867,-0.356", "c"=39]
"IST-DASLab/gptq" ["l"="38.814,-0.37", "c"=39]
"yhhhli/BRECQ" ["l"="52.555,33.448"]
"megvii-research/FQ-ViT" ["l"="52.531,33.421"]
"Efficient-ML/Awesome-Efficient-AIGC" ["l"="38.892,0.081", "c"=39]
"lietoumai/Awesome-offer" ["l"="-53.104,-11.906", "c"=400]
"DeNA/PyTorch_YOLOv3" ["l"="50.784,30.198", "c"=83]
"motokimura/PyTorch_Gaussian_YOLOv3" ["l"="52.922,33.306"]
"mit-han-lab/once-for-all" ["l"="52.809,34.01", "c"=708]
"onnx/onnx-tensorflow" ["l"="50.088,29.955", "c"=83]
"BBuf/Image-processing-algorithm" ["l"="-33.603,23.068", "c"=616]
"ayooshkathuria/YOLO_v3_tutorial_from_scratch" ["l"="50.7,30.031", "c"=83]
"d-li14/mobilenetv2.pytorch" ["l"="51.789,33.171", "c"=354]
"anonymous47823493/EagleEye" ["l"="52.688,33.347"]
"wizyoung/YOLOv3_TensorFlow" ["l"="50.419,32.928", "c"=314]
"eriklindernoren/PyTorch-YOLOv3" ["l"="50.655,29.971", "c"=83]
"princeton-vl/CornerNet" ["l"="50.825,30.115", "c"=83]
"mariogeiger/hessian" ["l"="52.944,33.541"]
"noahgolmant/pytorch-hessian-eigenthings" ["l"="52.905,33.538"]
"toiaydcdyywlhzvlob/backpack" ["l"="52.952,33.569"]
"pytorchbearer/torchbearer" ["l"="23.733,15.07", "c"=728]
"Enderdead/Pytorch_Quantize_impls" ["l"="52.572,33.51"]
"kuan-wang/pytorch-mobilenet-v3" ["l"="51.845,33.133", "c"=354]
"eeric/channel_prune" ["l"="52.803,33.418"]
"google-research/morph-net" ["l"="52.896,33.956", "c"=708]
"facebookresearch/kill-the-bits" ["l"="52.622,33.465"]
"Captain1986/CaptainBlackboard" ["l"="50.719,30.044", "c"=83]
"songhan/Deep-Compression-AlexNet" ["l"="52.696,33.534"]
"wenwei202/caffe" ["l"="52.718,33.554"]
"hjmshi/PyTorch-LBFGS" ["l"="53.002,33.609"]
"rfeinman/pytorch-minimize" ["l"="53.061,33.639"]
"sbarratt/torch_cg" ["l"="53.024,33.653"]
"f-dangel/backpack" ["l"="21.742,14.149", "c"=267]
"cybertronai/pytorch-sso" ["l"="52.918,33.568"]
"nlesc-dirac/pytorch" ["l"="53.043,33.622"]
"lezcano/geotorch" ["l"="21.532,14.039", "c"=267]
"harryliew/SdLBFGS" ["l"="53.022,33.629"]
"Thrandis/EKFAC-pytorch" ["l"="52.938,33.575"]
"tensorflow/kfac" ["l"="52.973,33.588"]
"google/jaxopt" ["l"="21.783,14.066", "c"=267]
"amirgholami/HessianFlow" ["l"="52.869,33.534"]
"google/spectral-density" ["l"="52.877,33.519"]
"timgaripov/dnn-mode-connectivity" ["l"="51.215,30.304", "c"=83]
"alecwangcq/EigenDamage-Pytorch" ["l"="52.966,33.523"]
"locuslab/edge-of-stability" ["l"="52.427,15.3", "c"=100]
"alecwangcq/KFAC-Pytorch" ["l"="52.972,33.568"]
"generalized-iou/g-tensorflow-models" ["l"="52.982,33.336"]
"generalized-iou/Detectron.pytorch" ["l"="53.002,33.327"]
"Zzh-tju/DIoU" ["l"="52.988,33.29"]
"xingyizhou/ExtremeNet" ["l"="50.835,30.193", "c"=83]
"Zzh-tju/DIoU-pytorch-detectron" ["l"="52.992,33.308"]
"hjimce/darknet_mobilenet" ["l"="51.629,33.292", "c"=354]
"horseee/LLM-Pruner" ["l"="38.785,-0.288", "c"=39]
"SEAL-UCSB/NVSim" ["l"="31.163,-2.828", "c"=1037]
"stevenygd/WAGE.pytorch" ["l"="52.591,33.551"]
"ruizhoud/DistributionLoss" ["l"="52.446,33.558"]
"bczhangbczhang/Bayesian-Optimized-1-bit-CNNs" ["l"="52.429,33.574"]
"plumerai/rethinking-bnn-optimization" ["l"="52.47,33.562"]
"team-approx-bayes/BayesBiNN" ["l"="52.445,33.576"]
"walkerning/aw_nas" ["l"="52.786,34.073", "c"=708]
"soeaver/caffe-model" ["l"="51.656,33.388", "c"=354]
"yonghenglh6/DepthwiseConvolution" ["l"="51.654,33.328", "c"=354]
"shicai/MobileNet-Caffe" ["l"="51.674,33.332", "c"=354]
"itayhubara/CalibTIP" ["l"="52.534,33.459"]
"ynahshan/nn-quantization-pytorch" ["l"="52.55,33.474"]
"cornell-zhang/dnn-quant-ocs" ["l"="31.591,-2.586", "c"=212]
"peiswang/BitSplit" ["l"="52.533,33.45"]
"yhhhli/APoT_Quantization" ["l"="52.547,33.463"]
"jun-fang/PWLQ" ["l"="52.521,33.477"]
"sony-si/ai-research" ["l"="52.538,33.484"]
"KimSoybean/ScratchDet" ["l"="50.846,30.281", "c"=83]
"uber-research/sbnet" ["l"="64.509,10.861", "c"=61]
"Roll920/ThiNet" ["l"="52.696,33.612"]
"fKunstner/limitations-empirical-fisher" ["l"="52.931,33.588"]
"amirgholami/adahessian" ["l"="52.893,33.567"]
"tfjgeorge/nngeometry" ["l"="52.887,33.594"]
"google-research/lottery-ticket-hypothesis" ["l"="52.67,33.302"]
"rahulvigneswaran/Lottery-Ticket-Hypothesis-in-Pytorch" ["l"="52.674,33.284"]
"facebookresearch/open_lth" ["l"="52.694,33.286"]
"uber-research/deconstructing-lottery-tickets" ["l"="52.643,33.274"]
"varungohil/Generalizing-Lottery-Tickets" ["l"="52.659,33.271"]
"enyac-group/single-path-nas" ["l"="52.883,34.051", "c"=708]
"PINTO0309/OpenVINO-YoloV3" ["l"="64.228,-2.661", "c"=1153]
"leikunx/AI_projects" ["l"="54.51,32.792", "c"=279]
"dcmocanu/sparse-evolutionary-artificial-neural-networks" ["l"="52.656,33.183"]
"AlliedToasters/synapses" ["l"="52.643,33.155"]
"IntelAI/dynamic-reparameterization" ["l"="52.666,33.213"]
"mit-han-lab/amc-models" ["l"="52.639,33.426"]
"han-cai/PathLevel-EAS" ["l"="52.981,34.053", "c"=708]
"Zx55/dmcp" ["l"="52.654,33.375"]
"aliyun/alibabacloud-quantization-networks" ["l"="52.567,33.497"]
"asteroidhouse/self-tuning-networks" ["l"="53.101,33.584"]
"pomonam/NoisyNaturalGradient" ["l"="53.033,33.58"]
"renmengye/meta-optim-public" ["l"="53.132,33.597"]
"pomonam/Self-Tuning-Networks" ["l"="53.125,33.58"]
"in66-dev/In-Prestissimo" ["l"="33.025,29.135", "c"=57]
"PerfXLab/embedded_ai" ["l"="52.688,33.576"]
"itayhubara/BinaryNet.tf" ["l"="52.558,33.636"]
"jonathanmarek1/binarynet-tensorflow" ["l"="52.542,33.656"]
"uranusx86/BinaryNet-on-tensorflow" ["l"="52.523,33.655"]
"yaysummeriscoming/BinaryNet_and_XNORNet" ["l"="52.551,33.671"]
"DingKe/nn_playground" ["l"="52.562,33.653"]
"layog/Accurate-Binary-Convolution-Network" ["l"="52.562,33.681"]
"Tiiiger/QPyTorch" ["l"="52.585,33.519"]
"yaroslavvb/kfac_pytorch" ["l"="52.988,33.575"]
"gpauloski/kfac-pytorch" ["l"="52.952,33.591"]
"tyohei/chainerkfac" ["l"="52.972,33.604"]
"gd-zhang/noisy-K-FAC" ["l"="53.016,33.586"]
"rgrosse/csc2541_examples" ["l"="52.981,33.622"]
"liux0614/yolo_nano" ["l"="52.86,33.314"]
"Robert-JunWang/Pelee" ["l"="51.725,33.343", "c"=354]
"YiwenShaoStephen/NGD-SGD" ["l"="53.015,33.555"]
"eladhoffer/convNet.pytorch" ["l"="52.569,33.538"]
"Akashmathwani/Binarized-Neural-networks-using-pytorch" ["l"="52.496,33.632"]
"larq/compute-engine" ["l"="52.435,33.599"]
"larq/zoo" ["l"="52.465,33.594"]
"JDAI-CV/dabnn" ["l"="-52.272,-15.115", "c"=1184]
"google/qkeras" ["l"="31.763,-2.615", "c"=212]
"larq/zookeeper" ["l"="52.44,33.614"]
"cpetig/tflite_micro_compiler" ["l"="-16.164,-42.58", "c"=387]
"KarenUllrich/Tutorial_BayesianCompressionForDL" ["l"="52.727,33.674"]
"KarenUllrich/Tutorial-SoftWeightSharingForNNCompression" ["l"="52.731,33.652"]
"bayesgroup/variational-dropout-sparsifies-dnn" ["l"="52.754,33.681"]
"Lyken17/Bayesian-Compression-for-Deep-Learning" ["l"="52.725,33.708"]
"ralbertazzi/bnn" ["l"="52.541,33.712"]
"Stuart0l/BNN" ["l"="52.542,33.74"]
"xinyaoliu/Deep-Compression-for-Neural-Networks" ["l"="52.738,33.485"]
"ruihangdu/PyTorch-Deep-Compression" ["l"="52.754,33.503"]
"namhoonlee/spp-public" ["l"="52.642,33.206"]
"violet17/yolov3-channel-pruning" ["l"="52.886,33.38"]
"ChenYingpeng/caffe-yolov3" ["l"="51.648,33.285", "c"=354]
"lewes6369/TensorRT-Yolov3" ["l"="51.677,33.235", "c"=354]
"marvis/pytorch-caffe-darknet-convert" ["l"="51.664,33.272", "c"=354]
"BIGBALLON/CIFAR-ZOO" ["l"="51.124,30.016", "c"=83]
"Robert-JunWang/PeleeNet" ["l"="51.777,33.33", "c"=354]
"JaryHuang/awesome_SSD_FPN_GIoU" ["l"="53.049,33.284"]
"Zzh-tju/DIoU-SSD-pytorch" ["l"="53.013,33.291"]
"ShadowMusk/QingLong-framework" ["l"="-53.011,-11.879", "c"=400]
"zhensherlock/intellij-platform-git-stats-plugin" ["l"="-53.001,-11.874", "c"=400]
"mislav/contacts" ["l"="-53.012,-11.848", "c"=400]
"ordylan/OrdylanNote" ["l"="-53,-11.868", "c"=400]
"geektcp/UeWoW" ["l"="-53.018,-11.856", "c"=400]
"tyui592/Pruning_filters_for_efficient_convnets" ["l"="52.771,33.38"]
"zhensherlock/company-autocomplete" ["l"="-53.011,-11.889", "c"=400]
"yizt/cv-papers" ["l"="50.842,30.003", "c"=83]
"jaygshah/Binary-Neural-Networks" ["l"="52.474,33.642"]
"sseung0703/KD_methods_with_TF" ["l"="53.644,33.634", "c"=1263]
"younghwanoh/impl-pruning-TF" ["l"="52.735,33.561"]
"necludov/group-sparsity-sbp" ["l"="52.781,33.696"]
"microsoft/deterministic-variational-inference" ["l"="22.372,15.255", "c"=977]
"gd-zhang/Weight-Decay" ["l"="53.061,33.58"]
"hessamb/label-refinery" ["l"="51.014,30.434", "c"=83]
"zhaoweicai/EdMIPS" ["l"="52.551,33.498"]
"diggerdu/Generalized-Intersection-over-Union" ["l"="53.04,33.329"]
"YunYang1994/face_recognition" ["l"="50.432,32.899", "c"=314]
"alibaba/ai-matrix" ["l"="37.29,0.927", "c"=112]
"megvii-model/MetaPruning" ["l"="52.749,33.332"]
"megvii-model/SinglePathOneShot" ["l"="52.857,34.076", "c"=708]
"DingXiaoH/ResRep" ["l"="52.725,33.338"]
"maozezhong/CV_ToolBox" ["l"="53.164,13.903", "c"=669]
"zhijian-liu/torchprofile" ["l"="52.822,34.061", "c"=708]
"mit-han-lab/apq" ["l"="52.606,33.451"]
"SCUT-AILab/DCP" ["l"="61.442,37.706", "c"=1043]
"deep-lab/DeepnetHessian" ["l"="52.905,33.511"]
"AnonymousNIPS2019/DeepnetHessian" ["l"="52.895,33.521"]
"zhutmost/lsq-net" ["l"="52.523,33.461"]
"Jermmy/pytorch-quantization-demo" ["l"="52.575,33.408"]
"EECS-NTNU/bismo" ["l"="31.771,-2.855", "c"=212]
"BenWhetton/keras-surgeon" ["l"="52.765,33.466"]
"Raukk/tf-keras-surgeon" ["l"="52.812,33.476"]
"DwangoMediaVillage/keras_compressor" ["l"="50.409,33.392", "c"=314]
"gaborvecsei/Ridurre-Network-Filter-Pruning-Keras" ["l"="52.836,33.476"]
"wanglouis49/pytorch-weights_pruning" ["l"="52.776,33.444"]
"titu1994/keras-squeeze-excite-network" ["l"="50.545,33.362", "c"=314]
"bhushan23/ADMM" ["l"="52.897,33.681"]
"nirum/ADMM" ["l"="52.92,33.701"]
"mihirchakradeo/admm" ["l"="52.898,33.711"]
"bzantium/pytorch-admm-pruning" ["l"="52.85,33.607"]
"jack-willturner/batchnorm-pruning" ["l"="52.911,33.419"]
"mengrang/Slimming-pytorch" ["l"="52.866,33.433"]
"stevenygd/SWALP" ["l"="52.625,33.539"]
"wangmaolin/niti" ["l"="52.569,33.561"]
"microsoft/microxcaling" ["l"="38.889,-0.155", "c"=39]
"clevercool/ANT-Quantization" ["l"="31.727,-2.947", "c"=212]
"twangnh/Distilling-Object-Detectors" ["l"="53.653,33.492", "c"=1263]
"Xilinx/graffitist" ["l"="52.507,33.502"]
"zepx/pytorch-weight-prune" ["l"="52.833,33.45"]
"AlumLuther/PruningFilters" ["l"="52.8,33.403"]
"Jzz24/pytorch_quantization" ["l"="52.542,33.513"]
"SHI-Labs/Any-Precision-DNNs" ["l"="52.52,33.541"]
"bobye/batchnorm_prune" ["l"="52.937,33.418"]
"ReProduceByYQ/Channel_pruning_yq" ["l"="52.961,33.417"]
"nephashi/DeepCompression" ["l"="52.749,33.548"]
"Guoning-Chen/SimplePruning-PyTorch" ["l"="52.769,33.526"]
"j-min/Dropouts" ["l"="52.785,33.766"]
"kefirski/variational_dropout" ["l"="52.775,33.74"]
"youzhonghui/gate-decorator-pruning" ["l"="52.697,33.36"]
"csyhhu/L-OBS" ["l"="52.629,33.318"]
"changlin31/DS-Net" ["l"="52.769,34.014", "c"=708]
"wiseodd/natural-gradients" ["l"="52.907,33.63"]
"tudor-berariu/fisher-information-matrix" ["l"="52.929,33.658"]
"nikvaessen/Rethinking-Binarized-Neural-Network-Optimization" ["l"="52.411,33.628"]
"brais-martinez/real2binary" ["l"="52.506,33.569"]
"lmbxmu/RBNN" ["l"="52.467,33.549"]
"LaVieEnRoseSMZ/AutoBNN" ["l"="52.465,33.503"]
"sajaddarabi/BiRealNet" ["l"="52.511,33.583"]
"mil-ad/studying-binary-neural-networks" ["l"="52.462,33.575"]
"ZiweiWangTHU/BiDet" ["l"="52.504,33.519"]
"VITA-Group/BNN_NoBN" ["l"="52.484,33.555"]
"BertMoons/QuantizedNeuralNetworks-Keras-Tensorflow" ["l"="52.581,33.704"]
"qinyao-he/bit-rnn" ["l"="52.602,33.662"]
"jwfromm/Riptide" ["l"="52.433,33.562"]
"blueardour/model-quantization" ["l"="52.456,33.484"]
"hpi-xnor/BMXNet" ["l"="52.552,33.622"]
"1adrianb/binary-nas" ["l"="52.445,33.524"]
"hpi-xnor/bitorch" ["l"="52.416,33.538"]
"z-hXu/ReCU" ["l"="52.465,33.538"]
"xingyul/sparse-winograd-cnn" ["l"="37.07,0.724", "c"=112]
"zhuyinheng/ABC-Net-pytorch" ["l"="52.56,33.713"]
"gngdb/variational-dropout" ["l"="52.769,33.721"]
"KaiqiZhang/caffe-admm" ["l"="52.829,33.604"]
"kaiqzhan/ADAM-ADMM" ["l"="52.829,33.617"]
"eezywu/Pruned-MobileNet_v2" ["l"="52.857,33.415"]
"apxlwl/MobileNet-v2-pruning" ["l"="52.823,33.408"]
"houlu369/Loss-aware-Binarization" ["l"="52.446,33.506"]
"mrusci/training-mixed-precision-quantized-networks" ["l"="52.647,33.576"]
"kaiqzhan/admm-pruning" ["l"="52.817,33.587"]
"yeshaokai/Robustness-Aware-Pruning-ADMM" ["l"="52.826,33.531"]
"eghouti/BinaryConnect" ["l"="52.518,33.675"]
"makora9143/binarynet" ["l"="52.503,33.695"]
"Tony607/prune-keras" ["l"="52.871,33.477"]
"shentanyue/Pytorch-yolov3-prune-v4" ["l"="52.914,33.385"]
"zhaohui-yang/LegoNet_pytorch" ["l"="52.448,33.385"]
"iamhankai/Full-Stack-Filters" ["l"="52.472,33.389"]
"peiswang/Two-Step-Quantization-AlexNet" ["l"="52.544,33.569"]
"ChanganVR/ConstraintAwareCompression" ["l"="52.533,33.573"]
"ermongroup/higher_order_invariance" ["l"="52.941,33.617"]
"guoxiaolu/model_compression" ["l"="52.996,33.417"]
"akshaychawla/Binary-Neural-Networks" ["l"="52.453,33.668"]
"HobbitLong/RepDistiller" ["l"="53.539,33.568", "c"=1263]
"ZJU-lishuang/yolov5_prune" ["l"="53.408,3.636", "c"=1032]
"Syencil/mobile-yolov5-pruning-distillation" ["l"="53.408,3.653", "c"=1032]
"midasklr/yolov5prune" ["l"="53.418,3.625", "c"=1032]
"HaloTrouvaille/YOLO-Multi-Backbones-Attention" ["l"="-55.315,-14.242", "c"=842]
"WongKinYiu/PyTorch_YOLOv4" ["l"="50.513,30.065", "c"=83]
"Syencil/tensorRT" ["l"="53.218,32.707", "c"=251]
"PaddlePaddle/PaddleSlim" ["l"="50.106,29.594", "c"=83]
"xuannianz/keras-GaussianYOLOv3" ["l"="52.924,33.289"]
"ethanhe42/KL-Loss" ["l"="50.841,30.217", "c"=83]
"Duankaiwen/CenterNet" ["l"="50.797,30.153", "c"=83]
"sfzhang15/ATSS" ["l"="50.765,30.213", "c"=83]
"dog-qiuqiu/Yolo-Fastest" ["l"="50.431,30.006", "c"=83]
"huawei-noah/Efficient-AI-Backbones" ["l"="50.696,29.909", "c"=83]
"huawei-noah/Efficient-Computing" ["l"="52.618,33.35"]
"ivclab/Multistage_Pruning" ["l"="52.866,33.403"]
"apxlwl/MNN-yolov3" ["l"="33.439,29.13", "c"=57]
"njvisionpower/Safety-Helmet-Wearing-Dataset" ["l"="33.678,29.162", "c"=57]
"aovoc/nnieqat-pytorch" ["l"="51.57,33.197", "c"=354]
"hahnyuan/PTQ4ViT" ["l"="52.511,33.42"]
"kssteven418/I-BERT" ["l"="52.518,33.443"]
"zhiqwang/yolort" ["l"="53.37,3.625", "c"=1032]
"fxmeng/Pruning-Filter-in-Filter" ["l"="52.776,33.276"]
"cfs6/AChat" ["l"="50.62,2.726", "c"=85]
"NVlabs/DeepInversion" ["l"="34.29,31.891", "c"=520]
"huawei-noah/VanillaNet" ["l"="48.98,32.943", "c"=401]
"yuanli2333/Teacher-free-Knowledge-Distillation" ["l"="53.584,33.576", "c"=1263]
"DingXiaoH/RepVGG" ["l"="50.617,29.93", "c"=83]
"huawei-noah/AdderNet" ["l"="50.611,30.068", "c"=83]
"prabhuomkar/pytorch-cpp" ["l"="53.345,32.854", "c"=251]
"open-mmlab/mmrazor" ["l"="53.517,33.522", "c"=1263]
"megvii-model/ShuffleNet-Series" ["l"="50.831,30.026", "c"=83]
"libxsmm/libxsmm" ["l"="37.11,0.835", "c"=112]
"Byronnar/tensorflow-serving-yolov3" ["l"="50.438,32.88", "c"=314]
"tczhangzhi/pytorch-distributed" ["l"="50.924,29.897", "c"=83]
"Zzh-tju/CIoU" ["l"="53.006,33.266"]
"Adlik/Adlik" ["l"="37.067,0.813", "c"=112]
"huggingface/pytorch_block_sparse" ["l"="48.88,33.948", "c"=556]
"verbose-void/rigl-torch" ["l"="52.701,33.203"]
"RAIVNLab/STR" ["l"="52.711,33.245"]
"Shiweiliuiiiiiii/In-Time-Over-Parameterization" ["l"="52.71,33.19"]
"google-research/sputnik" ["l"="63.158,-1.978", "c"=175]
"varun19299/rigl-reproducibility" ["l"="52.694,33.185"]
"allenai/hidden-networks" ["l"="52.691,33.229"]
"david8862/keras-YOLOv3-model-set" ["l"="50.414,32.827", "c"=314]
"VITA-Group/AutoGAN" ["l"="52.903,34.054", "c"=708]
"frankwang345/pruning-from-scratch" ["l"="52.737,33.329"]
"Roll920/AutoPruner" ["l"="52.745,33.312"]
"clevercool/SQuant" ["l"="52.592,33.425"]
"Qualcomm-AI-research/transformer-quantization" ["l"="52.497,33.427"]
"skmhrk1209/QuanTorch" ["l"="52.487,33.381"]
"intel/neural-compressor" ["l"="64.182,-2.465", "c"=1153]
"pytorch/android-demo-app" ["l"="49.533,30.968", "c"=1055]
"hoonyyhoon/Synflow_SNIP_GraSP" ["l"="52.708,33.277"]
"mil-ad/prospr" ["l"="52.707,33.234"]
"JJGO/shrinkbench" ["l"="52.687,33.325"]
"VITA-Group/Random_Pruning" ["l"="52.731,33.214"]
"GATECH-EIC/Early-Bird-Tickets" ["l"="52.636,33.225"]
"zchrissirhcz/awesome-ncnn" ["l"="49.574,30.912", "c"=1055]
"lmbxmu/HRankPlus" ["l"="52.706,33.311"]
"polarizationpruning/PolarizationPruning" ["l"="52.732,33.317"]
"hhaAndroid/mmdetection-mini" ["l"="50.754,30.168", "c"=83]
"davda54/sam" ["l"="51.055,29.935", "c"=83]
"openvinotoolkit/nncf" ["l"="64.144,-2.528", "c"=1153]
"quic/aimet-model-zoo" ["l"="-35.329,21.499", "c"=127]
"alibaba/TinyNeuralNetwork" ["l"="49.836,29.971", "c"=83]
"pprp/SimpleCVReproduction" ["l"="50.678,30.115", "c"=83]
"hustzxd/LSQuantization" ["l"="52.504,33.46"]
"ZouJiu1/LSQplus" ["l"="52.477,33.46"]
"cvlab-yonsei/EWGS" ["l"="52.496,33.482"]
"ricky40403/DSQ" ["l"="52.518,33.489"]
"liuzechun/Nonuniform-to-Uniform-Quantization" ["l"="52.49,33.466"]
"wimh966/QDrop" ["l"="52.523,33.433"]
"hustzxd/EfficientPyTorch" ["l"="52.48,33.45"]
"yoshitomo-matsubara/torchdistill" ["l"="53.549,33.546", "c"=1263]
"lartpang/PyTorchTricks" ["l"="50.815,30.004", "c"=83]
"A-suozhang/awesome-quantization-and-fixed-point-training" ["l"="52.446,33.457"]
"zhaohui-yang/CARS" ["l"="52.405,33.367"]
"xiaomi-automl/FairDARTS" ["l"="52.873,34.08", "c"=708]
"iamhankai/Versatile-Filters" ["l"="52.423,33.36"]
"mit-han-lab/hardware-aware-transformers" ["l"="52.792,34.03", "c"=708]
"lessw2020/Best-Deep-Learning-Optimizers" ["l"="51.15,30.077", "c"=83]
"davda54/ada-hessian" ["l"="52.908,33.593"]
"onnx/optimizer" ["l"="-44.239,6.049", "c"=1131]
"VITA-Group/BERT-Tickets" ["l"="53.155,27.967", "c"=60]
"lottery-ticket/rewinding-iclr20-public" ["l"="52.632,33.246"]
"facebookresearch/higher" ["l"="57.824,19.464", "c"=433]
"fxmeng/RMNet" ["l"="48.94,32.894", "c"=401]
"DingXiaoH/DiverseBranchBlock" ["l"="48.994,32.887", "c"=401]
"dvlab-research/ReviewKD" ["l"="53.597,33.516", "c"=1263]
"VDIGPKU/CBNet_caffe" ["l"="50.74,30.227", "c"=83]
"miemie2013/Keras-DIOU-YOLOv3" ["l"="52.971,33.261"]
"DeepVAC/deepvac" ["l"="50.635,30.054", "c"=83]
"Yonghongwei/Gradient-Centralization" ["l"="51.062,30.166", "c"=83]
"ktkth5/lottery-ticket-hyopothesis" ["l"="52.63,33.263"]
"VITA-Group/ATMC" ["l"="52.796,33.45"]
"htqin/BiBERT" ["l"="52.436,33.537"]
"htqin/BiBench" ["l"="52.387,33.545"]
"csyhhu/MetaQuant" ["l"="52.467,33.522"]
"clevercool/TileSparsity" ["l"="52.537,33.381"]
"szq0214/MEAL-V2" ["l"="53.585,33.623", "c"=1263]
"szq0214/FKD" ["l"="52.287,33.617"]
"Zzh-tju/yolov5" ["l"="53.03,33.238"]
"Zzh-tju/ultralytics-YOLOv3-Cluster-NMS" ["l"="53.043,33.247"]
"kkhoot/PAA" ["l"="50.768,30.308", "c"=83]
"jshilong/SEPC" ["l"="50.807,30.31", "c"=83]
"implus/GFocal" ["l"="50.744,30.256", "c"=83]
"hyz-xmaster/VarifocalNet" ["l"="50.77,30.283", "c"=83]
"ming71/rotate-yolov3" ["l"="53.032,31.973", "c"=731]
"implus/GFocalV2" ["l"="50.768,30.262", "c"=83]
"Gumpest/YOLOv5-Multibackbone-Compression" ["l"="53.444,3.658", "c"=1032]
"cwq159/PyTorch-Spiking-YOLOv3" ["l"="60.745,33.676", "c"=607]
"ggjy/HitDet.pytorch" ["l"="52.864,34.147", "c"=708]
"sh1r0/caffe-android-lib" ["l"="32.897,29.038", "c"=57]
"pmgysel/caffe" ["l"="52.666,33.591"]
"songhan/SqueezeNet-Deep-Compression" ["l"="52.653,33.603"]
"pprp/voc2007_for_yolo_torch" ["l"="50.618,30.155", "c"=83]
"xushoukai/GDFQ" ["l"="52.754,33.489"]
"zkkli/I-ViT" ["l"="-52.898,-12.1", "c"=400]
"kssteven418/Q-ASR" ["l"="52.435,33.417"]
"GATECH-EIC/ViTCoD" ["l"="32.08,-2.769", "c"=212]
"zkkli/RepQ-ViT" ["l"="-52.912,-12.101", "c"=400]
"zkkli/PSAQ-ViT" ["l"="52.48,33.409"]
"jameszampa/ECE-570-Implementation" ["l"="52.46,33.362"]
"yosinski/GitResultsManager" ["l"="52.606,33.25"]
"MAC-AutoML/rethinking_performance_estimation_in_NAS" ["l"="52.871,34.113", "c"=708]
"ShaohuiLin/GAL" ["l"="52.747,33.273"]
"Abraham-M97/YOLOV3-NANO" ["l"="52.88,33.263"]
"ardeal/yolo_nano" ["l"="52.866,33.276"]
"tanluren/mobilenetv3-yolov3" ["l"="50.47,32.825", "c"=314]
"wangsssky/YOLO-Nano" ["l"="52.897,33.302"]
"Bubble-water/YOLO-Summary" ["l"="52.9,33.271"]
"1adrianb/expert-binary-networks" ["l"="52.436,33.64"]
"facebookresearch/bit" ["l"="52.405,33.549"]
"CAS-CLab/Training-Tricks-for-Binarized-Neural-Networks" ["l"="52.416,33.65"]
"lingtengqiu/Yolo_Nano" ["l"="-53.635,-13.659", "c"=514]
"mit-han-lab/gan-compression" ["l"="44.956,30.534", "c"=243]
"lmbxmu/FilterSketch" ["l"="52.727,33.303"]
"fxmeng/filter-grafting" ["l"="-54.639,-13.657", "c"=219]
"deJQK/AdaBits" ["l"="52.527,33.526"]
"bohanzhuang/model-quantization" ["l"="52.358,33.477"]
"liuzechun/AdamBNN" ["l"="52.395,33.56"]
"GATECH-EIC/CPT" ["l"="52.609,33.196"]
"hustvl/PD-Quant" ["l"="52.494,33.444"]
"team-approx-bayes/dl-with-bayes" ["l"="22.413,15.411", "c"=977]
"mepeichun/Efficient-Neural-Network-Bilibili" ["l"="52.677,33.362"]
"gpauloski/BERT-PyTorch" ["l"="52.961,33.617"]
"szq0214/Un-Mix" ["l"="52.297,33.599"]
"szq0214/S2-BNN" ["l"="52.351,33.58"]
"szq0214/SReT" ["l"="52.321,33.601"]
"DequanWang/CoDeNet" ["l"="52.462,33.328"]
"Zhen-Dong/CoDeNet" ["l"="52.474,33.321"]
"hqjenny/CoDeNet" ["l"="52.459,33.31"]
"papers-submission/structured_transposable_masks" ["l"="52.744,33.177"]
"Eclipsess/CHIP_NeurIPS2021" ["l"="52.727,33.272"]
"wuzhihao7788/yolodet-pytorch" ["l"="53.355,3.685", "c"=1032]
"marcoancona/TorchPruner" ["l"="52.822,33.271"]
"lucaslie/torchprune" ["l"="52.852,33.219"]
"yueb17/PEMN" ["l"="52.679,33.195"]
"RAIVNLab/supsup" ["l"="52.69,33.164"]
"DayBreak-u/Thundernet_Pytorch" ["l"="50.763,30.528", "c"=83]
"zhaohui-yang/LegoNet" ["l"="52.52,33.348"]
"BBuf/model-compression" ["l"="52.795,33.311"]
"clovaai/overhaul-distillation" ["l"="53.6,33.577", "c"=1263]
"zyxxmu/lottery-jackpots" ["l"="52.762,33.253"]
"Roll920/CURL" ["l"="52.745,33.295"]
"lmbxmu/SuperViT" ["l"="52.754,33.235"]
"EstherBear/implementation-of-pruning-filters" ["l"="52.819,33.393"]
"aim-uofa/model-quantization-to-be-deleted-recently" ["l"="52.324,33.47"]
"xiezheng-cs/DTQ" ["l"="52.328,33.484"]
"AI-performance/embedded-ai.bench" ["l"="37.141,0.699", "c"=112]
"ofsoundof/dhp" ["l"="52.632,33.3"]
"cvlab-yonsei/DAQ" ["l"="52.473,33.484"]
"jakc4103/scale-adjusted-training" ["l"="52.482,33.495"]
"WeixiangXu/STTN" ["l"="52.477,33.434"]
"iamkanghyunchoi/qimera" ["l"="52.798,33.467"]
"lihuantong/HAST" ["l"="52.81,33.503"]
"FLHonker/ZAQ-code" ["l"="52.798,33.492"]
"yeshaokai/ADMM-NN" ["l"="52.849,33.555"]
"gistvision/bnas" ["l"="52.394,33.59"]
"bohanzhuang/Group-Net-semantic-segmentation" ["l"="52.348,33.561"]
"bohanzhuang/Group-Net-image-classification" ["l"="52.32,33.574"]
"deJQK/FracBits" ["l"="52.296,33.466"]
"RangiLyu/nanodet" ["l"="50.401,29.946", "c"=83]
"shouxieai/tensorRT_Pro" ["l"="53.346,32.653", "c"=251]
"microsoft/onnxruntime-inference-examples" ["l"="-44.26,6.115", "c"=1131]
"NVIDIA/trt-samples-for-hackathon-cn" ["l"="53.301,32.657", "c"=251]
"neuralmagic/sparseml" ["l"="38.699,-0.407", "c"=39]
"yuanyuanli85/CaffeModelCompression" ["l"="52.717,33.587"]
"chengtaipu/lowrankcnn" ["l"="21.661,17.89", "c"=863]
"wenwei202/iss-rnns" ["l"="52.762,33.627"]
"wenwei202/terngrad" ["l"="51.43,2.37", "c"=663]
"OAID/Caffe-HRT" ["l"="33.035,29.121", "c"=57]
"zetane/viewer" ["l"="50.422,29.802", "c"=83]
"OpenPPL/ppl.nn" ["l"="37.036,0.833", "c"=112]
"ethereon/netscope" ["l"="45.742,27.601", "c"=277]
"dgschwend/netscope" ["l"="52.687,33.646"]
"godweiyang/NN-CUDA-Example" ["l"="36.832,0.835", "c"=112]
"google-research/sam" ["l"="51.289,30.036", "c"=83]
"Tencent/PatrickStar" ["l"="58.103,23.704", "c"=161]
"ucbrise/actnn" ["l"="52.328,33.556"]
"neuralmagic/deepsparse" ["l"="38.731,-0.469", "c"=39]
"WongKinYiu/ScaledYOLOv4" ["l"="50.591,30.091", "c"=83]
"Zhen-Dong/BitPack" ["l"="52.497,33.361"]
"yanghr/BSQ" ["l"="52.594,33.441"]
"cvlab-yonsei/FlowGRU" ["l"="-35.362,21.576", "c"=127]
"mit-han-lab/tinyml" ["l"="-16.123,-42.505", "c"=387]
"gngdb/pytorch-minimize" ["l"="53.08,33.658"]
"hahnec/torchimize" ["l"="53.11,33.659"]
"ModelTC/Dipoorlet" ["l"="52.473,33.344"]
"ModelTC/United-Perception" ["l"="50.987,30.371", "c"=83]
"ModelTC/llmc" ["l"="38.883,-0.277", "c"=39]
"lessw2020/Ranger21" ["l"="51.117,30.075", "c"=83]
"jshilong/FisherPruning" ["l"="49.463,29.505", "c"=1525]
"MegEngine/MegFlow" ["l"="49.523,30.84", "c"=1055]
"Tencent/Forward" ["l"="53.248,32.753", "c"=251]
"htqin/BiPointNet" ["l"="52.399,33.526"]
"facebookresearch/madgrad" ["l"="51.048,30.004", "c"=83]
"OpenPPL/ppl.cv" ["l"="37.016,0.812", "c"=112]
"sony/model_optimization" ["l"="-34.876,22.144", "c"=429]
"yaozhewei/HAP" ["l"="52.392,33.402"]
"zysxmu/IntraQ" ["l"="52.83,33.492"]
"aojunzz/NM-sparsity" ["l"="52.764,33.129"]
"aojunzz/DominoSearch" ["l"="52.771,33.104"]
"zyxxmu/LBC" ["l"="52.775,33.153"]
"usyd-fsalab/fp6_llm" ["l"="38.894,-0.226", "c"=39]
"CMU-SAFARI/prim-benchmarks" ["l"="31.142,-3.008", "c"=1037]
"AIS-SNU/PID-Comm" ["l"="52.948,33.473"]
"Shiweiliuiiiiiii/Selfish-RNN" ["l"="52.72,33.165"]
"LiuXiaoxuanPKU/GACT-ICML" ["l"="52.286,33.561"]
"cjf00000/StatQuant" ["l"="52.293,33.548"]
"zhaohui-yang/Binary-Neural-Networks" ["l"="52.432,33.38"]
"zyxxmu/White-Box" ["l"="52.776,33.221"]
"chenbong/PSS-Net" ["l"="52.786,33.232"]
"lmbxmu/1xN" ["l"="52.8,33.151"]
"zyxxmu/Bi-Mask" ["l"="52.776,33.176"]
"hibiken/stories" ["l"="-52.994,-11.786", "c"=400]
"ZhangGe6/onnx-modifier" ["l"="-44.202,6.021", "c"=1131]
"ENOT-AutoDL/onnx2torch" ["l"="-44.231,5.974", "c"=1131]
"facebookarchive/fb-caffe-exts" ["l"="45.897,27.647", "c"=277]
"open-mmlab/mmdeploy" ["l"="50.347,29.856", "c"=83]
"pytorch/executorch" ["l"="39.047,-0.352", "c"=39]
"nndeploy/nndeploy" ["l"="53.413,32.627", "c"=251]
"BBuf/tvm_mlir_learn" ["l"="36.986,0.9", "c"=112]
"BBuf/how-to-optim-algorithm-in-cuda" ["l"="36.877,0.836", "c"=112]
"OpenGVLab/OmniQuant" ["l"="38.836,-0.272", "c"=39]
"spcl/QuaRot" ["l"="38.855,-0.241", "c"=39]
"YanjingLi0202/Q-ViT" ["l"="52.494,33.399"]
"megvii-research/Sparsebit" ["l"="64.907,11.357", "c"=61]
"Qualcomm-AI-research/FP8-quantization" ["l"="38.879,-0.176", "c"=39]
"zysxmu/FDDA" ["l"="52.86,33.496"]
"HeKun-NVIDIA/TensorRT-Developer_Guide_in_Chinese" ["l"="53.345,32.676", "c"=251]
"hantek/BinaryConnect" ["l"="52.506,33.658"]
"luhaofang/CACU" ["l"="52.625,33.627"]
"ducha-aiki/caffenet-benchmark" ["l"="50.619,33.182", "c"=314]
"Jacobi93/Alpha-IoU" ["l"="53.383,3.752", "c"=1032]
"kssteven418/Squeezeformer" ["l"="35.788,2.282", "c"=308]
"iamkanghyunchoi/ait" ["l"="52.849,33.467"]
"AIS-SNU/Optimus-CC" ["l"="52.908,33.467"]
"nbasyl/OFQ" ["l"="52.428,33.451"]
"hahnyuan/RPTQ4LLM" ["l"="38.771,-0.187", "c"=39]
"42Shawn/PTQ4DM" ["l"="38.936,0.056", "c"=39]
"wimh966/outlier_suppression" ["l"="38.774,-0.207", "c"=39]
"Qualcomm-AI-research/oscillations-qat" ["l"="52.455,33.424"]
"metaopt/torchopt" ["l"="21.723,13.931", "c"=267]
"tianyic/only_train_once_personal_footprint" ["l"="41.636,2.2", "c"=7]
"BayesWatch/tf-variational-dropout" ["l"="52.765,33.708"]
"kong36088/BaiduImageSpider" ["l"="33.289,29.224", "c"=57]
"forresti/SqueezeNet" ["l"="50.46,33.159", "c"=314]
"fengbintu/Neural-Networks-on-Silicon" ["l"="31.792,-2.807", "c"=212]
"cwlacewe/netscope" ["l"="52.69,33.686"]
"marifnst/SampleCaffeModelCompression" ["l"="52.745,33.607"]
"garion9013/impl-pruning-caffemodel" ["l"="52.732,33.603"]
"ChaunceZhou/caffe-pruned" ["l"="52.734,33.582"]
"zjhellofss/KuiperInfer" ["l"="36.869,0.795", "c"=112]
"gudovskiy/ShiftCNN" ["l"="51.561,33.319", "c"=354]
"songhan/SqueezeNet-Residual" ["l"="52.662,33.715"]
"xiaolonw/caffe-video_triplet" ["l"="32.943,29.326", "c"=57]
"sanghoon/pva-faster-rcnn" ["l"="51.664,33.429", "c"=354]
"xingwangsfu/caffe-yolo" ["l"="51.678,33.355", "c"=354]
"ChenglongChen/caffe-windows" ["l"="51.456,33.44", "c"=354]
"camel007/Caffe-ShuffleNet" ["l"="51.658,33.358", "c"=354]
"BichenWuUCB/squeezeDet" ["l"="50.388,33.095", "c"=314]
"ENCP/CNNdroid" ["l"="32.906,29.07", "c"=57]
"songhan/SqueezeNet-DSD-Training" ["l"="52.663,33.764"]
"songhan/SqueezeNet-Generator" ["l"="52.663,33.746"]
"Xilinx/BNN-PYNQ" ["l"="31.731,-2.734", "c"=212]
"cornell-zhang/bnn-fpga" ["l"="31.713,-2.722", "c"=212]
"PaddlePaddle/FastDeploy" ["l"="50.118,29.663", "c"=83]
"CVCUDA/CV-CUDA" ["l"="53.302,32.711", "c"=251]
"sherlockchou86/VideoPipe" ["l"="53.366,32.624", "c"=251]
"xie-lab-ml/deep-learning-dynamics-paper-list" ["l"="52.48,15.272", "c"=100]
"Guangxuan-Xiao/torch-int" ["l"="38.79,-0.241", "c"=39]
"bytedance/MRECG" ["l"="52.46,33.438"]
"ThanatosShinji/onnx-tool" ["l"="-44.224,6.015", "c"=1131]
"tduckboot/tduck-platform" ["l"="40.985,1.205", "c"=7]
"hpi-xnor/BNext" ["l"="52.378,33.512"]
"facebookresearch/Ternary_Binary_Transformer" ["l"="52.401,33.49"]
"HirokiNakahara/GUINNESS" ["l"="31.685,-2.752", "c"=212]
"gplhegde/caffepresso" ["l"="52.669,33.659"]
"Harick1/caffe-yolo" ["l"="51.681,33.313", "c"=354]
"zhexinli/Q-ViT-DeiT" ["l"="52.459,33.375"]
"hillbig/binary_net" ["l"="-34.62,20.524", "c"=1031]
"miaow1988/SqueezeNet_v1.2" ["l"="52.664,33.788"]
"ex4sperans/pruning_with_tensorflow" ["l"="52.772,33.573"]
"gstaff/tfzip" ["l"="52.762,33.56"]
"rarilurelo/XNOR-Net" ["l"="52.608,33.678"]
"gplhegde/theano-xnor-net" ["l"="52.584,33.662"]
"ModelTC/NART" ["l"="52.426,33.3"]
"ModelTC/lightx2v" ["l"="52.433,33.316"]
"ModelTC/EasyLLM" ["l"="52.402,33.28"]
"hongsunjang/pipe-bd" ["l"="52.927,33.459"]
"Phuoc-Hoan-Le/BinaryViT" ["l"="52.36,33.542"]
"e-lab/ENet-training" ["l"="53.546,30.823", "c"=155]
"Liuhong99/Sophia" ["l"="48.818,32.958", "c"=401]
"soumith/imagenet-multiGPU.torch" ["l"="45.989,27.619", "c"=277]
"andravin/wincnn" ["l"="37.093,0.778", "c"=112]
"NHZlX/Merge_bn_Caffe" ["l"="52.754,33.643"]
"IntelLabs/SpMP" ["l"="63.181,-1.831", "c"=175]
"NHZlX/Auto_pruning" ["l"="52.741,33.628"]
"dgschwend/zynqnet" ["l"="31.768,-2.751", "c"=212]
"ysh329/embedded-ai.bi-weekly" ["l"="52.666,33.565"]
"doonny/PipeCNN" ["l"="31.791,-2.745", "c"=212]
"huggingface/optimum-quanto" ["l"="38.835,-0.373", "c"=39]
"AIoT-MLSys-Lab/Efficient-LLMs-Survey" ["l"="38.904,-0.349", "c"=39]
"DT42/squeezenet_demo" ["l"="50.404,33.314", "c"=314]
"Xiuyu-Li/q-diffusion" ["l"="38.926,0.01", "c"=39]
"HongxingGao/XNOR-Net" ["l"="52.623,33.652"]
"HuangOwen/Quantization-Variation" ["l"="52.379,33.433"]
"ThisisBillhe/BiViT" ["l"="52.33,33.532"]
"ModelTC/quant_horizon" ["l"="52.433,33.327"]
"HuangOwen/QAT-ACS" ["l"="52.392,33.445"]
"SamsungLabs/Genie" ["l"="52.84,33.512"]
"ModelTC/awesome-lm-system" ["l"="52.406,33.311"]
"quic/ai-hub-models" ["l"="49.702,29.89", "c"=83]
"kuangliu/pytorch-cifar" ["l"="50.994,29.882", "c"=83]
"xiaohu2015/DeepLearning_tutorials" ["l"="50.44,32.99", "c"=314]
"openai/openai-gemm" ["l"="37.046,0.815", "c"=112]
"ModelTC/OmniBal" ["l"="52.381,33.264"]
"KimHanjung/VISAGE" ["l"="50.655,30.78", "c"=83]
"NVIDIA/TensorRT-Model-Optimizer" ["l"="38.964,-0.464", "c"=39]
"icoxfog417/tensorflow_qrnn" ["l"="52.503,33.767"]
"DingKe/qrnn" ["l"="52.518,33.734"]
"HolmesShuan/ResNet-18-Caffemodel-on-ImageNet" ["l"="51.607,33.345", "c"=354]
"AlexeyAB/Yolo_mark" ["l"="50.452,32.935", "c"=314]
"DingKe/BinaryNet" ["l"="52.54,33.688"]
"luhaofang/CACUE" ["l"="52.637,33.663"]
"weiaicunzai/Bag_of_Tricks_for_Image_Classification_with_Convolutional_Neural_Networks" ["l"="51.076,30.037", "c"=83]
"readwrite112/AGAThA" ["l"="52.929,33.482"]
"leesou/PIM-DL-ASPLOS" ["l"="31.182,-3.042", "c"=1037]
"jaewonalive/PeerAiD" ["l"="52.935,33.469"]
"AIS-SNU/Smart-Infinity" ["l"="52.945,33.458"]
"DT42/BerryNet" ["l"="50.269,33.037", "c"=314]
"ysh329/deep-learning-model-convertor" ["l"="50.344,33.145", "c"=314]
"aaron-xichen/pytorch-playground" ["l"="51.028,29.971", "c"=83]
"RC4ML/BenchBF3" ["l"="53.015,33.465"]
"RC4ML/RPCNIC" ["l"="52.969,33.466"]
"spcl/muliticast-based-allgather" ["l"="53.041,33.464"]
"pprp/Awesome-LLM-Quantization" ["l"="38.772,-0.126", "c"=39]
"marvis/pytorch-mobilenet" ["l"="51.732,33.234", "c"=354]
"kratzert/finetune_alexnet_with_tensorflow" ["l"="50.395,33.205", "c"=314]
"HolyBayes/pytorch_ard" ["l"="52.795,33.717"]
"da-molchanov/variance-networks" ["l"="52.748,33.718"]
"sanghyun-son/clustering-kernels" ["l"="52.771,33.666"]
"solrex/caffe-mobile" ["l"="32.944,29.074", "c"=57]
"legolas123/cv-tricks.com" ["l"="51.763,30.768", "c"=83]
"zhreshold/mxnet-yolo" ["l"="51.813,33.57", "c"=354]
"LitLeo/TensorRT_Tutorial" ["l"="53.23,32.686", "c"=251]
"JC1DA/DeepMon" ["l"="52.698,33.513"]
"XiaoMi/mobile-ai-bench" ["l"="37.203,0.701", "c"=112]
"KeyKy/mobilenet-mxnet" ["l"="51.792,33.562", "c"=354]
"tqchen/mxnet-gan" ["l"="51.821,33.669", "c"=354]
"tornadomeet/mxnet-face" ["l"="33.099,29.163", "c"=57]
"albanie/convnet-burden" ["l"="37.29,0.808", "c"=112]
"amir-abdi/keras_to_tensorflow" ["l"="50.3,33.157", "c"=314]
"szagoruyko/diracnets" ["l"="51.318,29.977", "c"=83]
"AlexeyAB/yolo2_light" ["l"="51.695,33.246", "c"=354]
"bearpaw/pytorch-classification" ["l"="51.083,29.978", "c"=83]
"microsoft/EdgeML" ["l"="-16.151,-42.555", "c"=387]
"XJTUWYD/DoReFa_Cifar10" ["l"="52.581,33.679"]
"ayush29feb/Sketch-A-XNORNet" ["l"="52.598,33.692"]
"robi56/awesome-bayesian-deep-learning" ["l"="22.411,15.331", "c"=977]
"tostq/Caffe-Python-Tutorial" ["l"="52.752,33.586"]
"HolmesShuan/ShuffleNet-An-Extremely-Efficient-CNN-for-Mobile-Devices-Caffe-Reimplementation" ["l"="51.629,33.348", "c"=354]
}