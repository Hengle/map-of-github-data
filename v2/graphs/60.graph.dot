digraph G {
"BrikerMan/Kashgari" -> "CyberZHG/keras-bert"
"BrikerMan/Kashgari" -> "macanv/BERT-BiLSTM-CRF-NER"
"BrikerMan/Kashgari" -> "bojone/bert4keras"
"BrikerMan/Kashgari" -> "brightmart/albert_zh"
"BrikerMan/Kashgari" -> "crownpku/Information-Extraction-Chinese"
"BrikerMan/Kashgari" -> "brightmart/roberta_zh"
"BrikerMan/Kashgari" -> "ymcui/Chinese-BERT-wwm"
"BrikerMan/Kashgari" -> "bojone/bert_in_keras"
"BrikerMan/Kashgari" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"BrikerMan/Kashgari" -> "Jiakui/awesome-bert"
"BrikerMan/Kashgari" -> "yongzhuo/Keras-TextClassification"
"BrikerMan/Kashgari" -> "CLUEbenchmark/CLUE"
"BrikerMan/Kashgari" -> "ProHiryu/bert-chinese-ner"
"BrikerMan/Kashgari" -> "ChineseGLUE/ChineseGLUE"
"BrikerMan/Kashgari" -> "brightmart/text_classification"
"stardut/Text-Generate-RNN" -> "zpeng1989/RNN_learning_text_code"
"stardut/Text-Generate-RNN" -> "wzyonggege/RNN_poetry_generator"
"stardut/Text-Generate-RNN" -> "wandouduoduo/SunRnn"
"stardut/Text-Generate-RNN" -> "renjunxiang/Text_Generate"
"hankcs/pyhanlp" -> "HIT-SCIR/ltp"
"hankcs/pyhanlp" -> "ymcui/Chinese-BERT-wwm"
"hankcs/pyhanlp" -> "Embedding/Chinese-Word-Vectors"
"hankcs/pyhanlp" -> "hankcs/HanLP"
"hankcs/pyhanlp" -> "ownthink/Jiagu"
"hankcs/pyhanlp" -> "HIT-SCIR/pyltp"
"hankcs/pyhanlp" -> "brightmart/nlp_chinese_corpus"
"hankcs/pyhanlp" -> "lancopku/pkuseg-python"
"hankcs/pyhanlp" -> "crownpku/Awesome-Chinese-NLP"
"hankcs/pyhanlp" -> "brightmart/albert_zh"
"hankcs/pyhanlp" -> "CLUEbenchmark/CLUE"
"hankcs/pyhanlp" -> "NLP-LOVE/Introduction-NLP"
"hankcs/pyhanlp" -> "macanv/BERT-BiLSTM-CRF-NER"
"hankcs/pyhanlp" -> "blmoistawinde/HarvestText"
"hankcs/pyhanlp" -> "chatopera/Synonyms"
"nghuyong/ERNIE-Pytorch" -> "lonePatient/albert_pytorch"
"nghuyong/ERNIE-Pytorch" -> "airaria/TextBrewer"
"nghuyong/ERNIE-Pytorch" -> "PaddlePaddle/ERNIE"
"nghuyong/ERNIE-Pytorch" -> "brightmart/roberta_zh"
"nghuyong/ERNIE-Pytorch" -> "thunlp/ERNIE"
"nghuyong/ERNIE-Pytorch" -> "loujie0822/DeepIE"
"nghuyong/ERNIE-Pytorch" -> "dbiir/UER-py"
"nghuyong/ERNIE-Pytorch" -> "ymcui/Chinese-XLNet"
"nghuyong/ERNIE-Pytorch" -> "brightmart/albert_zh"
"nghuyong/ERNIE-Pytorch" -> "ShannonAI/mrc-for-flat-nested-ner"
"nghuyong/ERNIE-Pytorch" -> "CLUEbenchmark/CLUEPretrainedModels"
"nghuyong/ERNIE-Pytorch" -> "CLUEbenchmark/CLUE"
"nghuyong/ERNIE-Pytorch" -> "LeeSureman/Flat-Lattice-Transformer"
"nghuyong/ERNIE-Pytorch" -> "lonePatient/BERT-NER-Pytorch"
"nghuyong/ERNIE-Pytorch" -> "thunlp/OpenCLaP"
"649453932/Chinese-Text-Classification-Pytorch" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"649453932/Chinese-Text-Classification-Pytorch" -> "ymcui/Chinese-BERT-wwm"
"649453932/Chinese-Text-Classification-Pytorch" -> "Embedding/Chinese-Word-Vectors"
"649453932/Chinese-Text-Classification-Pytorch" -> "brightmart/text_classification"
"649453932/Chinese-Text-Classification-Pytorch" -> "yongzhuo/Keras-TextClassification"
"649453932/Chinese-Text-Classification-Pytorch" -> "CLUEbenchmark/CLUEDatasetSearch"
"649453932/Chinese-Text-Classification-Pytorch" -> "brightmart/albert_zh"
"649453932/Chinese-Text-Classification-Pytorch" -> "bojone/bert4keras"
"649453932/Chinese-Text-Classification-Pytorch" -> "CLUEbenchmark/CLUE"
"649453932/Chinese-Text-Classification-Pytorch" -> "DA-southampton/NLP_ability"
"649453932/Chinese-Text-Classification-Pytorch" -> "brightmart/nlp_chinese_corpus"
"649453932/Chinese-Text-Classification-Pytorch" -> "lonePatient/BERT-NER-Pytorch"
"649453932/Chinese-Text-Classification-Pytorch" -> "km1994/nlp_paper_study"
"649453932/Chinese-Text-Classification-Pytorch" -> "InsaneLife/ChineseNLPCorpus"
"649453932/Chinese-Text-Classification-Pytorch" -> "macanv/BERT-BiLSTM-CRF-NER"
"goto456/stopwords" -> "Embedding/Chinese-Word-Vectors"
"goto456/stopwords" -> "ymcui/Chinese-BERT-wwm"
"goto456/stopwords" -> "brightmart/nlp_chinese_corpus"
"goto456/stopwords" -> "SophonPlus/ChineseNlpCorpus"
"goto456/stopwords" -> "brightmart/albert_zh"
"goto456/stopwords" -> "CLUEbenchmark/CLUEDatasetSearch"
"goto456/stopwords" -> "bojone/bert4keras"
"goto456/stopwords" -> "fxsjy/jieba"
"goto456/stopwords" -> "649453932/Chinese-Text-Classification-Pytorch"
"goto456/stopwords" -> "lancopku/pkuseg-python"
"goto456/stopwords" -> "InsaneLife/ChineseNLPCorpus"
"goto456/stopwords" -> "CLUEbenchmark/CLUE"
"goto456/stopwords" -> "macanv/BERT-BiLSTM-CRF-NER"
"goto456/stopwords" -> "PaddlePaddle/ERNIE"
"goto456/stopwords" -> "HIT-SCIR/ltp"
"yanqiangmiffy/NLP-Interview-Notes" -> "laddie132/NLP-Interview"
"yanqiangmiffy/NLP-Interview-Notes" -> "songyingxin/NLPer-Interview"
"yanqiangmiffy/NLP-Interview-Notes" -> "Vincent131499/NLP-Algorithm-Interview"
"yanqiangmiffy/NLP-Interview-Notes" -> "km1994/NLP-Interview-Notes"
"yanqiangmiffy/NLP-Interview-Notes" -> "z814081807/DeepNER"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "mxhofer/Named-Entity-Recognition-BidirectionalLSTM-CNN-CoNLL"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "UKPLab/elmo-bilstm-cnn-crf"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "scofield7419/Hierarchical-BiLSTM-CNN"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "kamalkraj/BERT-NER"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "kyzhouhzau/BERT-NER"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "Hironsan/anago"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "guillaumegenthial/sequence_tagging"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "guillaumegenthial/tf_ner"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "monikkinom/ner-lstm"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "juand-r/entity-recognition-datasets"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "iesl/dilated-cnn-ner"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "pfliu-nlp/Named-Entity-Recognition-NER-Papers"
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" -> "meizhiju/layered-bilstm-crf"
"mxhofer/Named-Entity-Recognition-BidirectionalLSTM-CNN-CoNLL" -> "kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs"
"kyzhouhzau/BERT-NER" -> "ProHiryu/bert-chinese-ner"
"kyzhouhzau/BERT-NER" -> "macanv/BERT-BiLSTM-CRF-NER"
"kyzhouhzau/BERT-NER" -> "kamalkraj/BERT-NER"
"kyzhouhzau/BERT-NER" -> "zjy-ucas/ChineseNER"
"kyzhouhzau/BERT-NER" -> "FuYanzhe2/Name-Entity-Recognition"
"kyzhouhzau/BERT-NER" -> "guillaumegenthial/tf_ner"
"kyzhouhzau/BERT-NER" -> "guillaumegenthial/sequence_tagging"
"kyzhouhzau/BERT-NER" -> "jiesutd/NCRFpp"
"kyzhouhzau/BERT-NER" -> "jiesutd/LatticeLSTM"
"kyzhouhzau/BERT-NER" -> "ProHiryu/albert-chinese-ner"
"kyzhouhzau/BERT-NER" -> "crownpku/Information-Extraction-Chinese"
"kyzhouhzau/BERT-NER" -> "brightmart/albert_zh"
"kyzhouhzau/BERT-NER" -> "yumath/bertNER"
"kyzhouhzau/BERT-NER" -> "BrikerMan/Kashgari"
"kyzhouhzau/BERT-NER" -> "xuanzebi/BERT-CH-NER"
"ai-forever/ner-bert" -> "Kyubyong/bert_ner"
"ai-forever/ner-bert" -> "kamalkraj/BERT-NER"
"ai-forever/ner-bert" -> "lemonhu/NER-BERT-pytorch"
"ai-forever/ner-bert" -> "kyzhouhzau/BERT-NER"
"ai-forever/ner-bert" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"ai-forever/ner-bert" -> "ZhixiuYe/NER-pytorch"
"ai-forever/ner-bert" -> "JayYip/m3tl"
"ai-forever/ner-bert" -> "brightmart/bert_language_understanding"
"ai-forever/ner-bert" -> "guillaumegenthial/tf_ner"
"macanv/BERT-BiLSTM-CRF-NER" -> "ymcui/Chinese-BERT-wwm"
"macanv/BERT-BiLSTM-CRF-NER" -> "brightmart/albert_zh"
"macanv/BERT-BiLSTM-CRF-NER" -> "zjy-ucas/ChineseNER"
"macanv/BERT-BiLSTM-CRF-NER" -> "Determined22/zh-NER-TF"
"macanv/BERT-BiLSTM-CRF-NER" -> "kyzhouhzau/BERT-NER"
"macanv/BERT-BiLSTM-CRF-NER" -> "jina-ai/clip-as-service" ["e"=1]
"macanv/BERT-BiLSTM-CRF-NER" -> "jiesutd/LatticeLSTM"
"macanv/BERT-BiLSTM-CRF-NER" -> "crownpku/Information-Extraction-Chinese"
"macanv/BERT-BiLSTM-CRF-NER" -> "bojone/bert4keras"
"macanv/BERT-BiLSTM-CRF-NER" -> "lonePatient/BERT-NER-Pytorch"
"macanv/BERT-BiLSTM-CRF-NER" -> "PaddlePaddle/ERNIE"
"macanv/BERT-BiLSTM-CRF-NER" -> "BrikerMan/Kashgari"
"macanv/BERT-BiLSTM-CRF-NER" -> "Embedding/Chinese-Word-Vectors"
"macanv/BERT-BiLSTM-CRF-NER" -> "thunlp/OpenNRE"
"macanv/BERT-BiLSTM-CRF-NER" -> "luopeixiang/named_entity_recognition"
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" -> "sz128/slot_filling_and_intent_detection_of_SLU" ["e"=1]
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" -> "MiuLab/SlotGated-SLU" ["e"=1]
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" -> "zhpmatrix/bert-sequence-tagging"
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" -> "xuanzebi/BERT-CH-NER"
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" -> "NLPScott/bert-Chinese-classification-task"
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" -> "sliderSun/pynlp"
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" -> "ProHiryu/bert-chinese-ner"
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" -> "MahmoudWahdan/dialog-nlu"
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" -> "kyzhouhzau/BERT-NER"
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" -> "monologg/JointBERT" ["e"=1]
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" -> "JayYip/m3tl"
"kamalkraj/BERT-NER" -> "kyzhouhzau/BERT-NER"
"kamalkraj/BERT-NER" -> "lonePatient/BERT-NER-Pytorch"
"kamalkraj/BERT-NER" -> "lemonhu/NER-BERT-pytorch"
"kamalkraj/BERT-NER" -> "ai-forever/ner-bert"
"kamalkraj/BERT-NER" -> "juand-r/entity-recognition-datasets"
"kamalkraj/BERT-NER" -> "Kyubyong/bert_ner"
"kamalkraj/BERT-NER" -> "CLUEbenchmark/CLUENER2020"
"kamalkraj/BERT-NER" -> "chakki-works/seqeval"
"kamalkraj/BERT-NER" -> "macanv/BERT-BiLSTM-CRF-NER"
"kamalkraj/BERT-NER" -> "luopeixiang/named_entity_recognition"
"kamalkraj/BERT-NER" -> "ZhixiuYe/NER-pytorch"
"kamalkraj/BERT-NER" -> "thunlp/ERNIE"
"kamalkraj/BERT-NER" -> "jiesutd/NCRFpp"
"kamalkraj/BERT-NER" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"kamalkraj/BERT-NER" -> "ShannonAI/mrc-for-flat-nested-ner"
"Kyubyong/bert_ner" -> "ai-forever/ner-bert"
"Kyubyong/bert_ner" -> "kamalkraj/BERT-NER"
"Kyubyong/bert_ner" -> "lemonhu/NER-BERT-pytorch"
"Kyubyong/bert_ner" -> "Louis-udm/NER-BERT-CRF"
"Kyubyong/bert_ner" -> "kyzhouhzau/BERT-NER"
"Kyubyong/bert_ner" -> "weizhepei/BERT-NER"
"yumath/bertNER" -> "CLOVEXCWZ/NER_DEMO"
"yumath/bertNER" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"yumath/bertNER" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"yumath/bertNER" -> "FuYanzhe2/Name-Entity-Recognition"
"yumath/bertNER" -> "ProHiryu/bert-chinese-ner"
"yumath/bertNER" -> "zjy-ucas/ChineseNER"
"yumath/bertNER" -> "ProHiryu/albert-chinese-ner"
"yumath/bertNER" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"yumath/bertNER" -> "kyzhouhzau/BERT-NER"
"yumath/bertNER" -> "xuanzebi/BERT-CH-NER"
"yumath/bertNER" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"yumath/bertNER" -> "yanwii/ChinsesNER-pytorch"
"yumath/bertNER" -> "stanleylsx/entity_extractor_by_ner"
"yumath/bertNER" -> "lonePatient/BERT-NER-Pytorch"
"yumath/bertNER" -> "CLUEbenchmark/CLUENER2020"
"Determined22/zh-NER-TF" -> "zjy-ucas/ChineseNER"
"Determined22/zh-NER-TF" -> "macanv/BERT-BiLSTM-CRF-NER"
"Determined22/zh-NER-TF" -> "guillaumegenthial/sequence_tagging"
"Determined22/zh-NER-TF" -> "buppt/ChineseNER"
"Determined22/zh-NER-TF" -> "crownpku/Information-Extraction-Chinese"
"Determined22/zh-NER-TF" -> "shiyybua/NER"
"Determined22/zh-NER-TF" -> "jiesutd/LatticeLSTM"
"Determined22/zh-NER-TF" -> "luopeixiang/named_entity_recognition"
"Determined22/zh-NER-TF" -> "Embedding/Chinese-Word-Vectors"
"Determined22/zh-NER-TF" -> "brightmart/albert_zh"
"Determined22/zh-NER-TF" -> "thunlp/OpenNRE"
"Determined22/zh-NER-TF" -> "qq547276542/Agriculture_KnowledgeGraph" ["e"=1]
"Determined22/zh-NER-TF" -> "crownpku/Awesome-Chinese-NLP"
"Determined22/zh-NER-TF" -> "brightmart/text_classification"
"Determined22/zh-NER-TF" -> "ymcui/Chinese-BERT-wwm"
"chinese-poetry/huajianji" -> "chinese-poetry/poetry-calendar"
"chinese-poetry/huajianji" -> "chinese-poetry/weapp-calendar" ["e"=1]
"chinese-poetry/huajianji" -> "snowtraces/poetry-source"
"chinese-poetry/huajianji" -> "yxcs/poems-db"
"chinese-poetry/huajianji" -> "caoxingyu/chinese-gushiwen"
"chinese-poetry/huajianji" -> "nslogx/weapp-poem"
"chinese-poetry/huajianji" -> "chinese-poetry/chinese-poetry-npm"
"buppt/ChineseNER" -> "luopeixiang/named_entity_recognition"
"buppt/ChineseNER" -> "Determined22/zh-NER-TF"
"buppt/ChineseNER" -> "zjy-ucas/ChineseNER"
"buppt/ChineseNER" -> "macanv/BERT-BiLSTM-CRF-NER"
"buppt/ChineseNER" -> "jiesutd/LatticeLSTM"
"buppt/ChineseNER" -> "buppt/ChineseNRE" ["e"=1]
"buppt/ChineseNER" -> "shiyybua/NER"
"buppt/ChineseNER" -> "crownpku/Information-Extraction-Chinese"
"buppt/ChineseNER" -> "ProHiryu/bert-chinese-ner"
"buppt/ChineseNER" -> "yanwii/ChinsesNER-pytorch"
"buppt/ChineseNER" -> "CLUEbenchmark/CLUENER2020"
"buppt/ChineseNER" -> "lonePatient/BERT-NER-Pytorch"
"buppt/ChineseNER" -> "ownthink/Jiagu"
"buppt/ChineseNER" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"buppt/ChineseNER" -> "guillaumegenthial/sequence_tagging"
"blmoistawinde/HarvestText" -> "ownthink/Jiagu"
"blmoistawinde/HarvestText" -> "letiantian/TextRank4ZH"
"blmoistawinde/HarvestText" -> "hankcs/pyhanlp"
"blmoistawinde/HarvestText" -> "dongrixinyu/JioNLP"
"blmoistawinde/HarvestText" -> "CLUEbenchmark/CLUEDatasetSearch"
"blmoistawinde/HarvestText" -> "425776024/nlpcda"
"blmoistawinde/HarvestText" -> "liuhuanyong/TextGrapher" ["e"=1]
"blmoistawinde/HarvestText" -> "liuhuanyong/EventTriplesExtraction" ["e"=1]
"blmoistawinde/HarvestText" -> "ymcui/Chinese-BERT-wwm"
"blmoistawinde/HarvestText" -> "SeanLee97/xmnlp"
"blmoistawinde/HarvestText" -> "InsaneLife/ChineseNLPCorpus"
"blmoistawinde/HarvestText" -> "chatopera/Synonyms"
"blmoistawinde/HarvestText" -> "HIT-SCIR/ltp"
"blmoistawinde/HarvestText" -> "brightmart/albert_zh"
"blmoistawinde/HarvestText" -> "CLUEbenchmark/CLUE"
"HIT-SCIR/ltp" -> "HIT-SCIR/pyltp"
"HIT-SCIR/ltp" -> "ymcui/Chinese-BERT-wwm"
"HIT-SCIR/ltp" -> "Embedding/Chinese-Word-Vectors"
"HIT-SCIR/ltp" -> "crownpku/Awesome-Chinese-NLP"
"HIT-SCIR/ltp" -> "NLPIR-team/NLPIR"
"HIT-SCIR/ltp" -> "brightmart/nlp_chinese_corpus"
"HIT-SCIR/ltp" -> "thunlp/OpenNRE"
"HIT-SCIR/ltp" -> "hankcs/pyhanlp"
"HIT-SCIR/ltp" -> "FudanNLP/fnlp"
"HIT-SCIR/ltp" -> "baidu/lac"
"HIT-SCIR/ltp" -> "CLUEbenchmark/CLUE"
"HIT-SCIR/ltp" -> "brightmart/albert_zh"
"HIT-SCIR/ltp" -> "PaddlePaddle/ERNIE"
"HIT-SCIR/ltp" -> "lancopku/pkuseg-python"
"HIT-SCIR/ltp" -> "isnowfy/snownlp"
"aespresso/a_journey_into_math_of_ml" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"aespresso/a_journey_into_math_of_ml" -> "ymcui/Chinese-BERT-wwm"
"aespresso/a_journey_into_math_of_ml" -> "brightmart/albert_zh"
"aespresso/a_journey_into_math_of_ml" -> "luopeixiang/named_entity_recognition"
"aespresso/a_journey_into_math_of_ml" -> "bojone/bert4keras"
"aespresso/a_journey_into_math_of_ml" -> "songyingxin/NLPer-Interview"
"aespresso/a_journey_into_math_of_ml" -> "649453932/Chinese-Text-Classification-Pytorch"
"aespresso/a_journey_into_math_of_ml" -> "macanv/BERT-BiLSTM-CRF-NER"
"aespresso/a_journey_into_math_of_ml" -> "SophonPlus/ChineseNlpCorpus"
"aespresso/a_journey_into_math_of_ml" -> "km1994/nlp_paper_study"
"aespresso/a_journey_into_math_of_ml" -> "lonePatient/BERT-NER-Pytorch"
"aespresso/a_journey_into_math_of_ml" -> "DA-southampton/NLP_ability"
"aespresso/a_journey_into_math_of_ml" -> "loujie0822/DeepIE"
"aespresso/a_journey_into_math_of_ml" -> "InsaneLife/ChineseNLPCorpus"
"aespresso/a_journey_into_math_of_ml" -> "brightmart/nlp_chinese_corpus"
"ymcui/Chinese-BERT-wwm" -> "Embedding/Chinese-Word-Vectors"
"ymcui/Chinese-BERT-wwm" -> "brightmart/albert_zh"
"ymcui/Chinese-BERT-wwm" -> "brightmart/nlp_chinese_corpus"
"ymcui/Chinese-BERT-wwm" -> "bojone/bert4keras"
"ymcui/Chinese-BERT-wwm" -> "PaddlePaddle/ERNIE"
"ymcui/Chinese-BERT-wwm" -> "brightmart/roberta_zh"
"ymcui/Chinese-BERT-wwm" -> "CLUEbenchmark/CLUE"
"ymcui/Chinese-BERT-wwm" -> "macanv/BERT-BiLSTM-CRF-NER"
"ymcui/Chinese-BERT-wwm" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"ymcui/Chinese-BERT-wwm" -> "jina-ai/clip-as-service" ["e"=1]
"ymcui/Chinese-BERT-wwm" -> "InsaneLife/ChineseNLPCorpus"
"ymcui/Chinese-BERT-wwm" -> "SophonPlus/ChineseNlpCorpus"
"ymcui/Chinese-BERT-wwm" -> "649453932/Chinese-Text-Classification-Pytorch"
"ymcui/Chinese-BERT-wwm" -> "google-research/bert" ["e"=1]
"ymcui/Chinese-BERT-wwm" -> "CLUEbenchmark/CLUEDatasetSearch"
"songyingxin/NLPer-Interview" -> "km1994/NLP-Interview-Notes"
"songyingxin/NLPer-Interview" -> "DA-southampton/NLP_ability"
"songyingxin/NLPer-Interview" -> "km1994/nlp_paper_study"
"songyingxin/NLPer-Interview" -> "zhpmatrix/nlp-competitions-list-review"
"songyingxin/NLPer-Interview" -> "loujie0822/DeepIE"
"songyingxin/NLPer-Interview" -> "yanqiangmiffy/NLP-Interview-Notes"
"songyingxin/NLPer-Interview" -> "DarLiner/Algorithm_Interview_Notes-Chinese" ["e"=1]
"songyingxin/NLPer-Interview" -> "NLP-LOVE/ML-NLP" ["e"=1]
"songyingxin/NLPer-Interview" -> "TingFree/NLPer-Arsenal"
"songyingxin/NLPer-Interview" -> "FudanNLP/nlp-beginner"
"songyingxin/NLPer-Interview" -> "brightmart/albert_zh"
"songyingxin/NLPer-Interview" -> "ymcui/Chinese-BERT-wwm"
"songyingxin/NLPer-Interview" -> "CLUEbenchmark/CLUE"
"songyingxin/NLPer-Interview" -> "brightmart/roberta_zh"
"songyingxin/NLPer-Interview" -> "DA-southampton/Tech_Aarticle"
"thunlp/THUOCL" -> "GanjinZero/awesome_Chinese_medical_NLP" ["e"=1]
"thunlp/THUOCL" -> "fighting41love/Chinese_from_dongxiexidian"
"thunlp/THUOCL" -> "guotong1988/chinese_dictionary"
"thunlp/THUOCL" -> "sing1ee/dict_build"
"thunlp/THUOCL" -> "ling0322/webdict"
"thunlp/THUOCL" -> "nonamestreet/weixin_public_corpus"
"thunlp/THUOCL" -> "scienceasdf/medical-books" ["e"=1]
"thunlp/THUOCL" -> "GanjinZero/ChineseEHRBert" ["e"=1]
"thunlp/THUOCL" -> "liuhuanyong/ChineseSemanticKB"
"thunlp/THUOCL" -> "wainshine/Chinese-Names-Corpus"
"thunlp/THUOCL" -> "alibaba-research/ChineseBLUE" ["e"=1]
"thunlp/THUOCL" -> "wainshine/Company-Names-Corpus"
"thunlp/THUOCL" -> "liuhuanyong/ComplexEventExtraction" ["e"=1]
"thunlp/THUOCL" -> "yixiu00001/LSTM-CRF-medical" ["e"=1]
"thunlp/THUOCL" -> "425776024/nlpcda"
"geekinglcq/CDCS" -> "zhpmatrix/nlp-competitions-list-review"
"geekinglcq/CDCS" -> "Smilexuhc/Data-Competition-TopSolution" ["e"=1]
"geekinglcq/CDCS" -> "EliotAndres/kaggle-past-solutions" ["e"=1]
"geekinglcq/CDCS" -> "NTMC-Community/MatchZoo"
"geekinglcq/CDCS" -> "crownpku/Awesome-Chinese-NLP"
"geekinglcq/CDCS" -> "ymcui/Chinese-XLNet"
"geekinglcq/CDCS" -> "brightmart/albert_zh"
"geekinglcq/CDCS" -> "BrikerMan/Kashgari"
"geekinglcq/CDCS" -> "guoday/Tencent2019_Preliminary_Rank1st" ["e"=1]
"geekinglcq/CDCS" -> "crownpku/Information-Extraction-Chinese"
"geekinglcq/CDCS" -> "datawhalechina/competition-baseline" ["e"=1]
"geekinglcq/CDCS" -> "ChineseGLUE/ChineseGLUE"
"geekinglcq/CDCS" -> "zslomo/2019-Autumn-recruitment-experience" ["e"=1]
"geekinglcq/CDCS" -> "brightmart/text_classification"
"geekinglcq/CDCS" -> "nzc/dnn_ctr" ["e"=1]
"baidu/Senta" -> "baidu/lac"
"baidu/Senta" -> "baidu/AnyQ"
"baidu/Senta" -> "baidu/Familia"
"baidu/Senta" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"baidu/Senta" -> "isnowfy/snownlp"
"baidu/Senta" -> "SophonPlus/ChineseNlpCorpus"
"baidu/Senta" -> "CLUEbenchmark/CLUE"
"baidu/Senta" -> "PaddlePaddle/ERNIE"
"baidu/Senta" -> "chaoming0625/SentimentPolarityAnalysis" ["e"=1]
"baidu/Senta" -> "blmoistawinde/HarvestText"
"baidu/Senta" -> "rainarch/SentiBridge"
"baidu/Senta" -> "ymcui/Chinese-BERT-wwm"
"baidu/Senta" -> "brightmart/roberta_zh"
"baidu/Senta" -> "Embedding/Chinese-Word-Vectors"
"baidu/Senta" -> "ownthink/Jiagu"
"mozillazg/python-pinyin" -> "mozillazg/pinyin-data"
"mozillazg/python-pinyin" -> "hotoo/pinyin" ["e"=1]
"mozillazg/python-pinyin" -> "shibing624/pycorrector"
"mozillazg/python-pinyin" -> "brightmart/nlp_chinese_corpus"
"mozillazg/python-pinyin" -> "chatopera/Synonyms"
"mozillazg/python-pinyin" -> "wainshine/Chinese-Names-Corpus"
"mozillazg/python-pinyin" -> "fxsjy/jieba"
"mozillazg/python-pinyin" -> "ymcui/Chinese-BERT-wwm"
"mozillazg/python-pinyin" -> "lancopku/pkuseg-python"
"mozillazg/python-pinyin" -> "wenet-e2e/wenet" ["e"=1]
"mozillazg/python-pinyin" -> "Embedding/Chinese-Word-Vectors"
"mozillazg/python-pinyin" -> "hankcs/pyhanlp"
"mozillazg/python-pinyin" -> "brightmart/albert_zh"
"mozillazg/python-pinyin" -> "BYVoid/OpenCC"
"mozillazg/python-pinyin" -> "MontrealCorpusTools/Montreal-Forced-Aligner" ["e"=1]
"Morizeyao/GPT2-Chinese" -> "yangjianxin1/GPT2-chitchat"
"Morizeyao/GPT2-Chinese" -> "imcaspar/gpt2-ml"
"Morizeyao/GPT2-Chinese" -> "brightmart/nlp_chinese_corpus"
"Morizeyao/GPT2-Chinese" -> "ymcui/Chinese-BERT-wwm"
"Morizeyao/GPT2-Chinese" -> "thu-coai/CDial-GPT"
"Morizeyao/GPT2-Chinese" -> "brightmart/albert_zh"
"Morizeyao/GPT2-Chinese" -> "bojone/bert4keras"
"Morizeyao/GPT2-Chinese" -> "brightmart/roberta_zh"
"Morizeyao/GPT2-Chinese" -> "CLUEbenchmark/CLUE"
"Morizeyao/GPT2-Chinese" -> "codemayq/chinese-chatbot-corpus"
"Morizeyao/GPT2-Chinese" -> "Embedding/Chinese-Word-Vectors"
"Morizeyao/GPT2-Chinese" -> "dbiir/UER-py"
"Morizeyao/GPT2-Chinese" -> "shibing624/pycorrector"
"Morizeyao/GPT2-Chinese" -> "TsinghuaAI/CPM-1-Generate"
"Morizeyao/GPT2-Chinese" -> "PaddlePaddle/ERNIE"
"brightmart/nlp_chinese_corpus" -> "Embedding/Chinese-Word-Vectors"
"brightmart/nlp_chinese_corpus" -> "ymcui/Chinese-BERT-wwm"
"brightmart/nlp_chinese_corpus" -> "SophonPlus/ChineseNlpCorpus"
"brightmart/nlp_chinese_corpus" -> "crownpku/Awesome-Chinese-NLP"
"brightmart/nlp_chinese_corpus" -> "InsaneLife/ChineseNLPCorpus"
"brightmart/nlp_chinese_corpus" -> "CLUEbenchmark/CLUE"
"brightmart/nlp_chinese_corpus" -> "brightmart/albert_zh"
"brightmart/nlp_chinese_corpus" -> "Morizeyao/GPT2-Chinese"
"brightmart/nlp_chinese_corpus" -> "CLUEbenchmark/CLUEDatasetSearch"
"brightmart/nlp_chinese_corpus" -> "PaddlePaddle/ERNIE"
"brightmart/nlp_chinese_corpus" -> "brightmart/text_classification"
"brightmart/nlp_chinese_corpus" -> "codemayq/chinese-chatbot-corpus"
"brightmart/nlp_chinese_corpus" -> "macanv/BERT-BiLSTM-CRF-NER"
"brightmart/nlp_chinese_corpus" -> "bojone/bert4keras"
"brightmart/nlp_chinese_corpus" -> "brightmart/roberta_zh"
"doccano/doccano" -> "flairNLP/flair" ["e"=1]
"doccano/doccano" -> "HumanSignal/label-studio" ["e"=1]
"doccano/doccano" -> "allenai/allennlp" ["e"=1]
"doccano/doccano" -> "jina-ai/clip-as-service" ["e"=1]
"doccano/doccano" -> "UKPLab/sentence-transformers" ["e"=1]
"doccano/doccano" -> "ymcui/Chinese-BERT-wwm"
"doccano/doccano" -> "sebastianruder/NLP-progress" ["e"=1]
"doccano/doccano" -> "nlplab/brat"
"doccano/doccano" -> "deepwel/Chinese-Annotator"
"doccano/doccano" -> "snorkel-team/snorkel" ["e"=1]
"doccano/doccano" -> "PaddlePaddle/PaddleNLP"
"doccano/doccano" -> "macanv/BERT-BiLSTM-CRF-NER"
"doccano/doccano" -> "Embedding/Chinese-Word-Vectors"
"doccano/doccano" -> "brightmart/nlp_chinese_corpus"
"doccano/doccano" -> "PaddlePaddle/ERNIE"
"pwxcoo/chinese-xinhua" -> "chinese-poetry/chinese-poetry" ["e"=1]
"pwxcoo/chinese-xinhua" -> "wainshine/Chinese-Names-Corpus"
"pwxcoo/chinese-xinhua" -> "brightmart/nlp_chinese_corpus"
"pwxcoo/chinese-xinhua" -> "zhaoolee/ChineseBQB" ["e"=1]
"pwxcoo/chinese-xinhua" -> "mozillazg/python-pinyin"
"pwxcoo/chinese-xinhua" -> "modood/Administrative-divisions-of-China" ["e"=1]
"pwxcoo/chinese-xinhua" -> "fxsjy/jieba"
"pwxcoo/chinese-xinhua" -> "Embedding/Chinese-Word-Vectors"
"pwxcoo/chinese-xinhua" -> "skywind3000/ECDICT" ["e"=1]
"pwxcoo/chinese-xinhua" -> "mapull/chinese-dictionary"
"pwxcoo/chinese-xinhua" -> "lancopku/pkuseg-python"
"pwxcoo/chinese-xinhua" -> "chatopera/Synonyms"
"pwxcoo/chinese-xinhua" -> "phobal/ivideo" ["e"=1]
"pwxcoo/chinese-xinhua" -> "thunlp/WantWords" ["e"=1]
"pwxcoo/chinese-xinhua" -> "zhaoolee/ChromeAppHeroes" ["e"=1]
"BiLiangLtd/WordSimilarity" -> "yaleimeng/Final_word_Similarity"
"BiLiangLtd/WordSimilarity" -> "ashengtx/CilinSimilarity"
"BiLiangLtd/WordSimilarity" -> "taozhijiang/chinese_correct_wsd"
"BiLiangLtd/WordSimilarity" -> "tigerchen52/synonym_detection"
"BiLiangLtd/WordSimilarity" -> "Keson96/SynoCN"
"BiLiangLtd/WordSimilarity" -> "thunlp/OpenHowNet"
"BiLiangLtd/WordSimilarity" -> "sunyilgdx/SIFRank_zh" ["e"=1]
"BiLiangLtd/WordSimilarity" -> "liuhuanyong/SentenceSimilarity"
"BiLiangLtd/WordSimilarity" -> "chatopera/Synonyms"
"BiLiangLtd/WordSimilarity" -> "yongzhuo/nlp_xiaojiang"
"jiesutd/NCRFpp" -> "jiesutd/LatticeLSTM"
"jiesutd/NCRFpp" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"jiesutd/NCRFpp" -> "guillaumegenthial/sequence_tagging"
"jiesutd/NCRFpp" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"jiesutd/NCRFpp" -> "kyzhouhzau/BERT-NER"
"jiesutd/NCRFpp" -> "zjy-ucas/ChineseNER"
"jiesutd/NCRFpp" -> "macanv/BERT-BiLSTM-CRF-NER"
"jiesutd/NCRFpp" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"jiesutd/NCRFpp" -> "Hironsan/anago"
"jiesutd/NCRFpp" -> "allenai/bilm-tf" ["e"=1]
"jiesutd/NCRFpp" -> "jiesutd/YEDDA"
"jiesutd/NCRFpp" -> "glample/tagger"
"jiesutd/NCRFpp" -> "allenai/allennlp" ["e"=1]
"jiesutd/NCRFpp" -> "NTMC-Community/MatchZoo"
"jiesutd/NCRFpp" -> "brightmart/albert_zh"
"chenghuige/wenzheng" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"chenghuige/wenzheng" -> "xueyouluo/fsauor2018"
"chenghuige/wenzheng" -> "pengshuang/AI-Comp"
"chenghuige/wenzheng" -> "AIChallenger/AI_Challenger_2018"
"chenghuige/wenzheng" -> "yilifzf/BDCI_Car_2018"
"chenghuige/wenzheng" -> "brightmart/sentiment_analysis_fine_grain"
"chenghuige/wenzheng" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"chenghuige/wenzheng" -> "foamliu/Sentiment-Analysis"
"chenghuige/wenzheng" -> "hecongqing/2018-daguan-competition"
"chenghuige/wenzheng" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"chenghuige/wenzheng" -> "HKUST-KnowComp/R-Net" ["e"=1]
"chenghuige/wenzheng" -> "Magic-Bubble/Zhihu"
"chenghuige/wenzheng" -> "ziweipolaris/atec2018-nlp"
"chenghuige/wenzheng" -> "wxue004cs/GCAE" ["e"=1]
"chenghuige/wenzheng" -> "nlpjoe/daguan-classify-2018"
"guillaumegenthial/tf_ner" -> "guillaumegenthial/sequence_tagging"
"guillaumegenthial/tf_ner" -> "kyzhouhzau/BERT-NER"
"guillaumegenthial/tf_ner" -> "Hironsan/anago"
"guillaumegenthial/tf_ner" -> "zjy-ucas/ChineseNER"
"guillaumegenthial/tf_ner" -> "guillaumegenthial/tf_metrics"
"guillaumegenthial/tf_ner" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"guillaumegenthial/tf_ner" -> "jiesutd/LatticeLSTM"
"guillaumegenthial/tf_ner" -> "Franck-Dernoncourt/NeuroNER"
"guillaumegenthial/tf_ner" -> "jiesutd/NCRFpp"
"guillaumegenthial/tf_ner" -> "macanv/BERT-BiLSTM-CRF-NER"
"guillaumegenthial/tf_ner" -> "ProHiryu/bert-chinese-ner"
"guillaumegenthial/tf_ner" -> "Determined22/zh-NER-TF"
"guillaumegenthial/tf_ner" -> "glample/tagger"
"guillaumegenthial/tf_ner" -> "crownpku/Information-Extraction-Chinese"
"guillaumegenthial/tf_ner" -> "BrikerMan/Kashgari"
"jiangxinyang227/textClassifier" -> "jiangxinyang227/NLP-Project"
"jiangxinyang227/textClassifier" -> "jiangxinyang227/bert-for-task"
"jiangxinyang227/textClassifier" -> "terrifyzhao/bert-utils"
"jiangxinyang227/textClassifier" -> "brightmart/text_classification"
"jiangxinyang227/textClassifier" -> "macanv/BERT-BiLSTM-CRF-NER"
"jiangxinyang227/textClassifier" -> "yongzhuo/Keras-TextClassification"
"jiangxinyang227/textClassifier" -> "NLPScott/bert-Chinese-classification-task"
"jiangxinyang227/textClassifier" -> "649453932/Chinese-Text-Classification-Pytorch"
"jiangxinyang227/textClassifier" -> "msgi/nlp-journey"
"jiangxinyang227/textClassifier" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"jiangxinyang227/textClassifier" -> "CyberZHG/keras-bert"
"jiangxinyang227/textClassifier" -> "yongzhuo/nlp_xiaojiang"
"jiangxinyang227/textClassifier" -> "brightmart/albert_zh"
"jiangxinyang227/textClassifier" -> "bojone/bert_in_keras"
"jiangxinyang227/textClassifier" -> "ChineseGLUE/ChineseGLUE"
"dbiir/UER-py" -> "brightmart/roberta_zh"
"dbiir/UER-py" -> "CLUEbenchmark/CLUE"
"dbiir/UER-py" -> "brightmart/albert_zh"
"dbiir/UER-py" -> "ymcui/Chinese-BERT-wwm"
"dbiir/UER-py" -> "huawei-noah/Pretrained-Language-Model"
"dbiir/UER-py" -> "bojone/bert4keras"
"dbiir/UER-py" -> "loujie0822/DeepIE"
"dbiir/UER-py" -> "ChineseGLUE/ChineseGLUE"
"dbiir/UER-py" -> "PaddlePaddle/ERNIE"
"dbiir/UER-py" -> "brightmart/nlp_chinese_corpus"
"dbiir/UER-py" -> "ymcui/Chinese-ELECTRA"
"dbiir/UER-py" -> "airaria/TextBrewer"
"dbiir/UER-py" -> "ZhuiyiTechnology/pretrained-models"
"dbiir/UER-py" -> "princeton-nlp/SimCSE"
"dbiir/UER-py" -> "425776024/nlpcda"
"juand-r/entity-recognition-datasets" -> "davidsbatista/NER-datasets" ["e"=1]
"juand-r/entity-recognition-datasets" -> "kamalkraj/BERT-NER"
"juand-r/entity-recognition-datasets" -> "kyzhouhzau/BERT-NER"
"juand-r/entity-recognition-datasets" -> "chakki-works/seqeval"
"juand-r/entity-recognition-datasets" -> "jiesutd/NCRFpp"
"juand-r/entity-recognition-datasets" -> "pfliu-nlp/Named-Entity-Recognition-NER-Papers"
"juand-r/entity-recognition-datasets" -> "roomylee/awesome-relation-extraction" ["e"=1]
"juand-r/entity-recognition-datasets" -> "Hironsan/anago"
"juand-r/entity-recognition-datasets" -> "thunlp/Few-NERD"
"juand-r/entity-recognition-datasets" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"juand-r/entity-recognition-datasets" -> "makcedward/nlpaug" ["e"=1]
"juand-r/entity-recognition-datasets" -> "shangjingbo1226/AutoNER"
"juand-r/entity-recognition-datasets" -> "davidsbatista/Annotated-Semantic-Relationships-Datasets" ["e"=1]
"juand-r/entity-recognition-datasets" -> "Franck-Dernoncourt/NeuroNER"
"juand-r/entity-recognition-datasets" -> "flairNLP/flair" ["e"=1]
"nlplab/brat" -> "jiesutd/YEDDA"
"nlplab/brat" -> "deepwel/Chinese-Annotator"
"nlplab/brat" -> "doccano/doccano"
"nlplab/brat" -> "FXLP/MarkTool"
"nlplab/brat" -> "Franck-Dernoncourt/NeuroNER"
"nlplab/brat" -> "jiesutd/NCRFpp"
"nlplab/brat" -> "inception-project/inception" ["e"=1]
"nlplab/brat" -> "machinalis/iepy" ["e"=1]
"nlplab/brat" -> "thunlp/OpenNRE"
"nlplab/brat" -> "synyi/poplar"
"nlplab/brat" -> "crownpku/Information-Extraction-Chinese"
"nlplab/brat" -> "macanv/BERT-BiLSTM-CRF-NER"
"nlplab/brat" -> "loujie0822/DeepIE"
"nlplab/brat" -> "davidsbatista/Annotated-Semantic-Relationships-Datasets" ["e"=1]
"nlplab/brat" -> "juand-r/entity-recognition-datasets"
"garychowcmu/daizhigev20" -> "Ethan-yt/guwenbert"
"garychowcmu/daizhigev20" -> "jiaeyan/Jiayan"
"garychowcmu/daizhigev20" -> "NiuTrans/Classical-Modern"
"garychowcmu/daizhigev20" -> "mahavivo/scripta-sinica"
"garychowcmu/daizhigev20" -> "Ethan-yt/guwen-models"
"garychowcmu/daizhigev20" -> "BangBOOM/Classical-Chinese"
"garychowcmu/daizhigev20" -> "hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing"
"garychowcmu/daizhigev20" -> "Werneror/Poetry"
"garychowcmu/daizhigev20" -> "Xunzi-LLM-of-Chinese-classics/XunziALLM"
"garychowcmu/daizhigev20" -> "rime-aca/corpus"
"garychowcmu/daizhigev20" -> "JiangYanting/Pre-modern_Chinese_corpus_dataset"
"garychowcmu/daizhigev20" -> "Ethan-yt/CCLUE"
"garychowcmu/daizhigev20" -> "xiaopangxia/TCM-Ancient-Books" ["e"=1]
"garychowcmu/daizhigev20" -> "jizijing/C-CLUE"
"garychowcmu/daizhigev20" -> "hsc748NLP/code-for-digital-humanities-tutorial"
"InsaneLife/ChineseNLPCorpus" -> "CLUEbenchmark/CLUEDatasetSearch"
"InsaneLife/ChineseNLPCorpus" -> "brightmart/nlp_chinese_corpus"
"InsaneLife/ChineseNLPCorpus" -> "CLUEbenchmark/CLUE"
"InsaneLife/ChineseNLPCorpus" -> "SophonPlus/ChineseNlpCorpus"
"InsaneLife/ChineseNLPCorpus" -> "ymcui/Chinese-BERT-wwm"
"InsaneLife/ChineseNLPCorpus" -> "brightmart/albert_zh"
"InsaneLife/ChineseNLPCorpus" -> "Embedding/Chinese-Word-Vectors"
"InsaneLife/ChineseNLPCorpus" -> "brightmart/roberta_zh"
"InsaneLife/ChineseNLPCorpus" -> "crownpku/Awesome-Chinese-NLP"
"InsaneLife/ChineseNLPCorpus" -> "macanv/BERT-BiLSTM-CRF-NER"
"InsaneLife/ChineseNLPCorpus" -> "ChineseGLUE/ChineseGLUE"
"InsaneLife/ChineseNLPCorpus" -> "zhpmatrix/nlp-competitions-list-review"
"InsaneLife/ChineseNLPCorpus" -> "bojone/bert4keras"
"InsaneLife/ChineseNLPCorpus" -> "shibing624/pycorrector"
"InsaneLife/ChineseNLPCorpus" -> "codemayq/chinese-chatbot-corpus"
"manderous/TextClassification-MeiTuan-FeatureExtraction-Classifier" -> "shibing624/text-feature"
"manderous/TextClassification-MeiTuan-FeatureExtraction-Classifier" -> "gekelly/JD-Comment_emotional-analysis"
"duoergun0729/nlp" -> "crownpku/Awesome-Chinese-NLP"
"duoergun0729/nlp" -> "FudanNLP/nlp-beginner"
"duoergun0729/nlp" -> "NLP-LOVE/ML-NLP" ["e"=1]
"duoergun0729/nlp" -> "NLP-LOVE/Introduction-NLP"
"duoergun0729/nlp" -> "brightmart/nlp_chinese_corpus"
"duoergun0729/nlp" -> "msgi/nlp-journey"
"duoergun0729/nlp" -> "graykode/nlp-tutorial" ["e"=1]
"duoergun0729/nlp" -> "songyingxin/NLPer-Interview"
"duoergun0729/nlp" -> "zhpmatrix/nlp-competitions-list-review"
"duoergun0729/nlp" -> "SophonPlus/ChineseNlpCorpus"
"duoergun0729/nlp" -> "Roshanson/TextInfoExp"
"duoergun0729/nlp" -> "DA-southampton/NLP_ability"
"duoergun0729/nlp" -> "Embedding/Chinese-Word-Vectors"
"duoergun0729/nlp" -> "ownthink/Jiagu"
"duoergun0729/nlp" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"km1994/nlp_paper_study" -> "km1994/NLP-Interview-Notes"
"km1994/nlp_paper_study" -> "DA-southampton/NLP_ability"
"km1994/nlp_paper_study" -> "TingFree/NLPer-Arsenal"
"km1994/nlp_paper_study" -> "songyingxin/NLPer-Interview"
"km1994/nlp_paper_study" -> "loujie0822/DeepIE"
"km1994/nlp_paper_study" -> "zhpmatrix/nlp-competitions-list-review"
"km1994/nlp_paper_study" -> "leerumor/nlp_tutorial"
"km1994/nlp_paper_study" -> "ymcui/Chinese-BERT-wwm"
"km1994/nlp_paper_study" -> "FudanNLP/nlp-beginner"
"km1994/nlp_paper_study" -> "CLUEbenchmark/CLUE"
"km1994/nlp_paper_study" -> "bojone/bert4keras"
"km1994/nlp_paper_study" -> "lonePatient/BERT-NER-Pytorch"
"km1994/nlp_paper_study" -> "DengBoCong/nlp-paper"
"km1994/nlp_paper_study" -> "MLNLP-World/Top-AI-Conferences-Paper-with-Code"
"km1994/nlp_paper_study" -> "CLUEbenchmark/CLUEDatasetSearch"
"Embedding/Chinese-Word-Vectors" -> "ymcui/Chinese-BERT-wwm"
"Embedding/Chinese-Word-Vectors" -> "brightmart/nlp_chinese_corpus"
"Embedding/Chinese-Word-Vectors" -> "brightmart/text_classification"
"Embedding/Chinese-Word-Vectors" -> "crownpku/Awesome-Chinese-NLP"
"Embedding/Chinese-Word-Vectors" -> "SophonPlus/ChineseNlpCorpus"
"Embedding/Chinese-Word-Vectors" -> "649453932/Chinese-Text-Classification-Pytorch"
"Embedding/Chinese-Word-Vectors" -> "jina-ai/clip-as-service" ["e"=1]
"Embedding/Chinese-Word-Vectors" -> "brightmart/albert_zh"
"Embedding/Chinese-Word-Vectors" -> "PaddlePaddle/ERNIE"
"Embedding/Chinese-Word-Vectors" -> "google-research/bert" ["e"=1]
"Embedding/Chinese-Word-Vectors" -> "macanv/BERT-BiLSTM-CRF-NER"
"Embedding/Chinese-Word-Vectors" -> "CLUEbenchmark/CLUE"
"Embedding/Chinese-Word-Vectors" -> "InsaneLife/ChineseNLPCorpus"
"Embedding/Chinese-Word-Vectors" -> "bojone/bert4keras"
"Embedding/Chinese-Word-Vectors" -> "fxsjy/jieba"
"SophonPlus/ChineseNlpCorpus" -> "brightmart/nlp_chinese_corpus"
"SophonPlus/ChineseNlpCorpus" -> "InsaneLife/ChineseNLPCorpus"
"SophonPlus/ChineseNlpCorpus" -> "ymcui/Chinese-BERT-wwm"
"SophonPlus/ChineseNlpCorpus" -> "Embedding/Chinese-Word-Vectors"
"SophonPlus/ChineseNlpCorpus" -> "CLUEbenchmark/CLUEDatasetSearch"
"SophonPlus/ChineseNlpCorpus" -> "crownpku/Awesome-Chinese-NLP"
"SophonPlus/ChineseNlpCorpus" -> "brightmart/albert_zh"
"SophonPlus/ChineseNlpCorpus" -> "CLUEbenchmark/CLUE"
"SophonPlus/ChineseNlpCorpus" -> "macanv/BERT-BiLSTM-CRF-NER"
"SophonPlus/ChineseNlpCorpus" -> "codemayq/chinese-chatbot-corpus"
"SophonPlus/ChineseNlpCorpus" -> "bojone/bert4keras"
"SophonPlus/ChineseNlpCorpus" -> "PaddlePaddle/ERNIE"
"SophonPlus/ChineseNlpCorpus" -> "brightmart/roberta_zh"
"SophonPlus/ChineseNlpCorpus" -> "brightmart/text_classification"
"SophonPlus/ChineseNlpCorpus" -> "649453932/Chinese-Text-Classification-Pytorch"
"codemayq/chinese-chatbot-corpus" -> "candlewill/Dialog_Corpus" ["e"=1]
"codemayq/chinese-chatbot-corpus" -> "yangjianxin1/GPT2-chitchat"
"codemayq/chinese-chatbot-corpus" -> "brightmart/nlp_chinese_corpus"
"codemayq/chinese-chatbot-corpus" -> "thu-coai/CDial-GPT"
"codemayq/chinese-chatbot-corpus" -> "zhaoyingjun/chatbot" ["e"=1]
"codemayq/chinese-chatbot-corpus" -> "InsaneLife/ChineseNLPCorpus"
"codemayq/chinese-chatbot-corpus" -> "CLUEbenchmark/CLUE"
"codemayq/chinese-chatbot-corpus" -> "brightmart/albert_zh"
"codemayq/chinese-chatbot-corpus" -> "SophonPlus/ChineseNlpCorpus"
"codemayq/chinese-chatbot-corpus" -> "ymcui/Chinese-BERT-wwm"
"codemayq/chinese-chatbot-corpus" -> "Embedding/Chinese-Word-Vectors"
"codemayq/chinese-chatbot-corpus" -> "Morizeyao/GPT2-Chinese"
"codemayq/chinese-chatbot-corpus" -> "lcdevelop/ChatBotCourse" ["e"=1]
"codemayq/chinese-chatbot-corpus" -> "CLUEbenchmark/CLUEDatasetSearch"
"codemayq/chinese-chatbot-corpus" -> "crownpku/Awesome-Chinese-NLP"
"zibuyu/research_tao" -> "FudanNLP/nlp-beginner"
"zibuyu/research_tao" -> "songyingxin/NLPer-Interview"
"zibuyu/research_tao" -> "songyingxin/TextClassification"
"zibuyu/research_tao" -> "crownpku/Awesome-Chinese-NLP"
"zibuyu/research_tao" -> "zhpmatrix/nlp-competitions-list-review"
"zibuyu/research_tao" -> "thunlp/PLMpapers"
"zibuyu/research_tao" -> "km1994/nlp_paper_study"
"zibuyu/research_tao" -> "didi/ChineseNLP"
"zibuyu/research_tao" -> "msgi/nlp-journey"
"zibuyu/research_tao" -> "thunlp/ERNIE"
"zibuyu/research_tao" -> "thunlp/NREPapers" ["e"=1]
"zibuyu/research_tao" -> "brightmart/albert_zh"
"zibuyu/research_tao" -> "brightmart/nlp_chinese_corpus"
"zibuyu/research_tao" -> "ymcui/Chinese-BERT-wwm"
"zibuyu/research_tao" -> "fastnlp/fastNLP"
"shibing624/pycorrector" -> "ymcui/Chinese-BERT-wwm"
"shibing624/pycorrector" -> "brightmart/nlp_chinese_corpus"
"shibing624/pycorrector" -> "brightmart/albert_zh"
"shibing624/pycorrector" -> "iqiyi/FASPell"
"shibing624/pycorrector" -> "bojone/bert4keras"
"shibing624/pycorrector" -> "CLUEbenchmark/CLUE"
"shibing624/pycorrector" -> "Embedding/Chinese-Word-Vectors"
"shibing624/pycorrector" -> "InsaneLife/ChineseNLPCorpus"
"shibing624/pycorrector" -> "macanv/BERT-BiLSTM-CRF-NER"
"shibing624/pycorrector" -> "kpu/kenlm" ["e"=1]
"shibing624/pycorrector" -> "LianjiaTech/BELLE" ["e"=1]
"shibing624/pycorrector" -> "PaddlePaddle/ERNIE"
"shibing624/pycorrector" -> "dbiir/UER-py"
"shibing624/pycorrector" -> "dongrixinyu/JioNLP"
"shibing624/pycorrector" -> "CLUEbenchmark/CLUEDatasetSearch"
"bojone/keras_lookahead" -> "CyberZHG/keras-lookahead"
"bojone/keras_lookahead" -> "CyberZHG/keras-radam"
"bojone/keras_lookahead" -> "bojone/keras_lazyoptimizer"
"bojone/keras_lookahead" -> "bojone/keras_radam"
"bojone/keras_lookahead" -> "titu1994/keras-adabound"
"bojone/keras_lookahead" -> "titu1994/keras_rectified_adam"
"DQinYuan/chinese_province_city_area_mapper" -> "shibing624/addressparser"
"DQinYuan/chinese_province_city_area_mapper" -> "Vonng/adcode"
"DQinYuan/chinese_province_city_area_mapper" -> "dongrixinyu/JioNLP"
"DQinYuan/chinese_province_city_area_mapper" -> "bitlap/geocoding"
"DQinYuan/chinese_province_city_area_mapper" -> "lancopku/pkuseg-python"
"DQinYuan/chinese_province_city_area_mapper" -> "blmoistawinde/HarvestText"
"DQinYuan/chinese_province_city_area_mapper" -> "shibing624/pycorrector"
"DQinYuan/chinese_province_city_area_mapper" -> "fighting41love/cocoNLP"
"DQinYuan/chinese_province_city_area_mapper" -> "hankcs/pyhanlp"
"DQinYuan/chinese_province_city_area_mapper" -> "yongzhuo/nlp_xiaojiang"
"DQinYuan/chinese_province_city_area_mapper" -> "letiantian/TextRank4ZH"
"DQinYuan/chinese_province_city_area_mapper" -> "baidu/lac"
"DQinYuan/chinese_province_city_area_mapper" -> "GeneralNewsExtractor/GeneralNewsExtractor" ["e"=1]
"DQinYuan/chinese_province_city_area_mapper" -> "liuzhibin-cn/address-semantic-search"
"DQinYuan/chinese_province_city_area_mapper" -> "BrikerMan/Kashgari"
"yu4u/mixup-generator" -> "yu4u/cutout-random-erasing"
"yu4u/mixup-generator" -> "hongyi-zhang/mixup" ["e"=1]
"yu4u/mixup-generator" -> "unsky/mixup"
"yu4u/mixup-generator" -> "surmenok/keras_lr_finder"
"yu4u/mixup-generator" -> "titu1994/keras-one-cycle"
"zhaoyu18/quora_question_pairs" -> "YuriyGuts/kaggle-quora-question-pairs"
"zhaoyu18/quora_question_pairs" -> "Wrosinski/Kaggle-Quora"
"zhaoyu18/quora_question_pairs" -> "aerdem4/kaggle-quora-dup"
"chenyuntc/PyTorchText" -> "Magic-Bubble/Zhihu"
"chenyuntc/PyTorchText" -> "yongyehuang/zhihu-text-classification"
"chenyuntc/PyTorchText" -> "brightmart/text_classification"
"chenyuntc/PyTorchText" -> "HouJP/kaggle-quora-question-pairs"
"chenyuntc/PyTorchText" -> "NTMC-Community/MatchZoo"
"chenyuntc/PyTorchText" -> "chenghuige/wenzheng"
"chenyuntc/PyTorchText" -> "brightmart/bert_language_understanding"
"chenyuntc/PyTorchText" -> "ChenglongChen/tensorflow-DeepFM" ["e"=1]
"chenyuntc/PyTorchText" -> "zhpmatrix/nlp-competitions-list-review"
"chenyuntc/PyTorchText" -> "richliao/textClassifier" ["e"=1]
"chenyuntc/PyTorchText" -> "YouChouNoBB/ijcai-18-top2-single-mole-solution" ["e"=1]
"chenyuntc/PyTorchText" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"chenyuntc/PyTorchText" -> "allenai/bilm-tf" ["e"=1]
"chenyuntc/PyTorchText" -> "Embedding/Chinese-Word-Vectors"
"chenyuntc/PyTorchText" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"lancopku/pkuseg-python" -> "Embedding/Chinese-Word-Vectors"
"lancopku/pkuseg-python" -> "brightmart/nlp_chinese_corpus"
"lancopku/pkuseg-python" -> "crownpku/Awesome-Chinese-NLP"
"lancopku/pkuseg-python" -> "thunlp/THULAC-Python"
"lancopku/pkuseg-python" -> "ymcui/Chinese-BERT-wwm"
"lancopku/pkuseg-python" -> "HIT-SCIR/ltp"
"lancopku/pkuseg-python" -> "brightmart/albert_zh"
"lancopku/pkuseg-python" -> "PaddlePaddle/ERNIE"
"lancopku/pkuseg-python" -> "fxsjy/jieba"
"lancopku/pkuseg-python" -> "isnowfy/snownlp"
"lancopku/pkuseg-python" -> "hankcs/pyhanlp"
"lancopku/pkuseg-python" -> "macanv/BERT-BiLSTM-CRF-NER"
"lancopku/pkuseg-python" -> "baidu/lac"
"lancopku/pkuseg-python" -> "chatopera/Synonyms"
"lancopku/pkuseg-python" -> "ownthink/Jiagu"
"smoothnlp/FinancialDatasets" -> "smoothnlp/SmoothNLP"
"smoothnlp/FinancialDatasets" -> "valuesimplex/FinBERT"
"smoothnlp/FinancialDatasets" -> "icoxfog417/awesome-financial-nlp"
"smoothnlp/FinancialDatasets" -> "A-Rain/BDCI2019-Negative_Finance_Info_Judge"
"smoothnlp/FinancialDatasets" -> "supersymmetry-technologies/BBT-FinCUGE-Applications" ["e"=1]
"smoothnlp/FinancialDatasets" -> "quincyliang/nlp-data-augmentation"
"smoothnlp/FinancialDatasets" -> "Coldog2333/Financial-NLP" ["e"=1]
"smoothnlp/FinancialDatasets" -> "FudanDISC/DISC-FinLLM" ["e"=1]
"smoothnlp/FinancialDatasets" -> "ZhuiyiTechnology/pretrained-models"
"smoothnlp/FinancialDatasets" -> "ChineseGLUE/ChineseGLUE"
"smoothnlp/FinancialDatasets" -> "wwwxmu/Dataset-of-financial-news-sentiment-classification"
"smoothnlp/FinancialDatasets" -> "xiong666/ccf_financial_negative"
"smoothnlp/FinancialDatasets" -> "wainshine/Company-Names-Corpus"
"smoothnlp/FinancialDatasets" -> "startprogress/China_stock_announcement" ["e"=1]
"smoothnlp/FinancialDatasets" -> "z814081807/DeepNER"
"lyeoni/nlp-tutorial" -> "graykode/nlp-tutorial" ["e"=1]
"lyeoni/nlp-tutorial" -> "delip/PyTorchNLPBook" ["e"=1]
"lyeoni/nlp-tutorial" -> "zhpmatrix/nlp-competitions-list-review"
"lyeoni/nlp-tutorial" -> "thunlp/PLMpapers"
"lyeoni/nlp-tutorial" -> "mesolitica/NLP-Models-Tensorflow"
"lyeoni/nlp-tutorial" -> "changwookjun/nlp-paper"
"lyeoni/nlp-tutorial" -> "msgi/nlp-journey"
"lyeoni/nlp-tutorial" -> "Jiakui/awesome-bert"
"lyeoni/nlp-tutorial" -> "songyingxin/NLPer-Interview"
"lyeoni/nlp-tutorial" -> "kk7nc/Text_Classification"
"lyeoni/nlp-tutorial" -> "DanAnastasyev/DeepNLP-Course" ["e"=1]
"lyeoni/nlp-tutorial" -> "spro/practical-pytorch" ["e"=1]
"lyeoni/nlp-tutorial" -> "Separius/awesome-sentence-embedding" ["e"=1]
"lyeoni/nlp-tutorial" -> "THUNLP-MT/MT-Reading-List" ["e"=1]
"lyeoni/nlp-tutorial" -> "jiangxinyang227/textClassifier"
"isnowfy/snownlp" -> "fxsjy/jieba"
"isnowfy/snownlp" -> "letiantian/TextRank4ZH"
"isnowfy/snownlp" -> "HIT-SCIR/ltp"
"isnowfy/snownlp" -> "crownpku/Awesome-Chinese-NLP"
"isnowfy/snownlp" -> "lancopku/pkuseg-python"
"isnowfy/snownlp" -> "thunlp/THULAC-Python"
"isnowfy/snownlp" -> "Embedding/Chinese-Word-Vectors"
"isnowfy/snownlp" -> "sloria/TextBlob" ["e"=1]
"isnowfy/snownlp" -> "hankcs/pyhanlp"
"isnowfy/snownlp" -> "brightmart/nlp_chinese_corpus"
"isnowfy/snownlp" -> "HIT-SCIR/pyltp"
"isnowfy/snownlp" -> "NLPIR-team/NLPIR"
"isnowfy/snownlp" -> "FudanNLP/fnlp"
"isnowfy/snownlp" -> "hankcs/HanLP"
"isnowfy/snownlp" -> "ymcui/Chinese-BERT-wwm"
"chatopera/Synonyms" -> "Embedding/Chinese-Word-Vectors"
"chatopera/Synonyms" -> "ymcui/Chinese-BERT-wwm"
"chatopera/Synonyms" -> "brightmart/nlp_chinese_corpus"
"chatopera/Synonyms" -> "crownpku/Awesome-Chinese-NLP"
"chatopera/Synonyms" -> "brightmart/albert_zh"
"chatopera/Synonyms" -> "NTMC-Community/MatchZoo"
"chatopera/Synonyms" -> "CLUEbenchmark/CLUE"
"chatopera/Synonyms" -> "brightmart/text_classification"
"chatopera/Synonyms" -> "HIT-SCIR/ltp"
"chatopera/Synonyms" -> "shibing624/pycorrector"
"chatopera/Synonyms" -> "lancopku/pkuseg-python"
"chatopera/Synonyms" -> "codemayq/chinese-chatbot-corpus"
"chatopera/Synonyms" -> "hankcs/pyhanlp"
"chatopera/Synonyms" -> "macanv/BERT-BiLSTM-CRF-NER"
"chatopera/Synonyms" -> "InsaneLife/ChineseNLPCorpus"
"Werneror/Poetry" -> "yxcs/poems-db"
"Werneror/Poetry" -> "caoxingyu/chinese-gushiwen"
"Werneror/Poetry" -> "NiuTrans/Classical-Modern"
"Werneror/Poetry" -> "nslogx/weapp-poem"
"Werneror/Poetry" -> "sheepzh/poetry" ["e"=1]
"Werneror/Poetry" -> "javayhu/poetry"
"Werneror/Poetry" -> "jiaeyan/Jiayan"
"Werneror/Poetry" -> "Kooooooma/chinese-poetry-mysql"
"Werneror/Poetry" -> "garychowcmu/daizhigev20"
"Werneror/Poetry" -> "chinese-poetry/huajianji"
"Werneror/Poetry" -> "wb14123/couplet-dataset"
"Werneror/Poetry" -> "michaelliao/shici"
"Werneror/Poetry" -> "pwxcoo/chinese-xinhua"
"Werneror/Poetry" -> "wangjiezju1988/aichpoem"
"Werneror/Poetry" -> "holynova/gushi_namer" ["e"=1]
"thunlp/OpenHowNet" -> "thunlp/SE-WRL" ["e"=1]
"thunlp/OpenHowNet" -> "yaleimeng/Final_word_Similarity"
"thunlp/OpenHowNet" -> "thunlp/SCPapers" ["e"=1]
"thunlp/OpenHowNet" -> "BiLiangLtd/WordSimilarity"
"thunlp/OpenHowNet" -> "liuhuanyong/ChineseEmbedding"
"thunlp/OpenHowNet" -> "thunlp/SE-WRL-SAT" ["e"=1]
"thunlp/OpenHowNet" -> "liuhuanyong/ChineseSemanticKB"
"thunlp/OpenHowNet" -> "thunlp/Chinese_NRE" ["e"=1]
"thunlp/OpenHowNet" -> "ChineseGLUE/ChineseGLUE"
"thunlp/OpenHowNet" -> "lancopku/Chinese-Literature-NER-RE-Dataset" ["e"=1]
"thunlp/OpenHowNet" -> "thunlp/ERNIE"
"thunlp/OpenHowNet" -> "CLUEbenchmark/CLUECorpus2020"
"thunlp/OpenHowNet" -> "fastnlp/fastNLP"
"thunlp/OpenHowNet" -> "v-mipeng/LexiconAugmentedNER"
"thunlp/OpenHowNet" -> "sinovation/ZEN"
"thunlp/ERNIE" -> "PaddlePaddle/ERNIE"
"thunlp/ERNIE" -> "zihangdai/xlnet" ["e"=1]
"thunlp/ERNIE" -> "autoliuweijie/K-BERT"
"thunlp/ERNIE" -> "namisan/mt-dnn"
"thunlp/ERNIE" -> "brightmart/roberta_zh"
"thunlp/ERNIE" -> "brightmart/albert_zh"
"thunlp/ERNIE" -> "nghuyong/ERNIE-Pytorch"
"thunlp/ERNIE" -> "ymcui/Chinese-XLNet"
"thunlp/ERNIE" -> "Jiakui/awesome-bert"
"thunlp/ERNIE" -> "thunlp/OpenCLaP"
"thunlp/ERNIE" -> "thunlp/OpenNRE"
"thunlp/ERNIE" -> "jiesutd/LatticeLSTM"
"thunlp/ERNIE" -> "allenai/bilm-tf" ["e"=1]
"thunlp/ERNIE" -> "thunlp/PLMpapers"
"thunlp/ERNIE" -> "kimiyoung/transformer-xl" ["e"=1]
"Choco31415/Attention_Network_With_Keras" -> "foamliu/Self-Attention-Keras"
"Choco31415/Attention_Network_With_Keras" -> "ningshixian/LSTM_Attention"
"Choco31415/Attention_Network_With_Keras" -> "datalogue/keras-attention"
"Choco31415/Attention_Network_With_Keras" -> "uhauha2929/examples" ["e"=1]
"Choco31415/Attention_Network_With_Keras" -> "philipperemy/keras-attention"
"tomohideshibata/BERT-related-papers" -> "thunlp/PLMpapers"
"tomohideshibata/BERT-related-papers" -> "namisan/mt-dnn"
"tomohideshibata/BERT-related-papers" -> "Jiakui/awesome-bert"
"tomohideshibata/BERT-related-papers" -> "google-research/electra"
"tomohideshibata/BERT-related-papers" -> "huggingface/awesome-papers" ["e"=1]
"tomohideshibata/BERT-related-papers" -> "thunlp/ERNIE"
"tomohideshibata/BERT-related-papers" -> "zihangdai/xlnet" ["e"=1]
"tomohideshibata/BERT-related-papers" -> "airaria/TextBrewer"
"tomohideshibata/BERT-related-papers" -> "facebookresearch/XLM" ["e"=1]
"tomohideshibata/BERT-related-papers" -> "Separius/awesome-sentence-embedding" ["e"=1]
"tomohideshibata/BERT-related-papers" -> "brightmart/albert_zh"
"tomohideshibata/BERT-related-papers" -> "dair-ai/nlp_paper_summaries" ["e"=1]
"tomohideshibata/BERT-related-papers" -> "allenai/allennlp" ["e"=1]
"tomohideshibata/BERT-related-papers" -> "nyu-mll/jiant" ["e"=1]
"tomohideshibata/BERT-related-papers" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"zlsdu/Word-Embedding" -> "yongzhuo/Keras-TextClassification"
"zlsdu/Word-Embedding" -> "msgi/nlp-journey"
"zlsdu/Word-Embedding" -> "zhaogaofeng611/TextMatch"
"zlsdu/Word-Embedding" -> "WenRichard/KBQA-BERT" ["e"=1]
"zlsdu/Word-Embedding" -> "terrifyzhao/bert-utils"
"zlsdu/Word-Embedding" -> "yongzhuo/nlp_xiaojiang"
"zlsdu/Word-Embedding" -> "terrifyzhao/text_matching"
"zlsdu/Word-Embedding" -> "zhpmatrix/nlp-competitions-list-review"
"zlsdu/Word-Embedding" -> "jiangxinyang227/textClassifier"
"zlsdu/Word-Embedding" -> "YingZhuY/GloVe_Chinese_word_embedding"
"zlsdu/Word-Embedding" -> "liuhuanyong/ChineseEmbedding"
"zlsdu/Word-Embedding" -> "bojone/lic2020_baselines" ["e"=1]
"zlsdu/Word-Embedding" -> "loujie0822/DeepIE"
"zlsdu/Word-Embedding" -> "brightmart/roberta_zh"
"zlsdu/Word-Embedding" -> "xmxoxo/BERT-train2deploy"
"coetaur0/ESIM" -> "lukecq1231/nli"
"coetaur0/ESIM" -> "pengshuang/Text-Similarity"
"coetaur0/ESIM" -> "pengming617/text_matching"
"coetaur0/ESIM" -> "HsiaoYetGun/ESIM"
"coetaur0/ESIM" -> "nyu-mll/multiNLI"
"coetaur0/ESIM" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"coetaur0/ESIM" -> "alibaba/esim-response-selection"
"coetaur0/ESIM" -> "lanwuwei/SPM_toolkit"
"coetaur0/ESIM" -> "zhaogaofeng611/TextMatch"
"coetaur0/ESIM" -> "cooelf/SemBERT" ["e"=1]
"coetaur0/ESIM" -> "YichenGong/Densely-Interactive-Inference-Network"
"coetaur0/ESIM" -> "NTMC-Community/MatchZoo-py"
"coetaur0/ESIM" -> "terrifyzhao/text_matching"
"coetaur0/ESIM" -> "BangLiu/ArticlePairMatching"
"fastnlp/fitlog" -> "fastnlp/fastNLP"
"fastnlp/fitlog" -> "NVIDIA/runx" ["e"=1]
"fastnlp/fitlog" -> "fastnlp/fastHan"
"fastnlp/fitlog" -> "wandb/wandb" ["e"=1]
"fastnlp/fitlog" -> "FudanNLP/nlp-beginner"
"fastnlp/fitlog" -> "yuchenlin/rebiber" ["e"=1]
"fastnlp/fitlog" -> "didi/ChineseNLP"
"fastnlp/fitlog" -> "zhpmatrix/nlp-competitions-list-review"
"fastnlp/fitlog" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"fastnlp/fitlog" -> "bighuang624/AI-research-tools" ["e"=1]
"fastnlp/fitlog" -> "dbiir/UER-py"
"fastnlp/fitlog" -> "lucasjinreal/alfred" ["e"=1]
"fastnlp/fitlog" -> "airaria/TextBrewer"
"fastnlp/fitlog" -> "txsun1997/LMaaS-Papers" ["e"=1]
"fastnlp/fitlog" -> "MLNLP-World/Paper-Writing-Tips" ["e"=1]
"xmmmmmovo/FaBao" -> "hecongqing/Legal-Charge-Prediction"
"LexPredict/lexpredict-lexnlp" -> "ICLRandD/Blackstone"
"LexPredict/lexpredict-lexnlp" -> "LexPredict/lexpredict-legal-dictionary"
"LexPredict/lexpredict-lexnlp" -> "LexPredict/lexpredict-contraxsuite"
"LexPredict/lexpredict-lexnlp" -> "Liquid-Legal-Institute/Legal-Text-Analytics"
"LexPredict/lexpredict-lexnlp" -> "freelawproject/eyecite"
"LexPredict/lexpredict-lexnlp" -> "maastrichtlawtech/awesome-legal-nlp"
"LexPredict/lexpredict-lexnlp" -> "LexPredict/openedgar" ["e"=1]
"LexPredict/lexpredict-lexnlp" -> "TheAtticusProject/cuad"
"LexPredict/lexpredict-lexnlp" -> "thunlp/LegalPapers"
"LexPredict/lexpredict-lexnlp" -> "coastalcph/lex-glue"
"LexPredict/lexpredict-lexnlp" -> "freelawproject/juriscraper"
"LexPredict/lexpredict-lexnlp" -> "HazyResearch/legalbench"
"LexPredict/lexpredict-lexnlp" -> "freelawproject/courtlistener"
"LexPredict/lexpredict-lexnlp" -> "Law-AI/summarization"
"LexPredict/lexpredict-lexnlp" -> "neelguha/legal-ml-datasets"
"Kooooooma/chinese-poetry-mysql" -> "nslogx/weapp-poem"
"Kooooooma/chinese-poetry-mysql" -> "chinese-poetry/chinese-poetry-zhCN"
"Kooooooma/chinese-poetry-mysql" -> "woodylan/chinese-poetry-to-mysql-tool"
"Kooooooma/chinese-poetry-mysql" -> "caoxingyu/chinese-gushiwen"
"Kooooooma/chinese-poetry-mysql" -> "yishui01/chinese-poetry-Mysql-Elastic"
"Kooooooma/chinese-poetry-mysql" -> "hxgdzyuyi/tang_poetry"
"Kooooooma/chinese-poetry-mysql" -> "yxcs/poems-db"
"Kooooooma/chinese-poetry-mysql" -> "Werneror/Poetry"
"Kooooooma/chinese-poetry-mysql" -> "hippieZhou/chinese-poetry-db"
"Kooooooma/chinese-poetry-mysql" -> "javayhu/poetry"
"ymcui/Chinese-XLNet" -> "brightmart/roberta_zh"
"ymcui/Chinese-XLNet" -> "brightmart/albert_zh"
"ymcui/Chinese-XLNet" -> "ymcui/Chinese-ELECTRA"
"ymcui/Chinese-XLNet" -> "zihangdai/xlnet" ["e"=1]
"ymcui/Chinese-XLNet" -> "ChineseGLUE/ChineseGLUE"
"ymcui/Chinese-XLNet" -> "ymcui/Chinese-BERT-wwm"
"ymcui/Chinese-XLNet" -> "brightmart/xlnet_zh"
"ymcui/Chinese-XLNet" -> "PaddlePaddle/ERNIE"
"ymcui/Chinese-XLNet" -> "yongzhuo/nlp_xiaojiang"
"ymcui/Chinese-XLNet" -> "dbiir/UER-py"
"ymcui/Chinese-XLNet" -> "thunlp/OpenCLaP"
"ymcui/Chinese-XLNet" -> "ZhuiyiTechnology/pretrained-models"
"ymcui/Chinese-XLNet" -> "macanv/BERT-BiLSTM-CRF-NER"
"ymcui/Chinese-XLNet" -> "Jiakui/awesome-bert"
"ymcui/Chinese-XLNet" -> "CLUEbenchmark/CLUE"
"budzianowski/PyTorch-Beam-Search-Decoding" -> "312shan/Pytorch-seq2seq-Beam-Search"
"budzianowski/PyTorch-Beam-Search-Decoding" -> "jojonki/BeamSearch"
"budzianowski/PyTorch-Beam-Search-Decoding" -> "ottokart/beam_search"
"budzianowski/PyTorch-Beam-Search-Decoding" -> "mjc92/CopyNet"
"budzianowski/PyTorch-Beam-Search-Decoding" -> "jarobyte91/pytorch_beam_search"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "649453932/Chinese-Text-Classification-Pytorch"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "ymcui/Chinese-BERT-wwm"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "yongzhuo/Keras-TextClassification"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "lonePatient/BERT-NER-Pytorch"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "Embedding/Chinese-Word-Vectors"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "brightmart/roberta_zh"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "bojone/bert4keras"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "CLUEbenchmark/CLUE"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "brightmart/albert_zh"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "macanv/BERT-BiLSTM-CRF-NER"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "CLUEbenchmark/CLUEDatasetSearch"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "brightmart/text_classification"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "DA-southampton/NLP_ability"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "terrifyzhao/bert-utils"
"649453932/Bert-Chinese-Text-Classification-Pytorch" -> "songyingxin/Bert-TextClassification"
"Anfany/Machine-Learning-for-Beginner-by-Python3" -> "sujeek/chinese_nlp"
"Anfany/Machine-Learning-for-Beginner-by-Python3" -> "hczheng/Rong360" ["e"=1]
"PaddlePaddle/ERNIE" -> "ymcui/Chinese-BERT-wwm"
"PaddlePaddle/ERNIE" -> "brightmart/albert_zh"
"PaddlePaddle/ERNIE" -> "zihangdai/xlnet" ["e"=1]
"PaddlePaddle/ERNIE" -> "brightmart/nlp_chinese_corpus"
"PaddlePaddle/ERNIE" -> "Embedding/Chinese-Word-Vectors"
"PaddlePaddle/ERNIE" -> "macanv/BERT-BiLSTM-CRF-NER"
"PaddlePaddle/ERNIE" -> "brightmart/roberta_zh"
"PaddlePaddle/ERNIE" -> "CLUEbenchmark/CLUE"
"PaddlePaddle/ERNIE" -> "jina-ai/clip-as-service" ["e"=1]
"PaddlePaddle/ERNIE" -> "PaddlePaddle/models" ["e"=1]
"PaddlePaddle/ERNIE" -> "thunlp/ERNIE"
"PaddlePaddle/ERNIE" -> "bojone/bert4keras"
"PaddlePaddle/ERNIE" -> "dbiir/UER-py"
"PaddlePaddle/ERNIE" -> "ymcui/Chinese-XLNet"
"PaddlePaddle/ERNIE" -> "brightmart/text_classification"
"gaussic/text-classification-cnn-rnn" -> "brightmart/text_classification"
"gaussic/text-classification-cnn-rnn" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"gaussic/text-classification-cnn-rnn" -> "Embedding/Chinese-Word-Vectors"
"gaussic/text-classification-cnn-rnn" -> "649453932/Chinese-Text-Classification-Pytorch"
"gaussic/text-classification-cnn-rnn" -> "macanv/BERT-BiLSTM-CRF-NER"
"gaussic/text-classification-cnn-rnn" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"gaussic/text-classification-cnn-rnn" -> "brightmart/nlp_chinese_corpus"
"gaussic/text-classification-cnn-rnn" -> "ymcui/Chinese-BERT-wwm"
"gaussic/text-classification-cnn-rnn" -> "crownpku/Awesome-Chinese-NLP"
"gaussic/text-classification-cnn-rnn" -> "yongzhuo/Keras-TextClassification"
"gaussic/text-classification-cnn-rnn" -> "brightmart/albert_zh"
"gaussic/text-classification-cnn-rnn" -> "Determined22/zh-NER-TF"
"gaussic/text-classification-cnn-rnn" -> "SophonPlus/ChineseNlpCorpus"
"gaussic/text-classification-cnn-rnn" -> "cjymz886/text-cnn" ["e"=1]
"gaussic/text-classification-cnn-rnn" -> "jina-ai/clip-as-service" ["e"=1]
"catqaq/OpenTextClassification" -> "catqaq/NLP-Notes"
"catqaq/OpenTextClassification" -> "OpenLLMAI/OpenLLMWiki"
"songyingxin/Bert-TextClassification" -> "songyingxin/TextClassification"
"songyingxin/Bert-TextClassification" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"songyingxin/Bert-TextClassification" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"songyingxin/Bert-TextClassification" -> "yaleimeng/TextClassify_with_BERT"
"songyingxin/Bert-TextClassification" -> "yongzhuo/Keras-TextClassification"
"songyingxin/Bert-TextClassification" -> "zhanlaoban/Transformers_for_Text_Classification"
"songyingxin/Bert-TextClassification" -> "NLPScott/bert-Chinese-classification-task"
"songyingxin/Bert-TextClassification" -> "yongzhuo/nlp_xiaojiang"
"songyingxin/Bert-TextClassification" -> "zhanlaoban/EDA_NLP_for_Chinese"
"songyingxin/Bert-TextClassification" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"songyingxin/Bert-TextClassification" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"songyingxin/Bert-TextClassification" -> "terrifyzhao/bert-utils"
"songyingxin/Bert-TextClassification" -> "renxingkai/BERT_Chinese_Classification" ["e"=1]
"songyingxin/Bert-TextClassification" -> "songyingxin/NLPer-Interview"
"songyingxin/Bert-TextClassification" -> "Jiakui/awesome-bert"
"namisan/mt-dnn" -> "zihangdai/xlnet" ["e"=1]
"namisan/mt-dnn" -> "thunlp/ERNIE"
"namisan/mt-dnn" -> "facebookresearch/XLM" ["e"=1]
"namisan/mt-dnn" -> "nyu-mll/jiant" ["e"=1]
"namisan/mt-dnn" -> "kimiyoung/transformer-xl" ["e"=1]
"namisan/mt-dnn" -> "huawei-noah/Pretrained-Language-Model"
"namisan/mt-dnn" -> "PaddlePaddle/ERNIE"
"namisan/mt-dnn" -> "princeton-nlp/SimCSE"
"namisan/mt-dnn" -> "allenai/allennlp" ["e"=1]
"namisan/mt-dnn" -> "brightmart/roberta_zh"
"namisan/mt-dnn" -> "google-research/electra"
"namisan/mt-dnn" -> "brightmart/albert_zh"
"namisan/mt-dnn" -> "allenai/bilm-tf" ["e"=1]
"namisan/mt-dnn" -> "tomohideshibata/BERT-related-papers"
"namisan/mt-dnn" -> "ymcui/Chinese-XLNet"
"PrashantRanjan09/Elmo-Tutorial" -> "PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec"
"PrashantRanjan09/Elmo-Tutorial" -> "strongio/keras-elmo"
"PrashantRanjan09/Elmo-Tutorial" -> "UKPLab/elmo-bilstm-cnn-crf"
"PrashantRanjan09/Elmo-Tutorial" -> "JHart96/keras_elmo_embedding_layer"
"google-research-datasets/gap-coreference" -> "kentonl/e2e-coref"
"google-research-datasets/gap-coreference" -> "mandarjoshi90/coref"
"google-research-datasets/gap-coreference" -> "shayneobrien/coreference-resolution"
"google-research-datasets/gap-coreference" -> "clarkkev/deep-coref"
"google-research-datasets/gap-coreference" -> "sattree/gap"
"google-research-datasets/gap-coreference" -> "ShannonAI/CorefQA"
"google-research-datasets/gap-coreference" -> "bkntr/coref-ee"
"ThoughtRiver/lmdb-embeddings" -> "kermitt2/delft"
"thunlp/OpenCLaP" -> "china-ai-law-challenge/CAIL2019"
"thunlp/OpenCLaP" -> "GuidoPaul/CAIL2019"
"thunlp/OpenCLaP" -> "thunlp/LegalPapers"
"thunlp/OpenCLaP" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"thunlp/OpenCLaP" -> "ymcui/Chinese-XLNet"
"thunlp/OpenCLaP" -> "brightmart/roberta_zh"
"thunlp/OpenCLaP" -> "thunlp/CAIL"
"thunlp/OpenCLaP" -> "padeoe/cail2019"
"thunlp/OpenCLaP" -> "thunlp/TopJudge"
"thunlp/OpenCLaP" -> "ymcui/Chinese-ELECTRA"
"thunlp/OpenCLaP" -> "liuhuanyong/CrimeKgAssitant"
"thunlp/OpenCLaP" -> "thunlp/ERNIE"
"thunlp/OpenCLaP" -> "thunlp/attribute_charge"
"thunlp/OpenCLaP" -> "brightmart/albert_zh"
"thunlp/OpenCLaP" -> "thunlp/LegalPLMs"
"evilbear/emr-ner" -> "JNhua/Chinese_NER_with_Attention"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "ZhixiuYe/HSCRF-pytorch"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "jiesutd/NCRFpp"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "Hironsan/anago"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "guillaumegenthial/sequence_tagging"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "ZhixiuYe/NER-pytorch"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "glample/tagger"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "XuezheMax/NeuroNLP2" ["e"=1]
"LiyuanLucasLiu/LM-LSTM-CRF" -> "liu-nlper/NER-LSTM-CRF"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "shangjingbo1226/AutoNER"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "jiesutd/LatticeLSTM"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "Franck-Dernoncourt/NeuroNER"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "zjy-ucas/ChineseNER"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "threelittlemonkeys/lstm-crf-pytorch"
"LiyuanLucasLiu/LM-LSTM-CRF" -> "liu-nlper/SLTK"
"dasmith/stanford-corenlp-python" -> "smilli/py-corenlp"
"dasmith/stanford-corenlp-python" -> "Wordseer/stanford-corenlp-python"
"dasmith/stanford-corenlp-python" -> "brendano/stanford_corenlp_pywrapper"
"dasmith/stanford-corenlp-python" -> "npow/MemNN" ["e"=1]
"dasmith/stanford-corenlp-python" -> "facebookarchive/NAMAS" ["e"=1]
"google/pygtrie" -> "pytries/marisa-trie"
"google/pygtrie" -> "pytries/datrie"
"google/pygtrie" -> "WojciechMula/pyahocorasick"
"google/pygtrie" -> "abusix/ahocorapy"
"google/pygtrie" -> "taku910/crfpp"
"google/pygtrie" -> "clab/fast_align" ["e"=1]
"Vonng/adcode" -> "DQinYuan/chinese_province_city_area_mapper"
"chujiezheng/ChID-Dataset" -> "ewrfcas/bert_cn_finetune"
"chujiezheng/ChID-Dataset" -> "VisualJoyce/ChengyuBERT"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "aceimnorstuvwxz/toutiao-multilevel-text-classfication-dataset"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "InsaneLife/ChineseNLPCorpus"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "CLUEbenchmark/CLUEDatasetSearch"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "ChineseGLUE/ChineseGLUE"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "OYE93/Chinese-NLP-Corpus"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "rainarch/SentiBridge"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "terrifyzhao/bert-utils"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "Roshanson/TextInfoExp"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "ProHiryu/bert-chinese-ner"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "SophonPlus/ChineseNlpCorpus"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "brightmart/nlp_chinese_corpus"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "CLUEbenchmark/CLUE"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "IAdmireu/ChineseSTS"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "yongzhuo/Keras-TextClassification"
"aceimnorstuvwxz/toutiao-text-classfication-dataset" -> "NLPScott/bert-Chinese-classification-task"
"scrapinghub/python-crfsuite" -> "chokkan/crfsuite"
"scrapinghub/python-crfsuite" -> "TeamHG-Memex/sklearn-crfsuite"
"scrapinghub/python-crfsuite" -> "timvieira/crf"
"scrapinghub/python-crfsuite" -> "pystruct/pystruct"
"scrapinghub/python-crfsuite" -> "Hironsan/anago"
"scrapinghub/python-crfsuite" -> "guillaumegenthial/sequence_tagging"
"scrapinghub/python-crfsuite" -> "aleju/ner-crf"
"scrapinghub/python-crfsuite" -> "glample/tagger"
"scrapinghub/python-crfsuite" -> "taku910/crfpp"
"scrapinghub/python-crfsuite" -> "chilynn/sequence-labeling"
"scrapinghub/python-crfsuite" -> "jiesutd/NCRFpp"
"scrapinghub/python-crfsuite" -> "larsmans/seqlearn"
"scrapinghub/python-crfsuite" -> "Franck-Dernoncourt/NeuroNER"
"scrapinghub/python-crfsuite" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"scrapinghub/python-crfsuite" -> "chakki-works/seqeval"
"threelittlemonkeys/lstm-crf-pytorch" -> "kmkurn/pytorch-crf"
"threelittlemonkeys/lstm-crf-pytorch" -> "allanj/pytorch_neural_crf"
"threelittlemonkeys/lstm-crf-pytorch" -> "ZhixiuYe/NER-pytorch"
"threelittlemonkeys/lstm-crf-pytorch" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"threelittlemonkeys/lstm-crf-pytorch" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"threelittlemonkeys/lstm-crf-pytorch" -> "kaniblu/pytorch-bilstmcrf"
"threelittlemonkeys/lstm-crf-pytorch" -> "jidasheng/bi-lstm-crf"
"threelittlemonkeys/lstm-crf-pytorch" -> "sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling"
"threelittlemonkeys/lstm-crf-pytorch" -> "ZhixiuYe/HSCRF-pytorch"
"threelittlemonkeys/lstm-crf-pytorch" -> "mali19064/LSTM-CRF-pytorch-faster"
"threelittlemonkeys/lstm-crf-pytorch" -> "yanwii/ChinsesNER-pytorch"
"threelittlemonkeys/lstm-crf-pytorch" -> "Nealcly/BiLSTM-LAN"
"threelittlemonkeys/lstm-crf-pytorch" -> "jiesutd/LatticeLSTM"
"threelittlemonkeys/lstm-crf-pytorch" -> "jiesutd/NCRFpp"
"threelittlemonkeys/lstm-crf-pytorch" -> "lonePatient/BiLSTM-CRF-NER-PyTorch"
"bitlap/geocoding" -> "liuzhibin-cn/address-semantic-search"
"bitlap/geocoding" -> "fjklqq/Geocoding"
"bitlap/geocoding" -> "yihenglu/chinese-address-segment"
"zhpmatrix/nlp-competitions-list-review" -> "TingFree/NLPer-Arsenal"
"zhpmatrix/nlp-competitions-list-review" -> "songyingxin/NLPer-Interview"
"zhpmatrix/nlp-competitions-list-review" -> "km1994/nlp_paper_study"
"zhpmatrix/nlp-competitions-list-review" -> "brightmart/albert_zh"
"zhpmatrix/nlp-competitions-list-review" -> "geekinglcq/CDCS"
"zhpmatrix/nlp-competitions-list-review" -> "loujie0822/DeepIE"
"zhpmatrix/nlp-competitions-list-review" -> "bojone/bert4keras"
"zhpmatrix/nlp-competitions-list-review" -> "ymcui/Chinese-BERT-wwm"
"zhpmatrix/nlp-competitions-list-review" -> "InsaneLife/ChineseNLPCorpus"
"zhpmatrix/nlp-competitions-list-review" -> "Smilexuhc/Data-Competition-TopSolution" ["e"=1]
"zhpmatrix/nlp-competitions-list-review" -> "dbiir/UER-py"
"zhpmatrix/nlp-competitions-list-review" -> "brightmart/roberta_zh"
"zhpmatrix/nlp-competitions-list-review" -> "crownpku/Awesome-Chinese-NLP"
"zhpmatrix/nlp-competitions-list-review" -> "km1994/NLP-Interview-Notes"
"zhpmatrix/nlp-competitions-list-review" -> "CLUEbenchmark/CLUEDatasetSearch"
"kk7nc/Text_Classification" -> "brightmart/text_classification"
"kk7nc/Text_Classification" -> "yongzhuo/Keras-TextClassification"
"kk7nc/Text_Classification" -> "ShawnyXiao/TextClassification-Keras" ["e"=1]
"kk7nc/Text_Classification" -> "prakashpandey9/Text-Classification-Pytorch" ["e"=1]
"kk7nc/Text_Classification" -> "Tencent/NeuralNLP-NeuralClassifier"
"kk7nc/Text_Classification" -> "Separius/awesome-sentence-embedding" ["e"=1]
"kk7nc/Text_Classification" -> "TobiasLee/Text-Classification" ["e"=1]
"kk7nc/Text_Classification" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"kk7nc/Text_Classification" -> "richliao/textClassifier" ["e"=1]
"kk7nc/Text_Classification" -> "mesolitica/NLP-Models-Tensorflow"
"kk7nc/Text_Classification" -> "zhpmatrix/nlp-competitions-list-review"
"kk7nc/Text_Classification" -> "649453932/Chinese-Text-Classification-Pytorch"
"kk7nc/Text_Classification" -> "BrikerMan/Kashgari"
"kk7nc/Text_Classification" -> "yao8839836/text_gcn" ["e"=1]
"kk7nc/Text_Classification" -> "castorini/hedwig" ["e"=1]
"yumeng5/WeSTClass" -> "yumeng5/WeSHClass"
"yumeng5/WeSTClass" -> "yuzhimanhua/MetaCat"
"yumeng5/WeSTClass" -> "yuzhimanhua/HIMECat"
"yumeng5/WeSTClass" -> "yumeng5/CatE"
"yumeng5/WeSTClass" -> "mickeysjm/SetExpan"
"yumeng5/WeSTClass" -> "yumeng5/JoSH"
"ArtistScript/FastTextRank" -> "ztz818/Automatic-generation-of-text-summaries"
"ArtistScript/FastTextRank" -> "Valuebai/Text-Auto-Summarization"
"ArtistScript/FastTextRank" -> "bigzhao/Keyword_Extraction"
"ArtistScript/FastTextRank" -> "letiantian/TextRank4ZH"
"ArtistScript/FastTextRank" -> "zkwi/textSummary"
"ArtistScript/FastTextRank" -> "yongzhuo/nlg-yongzhuo"
"ArtistScript/FastTextRank" -> "pingyuan2016/word2vec_textrank"
"ArtistScript/FastTextRank" -> "CourteousWood/text-summarization"
"ArtistScript/FastTextRank" -> "HorieYuan/TransformerTextSummarization"
"ArtistScript/FastTextRank" -> "bojone/SPACES"
"ArtistScript/FastTextRank" -> "danan0755/Bert_Classifier"
"ArtistScript/FastTextRank" -> "AimeeLee77/keyword_extraction"
"ArtistScript/FastTextRank" -> "yongzhuo/nlp_xiaojiang"
"ArtistScript/FastTextRank" -> "chapzq77/LTP_Python_Interface" ["e"=1]
"ArtistScript/FastTextRank" -> "ouprince/text-rank"
"Hellisotherpeople/CX_DB8" -> "zedom1/Error-Detection"
"mesolitica/NLP-Models-Tensorflow" -> "Jiakui/awesome-bert"
"mesolitica/NLP-Models-Tensorflow" -> "zhpmatrix/nlp-competitions-list-review"
"mesolitica/NLP-Models-Tensorflow" -> "msgi/nlp-journey"
"mesolitica/NLP-Models-Tensorflow" -> "brightmart/text_classification"
"mesolitica/NLP-Models-Tensorflow" -> "brightmart/albert_zh"
"mesolitica/NLP-Models-Tensorflow" -> "CyberZHG/keras-bert"
"mesolitica/NLP-Models-Tensorflow" -> "jiangxinyang227/textClassifier"
"mesolitica/NLP-Models-Tensorflow" -> "zihangdai/xlnet" ["e"=1]
"mesolitica/NLP-Models-Tensorflow" -> "ymcui/Chinese-XLNet"
"mesolitica/NLP-Models-Tensorflow" -> "BrikerMan/Kashgari"
"mesolitica/NLP-Models-Tensorflow" -> "zhedongzheng/tensorflow-nlp"
"mesolitica/NLP-Models-Tensorflow" -> "macanv/BERT-BiLSTM-CRF-NER"
"mesolitica/NLP-Models-Tensorflow" -> "yongzhuo/nlp_xiaojiang"
"mesolitica/NLP-Models-Tensorflow" -> "ChineseGLUE/ChineseGLUE"
"mesolitica/NLP-Models-Tensorflow" -> "Separius/awesome-sentence-embedding" ["e"=1]
"microsoft/NeuronBlocks" -> "NTMC-Community/MatchZoo"
"microsoft/NeuronBlocks" -> "zihangdai/xlnet" ["e"=1]
"microsoft/NeuronBlocks" -> "alibaba/esim-response-selection"
"microsoft/NeuronBlocks" -> "thunlp/ERNIE"
"microsoft/NeuronBlocks" -> "asyml/texar" ["e"=1]
"microsoft/NeuronBlocks" -> "baidu/AnyQ"
"microsoft/NeuronBlocks" -> "airaria/TextBrewer"
"microsoft/NeuronBlocks" -> "NTMC-Community/awesome-neural-models-for-semantic-match"
"microsoft/NeuronBlocks" -> "openai/sparse_attention" ["e"=1]
"microsoft/NeuronBlocks" -> "facebookresearch/pytext" ["e"=1]
"microsoft/NeuronBlocks" -> "NTMC-Community/MatchZoo-py"
"microsoft/NeuronBlocks" -> "BrikerMan/Kashgari"
"microsoft/NeuronBlocks" -> "facebookresearch/XLM" ["e"=1]
"microsoft/NeuronBlocks" -> "fastnlp/fastNLP"
"microsoft/NeuronBlocks" -> "sogou/SogouMRCToolkit" ["e"=1]
"Brokenwind/BertSimilarity" -> "terrifyzhao/bert-utils"
"Brokenwind/BertSimilarity" -> "BonnieHuangxin/Bert_sentence_similarity"
"Brokenwind/BertSimilarity" -> "zhaogaofeng611/TextMatch"
"Brokenwind/BertSimilarity" -> "JepsonWong/Text_Matching"
"Brokenwind/BertSimilarity" -> "yongzhuo/nlp_xiaojiang"
"Brokenwind/BertSimilarity" -> "cjymz886/sentence-similarity"
"Brokenwind/BertSimilarity" -> "rsanshierli/EasyBert"
"Brokenwind/BertSimilarity" -> "danan0755/Bert_Classifier"
"Brokenwind/BertSimilarity" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"Brokenwind/BertSimilarity" -> "liuhuanyong/SentenceSimilarity"
"Brokenwind/BertSimilarity" -> "DengBoCong/text-similarity"
"Brokenwind/BertSimilarity" -> "xiongma/chinese-law-bert-similarity"
"Brokenwind/BertSimilarity" -> "liuhuanyong/SiameseSentenceSimilarity"
"Brokenwind/BertSimilarity" -> "phychaos/TextSimilar"
"Brokenwind/BertSimilarity" -> "terrifyzhao/text_matching"
"ownthink/Jiagu" -> "blmoistawinde/HarvestText"
"ownthink/Jiagu" -> "ownthink/KnowledgeGraphData" ["e"=1]
"ownthink/Jiagu" -> "macanv/BERT-BiLSTM-CRF-NER"
"ownthink/Jiagu" -> "qq547276542/Agriculture_KnowledgeGraph" ["e"=1]
"ownthink/Jiagu" -> "brightmart/albert_zh"
"ownthink/Jiagu" -> "letiantian/TextRank4ZH"
"ownthink/Jiagu" -> "ymcui/Chinese-BERT-wwm"
"ownthink/Jiagu" -> "hankcs/pyhanlp"
"ownthink/Jiagu" -> "thunlp/OpenNRE"
"ownthink/Jiagu" -> "terrifyzhao/bert-utils"
"ownthink/Jiagu" -> "liuhuanyong/QASystemOnMedicalKG" ["e"=1]
"ownthink/Jiagu" -> "liuhuanyong/TextGrapher" ["e"=1]
"ownthink/Jiagu" -> "crownpku/Awesome-Chinese-NLP"
"ownthink/Jiagu" -> "crownpku/Information-Extraction-Chinese"
"ownthink/Jiagu" -> "Embedding/Chinese-Word-Vectors"
"FudanNLP/fnlp" -> "fastnlp/fastNLP"
"FudanNLP/fnlp" -> "HIT-SCIR/ltp"
"FudanNLP/fnlp" -> "HIT-SCIR/pyltp"
"FudanNLP/fnlp" -> "NLPIR-team/NLPIR"
"FudanNLP/fnlp" -> "NLPchina/ansj_seg" ["e"=1]
"FudanNLP/fnlp" -> "isnowfy/snownlp"
"FudanNLP/fnlp" -> "NLPchina/nlp-lang" ["e"=1]
"FudanNLP/fnlp" -> "crownpku/Awesome-Chinese-NLP"
"FudanNLP/fnlp" -> "thunlp/THULAC-Python"
"FudanNLP/fnlp" -> "hankcs/pyhanlp"
"FudanNLP/fnlp" -> "baidu/Familia"
"FudanNLP/fnlp" -> "koth/kcws"
"FudanNLP/fnlp" -> "rockingdingo/deepnlp"
"FudanNLP/fnlp" -> "letiantian/TextRank4ZH"
"FudanNLP/fnlp" -> "crownpku/Information-Extraction-Chinese"
"morenjiujiu/sensitive_content_filter" -> "qloog/sensitive_words"
"morenjiujiu/sensitive_content_filter" -> "SunLinJie/Text_Review"
"morenjiujiu/sensitive_content_filter" -> "keithsun80/speachless"
"houbb/word-checker" -> "jiangnanboy/jcorrector" ["e"=1]
"houbb/word-checker" -> "houbb/nlp-hanzi-similar"
"houbb/word-checker" -> "houbb/segment"
"houbb/word-checker" -> "houbb/opencc4j"
"houbb/word-checker" -> "beyondacm/Autochecker4Chinese"
"statedecoded/statedecoded" -> "papertrail/legal-docs"
"statedecoded/statedecoded" -> "unitedstates/uslaw.link"
"statedecoded/statedecoded" -> "statedecoded/legal-dictionary"
"statedecoded/statedecoded" -> "unitedstates/citation"
"statedecoded/statedecoded" -> "cofounders/legal"
"statedecoded/statedecoded" -> "TracyWang95/legal-prompts-for-gpt" ["e"=1]
"statedecoded/statedecoded" -> "LexPredict/lexpredict-legal-dictionary"
"howl-anderson/hanzi_chaizi" -> "kfcd/chaizi"
"howl-anderson/hanzi_chaizi" -> "howl-anderson/hanzi_char_featurizer"
"howl-anderson/hanzi_chaizi" -> "contr4l/SimilarCharacter"
"howl-anderson/hanzi_chaizi" -> "hanzi-chai/chai"
"howl-anderson/hanzi_chaizi" -> "houbb/nlp-hanzi-similar"
"howl-anderson/hanzi_chaizi" -> "WenDesi/Chinese_radical" ["e"=1]
"howl-anderson/hanzi_chaizi" -> "charlesXu86/char_featurizer"
"howl-anderson/hanzi_chaizi" -> "qingyujean/ssc"
"howl-anderson/hanzi_chaizi" -> "WTree/chineseStroke" ["e"=1]
"howl-anderson/hanzi_chaizi" -> "sfyc23/python-wubi"
"howl-anderson/hanzi_chaizi" -> "dalinvip/cw2vec" ["e"=1]
"papertrail/legal-docs" -> "MrAl3x0/LegalLens"
"CyberZHG/keras-bert" -> "bojone/bert_in_keras"
"CyberZHG/keras-bert" -> "bojone/bert4keras"
"CyberZHG/keras-bert" -> "BrikerMan/Kashgari"
"CyberZHG/keras-bert" -> "brightmart/albert_zh"
"CyberZHG/keras-bert" -> "Separius/BERT-keras"
"CyberZHG/keras-bert" -> "ymcui/Chinese-BERT-wwm"
"CyberZHG/keras-bert" -> "macanv/BERT-BiLSTM-CRF-NER"
"CyberZHG/keras-bert" -> "ChineseGLUE/ChineseGLUE"
"CyberZHG/keras-bert" -> "brightmart/roberta_zh"
"CyberZHG/keras-bert" -> "CLUEbenchmark/CLUE"
"CyberZHG/keras-bert" -> "ymcui/Chinese-XLNet"
"CyberZHG/keras-bert" -> "jina-ai/clip-as-service" ["e"=1]
"CyberZHG/keras-bert" -> "yongzhuo/Keras-TextClassification"
"CyberZHG/keras-bert" -> "NTMC-Community/MatchZoo"
"CyberZHG/keras-bert" -> "zihangdai/xlnet" ["e"=1]
"zhanzecheng/Time_NLP" -> "shinyke/Time-NLP" ["e"=1]
"zhanzecheng/Time_NLP" -> "fighting41love/cocoNLP"
"zhanzecheng/Time_NLP" -> "ryanInf/Time-NLPY"
"zhanzecheng/Time_NLP" -> "xiaoxiong74/Time-Extractor"
"zhanzecheng/Time_NLP" -> "bojone/kg-2019" ["e"=1]
"zhanzecheng/Time_NLP" -> "Ailln/cn2an"
"zhanzecheng/Time_NLP" -> "liuhuanyong/EventTriplesExtraction" ["e"=1]
"zhanzecheng/Time_NLP" -> "Wall-ee/chinese2digits"
"zhanzecheng/Time_NLP" -> "liuhuanyong/ChineseSemanticKB"
"zhanzecheng/Time_NLP" -> "guotong1988/chinese_dictionary"
"zhanzecheng/Time_NLP" -> "fighting41love/hardNLU"
"zhanzecheng/Time_NLP" -> "loujie0822/DeepIE"
"zhanzecheng/Time_NLP" -> "dongrixinyu/JioNLP"
"zhanzecheng/Time_NLP" -> "thunlp/OpenCLaP"
"zhanzecheng/Time_NLP" -> "liuhuanyong/SentenceSimilarity"
"SeanLee97/xmnlp" -> "ownthink/Jiagu"
"SeanLee97/xmnlp" -> "murray-z/text_analysis_tools"
"SeanLee97/xmnlp" -> "blmoistawinde/HarvestText"
"SeanLee97/xmnlp" -> "yongzhuo/nlp_xiaojiang"
"SeanLee97/xmnlp" -> "shibing624/pycorrector"
"SeanLee97/xmnlp" -> "yongzhuo/Macropodus"
"SeanLee97/xmnlp" -> "Roshanson/TextInfoExp"
"SeanLee97/xmnlp" -> "letiantian/TextRank4ZH"
"SeanLee97/xmnlp" -> "425776024/nlpcda"
"SeanLee97/xmnlp" -> "hankcs/pyhanlp"
"SeanLee97/xmnlp" -> "hiDaDeng/cnsenti" ["e"=1]
"SeanLee97/xmnlp" -> "fighting41love/cocoNLP"
"SeanLee97/xmnlp" -> "thunlp/THULAC-Python"
"SeanLee97/xmnlp" -> "terrifyzhao/bert-utils"
"SeanLee97/xmnlp" -> "linguishi/chinese_sentiment" ["e"=1]
"didi/ChineseNLP" -> "brightmart/albert_zh"
"didi/ChineseNLP" -> "ChineseGLUE/ChineseGLUE"
"didi/ChineseNLP" -> "InsaneLife/ChineseNLPCorpus"
"didi/ChineseNLP" -> "zhpmatrix/nlp-competitions-list-review"
"didi/ChineseNLP" -> "CLUEbenchmark/CLUEDatasetSearch"
"didi/ChineseNLP" -> "CLUEbenchmark/CLUE"
"didi/ChineseNLP" -> "brightmart/nlp_chinese_corpus"
"didi/ChineseNLP" -> "ymcui/Chinese-BERT-wwm"
"didi/ChineseNLP" -> "msgi/nlp-journey"
"didi/ChineseNLP" -> "fastnlp/fastNLP"
"didi/ChineseNLP" -> "dbiir/UER-py"
"didi/ChineseNLP" -> "Jiakui/awesome-bert"
"didi/ChineseNLP" -> "panchunguang/ccks_baidu_entity_link"
"didi/ChineseNLP" -> "brightmart/roberta_zh"
"didi/ChineseNLP" -> "crownpku/Awesome-Chinese-NLP"
"JackKuo666/NLP_basis" -> "sujeek/chinese_nlp"
"JackKuo666/NLP_basis" -> "nlpdz/Medical-Named-Entity-Rec-Based-on-Dilated-CNN"
"JackKuo666/NLP_basis" -> "lpty/nlp_base"
"JackKuo666/NLP_basis" -> "Dod-o/NLP-practice-program"
"JackKuo666/NLP_basis" -> "learning511/cs224n-learning-camp"
"JackKuo666/NLP_basis" -> "smilelight/lightNLP"
"JackKuo666/NLP_basis" -> "duoergun0729/nlp"
"JackKuo666/NLP_basis" -> "songyingxin/TextClassification"
"JackKuo666/NLP_basis" -> "bainingchao/NLP-ML"
"JackKuo666/NLP_basis" -> "yongzhuo/nlp_xiaojiang"
"JackKuo666/NLP_basis" -> "zhpmatrix/nlp-competitions-list-review"
"JackKuo666/NLP_basis" -> "nlpinaction/learning-nlp"
"JackKuo666/NLP_basis" -> "yuquanle/NLP-progress"
"larsmans/seqlearn" -> "hmmlearn/hmmlearn" ["e"=1]
"larsmans/seqlearn" -> "pystruct/pystruct"
"larsmans/seqlearn" -> "TeamHG-Memex/sklearn-crfsuite"
"larsmans/seqlearn" -> "scrapinghub/python-crfsuite"
"larsmans/seqlearn" -> "dwiel/tensorflow_hmm"
"larsmans/seqlearn" -> "jmschrei/pomegranate" ["e"=1]
"larsmans/seqlearn" -> "jmschrei/yahmm" ["e"=1]
"larsmans/seqlearn" -> "guyz/HMM" ["e"=1]
"larsmans/seqlearn" -> "FlorentF9/DeepTemporalClustering" ["e"=1]
"larsmans/seqlearn" -> "eBay/bayesian-belief-networks" ["e"=1]
"larsmans/seqlearn" -> "aigamedev/scikit-neuralnetwork" ["e"=1]
"yongzhuo/Keras-TextClassification" -> "yongzhuo/nlp_xiaojiang"
"yongzhuo/Keras-TextClassification" -> "ShawnyXiao/TextClassification-Keras" ["e"=1]
"yongzhuo/Keras-TextClassification" -> "649453932/Chinese-Text-Classification-Pytorch"
"yongzhuo/Keras-TextClassification" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"yongzhuo/Keras-TextClassification" -> "hellonlp/classifier-multi-label"
"yongzhuo/Keras-TextClassification" -> "terrifyzhao/bert-utils"
"yongzhuo/Keras-TextClassification" -> "bojone/bert4keras"
"yongzhuo/Keras-TextClassification" -> "brightmart/albert_zh"
"yongzhuo/Keras-TextClassification" -> "CyberZHG/keras-bert"
"yongzhuo/Keras-TextClassification" -> "brightmart/text_classification"
"yongzhuo/Keras-TextClassification" -> "ymcui/Chinese-XLNet"
"yongzhuo/Keras-TextClassification" -> "BrikerMan/Kashgari"
"yongzhuo/Keras-TextClassification" -> "Tencent/NeuralNLP-NeuralClassifier"
"yongzhuo/Keras-TextClassification" -> "macanv/BERT-BiLSTM-CRF-NER"
"yongzhuo/Keras-TextClassification" -> "zhpmatrix/nlp-competitions-list-review"
"bojone/seq2seq" -> "bojone/bert_in_keras"
"bojone/seq2seq" -> "bojone/crf"
"bojone/seq2seq" -> "bojone/attention"
"bojone/seq2seq" -> "CyberZHG/keras-xlnet"
"bojone/seq2seq" -> "stephen-v/zh-NER-keras"
"bojone/seq2seq" -> "bojone/kg-2019-baseline" ["e"=1]
"bojone/seq2seq" -> "bojone/Capsule" ["e"=1]
"bojone/seq2seq" -> "shawroad/Keras-Learning-Summary"
"bojone/seq2seq" -> "CyberZHG/keras-bert"
"bojone/seq2seq" -> "harveyaot/DianJing"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "javaidnabi31/Multi-Label-Text-classification-Using-BERT"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "brightmart/sentiment_analysis_fine_grain"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "utterworks/fast-bert" ["e"=1]
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "wshuyi/demo-fastbert-multi-label-classification"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "Magic-Bubble/Zhihu"
"kaushaltrivedi/bert-toxic-comments-multilabel" -> "wshuyi/demo-multi-label-classification-bert"
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" -> "yuxiaowww/2018-China-University-Computer-Contest"
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" -> "yuxiaowww/NLP-Basic-Learning"
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" -> "FNo0/Knight"
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" -> "YORK-CHAN/Rank1-Crawler-weather---of-BDCI-2018-Supply-Chain-Demand-Forecast"
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" -> "luoda888/CCF2018-Top2-Demand-Forecast"
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" -> "FNo0/LIFT_for_NLP"
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" -> "sunwantong/Xsm_Education_App"
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" -> "YangKing0834131/2018-KUAISHOU-TSINGHUA-Solutions-"
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" -> "PandasCute/2018-CCF-BDCI-China-Unicom-Research-Institute-top2" ["e"=1]
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" -> "rebornZH/2019-sohu-algorithm-competition"
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" -> "drop-out/RNN-Active-User-Forecast" ["e"=1]
"msgi/nlp-journey" -> "yongzhuo/nlp_xiaojiang"
"msgi/nlp-journey" -> "zhpmatrix/nlp-competitions-list-review"
"msgi/nlp-journey" -> "didi/ChineseNLP"
"msgi/nlp-journey" -> "songyingxin/NLPer-Interview"
"msgi/nlp-journey" -> "yongzhuo/Keras-TextClassification"
"msgi/nlp-journey" -> "brightmart/albert_zh"
"msgi/nlp-journey" -> "BrikerMan/Kashgari"
"msgi/nlp-journey" -> "macanv/BERT-BiLSTM-CRF-NER"
"msgi/nlp-journey" -> "Jiakui/awesome-bert"
"msgi/nlp-journey" -> "ChineseGLUE/ChineseGLUE"
"msgi/nlp-journey" -> "jiangxinyang227/textClassifier"
"msgi/nlp-journey" -> "brightmart/roberta_zh"
"msgi/nlp-journey" -> "crownpku/Awesome-Chinese-NLP"
"msgi/nlp-journey" -> "mesolitica/NLP-Models-Tensorflow"
"msgi/nlp-journey" -> "brightmart/text_classification"
"allenai/writing-code-for-nlp-research-emnlp2018" -> "allenai/acl2018-semantic-parsing-tutorial" ["e"=1]
"allenai/writing-code-for-nlp-research-emnlp2018" -> "neulab/compare-mt" ["e"=1]
"allenai/writing-code-for-nlp-research-emnlp2018" -> "qipeng/golden-retriever" ["e"=1]
"baidu/lac" -> "baidu/AnyQ"
"baidu/lac" -> "baidu/Senta"
"baidu/lac" -> "baidu/DDParser"
"baidu/lac" -> "PaddlePaddle/ERNIE"
"baidu/lac" -> "HIT-SCIR/ltp"
"baidu/lac" -> "CLUEbenchmark/CLUE"
"baidu/lac" -> "ymcui/Chinese-BERT-wwm"
"baidu/lac" -> "baidu/Familia"
"baidu/lac" -> "lancopku/pkuseg-python"
"baidu/lac" -> "Embedding/Chinese-Word-Vectors"
"baidu/lac" -> "bojone/bert4keras"
"baidu/lac" -> "brightmart/nlp_chinese_corpus"
"baidu/lac" -> "brightmart/albert_zh"
"baidu/lac" -> "crownpku/Awesome-Chinese-NLP"
"baidu/lac" -> "hankcs/pyhanlp"
"fastnlp/fastNLP" -> "FudanNLP/fnlp"
"fastnlp/fastNLP" -> "fastnlp/fastHan"
"fastnlp/fastNLP" -> "brightmart/albert_zh"
"fastnlp/fastNLP" -> "ymcui/Chinese-BERT-wwm"
"fastnlp/fastNLP" -> "CLUEbenchmark/CLUE"
"fastnlp/fastNLP" -> "FudanNLP/nlp-beginner"
"fastnlp/fastNLP" -> "loujie0822/DeepIE"
"fastnlp/fastNLP" -> "jiesutd/LatticeLSTM"
"fastnlp/fastNLP" -> "dbiir/UER-py"
"fastnlp/fastNLP" -> "brightmart/roberta_zh"
"fastnlp/fastNLP" -> "InsaneLife/ChineseNLPCorpus"
"fastnlp/fastNLP" -> "bojone/bert4keras"
"fastnlp/fastNLP" -> "Embedding/Chinese-Word-Vectors"
"fastnlp/fastNLP" -> "brightmart/nlp_chinese_corpus"
"fastnlp/fastNLP" -> "LeeSureman/Flat-Lattice-Transformer"
"apachecn/nlp-pytorch-zh" -> "delip/PyTorchNLPBook" ["e"=1]
"apachecn/nlp-pytorch-zh" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"apachecn/nlp-pytorch-zh" -> "smilelight/lightNLP"
"apachecn/nlp-pytorch-zh" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"apachecn/nlp-pytorch-zh" -> "zhpmatrix/nlp-competitions-list-review"
"apachecn/nlp-pytorch-zh" -> "zibuyu/research_tao"
"apachecn/nlp-pytorch-zh" -> "ZacBi/CS224n-2019-solutions"
"apachecn/nlp-pytorch-zh" -> "FudanNLP/nlp-beginner"
"apachecn/nlp-pytorch-zh" -> "NLP-LOVE/Introduction-NLP"
"apachecn/nlp-pytorch-zh" -> "msgi/nlp-journey"
"apachecn/nlp-pytorch-zh" -> "fastnlp/fastNLP"
"apachecn/nlp-pytorch-zh" -> "649453932/Chinese-Text-Classification-Pytorch"
"apachecn/nlp-pytorch-zh" -> "apachecn/stanford-cs224n-notes-zh"
"apachecn/nlp-pytorch-zh" -> "lonePatient/albert_pytorch"
"apachecn/nlp-pytorch-zh" -> "songyingxin/NLPer-Interview"
"zhanzecheng/Chinese_segment_augment" -> "bojone/word-discovery"
"zhanzecheng/Chinese_segment_augment" -> "zhanzecheng/The-Art-Of-Programming-By-July"
"zhanzecheng/Chinese_segment_augment" -> "Rayarrow/New-Word-Discovery"
"zhanzecheng/Chinese_segment_augment" -> "Moonshile/ChineseWordSegmentation"
"zhanzecheng/Chinese_segment_augment" -> "izisong/new-words-discovery"
"zhanzecheng/Chinese_segment_augment" -> "sing1ee/dict_build"
"zhanzecheng/Chinese_segment_augment" -> "NCXiaozui/New-Word-Detection"
"zhanzecheng/Chinese_segment_augment" -> "bojone/bert_in_keras"
"zhanzecheng/Chinese_segment_augment" -> "lpty/nlp_base"
"zhanzecheng/Chinese_segment_augment" -> "cjymz886/find-Chinese-medical-words"
"zhanzecheng/Chinese_segment_augment" -> "liuhuanyong/EventTriplesExtraction" ["e"=1]
"zhanzecheng/Chinese_segment_augment" -> "brightmart/nlu_sim"
"zhanzecheng/Chinese_segment_augment" -> "bigzhao/Keyword_Extraction"
"zhanzecheng/Chinese_segment_augment" -> "liuhuanyong/TopicCluster" ["e"=1]
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "yumath/bertNER"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "FuYanzhe2/Name-Entity-Recognition"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "lonePatient/BERT-NER-Pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "liu-nlper/SLTK"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "yanwii/ChinsesNER-pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "macanv/BERT-BiLSTM-CRF-NER"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "qiufengyuyi/sequence_tagging"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "kamalkraj/BERT-NER"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "hemingkx/CLUENER2020"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "lemonhu/NER-BERT-pytorch"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "z814081807/DeepNER"
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" -> "luopeixiang/named_entity_recognition"
"amansrivastava17/embedding-as-service" -> "hellohaptik/spello"
"amansrivastava17/embedding-as-service" -> "xmxoxo/BERT-Vector"
"keitakurita/Practical_NLP_in_PyTorch" -> "keitakurita/practical-torchtext"
"keitakurita/Practical_NLP_in_PyTorch" -> "mhagiwara/realworldnlp"
"keitakurita/Practical_NLP_in_PyTorch" -> "allenai/writing-code-for-nlp-research-emnlp2018"
"keitakurita/Practical_NLP_in_PyTorch" -> "delip/PyTorchNLPBook" ["e"=1]
"keitakurita/Practical_NLP_in_PyTorch" -> "prakashpandey9/Text-Classification-Pytorch" ["e"=1]
"keitakurita/Practical_NLP_in_PyTorch" -> "facebookresearch/adaptive-span" ["e"=1]
"keitakurita/Practical_NLP_in_PyTorch" -> "graykode/xlnet-Pytorch"
"keitakurita/Practical_NLP_in_PyTorch" -> "utterworks/fast-bert" ["e"=1]
"keitakurita/Practical_NLP_in_PyTorch" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"keitakurita/Practical_NLP_in_PyTorch" -> "google-research-datasets/paws" ["e"=1]
"Delta-ML/delta" -> "didi/ChineseNLP"
"Delta-ML/delta" -> "mravanelli/pytorch-kaldi" ["e"=1]
"Delta-ML/delta" -> "athena-team/athena" ["e"=1]
"Delta-ML/delta" -> "NTMC-Community/MatchZoo"
"Delta-ML/delta" -> "didi/athena"
"Delta-ML/delta" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"Delta-ML/delta" -> "airaria/TextBrewer"
"Delta-ML/delta" -> "tensorflow/lingvo" ["e"=1]
"Delta-ML/delta" -> "baidu/AnyQ"
"Delta-ML/delta" -> "k2-fsa/k2" ["e"=1]
"Delta-ML/delta" -> "ChineseGLUE/ChineseGLUE"
"Delta-ML/delta" -> "GaoQ1/rasa_chatbot_cn" ["e"=1]
"Delta-ML/delta" -> "freewym/espresso" ["e"=1]
"Delta-ML/delta" -> "brightmart/albert_zh"
"Delta-ML/delta" -> "google/uis-rnn" ["e"=1]
"liuhuanyong/ChineseEmbedding" -> "liuhuanyong/SentenceSimilarity"
"liuhuanyong/ChineseEmbedding" -> "liuhuanyong/Word2Vector"
"liuhuanyong/ChineseEmbedding" -> "smilelight/lightNLP"
"liuhuanyong/ChineseEmbedding" -> "SophonPlus/ChineseWordVectors"
"liuhuanyong/ChineseEmbedding" -> "thunlp/OpenHowNet"
"liuhuanyong/ChineseEmbedding" -> "liuhuanyong/ChineseNLPCorpus"
"liuhuanyong/ChineseEmbedding" -> "terrifyzhao/text_matching"
"liuhuanyong/ChineseEmbedding" -> "stephen-v/zh-NER-keras"
"liuhuanyong/ChineseEmbedding" -> "zhaogaofeng611/TextMatch"
"liuhuanyong/ChineseEmbedding" -> "ZhuiyiTechnology/pretrained-models"
"kermitt2/delft" -> "lfoppiano/grobid-quantities" ["e"=1]
"kermitt2/delft" -> "kermitt2/entity-fishing" ["e"=1]
"kermitt2/delft" -> "kermitt2/Pub2TEI" ["e"=1]
"kermitt2/delft" -> "UKPLab/elmo-bilstm-cnn-crf"
"kermitt2/delft" -> "ThoughtRiver/lmdb-embeddings"
"kermitt2/delft" -> "iliaschalkidis/ELMo-keras"
"kermitt2/delft" -> "strongio/keras-elmo"
"kermitt2/delft" -> "kermitt2/biblio-glutton" ["e"=1]
"gentaiscool/lstm-attention" -> "ningshixian/LSTM_Attention"
"terrifyzhao/bert-utils" -> "yongzhuo/nlp_xiaojiang"
"terrifyzhao/bert-utils" -> "WenRichard/KBQA-BERT" ["e"=1]
"terrifyzhao/bert-utils" -> "brightmart/albert_zh"
"terrifyzhao/bert-utils" -> "macanv/BERT-BiLSTM-CRF-NER"
"terrifyzhao/bert-utils" -> "NLPScott/bert-Chinese-classification-task"
"terrifyzhao/bert-utils" -> "terrifyzhao/text_matching"
"terrifyzhao/bert-utils" -> "yongzhuo/Keras-TextClassification"
"terrifyzhao/bert-utils" -> "brightmart/roberta_zh"
"terrifyzhao/bert-utils" -> "ymcui/Chinese-BERT-wwm"
"terrifyzhao/bert-utils" -> "ProHiryu/bert-chinese-ner"
"terrifyzhao/bert-utils" -> "jiangxinyang227/textClassifier"
"terrifyzhao/bert-utils" -> "CyberZHG/keras-bert"
"terrifyzhao/bert-utils" -> "bojone/bert4keras"
"terrifyzhao/bert-utils" -> "NTMC-Community/MatchZoo"
"terrifyzhao/bert-utils" -> "ownthink/Jiagu"
"AimeeLee77/keyword_extraction" -> "Roshanson/TextInfoExp"
"AimeeLee77/keyword_extraction" -> "bigzhao/Keyword_Extraction"
"AimeeLee77/keyword_extraction" -> "AimeeLee77/wiki_zh_word2vec"
"AimeeLee77/keyword_extraction" -> "letiantian/TextRank4ZH"
"AimeeLee77/keyword_extraction" -> "ownthink/Jiagu"
"AimeeLee77/keyword_extraction" -> "murray-z/text_analysis_tools"
"AimeeLee77/keyword_extraction" -> "yongzhuo/nlp_xiaojiang"
"AimeeLee77/keyword_extraction" -> "cjymz886/text-cnn" ["e"=1]
"AimeeLee77/keyword_extraction" -> "ArtistScript/FastTextRank"
"AimeeLee77/keyword_extraction" -> "murray-z/text_clustering"
"AimeeLee77/keyword_extraction" -> "AimeeLee77/senti_analysis" ["e"=1]
"AimeeLee77/keyword_extraction" -> "HUANGZHIHAO1994/weibo-analysis-and-visualization" ["e"=1]
"AimeeLee77/keyword_extraction" -> "yongzhuo/nlg-yongzhuo"
"AimeeLee77/keyword_extraction" -> "terrifyzhao/bert-utils"
"AimeeLee77/keyword_extraction" -> "chaoming0625/SentimentPolarityAnalysis" ["e"=1]
"cedrickchee/awesome-transformer-nlp" -> "Jiakui/awesome-bert"
"cedrickchee/awesome-transformer-nlp" -> "tomohideshibata/BERT-related-papers"
"cedrickchee/awesome-transformer-nlp" -> "thunlp/PLMpapers"
"cedrickchee/awesome-transformer-nlp" -> "msgi/nlp-journey"
"cedrickchee/awesome-transformer-nlp" -> "NirantK/NLP_Quickbook" ["e"=1]
"cedrickchee/awesome-transformer-nlp" -> "thunlp/ERNIE"
"cedrickchee/awesome-transformer-nlp" -> "Separius/awesome-sentence-embedding" ["e"=1]
"cedrickchee/awesome-transformer-nlp" -> "huggingface/awesome-papers" ["e"=1]
"cedrickchee/awesome-transformer-nlp" -> "utterworks/fast-bert" ["e"=1]
"cedrickchee/awesome-transformer-nlp" -> "seriousran/awesome-qa" ["e"=1]
"cedrickchee/awesome-transformer-nlp" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"cedrickchee/awesome-transformer-nlp" -> "lyeoni/nlp-tutorial"
"cedrickchee/awesome-transformer-nlp" -> "seopbo/nlp_classification" ["e"=1]
"cedrickchee/awesome-transformer-nlp" -> "zhpmatrix/nlp-competitions-list-review"
"cedrickchee/awesome-transformer-nlp" -> "didi/ChineseNLP"
"luopeixiang/named_entity_recognition" -> "buppt/ChineseNER"
"luopeixiang/named_entity_recognition" -> "jiesutd/LatticeLSTM"
"luopeixiang/named_entity_recognition" -> "lonePatient/BERT-NER-Pytorch"
"luopeixiang/named_entity_recognition" -> "macanv/BERT-BiLSTM-CRF-NER"
"luopeixiang/named_entity_recognition" -> "CLUEbenchmark/CLUENER2020"
"luopeixiang/named_entity_recognition" -> "loujie0822/DeepIE"
"luopeixiang/named_entity_recognition" -> "Determined22/zh-NER-TF"
"luopeixiang/named_entity_recognition" -> "crownpku/Information-Extraction-Chinese"
"luopeixiang/named_entity_recognition" -> "zjy-ucas/ChineseNER"
"luopeixiang/named_entity_recognition" -> "z814081807/DeepNER"
"luopeixiang/named_entity_recognition" -> "649453932/Chinese-Text-Classification-Pytorch"
"luopeixiang/named_entity_recognition" -> "ymcui/Chinese-BERT-wwm"
"luopeixiang/named_entity_recognition" -> "InsaneLife/ChineseNLPCorpus"
"luopeixiang/named_entity_recognition" -> "yanwii/ChinsesNER-pytorch"
"luopeixiang/named_entity_recognition" -> "LeeSureman/Flat-Lattice-Transformer"
"tlatkowski/multihead-siamese-nets" -> "likejazz/Siamese-LSTM"
"tlatkowski/multihead-siamese-nets" -> "amansrivastava17/lstm-siamese-text-similarity"
"tlatkowski/multihead-siamese-nets" -> "dhwajraj/deep-siamese-text-similarity"
"Observerspy/CS224n" -> "ankit-ai/cs224n-natural-language-processing-winter2019"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "NTMC-Community/MatchZoo"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "NTMC-Community/MatchZoo-py"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "nyu-dl/dl4marco-bert" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "alibaba-edu/simple-effective-text-matching"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "ChenglongChen/tensorflow-DSMM" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "baidu/AnyQ"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "castorini/anserini" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "AdeDZY/DeepCT" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "BangLiu/ArticlePairMatching"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "pengming617/text_matching"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "AdeDZY/SIGIR19-BERT-IR" ["e"=1]
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "terrifyzhao/text_matching"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "HouJP/kaggle-quora-question-pairs"
"NTMC-Community/awesome-neural-models-for-semantic-match" -> "lanwuwei/SPM_toolkit"
"Tencent/NeuralNLP-NeuralClassifier" -> "RandolphVI/Hierarchical-Multi-Label-Text-Classification"
"Tencent/NeuralNLP-NeuralClassifier" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"Tencent/NeuralNLP-NeuralClassifier" -> "brightmart/text_classification"
"Tencent/NeuralNLP-NeuralClassifier" -> "yongzhuo/Keras-TextClassification"
"Tencent/NeuralNLP-NeuralClassifier" -> "RandolphVI/Multi-Label-Text-Classification"
"Tencent/NeuralNLP-NeuralClassifier" -> "dbiir/UER-py"
"Tencent/NeuralNLP-NeuralClassifier" -> "zhpmatrix/nlp-competitions-list-review"
"Tencent/NeuralNLP-NeuralClassifier" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"Tencent/NeuralNLP-NeuralClassifier" -> "NTMC-Community/MatchZoo"
"Tencent/NeuralNLP-NeuralClassifier" -> "hellonlp/classifier-multi-label"
"Tencent/NeuralNLP-NeuralClassifier" -> "brightmart/albert_zh"
"Tencent/NeuralNLP-NeuralClassifier" -> "CLUEbenchmark/CLUE"
"Tencent/NeuralNLP-NeuralClassifier" -> "ymcui/Chinese-BERT-wwm"
"Tencent/NeuralNLP-NeuralClassifier" -> "brightmart/roberta_zh"
"Tencent/NeuralNLP-NeuralClassifier" -> "BrikerMan/Kashgari"
"howl-anderson/Chinese_models_for_SpaCy" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"howl-anderson/Chinese_models_for_SpaCy" -> "GaoQ1/rasa_nlu_gq" ["e"=1]
"howl-anderson/Chinese_models_for_SpaCy" -> "GaoQ1/rasa_chatbot_cn" ["e"=1]
"howl-anderson/Chinese_models_for_SpaCy" -> "zqhZY/_rasa_chatbot" ["e"=1]
"howl-anderson/Chinese_models_for_SpaCy" -> "deepwel/Chinese-Annotator"
"howl-anderson/Chinese_models_for_SpaCy" -> "jeusgao/spaCy-new-language-test-Chinese"
"howl-anderson/Chinese_models_for_SpaCy" -> "liuhuanyong/ComplexEventExtraction" ["e"=1]
"howl-anderson/Chinese_models_for_SpaCy" -> "paschmann/rasa-ui" ["e"=1]
"howl-anderson/Chinese_models_for_SpaCy" -> "ownthink/Jiagu"
"howl-anderson/Chinese_models_for_SpaCy" -> "chatopera/insuranceqa-corpus-zh" ["e"=1]
"howl-anderson/Chinese_models_for_SpaCy" -> "didi/ChineseNLP"
"howl-anderson/Chinese_models_for_SpaCy" -> "howl-anderson/WeatherBot" ["e"=1]
"howl-anderson/Chinese_models_for_SpaCy" -> "BrikerMan/Kashgari"
"howl-anderson/Chinese_models_for_SpaCy" -> "fighting41love/cocoNLP"
"howl-anderson/Chinese_models_for_SpaCy" -> "zhanzecheng/Time_NLP"
"learning511/cs224n-learning-camp" -> "hankcs/CS224n"
"learning511/cs224n-learning-camp" -> "stanfordnlp/cs224n-winter17-notes" ["e"=1]
"learning511/cs224n-learning-camp" -> "L1aoXingyu/cs231n-camp" ["e"=1]
"learning511/cs224n-learning-camp" -> "MLjian/TextClassificationImplement"
"learning511/cs224n-learning-camp" -> "thunlp/RCPapers" ["e"=1]
"learning511/cs224n-learning-camp" -> "learning511/Stanford-Machine-Learning-camp" ["e"=1]
"learning511/cs224n-learning-camp" -> "ZacBi/CS224n-2019-solutions"
"learning511/cs224n-learning-camp" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"learning511/cs224n-learning-camp" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"learning511/cs224n-learning-camp" -> "zibuyu/research_tao"
"learning511/cs224n-learning-camp" -> "Y1ran/NLP-BERT--ChineseVersion"
"learning511/cs224n-learning-camp" -> "jiangxinyang227/textClassifier"
"learning511/cs224n-learning-camp" -> "Pelhans/Z_knowledge_graph" ["e"=1]
"learning511/cs224n-learning-camp" -> "JackKuo666/NLP_basis"
"learning511/cs224n-learning-camp" -> "RedstoneWill/MachineLearningInAction-Camp" ["e"=1]
"ZacBi/CS224n-2019-solutions" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"ZacBi/CS224n-2019-solutions" -> "Luvata/CS224N-2019"
"ZacBi/CS224n-2019-solutions" -> "xixiaoyao/CS224n-winter-together"
"ZacBi/CS224n-2019-solutions" -> "LooperXX/CS224n-Reading-Notes"
"ZacBi/CS224n-2019-solutions" -> "lrs1353281004/CS224n_winter2019_notes_and_assignments"
"ZacBi/CS224n-2019-solutions" -> "LooperXX/CS224n-Resource"
"ZacBi/CS224n-2019-solutions" -> "hankcs/CS224n"
"ZacBi/CS224n-2019-solutions" -> "jon-tow/cs224n"
"ZacBi/CS224n-2019-solutions" -> "chrischute/squad" ["e"=1]
"ZacBi/CS224n-2019-solutions" -> "learning511/cs224n-learning-camp"
"ZacBi/CS224n-2019-solutions" -> "apachecn/stanford-cs224n-notes-zh"
"ZacBi/CS224n-2019-solutions" -> "stanfordnlp/cs224n-winter17-notes" ["e"=1]
"ZacBi/CS224n-2019-solutions" -> "apachecn/nlp-pytorch-zh"
"ZacBi/CS224n-2019-solutions" -> "leehanchung/cs224n"
"ZacBi/CS224n-2019-solutions" -> "delip/PyTorchNLPBook" ["e"=1]
"FuYanzhe2/Name-Entity-Recognition" -> "ProHiryu/bert-chinese-ner"
"FuYanzhe2/Name-Entity-Recognition" -> "kyzhouhzau/BERT-NER"
"FuYanzhe2/Name-Entity-Recognition" -> "jiesutd/LatticeLSTM"
"FuYanzhe2/Name-Entity-Recognition" -> "yumath/bertNER"
"FuYanzhe2/Name-Entity-Recognition" -> "macanv/BERT-BiLSTM-CRF-NER"
"FuYanzhe2/Name-Entity-Recognition" -> "zjy-ucas/ChineseNER"
"FuYanzhe2/Name-Entity-Recognition" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"FuYanzhe2/Name-Entity-Recognition" -> "xuanzebi/BERT-CH-NER"
"FuYanzhe2/Name-Entity-Recognition" -> "CLUEbenchmark/CLUENER2020"
"FuYanzhe2/Name-Entity-Recognition" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"FuYanzhe2/Name-Entity-Recognition" -> "crownpku/Information-Extraction-Chinese"
"FuYanzhe2/Name-Entity-Recognition" -> "BrikerMan/Kashgari"
"FuYanzhe2/Name-Entity-Recognition" -> "qiufengyuyi/sequence_tagging"
"FuYanzhe2/Name-Entity-Recognition" -> "panchunguang/ccks_baidu_entity_link"
"FuYanzhe2/Name-Entity-Recognition" -> "shiyybua/NER"
"robert-bor/aho-corasick" -> "hankcs/AhoCorasickDoubleArrayTrie"
"robert-bor/aho-corasick" -> "hankcs/aho-corasick"
"robert-bor/aho-corasick" -> "google/re2j" ["e"=1]
"robert-bor/aho-corasick" -> "QSFT/Mensa"
"robert-bor/aho-corasick" -> "raymanrt/aho-corasick"
"robert-bor/aho-corasick" -> "linkedin/URL-Detector" ["e"=1]
"robert-bor/aho-corasick" -> "leventov/Koloboke" ["e"=1]
"robert-bor/aho-corasick" -> "OpenHFT/Chronicle-Map" ["e"=1]
"robert-bor/aho-corasick" -> "OpenHFT/Zero-Allocation-Hashing" ["e"=1]
"robert-bor/aho-corasick" -> "fast-pack/JavaFastPFOR" ["e"=1]
"robert-bor/aho-corasick" -> "almondtools/stringsearchalgorithms"
"wenyangchou/SimilarCharactor" -> "qingyujean/ssc"
"IAdmireu/ChineseSTS" -> "pengshuang/Text-Similarity"
"IAdmireu/ChineseSTS" -> "terrifyzhao/text_matching"
"IAdmireu/ChineseSTS" -> "yanqiangmiffy/sentence-similarity"
"IAdmireu/ChineseSTS" -> "pengming617/text_matching"
"IAdmireu/ChineseSTS" -> "terrifyzhao/bert-utils"
"IAdmireu/ChineseSTS" -> "yongzhuo/nlp_xiaojiang"
"IAdmireu/ChineseSTS" -> "WenRichard/QAmodel-for-Retrievalchatbot" ["e"=1]
"IAdmireu/ChineseSTS" -> "liuhuanyong/SentenceSimilarity"
"IAdmireu/ChineseSTS" -> "ZhuiyiTechnology/simbert"
"IAdmireu/ChineseSTS" -> "cjymz886/sentence-similarity"
"IAdmireu/ChineseSTS" -> "zyymax/text-similarity" ["e"=1]
"IAdmireu/ChineseSTS" -> "brightmart/nlu_sim"
"IAdmireu/ChineseSTS" -> "ZhuiyiTechnology/pretrained-models"
"IAdmireu/ChineseSTS" -> "pengming617/bert_textMatching"
"IAdmireu/ChineseSTS" -> "zhanlaoban/EDA_NLP_for_Chinese"
"lpty/nlp_base" -> "shiyybua/NER"
"lpty/nlp_base" -> "ProHiryu/bert-chinese-ner"
"lpty/nlp_base" -> "smilelight/lightNLP"
"lpty/nlp_base" -> "guillaumegenthial/sequence_tagging"
"lpty/nlp_base" -> "zjy-ucas/ChineseNER"
"lpty/nlp_base" -> "FuYanzhe2/Name-Entity-Recognition"
"lpty/nlp_base" -> "buppt/ChineseNER"
"lpty/nlp_base" -> "terrifyzhao/bert-utils"
"lpty/nlp_base" -> "Determined22/zh-NER-TF"
"lpty/nlp_base" -> "yanqiangmiffy/sentence-similarity"
"lpty/nlp_base" -> "liuhuanyong/ChineseEmbedding"
"lpty/nlp_base" -> "liuhuanyong/PersonRelationKnowledgeGraph" ["e"=1]
"lpty/nlp_base" -> "zhanlaoban/EDA_NLP_for_Chinese"
"lpty/nlp_base" -> "yongzhuo/nlp_xiaojiang"
"lpty/nlp_base" -> "Roshanson/TextInfoExp"
"applenob/simple_crf" -> "shawntan/python-crf"
"JianWenJun/MLDemo" -> "pengshuang/Text-Similarity"
"JianWenJun/MLDemo" -> "LittletreeZou/Question-Pairs-Matching"
"JianWenJun/MLDemo" -> "ziweipolaris/atec2018-nlp"
"JianWenJun/MLDemo" -> "yanqiangmiffy/sentence-similarity"
"JianWenJun/MLDemo" -> "zle1992/atec"
"JianWenJun/MLDemo" -> "pengming617/text_matching"
"JianWenJun/MLDemo" -> "Huijun-Cui/ATEC-NLP"
"JianWenJun/MLDemo" -> "brightmart/nlu_sim"
"JianWenJun/MLDemo" -> "terrifyzhao/text_matching"
"JianWenJun/MLDemo" -> "raven4752/huabei"
"brightmart/nlu_sim" -> "ziweipolaris/atec2018-nlp"
"brightmart/nlu_sim" -> "ChenglongChen/tensorflow-DSMM" ["e"=1]
"brightmart/nlu_sim" -> "zle1992/atec"
"brightmart/nlu_sim" -> "LittletreeZou/Question-Pairs-Matching"
"brightmart/nlu_sim" -> "HouJP/kaggle-quora-question-pairs"
"brightmart/nlu_sim" -> "raven4752/huabei"
"brightmart/nlu_sim" -> "zhiguowang/BiMPM"
"brightmart/nlu_sim" -> "yanqiangmiffy/sentence-similarity"
"brightmart/nlu_sim" -> "HKUST-KnowComp/R-Net" ["e"=1]
"brightmart/nlu_sim" -> "brightmart/bert_language_understanding"
"qrfaction/paipaidai" -> "guoday/PaiPaiDai2018_rank16"
"raven4752/huabei" -> "ziweipolaris/atec2018-nlp"
"raven4752/huabei" -> "world2vec/atec_2018_nlp"
"yanqiangmiffy/sentence-similarity" -> "pengshuang/Text-Similarity"
"yanqiangmiffy/sentence-similarity" -> "liuhuanyong/SentenceSimilarity"
"yanqiangmiffy/sentence-similarity" -> "cjymz886/sentence-similarity"
"yanqiangmiffy/sentence-similarity" -> "pengming617/text_matching"
"yanqiangmiffy/sentence-similarity" -> "liuhuanyong/SiameseSentenceSimilarity"
"yanqiangmiffy/sentence-similarity" -> "JianWenJun/MLDemo"
"yanqiangmiffy/sentence-similarity" -> "brightmart/nlu_sim"
"yanqiangmiffy/sentence-similarity" -> "ziweipolaris/atec2018-nlp"
"yanqiangmiffy/sentence-similarity" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"yanqiangmiffy/sentence-similarity" -> "IAdmireu/ChineseSTS"
"yanqiangmiffy/sentence-similarity" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"yanqiangmiffy/sentence-similarity" -> "ATEC2018/deep-siamese-text-similarity"
"yanqiangmiffy/sentence-similarity" -> "LittletreeZou/Question-Pairs-Matching"
"yanqiangmiffy/sentence-similarity" -> "terrifyzhao/bert-utils"
"yanqiangmiffy/sentence-similarity" -> "WenDesi/sentenceSimilarity"
"smilelight/lightNLP" -> "yongzhuo/nlp_xiaojiang"
"smilelight/lightNLP" -> "lpty/nlp_base"
"smilelight/lightNLP" -> "smilelight/lightKG" ["e"=1]
"smilelight/lightNLP" -> "zhpmatrix/nlp-competitions-list-review"
"smilelight/lightNLP" -> "liuhuanyong/ChineseEmbedding"
"smilelight/lightNLP" -> "fastnlp/fastNLP"
"smilelight/lightNLP" -> "FudanNLP/nlp-beginner"
"smilelight/lightNLP" -> "songyingxin/Bert-TextClassification"
"smilelight/lightNLP" -> "ShomyLiu/pytorch-relation-extraction" ["e"=1]
"smilelight/lightNLP" -> "Roshanson/TextInfoExp"
"smilelight/lightNLP" -> "Y1ran/NLP-BERT--ChineseVersion"
"smilelight/lightNLP" -> "msgi/nlp-journey"
"smilelight/lightNLP" -> "apachecn/nlp-pytorch-zh"
"smilelight/lightNLP" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"smilelight/lightNLP" -> "ownthink/Jiagu"
"Dod-o/NLP-practice-program" -> "Dod-o/LeetCode"
"Dod-o/NLP-practice-program" -> "songyingxin/TextClassification"
"Dod-o/NLP-practice-program" -> "JackKuo666/NLP_basis"
"pengming617/text_matching" -> "terrifyzhao/text_matching"
"pengming617/text_matching" -> "pengming617/bert_textMatching"
"pengming617/text_matching" -> "pengshuang/Text-Similarity"
"pengming617/text_matching" -> "zhaogaofeng611/TextMatch"
"pengming617/text_matching" -> "alibaba-edu/simple-effective-text-matching"
"pengming617/text_matching" -> "InsaneLife/dssm" ["e"=1]
"pengming617/text_matching" -> "alibaba/esim-response-selection"
"pengming617/text_matching" -> "ChenglongChen/tensorflow-DSMM" ["e"=1]
"pengming617/text_matching" -> "coetaur0/ESIM"
"pengming617/text_matching" -> "yanqiangmiffy/sentence-similarity"
"pengming617/text_matching" -> "JepsonWong/Text_Matching"
"pengming617/text_matching" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"pengming617/text_matching" -> "WenRichard/QAmodel-for-Retrievalchatbot" ["e"=1]
"pengming617/text_matching" -> "qiangsiwei/bert_distill"
"pengming617/text_matching" -> "YJiangcm/Chinese-sentence-pair-modeling"
"yongzhuo/nlp_xiaojiang" -> "yongzhuo/Keras-TextClassification"
"yongzhuo/nlp_xiaojiang" -> "zhanlaoban/EDA_NLP_for_Chinese"
"yongzhuo/nlp_xiaojiang" -> "terrifyzhao/bert-utils"
"yongzhuo/nlp_xiaojiang" -> "ymcui/Chinese-XLNet"
"yongzhuo/nlp_xiaojiang" -> "msgi/nlp-journey"
"yongzhuo/nlp_xiaojiang" -> "zhpmatrix/nlp-competitions-list-review"
"yongzhuo/nlp_xiaojiang" -> "ZhuiyiTechnology/pretrained-models"
"yongzhuo/nlp_xiaojiang" -> "WenRichard/KBQA-BERT" ["e"=1]
"yongzhuo/nlp_xiaojiang" -> "CyberZHG/keras-bert"
"yongzhuo/nlp_xiaojiang" -> "brightmart/albert_zh"
"yongzhuo/nlp_xiaojiang" -> "brightmart/roberta_zh"
"yongzhuo/nlp_xiaojiang" -> "425776024/nlpcda"
"yongzhuo/nlp_xiaojiang" -> "ChineseGLUE/ChineseGLUE"
"yongzhuo/nlp_xiaojiang" -> "terrifyzhao/text_matching"
"yongzhuo/nlp_xiaojiang" -> "songyingxin/NLPer-Interview"
"terrifyzhao/text_matching" -> "pengming617/text_matching"
"terrifyzhao/text_matching" -> "wangle1218/deep_text_matching"
"terrifyzhao/text_matching" -> "zhaogaofeng611/TextMatch"
"terrifyzhao/text_matching" -> "terrifyzhao/bert-utils"
"terrifyzhao/text_matching" -> "pengshuang/Text-Similarity"
"terrifyzhao/text_matching" -> "JepsonWong/Text_Matching"
"terrifyzhao/text_matching" -> "alibaba-edu/simple-effective-text-matching"
"terrifyzhao/text_matching" -> "NTMC-Community/MatchZoo"
"terrifyzhao/text_matching" -> "yongzhuo/nlp_xiaojiang"
"terrifyzhao/text_matching" -> "pengming617/bert_textMatching"
"terrifyzhao/text_matching" -> "ZhuiyiTechnology/pretrained-models"
"terrifyzhao/text_matching" -> "WenRichard/QAmodel-for-Retrievalchatbot" ["e"=1]
"terrifyzhao/text_matching" -> "InsaneLife/dssm" ["e"=1]
"terrifyzhao/text_matching" -> "ZhuiyiTechnology/simbert"
"terrifyzhao/text_matching" -> "ChineseGLUE/ChineseGLUE"
"luhua-rain/MRC_Competition_Dureader" -> "SunnyMarkLiu/lic2019-dureader2.0-rank2" ["e"=1]
"luhua-rain/MRC_Competition_Dureader" -> "cooscao/BERT-Dureader" ["e"=1]
"luhua-rain/MRC_Competition_Dureader" -> "baidu/DuReader" ["e"=1]
"luhua-rain/MRC_Competition_Dureader" -> "thunlp/RCPapers" ["e"=1]
"luhua-rain/MRC_Competition_Dureader" -> "YingZiqiang/LES-MMRC-Summary"
"luhua-rain/MRC_Competition_Dureader" -> "ymcui/Chinese-ELECTRA"
"luhua-rain/MRC_Competition_Dureader" -> "ymcui/cmrc2018" ["e"=1]
"luhua-rain/MRC_Competition_Dureader" -> "ZhuiyiTechnology/pretrained-models"
"luhua-rain/MRC_Competition_Dureader" -> "NoneWait/cail2019"
"luhua-rain/MRC_Competition_Dureader" -> "BDBC-KG-NLP/QA-Survey-CN"
"luhua-rain/MRC_Competition_Dureader" -> "SeanLee97/QANet_dureader" ["e"=1]
"luhua-rain/MRC_Competition_Dureader" -> "cooelf/AwesomeMRC" ["e"=1]
"luhua-rain/MRC_Competition_Dureader" -> "ymcui/Chinese-RC-Datasets" ["e"=1]
"luhua-rain/MRC_Competition_Dureader" -> "ZhuiyiTechnology/simbert"
"luhua-rain/MRC_Competition_Dureader" -> "ShannonAI/mrc-for-flat-nested-ner"
"deepwel/Chinese-Annotator" -> "jiesutd/YEDDA"
"deepwel/Chinese-Annotator" -> "nlplab/brat"
"deepwel/Chinese-Annotator" -> "crownpku/Information-Extraction-Chinese"
"deepwel/Chinese-Annotator" -> "zjy-ucas/ChineseNER"
"deepwel/Chinese-Annotator" -> "synyi/poplar"
"deepwel/Chinese-Annotator" -> "crownpku/Awesome-Chinese-NLP"
"deepwel/Chinese-Annotator" -> "FXLP/MarkTool"
"deepwel/Chinese-Annotator" -> "macanv/BERT-BiLSTM-CRF-NER"
"deepwel/Chinese-Annotator" -> "jiesutd/LatticeLSTM"
"deepwel/Chinese-Annotator" -> "rockingdingo/deepnlp"
"deepwel/Chinese-Annotator" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"deepwel/Chinese-Annotator" -> "HIT-SCIR/pyltp"
"deepwel/Chinese-Annotator" -> "BrikerMan/Kashgari"
"deepwel/Chinese-Annotator" -> "doccano/doccano"
"deepwel/Chinese-Annotator" -> "thunlp/OpenNRE"
"Jiakui/awesome-bert" -> "brightmart/albert_zh"
"Jiakui/awesome-bert" -> "ChineseGLUE/ChineseGLUE"
"Jiakui/awesome-bert" -> "zihangdai/xlnet" ["e"=1]
"Jiakui/awesome-bert" -> "brightmart/roberta_zh"
"Jiakui/awesome-bert" -> "ymcui/Chinese-XLNet"
"Jiakui/awesome-bert" -> "zhpmatrix/nlp-competitions-list-review"
"Jiakui/awesome-bert" -> "macanv/BERT-BiLSTM-CRF-NER"
"Jiakui/awesome-bert" -> "CyberZHG/keras-bert"
"Jiakui/awesome-bert" -> "BrikerMan/Kashgari"
"Jiakui/awesome-bert" -> "ymcui/Chinese-BERT-wwm"
"Jiakui/awesome-bert" -> "thunlp/ERNIE"
"Jiakui/awesome-bert" -> "brightmart/bert_language_understanding"
"Jiakui/awesome-bert" -> "PaddlePaddle/ERNIE"
"Jiakui/awesome-bert" -> "NLPScott/bert-Chinese-classification-task"
"Jiakui/awesome-bert" -> "tomohideshibata/BERT-related-papers"
"chokkan/crfsuite" -> "scrapinghub/python-crfsuite"
"chokkan/crfsuite" -> "Jekub/Wapiti"
"chokkan/crfsuite" -> "taku910/crfpp"
"chokkan/crfsuite" -> "chokkan/liblbfgs" ["e"=1]
"chokkan/crfsuite" -> "TeamHG-Memex/sklearn-crfsuite"
"chokkan/crfsuite" -> "timvieira/crf"
"chokkan/crfsuite" -> "knowitall/openie" ["e"=1]
"chokkan/crfsuite" -> "glample/tagger"
"chokkan/crfsuite" -> "clab/stack-lstm-ner"
"chokkan/crfsuite" -> "attardi/deepnl" ["e"=1]
"chokkan/crfsuite" -> "pystruct/pystruct"
"chokkan/crfsuite" -> "WladimirSidorenko/CRFSuite"
"chokkan/crfsuite" -> "percyliang/brown-cluster" ["e"=1]
"hanbt/learn_dl" -> "hanbt/awesome-deep-learning"
"hanbt/learn_dl" -> "ljpzzz/machinelearning" ["e"=1]
"hanbt/learn_dl" -> "macanv/BERT-BiLSTM-CRF-NER"
"hanbt/learn_dl" -> "jiqizhixin/ML-Tutorial-Experiment" ["e"=1]
"hanbt/learn_dl" -> "bojone/attention"
"hanbt/learn_dl" -> "brightmart/text_classification"
"hanbt/learn_dl" -> "nicodjimenez/lstm" ["e"=1]
"hanbt/learn_dl" -> "dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" ["e"=1]
"hanbt/learn_dl" -> "WenDesi/lihang_book_algorithm" ["e"=1]
"hanbt/learn_dl" -> "shiyybua/NER"
"hanbt/learn_dl" -> "nndl/nndl.github.io" ["e"=1]
"hanbt/learn_dl" -> "NELSONZHAO/zhihu"
"hanbt/learn_dl" -> "brightmart/albert_zh"
"hanbt/learn_dl" -> "wzyonggege/statistical-learning-method" ["e"=1]
"hanbt/learn_dl" -> "SnailTyan/deep-learning-papers-translation" ["e"=1]
"allenai/beaker-cli" -> "allenai/allennlp-language-modeling"
"allenai/beaker-cli" -> "allenai/allentune"
"fighting41love/cocoNLP" -> "zhanzecheng/Time_NLP"
"fighting41love/cocoNLP" -> "liuhuanyong/ComplexEventExtraction" ["e"=1]
"fighting41love/cocoNLP" -> "liuhuanyong/TextGrapher" ["e"=1]
"fighting41love/cocoNLP" -> "guotong1988/chinese_dictionary"
"fighting41love/cocoNLP" -> "ownthink/Jiagu"
"fighting41love/cocoNLP" -> "dongrixinyu/JioNLP"
"fighting41love/cocoNLP" -> "crownpku/Information-Extraction-Chinese"
"fighting41love/cocoNLP" -> "terrifyzhao/bert-utils"
"fighting41love/cocoNLP" -> "baidu/information-extraction" ["e"=1]
"fighting41love/cocoNLP" -> "wainshine/Company-Names-Corpus"
"fighting41love/cocoNLP" -> "wainshine/Chinese-Names-Corpus"
"fighting41love/cocoNLP" -> "yongzhuo/nlp_xiaojiang"
"fighting41love/cocoNLP" -> "fighting41love/Chinese_from_dongxiexidian"
"fighting41love/cocoNLP" -> "hankcs/pyhanlp"
"fighting41love/cocoNLP" -> "GaoQ1/rasa_chatbot_cn" ["e"=1]
"accordproject/concerto" -> "accordproject/web-components"
"accordproject/concerto" -> "accordproject/template-playground"
"accordproject/concerto" -> "accordproject/ergo"
"accordproject/concerto" -> "accordproject/template-engine"
"accordproject/concerto" -> "accordproject/template-archive"
"accordproject/concerto" -> "accordproject/models"
"accordproject/concerto" -> "accordproject/cicero-template-library"
"accordproject/concerto" -> "accordproject/markdown-transform"
"accordproject/concerto" -> "accordproject/techdocs"
"Jacen789/HotNewsAnalysis" -> "mattzheng/LangueOne"
"Jacen789/HotNewsAnalysis" -> "czy1999/Text-hotspot-mining"
"Jacen789/HotNewsAnalysis" -> "lliuz/KeigoHigashino"
"Jacen789/HotNewsAnalysis" -> "liuhuanyong/TopicCluster" ["e"=1]
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/LawCrimeMining"
"liuhuanyong/CrimeKgAssitant" -> "pengxiao-song/awesome-chinese-legal-resources"
"liuhuanyong/CrimeKgAssitant" -> "LiuHC0428/LAW-GPT"
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/TextGrapher" ["e"=1]
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/PersonRelationKnowledgeGraph" ["e"=1]
"liuhuanyong/CrimeKgAssitant" -> "zhang17173/Event-Extraction" ["e"=1]
"liuhuanyong/CrimeKgAssitant" -> "thunlp/OpenCLaP"
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/ComplexEventExtraction" ["e"=1]
"liuhuanyong/CrimeKgAssitant" -> "thunlp/CAIL"
"liuhuanyong/CrimeKgAssitant" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"liuhuanyong/CrimeKgAssitant" -> "zhihao-chen/QASystemOnMedicalGraph" ["e"=1]
"liuhuanyong/CrimeKgAssitant" -> "china-ai-law-challenge/CAIL2019"
"liuhuanyong/CrimeKgAssitant" -> "liuhuanyong/QAonMilitaryKG" ["e"=1]
"liuhuanyong/CrimeKgAssitant" -> "charlesXu86/Chatbot_CN" ["e"=1]
"liuhuanyong/CrimeKgAssitant" -> "LawRefBook/Laws"
"57ing/Sensitive-word" -> "fwwdn/sensitive-stop-words"
"57ing/Sensitive-word" -> "qloog/sensitive_words"
"57ing/Sensitive-word" -> "k5h9999/keywordfilter"
"57ing/Sensitive-word" -> "cjh0613/tencent-sensitive-words"
"57ing/Sensitive-word" -> "yuanjie-ai/ChineseSensitiveVocabulary"
"57ing/Sensitive-word" -> "nyzhhd/keyword"
"57ing/Sensitive-word" -> "adlered/DangerousSpamWords"
"57ing/Sensitive-word" -> "andyzty/sensitivewd-filter"
"57ing/Sensitive-word" -> "cjh0613/strict-sensitive-word"
"57ing/Sensitive-word" -> "morenjiujiu/sensitive_content_filter"
"57ing/Sensitive-word" -> "observerss/textfilter"
"57ing/Sensitive-word" -> "elulis/sensitive-words"
"57ing/Sensitive-word" -> "wanghaitao93/text_filter"
"kmkurn/pytorch-crf" -> "threelittlemonkeys/lstm-crf-pytorch"
"kmkurn/pytorch-crf" -> "rikeda71/TorchCRF"
"kmkurn/pytorch-crf" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"kmkurn/pytorch-crf" -> "ShannonAI/mrc-for-flat-nested-ner"
"kmkurn/pytorch-crf" -> "jiesutd/NCRFpp"
"kmkurn/pytorch-crf" -> "chakki-works/seqeval"
"kmkurn/pytorch-crf" -> "lonePatient/BERT-NER-Pytorch"
"kmkurn/pytorch-crf" -> "ZhixiuYe/HSCRF-pytorch"
"kmkurn/pytorch-crf" -> "ZhixiuYe/NER-pytorch"
"kmkurn/pytorch-crf" -> "panchunguang/ccks_baidu_entity_link"
"kmkurn/pytorch-crf" -> "brightmart/roberta_zh"
"kmkurn/pytorch-crf" -> "lonePatient/albert_pytorch"
"kmkurn/pytorch-crf" -> "nghuyong/ERNIE-Pytorch"
"kmkurn/pytorch-crf" -> "CLUEbenchmark/CLUENER2020"
"kmkurn/pytorch-crf" -> "MarvinTeichmann/ConvCRF" ["e"=1]
"xmxoxo/BERT-train2deploy" -> "SunYanCN/BAND"
"xmxoxo/BERT-train2deploy" -> "Jiakui/awesome-bert"
"xmxoxo/BERT-train2deploy" -> "macanv/BERT-BiLSTM-CRF-NER"
"xmxoxo/BERT-train2deploy" -> "NLPScott/bert-Chinese-classification-task"
"xmxoxo/BERT-train2deploy" -> "ymcui/Chinese-XLNet"
"xmxoxo/BERT-train2deploy" -> "chenghuige/wenzheng"
"xmxoxo/BERT-train2deploy" -> "ProHiryu/bert-chinese-ner"
"xmxoxo/BERT-train2deploy" -> "yongzhuo/nlp_xiaojiang"
"xmxoxo/BERT-train2deploy" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"xmxoxo/BERT-train2deploy" -> "BrikerMan/Kashgari"
"xmxoxo/BERT-train2deploy" -> "WenRichard/KBQA-BERT" ["e"=1]
"xmxoxo/BERT-train2deploy" -> "terrifyzhao/bert-utils"
"xmxoxo/BERT-train2deploy" -> "GuidoPaul/CAIL2019"
"xmxoxo/BERT-train2deploy" -> "songyingxin/Bert-TextClassification"
"xmxoxo/BERT-train2deploy" -> "jiangxinyang227/textClassifier"
"jingyihiter/mycail" -> "HenryYuxuanWang/judicial_competition"
"jingyihiter/mycail" -> "shelleyHLX/cail"
"jingyihiter/mycail" -> "renjunxiang/Competition_CAIL"
"jingyihiter/mycail" -> "FengBli/CAIL2018-toy"
"ShannonAI/glyce" -> "LeeSureman/Flat-Lattice-Transformer"
"ShannonAI/glyce" -> "ShannonAI/ChineseBert"
"ShannonAI/glyce" -> "v-mipeng/LexiconAugmentedNER"
"ShannonAI/glyce" -> "AidenHuen/FGN-NER"
"ShannonAI/glyce" -> "sinovation/ZEN"
"ShannonAI/glyce" -> "liuwei1206/CCW-NER"
"ShannonAI/glyce" -> "RowitZou/LGN"
"ShannonAI/glyce" -> "DianboWork/Graph4CNER"
"ShannonAI/glyce" -> "ShannonAI/mrc-for-flat-nested-ner"
"ShannonAI/glyce" -> "jiesutd/LatticeLSTM"
"ShannonAI/glyce" -> "OYE93/Chinese-NLP-Corpus"
"Y1ran/NLP-BERT--ChineseVersion" -> "NLPScott/bert-Chinese-classification-task"
"Y1ran/NLP-BERT--ChineseVersion" -> "Jiakui/awesome-bert"
"Y1ran/NLP-BERT--ChineseVersion" -> "brightmart/sentiment_analysis_fine_grain"
"Y1ran/NLP-BERT--ChineseVersion" -> "ProHiryu/bert-chinese-ner"
"Y1ran/NLP-BERT--ChineseVersion" -> "terrifyzhao/bert-utils"
"Y1ran/NLP-BERT--ChineseVersion" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"Y1ran/NLP-BERT--ChineseVersion" -> "ymcui/Chinese-XLNet"
"Y1ran/NLP-BERT--ChineseVersion" -> "Roshanson/TextInfoExp"
"Y1ran/NLP-BERT--ChineseVersion" -> "crownpku/Information-Extraction-Chinese"
"Y1ran/NLP-BERT--ChineseVersion" -> "brightmart/bert_language_understanding"
"Y1ran/NLP-BERT--ChineseVersion" -> "yuanxiaosc/BERT_Paper_Chinese_Translation"
"Y1ran/NLP-BERT--ChineseVersion" -> "zhpmatrix/bert-sequence-tagging"
"Y1ran/NLP-BERT--ChineseVersion" -> "brightmart/albert_zh"
"Y1ran/NLP-BERT--ChineseVersion" -> "smilelight/lightNLP"
"Y1ran/NLP-BERT--ChineseVersion" -> "yongzhuo/nlp_xiaojiang"
"sohucampus2019/coreEntityEmotion_baseline" -> "Chevalier1024/SOHU-baseline"
"sohucampus2019/coreEntityEmotion_baseline" -> "ouwenjie03/sohucampus2019"
"sohucampus2019/coreEntityEmotion_baseline" -> "lmhgithi/2019-sohu-finals"
"sohucampus2019/coreEntityEmotion_baseline" -> "rebornZH/2019-sohu-algorithm-competition"
"rebornZH/2019-sohu-algorithm-competition" -> "lmhgithi/2019-sohu-finals"
"rebornZH/2019-sohu-algorithm-competition" -> "FNo0/LIFT_for_NLP"
"rebornZH/2019-sohu-algorithm-competition" -> "FNo0/Knight"
"lmhgithi/2019-sohu-finals" -> "yuankeyi/2019-SOHU-Contest"
"lmhgithi/2019-sohu-finals" -> "rebornZH/2019-sohu-algorithm-competition"
"lmhgithi/2019-sohu-finals" -> "LLouice/Sohu2019"
"lmhgithi/2019-sohu-finals" -> "lmhgithi/SOHU-baseline"
"lmhgithi/2019-sohu-finals" -> "Zessay/sohu_2019"
"lmhgithi/2019-sohu-finals" -> "Chevalier1024/SOHU-baseline"
"lmhgithi/2019-sohu-finals" -> "sys1874/seq2seq-model-for-Sohu-2019"
"baidu/AnyQ" -> "NTMC-Community/MatchZoo"
"baidu/AnyQ" -> "baidu/lac"
"baidu/AnyQ" -> "baidu/Senta"
"baidu/AnyQ" -> "baidu/Familia"
"baidu/AnyQ" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"baidu/AnyQ" -> "brightmart/albert_zh"
"baidu/AnyQ" -> "crownpku/Awesome-Chinese-NLP"
"baidu/AnyQ" -> "baidu/DuReader" ["e"=1]
"baidu/AnyQ" -> "PaddlePaddle/ERNIE"
"baidu/AnyQ" -> "chatopera/insuranceqa-corpus-zh" ["e"=1]
"baidu/AnyQ" -> "brightmart/nlp_chinese_corpus"
"baidu/AnyQ" -> "baidu/Dialogue" ["e"=1]
"baidu/AnyQ" -> "facebookresearch/DrQA" ["e"=1]
"baidu/AnyQ" -> "candlewill/Dialog_Corpus" ["e"=1]
"baidu/AnyQ" -> "Embedding/Chinese-Word-Vectors"
"BangBOOM/Classical-Chinese" -> "raynardj/yuan"
"BangBOOM/Classical-Chinese" -> "LinDong123a/ancient-chinese-translator"
"BangBOOM/Classical-Chinese" -> "Ethan-yt/guwen-models"
"BangBOOM/Classical-Chinese" -> "Ethan-yt/CCLUE"
"CourteousWood/text-summarization" -> "1148270327/TextSummary"
"CourteousWood/text-summarization" -> "ztz818/Automatic-generation-of-text-summaries"
"CourteousWood/text-summarization" -> "hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization"
"nlpinaction/learning-nlp" -> "Roshanson/TextInfoExp"
"nlpinaction/learning-nlp" -> "jiangxinyang227/textClassifier"
"nlpinaction/learning-nlp" -> "Y1ran/NLP-BERT--ChineseVersion"
"nlpinaction/learning-nlp" -> "duoergun0729/nlp"
"nlpinaction/learning-nlp" -> "msgi/nlp-journey"
"nlpinaction/learning-nlp" -> "macanv/BERT-BiLSTM-CRF-NER"
"nlpinaction/learning-nlp" -> "smilelight/lightNLP"
"nlpinaction/learning-nlp" -> "terrifyzhao/bert-utils"
"nlpinaction/learning-nlp" -> "zjy-ucas/ChineseNER"
"nlpinaction/learning-nlp" -> "brightmart/albert_zh"
"nlpinaction/learning-nlp" -> "crownpku/Awesome-Chinese-NLP"
"nlpinaction/learning-nlp" -> "CyberZHG/keras-bert"
"nlpinaction/learning-nlp" -> "didi/ChineseNLP"
"nlpinaction/learning-nlp" -> "zhpmatrix/nlp-competitions-list-review"
"nlpinaction/learning-nlp" -> "loujie0822/DeepIE"
"circlePi/Bert_Chinese_Ner_pytorch" -> "yanwii/ChinsesNER-pytorch"
"circlePi/Bert_Chinese_Ner_pytorch" -> "lemonhu/NER-BERT-pytorch"
"circlePi/Bert_Chinese_Ner_pytorch" -> "liuyijiang1994/sohu_baseline"
"circlePi/Bert_Chinese_Ner_pytorch" -> "circlePi/knowledge-driven-dialogue-lic2019"
"circlePi/Bert_Chinese_Ner_pytorch" -> "llcing/BiLSTM-CRF-ChineseNER.pytorch"
"SmallVagetable/machine_learning_python" -> "KangCai/Machine-Learning-Algorithm" ["e"=1]
"SmallVagetable/machine_learning_python" -> "jiangxinyang227/textClassifier"
"SmallVagetable/machine_learning_python" -> "Erikfather/Decision_tree-python" ["e"=1]
"SmallVagetable/machine_learning_python" -> "wrayzheng/gmm-em-clustering" ["e"=1]
"SmallVagetable/machine_learning_python" -> "ice-tong/ML_demo" ["e"=1]
"SmallVagetable/machine_learning_python" -> "zhengyima/mnist-classification" ["e"=1]
"SmallVagetable/machine_learning_python" -> "wzy6642/Machine-Learning-in-Action-Python3" ["e"=1]
"SmallVagetable/machine_learning_python" -> "FuYanzhe2/Name-Entity-Recognition"
"SmallVagetable/machine_learning_python" -> "bojone/attention"
"SmallVagetable/machine_learning_python" -> "NLPScott/bert-Chinese-classification-task"
"SmallVagetable/machine_learning_python" -> "Anfany/Machine-Learning-for-Beginner-by-Python3"
"SmallVagetable/machine_learning_python" -> "Jack-Cherish/Machine-Learning" ["e"=1]
"SmallVagetable/machine_learning_python" -> "aceimnorstuvwxz/toutiao-text-classfication-dataset"
"declare-lab/CASCADE" -> "AniSkywalker/SarcasmDetection"
"declare-lab/CASCADE" -> "NLPrinceton/SARC"
"declare-lab/CASCADE" -> "silviu-oprea/iSarcasm"
"declare-lab/CASCADE" -> "NIHRIO/IronyDetectionInTwitter"
"yanyiwu/cppjieba" -> "yanyiwu/simhash" ["e"=1]
"yanyiwu/cppjieba" -> "thunlp/THULAC"
"yanyiwu/cppjieba" -> "HIT-SCIR/ltp"
"yanyiwu/cppjieba" -> "yanyiwu/nodejieba" ["e"=1]
"yanyiwu/cppjieba" -> "baidu/lac"
"yanyiwu/cppjieba" -> "yanyiwu/gojieba" ["e"=1]
"yanyiwu/cppjieba" -> "leethomason/tinyxml2" ["e"=1]
"yanyiwu/cppjieba" -> "fxsjy/jieba"
"yanyiwu/cppjieba" -> "NLPIR-team/NLPIR"
"yanyiwu/cppjieba" -> "yanyiwu/limonp" ["e"=1]
"yanyiwu/cppjieba" -> "Tencent/libco" ["e"=1]
"yanyiwu/cppjieba" -> "blade-build/blade-build" ["e"=1]
"yanyiwu/cppjieba" -> "koth/kcws"
"yanyiwu/cppjieba" -> "sogou/srpc" ["e"=1]
"yanyiwu/cppjieba" -> "chenshuo/muduo" ["e"=1]
"allenai/allennlp-demo" -> "allenai/allennlp-as-a-library-example"
"allenai/allennlp-demo" -> "allenai/allennlp-guide"
"thunlp/LegalPapers" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"thunlp/LegalPapers" -> "thunlp/CLAIM"
"thunlp/LegalPapers" -> "china-ai-law-challenge/CAIL2019"
"thunlp/LegalPapers" -> "thunlp/OpenCLaP"
"thunlp/LegalPapers" -> "thunlp/LegalPLMs"
"thunlp/LegalPapers" -> "thunlp/attribute_charge"
"thunlp/LegalPapers" -> "thunlp/CAIL"
"thunlp/LegalPapers" -> "thunlp/TopJudge"
"thunlp/LegalPapers" -> "china-ai-law-challenge/CAIL2020"
"thunlp/LegalPapers" -> "GuidoPaul/CAIL2019"
"thunlp/LegalPapers" -> "Liquid-Legal-Institute/Legal-Text-Analytics"
"thunlp/LegalPapers" -> "myx666/LeCaRD"
"thunlp/LegalPapers" -> "thunlp/CAIL2018"
"thunlp/LegalPapers" -> "maastrichtlawtech/awesome-legal-nlp"
"thunlp/LegalPapers" -> "china-ai-law-challenge/CAIL2021"
"MorvanZhou/NLP-Tutorials" -> "MorvanZhou/Tensorflow2-Tutorial" ["e"=1]
"MorvanZhou/NLP-Tutorials" -> "MorvanZhou/PyTorch-Tutorial" ["e"=1]
"MorvanZhou/NLP-Tutorials" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"MorvanZhou/NLP-Tutorials" -> "MorvanZhou/mnistGANs" ["e"=1]
"MorvanZhou/NLP-Tutorials" -> "aespresso/a_journey_into_math_of_ml"
"MorvanZhou/NLP-Tutorials" -> "wmathor/nlp-tutorial"
"MorvanZhou/NLP-Tutorials" -> "changwookjun/nlp-paper"
"MorvanZhou/NLP-Tutorials" -> "km1994/nlp_paper_study"
"MorvanZhou/NLP-Tutorials" -> "MorvanZhou/Tensorflow-Tutorial" ["e"=1]
"MorvanZhou/NLP-Tutorials" -> "msgi/nlp-journey"
"MorvanZhou/NLP-Tutorials" -> "leerumor/nlp_tutorial"
"MorvanZhou/NLP-Tutorials" -> "thu-coai/CDial-GPT"
"MorvanZhou/NLP-Tutorials" -> "zlsdu/Word-Embedding"
"MorvanZhou/NLP-Tutorials" -> "bojone/bert4keras"
"MorvanZhou/NLP-Tutorials" -> "luopeixiang/named_entity_recognition"
"thunlp/attribute_charge" -> "thunlp/TopJudge"
"thunlp/attribute_charge" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"thunlp/attribute_charge" -> "thunlp/CAIL2018"
"thunlp/attribute_charge" -> "thunlp/CAIL"
"thunlp/attribute_charge" -> "prometheusXN/LADAN"
"thunlp/attribute_charge" -> "PolarisRisingWar/pytorch_ljp"
"thunlp/attribute_charge" -> "brightmart/ai_law"
"thunlp/attribute_charge" -> "thunlp/LegalPapers"
"thunlp/attribute_charge" -> "thunlp/CLAIM"
"THUNLP-AIPoet/Datasets" -> "THUNLP-AIPoet/StylisticPoetry"
"THUNLP-AIPoet/Datasets" -> "THUNLP-AIPoet/WMPoetry"
"THUNLP-AIPoet/Datasets" -> "THUNLP-AIPoet/PaperList"
"THUNLP-AIPoet/Datasets" -> "THUNLP-AIPoet/BERT-CCPoem"
"THUNLP-AIPoet/Datasets" -> "THUNLP-AIPoet/MixPoet"
"THUNLP-AIPoet/Datasets" -> "THUNLP-AIPoet/CCPM"
"monk1337/Various-Attention-mechanisms" -> "monk1337/Unbox"
"monk1337/Various-Attention-mechanisms" -> "coughresearch/cough-classification"
"sujeek/chinese_nlp" -> "JackKuo666/NLP_basis"
"sujeek/chinese_nlp" -> "smilelight/lightNLP"
"sujeek/chinese_nlp" -> "Y1ran/NLP-BERT--ChineseVersion"
"sujeek/chinese_nlp" -> "cjymz886/text-cnn" ["e"=1]
"sujeek/chinese_nlp" -> "bainingchao/NLP-ML"
"sujeek/chinese_nlp" -> "aespresso/chinese_sentiment" ["e"=1]
"tanpero/JavaScript-Art-Tour" -> "tanpero/Reservator"
"tanpero/JavaScript-Art-Tour" -> "tanpero/Flaner"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "EricLingRui/NLP-tools"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "FanhuaandLuomu/ParseLawDocuments"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "GlassyWing/bi-lstm-crf"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "shen1994/chinese_bilstm_cnn_crf"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "zhang17173/Event-Extraction" ["e"=1]
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "renjunxiang/Competition_CAIL"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "buppt/ChineseNER"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "FuYanzhe2/Name-Entity-Recognition"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "bojone/crf"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "liuhuanyong/LawCrimeMining"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "UKPLab/elmo-bilstm-cnn-crf"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "supercoderhawk/DNN_CWS"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "fudannlp16/CWS_Dict"
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" -> "CLOVEXCWZ/NER_DEMO"
"liu-nlper/SLTK" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"liu-nlper/SLTK" -> "liu-nlper/NER-LSTM-CRF"
"liu-nlper/SLTK" -> "ZhixiuYe/NER-pytorch"
"liu-nlper/SLTK" -> "ZhixiuYe/HSCRF-pytorch"
"liu-nlper/SLTK" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"liu-nlper/SLTK" -> "FuYanzhe2/Name-Entity-Recognition"
"liu-nlper/SLTK" -> "achernodub/targer"
"liu-nlper/SLTK" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"liu-nlper/SLTK" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"liu-nlper/SLTK" -> "ZephyrChenzf/NER-Sequence-labeling--Textcnn-bilstm-crf-pytorch"
"liu-nlper/SLTK" -> "jiesutd/NCRFpp"
"liu-nlper/SLTK" -> "kyzhouhzau/BERT-NER"
"liuhuanyong/Word2Vector" -> "liuhuanyong/ChineseEmbedding"
"yanwii/ChinsesNER-pytorch" -> "DA-southampton/ner"
"yanwii/ChinsesNER-pytorch" -> "circlePi/Bert_Chinese_Ner_pytorch"
"yanwii/ChinsesNER-pytorch" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"yanwii/ChinsesNER-pytorch" -> "buppt/ChineseNER"
"yanwii/ChinsesNER-pytorch" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"yanwii/ChinsesNER-pytorch" -> "lemonhu/NER-BERT-pytorch"
"yanwii/ChinsesNER-pytorch" -> "luopeixiang/named_entity_recognition"
"yanwii/ChinsesNER-pytorch" -> "yumath/bertNER"
"yanwii/ChinsesNER-pytorch" -> "lonePatient/BERT-NER-Pytorch"
"yanwii/ChinsesNER-pytorch" -> "zhengyima/kg-baseline-pytorch" ["e"=1]
"yanwii/ChinsesNER-pytorch" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"yanwii/ChinsesNER-pytorch" -> "xuanzebi/BERT-CH-NER"
"yanwii/ChinsesNER-pytorch" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"yanwii/ChinsesNER-pytorch" -> "z814081807/DeepNER"
"yanwii/ChinsesNER-pytorch" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"maxim5/cs224n-2017-winter" -> "hankcs/CS224n"
"maxim5/cs224n-2017-winter" -> "nishithbsk/tensorflow_tutorials"
"thunlp/CAIL" -> "renjunxiang/Competition_CAIL"
"thunlp/CAIL" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"thunlp/CAIL" -> "china-ai-law-challenge/CAIL2019"
"thunlp/CAIL" -> "thunlp/CAIL2018"
"thunlp/CAIL" -> "shelleyHLX/cail"
"thunlp/CAIL" -> "thunlp/TopJudge"
"thunlp/CAIL" -> "thunlp/attribute_charge"
"thunlp/CAIL" -> "jingyihiter/mycail"
"thunlp/CAIL" -> "thunlp/OpenCLaP"
"thunlp/CAIL" -> "thunlp/LegalPapers"
"thunlp/CAIL" -> "liuhuanyong/LawCrimeMining"
"thunlp/CAIL" -> "brightmart/ai_law"
"thunlp/CAIL" -> "GuidoPaul/CAIL2019"
"thunlp/CAIL" -> "liuhuanyong/CrimeKgAssitant"
"thunlp/CAIL" -> "padeoe/cail2019"
"lanwuwei/SPM_toolkit" -> "YichenGong/Densely-Interactive-Inference-Network"
"lanwuwei/SPM_toolkit" -> "zhiguowang/BiMPM"
"lanwuwei/SPM_toolkit" -> "YerevaNN/DIIN-in-Keras"
"lanwuwei/SPM_toolkit" -> "lukecq1231/nli"
"lanwuwei/SPM_toolkit" -> "HouJP/kaggle-quora-question-pairs"
"lanwuwei/SPM_toolkit" -> "easonnie/multiNLI_encoder"
"lanwuwei/SPM_toolkit" -> "yuhsinliu1993/Quora_QuestionPairs_DL"
"lanwuwei/SPM_toolkit" -> "coetaur0/ESIM"
"lanwuwei/SPM_toolkit" -> "nelson-liu/paraphrase-id-tensorflow"
"lanwuwei/SPM_toolkit" -> "castorini/castor"
"padeoe/cail2019" -> "GuidoPaul/CAIL2019"
"padeoe/cail2019" -> "NoneWait/cail2019"
"padeoe/cail2019" -> "huanghuidmml/cail2019_track2"
"padeoe/cail2019" -> "china-ai-law-challenge/CAIL2019"
"padeoe/cail2019" -> "china-ai-law-challenge/CAIL2020"
"padeoe/cail2019" -> "china-ai-law-challenge/CAIL2021"
"padeoe/cail2019" -> "Executedone/CAIL2021_LAJS"
"padeoe/cail2019" -> "renjunxiang/Competition_CAIL"
"padeoe/cail2019" -> "thunlp/OpenCLaP"
"padeoe/cail2019" -> "hecongqing/CAIL2019"
"padeoe/cail2019" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"padeoe/cail2019" -> "caldreaming/CAIL"
"padeoe/cail2019" -> "YingZiqiang/LES-MMRC-Summary"
"padeoe/cail2019" -> "myx666/LeCaRD"
"padeoe/cail2019" -> "shelleyHLX/cail"
"Ailln/cn2an" -> "Wall-ee/chinese2digits"
"Ailln/cn2an" -> "zhanzecheng/Time_NLP"
"Ailln/cn2an" -> "kakaobrain/g2pm" ["e"=1]
"Ailln/cn2an" -> "speechio/chinese_text_normalization" ["e"=1]
"Ailln/cn2an" -> "GitYCC/g2pW" ["e"=1]
"Ailln/cn2an" -> "wenet-e2e/WeTextProcessing" ["e"=1]
"Ailln/cn2an" -> "baidu/DDParser"
"Ailln/cn2an" -> "liuhuanyong/MiningZhiDaoQACorpus" ["e"=1]
"Ailln/cn2an" -> "gumblex/zhconv"
"Ailln/cn2an" -> "nkrnrnk/BertPunc" ["e"=1]
"Ailln/cn2an" -> "ZhuiyiTechnology/roformer-sim"
"Ailln/cn2an" -> "425776024/nlpcda"
"Ailln/cn2an" -> "speechio/BigCiDian" ["e"=1]
"Ailln/cn2an" -> "zhanzecheng/Chinese_segment_augment"
"Ailln/cn2an" -> "open-speech/speech-aligner" ["e"=1]
"BangLiu/ArticlePairMatching" -> "BangLiu/StoryForest"
"BangLiu/ArticlePairMatching" -> "BangLiu/ConcepT"
"BangLiu/ArticlePairMatching" -> "alibaba-edu/simple-effective-text-matching"
"BangLiu/ArticlePairMatching" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"BangLiu/ArticlePairMatching" -> "chongyangtao/MRFN" ["e"=1]
"alibaba/esim-response-selection" -> "baidu/Dialogue" ["e"=1]
"alibaba/esim-response-selection" -> "pengming617/text_matching"
"alibaba/esim-response-selection" -> "alibaba-edu/simple-effective-text-matching"
"alibaba/esim-response-selection" -> "coetaur0/ESIM"
"alibaba/esim-response-selection" -> "terrifyzhao/text_matching"
"alibaba/esim-response-selection" -> "pengshuang/Text-Similarity"
"alibaba/esim-response-selection" -> "MarkWuNLP/MultiTurnResponseSelection" ["e"=1]
"alibaba/esim-response-selection" -> "cooelf/DeepUtteranceAggregation" ["e"=1]
"alibaba/esim-response-selection" -> "HsiaoYetGun/ESIM"
"alibaba/esim-response-selection" -> "GaoQ1/rasa_chatbot_cn" ["e"=1]
"alibaba/esim-response-selection" -> "DataTerminatorX/Keyword-BERT"
"alibaba/esim-response-selection" -> "baidu/AnyQ"
"alibaba/esim-response-selection" -> "ZhuiyiTechnology/pretrained-models"
"alibaba/esim-response-selection" -> "brightmart/bert_language_understanding"
"alibaba/esim-response-selection" -> "thu-coai/CrossWOZ" ["e"=1]
"wandouduoduo/SunRnn" -> "zpeng1989/RNN_learning_text_code"
"wandouduoduo/SunRnn" -> "renjunxiang/Text_Generate"
"wandouduoduo/SunRnn" -> "GaoPeng97/transformer-xl-chinese"
"wandouduoduo/SunRnn" -> "stardut/Text-Generate-RNN"
"wandouduoduo/SunRnn" -> "massquantity/text-generation-using-keras"
"wandouduoduo/SunRnn" -> "leido/char-rnn-cn"
"wandouduoduo/SunRnn" -> "yanqiangmiffy/char-rnn-writer"
"wandouduoduo/SunRnn" -> "liuaiting/Hip-Hop-Seq2Seq"
"GaoPeng97/transformer-xl-chinese" -> "wandouduoduo/SunRnn"
"GaoPeng97/transformer-xl-chinese" -> "renjunxiang/Text_Generate"
"GaoPeng97/transformer-xl-chinese" -> "imcaspar/gpt2-ml"
"GaoPeng97/transformer-xl-chinese" -> "Morizeyao/Decoders-Chinese-TF2.0"
"GaoPeng97/transformer-xl-chinese" -> "kimiyoung/transformer-xl" ["e"=1]
"GaoPeng97/transformer-xl-chinese" -> "Morizeyao/GPT2-Chinese"
"GaoPeng97/transformer-xl-chinese" -> "yangjianxin1/GPT2-chitchat"
"GaoPeng97/transformer-xl-chinese" -> "yangjianxin1/CPM"
"GaoPeng97/transformer-xl-chinese" -> "ymcui/Chinese-XLNet"
"GaoPeng97/transformer-xl-chinese" -> "JunnYu/Paddle-AI-Writer" ["e"=1]
"GaoPeng97/transformer-xl-chinese" -> "qingkongzhiqian/GPT2-Summary"
"GaoPeng97/transformer-xl-chinese" -> "brightmart/roberta_zh"
"GaoPeng97/transformer-xl-chinese" -> "ZhuiyiTechnology/pretrained-models"
"GaoPeng97/transformer-xl-chinese" -> "thu-coai/CDial-GPT"
"GaoPeng97/transformer-xl-chinese" -> "ymcui/Chinese-ELECTRA"
"okcy1016/poem-onthefly" -> "animalize/QuanTangshi"
"xueyouluo/fsauor2018" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"xueyouluo/fsauor2018" -> "chenghuige/wenzheng"
"xueyouluo/fsauor2018" -> "pengshuang/AI-Comp"
"xueyouluo/fsauor2018" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"xueyouluo/fsauor2018" -> "lixinsu/RCZoo" ["e"=1]
"uzaymacar/attention-mechanisms" -> "philipperemy/keras-attention"
"uzaymacar/attention-mechanisms" -> "CyberZHG/keras-self-attention"
"uzaymacar/attention-mechanisms" -> "monk1337/Various-Attention-mechanisms"
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "hecongqing/2018-daguan-competition"
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "moneyDboat/data_grand"
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "nlpjoe/daguan-classify-2018"
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "hu-qi/hu-qi.github.io" ["e"=1]
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "hu-qi/myAwesome" ["e"=1]
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "MaiJiantian/blockchain-kotlin" ["e"=1]
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "HelipengTony/Zeo_UC"
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "MaiJiantian/hyperledger" ["e"=1]
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "Iivre/kiana"
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" -> "hu-qi/GeekTimeAI"
"tsroten/pynlpir" -> "thunlp/THULAC-Python"
"tsroten/pynlpir" -> "HIT-SCIR/pyltp"
"tsroten/pynlpir" -> "NLPIR-team/NLPIR"
"tsroten/pynlpir" -> "haobibo/ICTCLAS_Python_Wrapper"
"tsroten/pynlpir" -> "thunlp/THULAC"
"tsroten/pynlpir" -> "HIT-SCIR/ltp"
"tsroten/pynlpir" -> "isnowfy/snownlp"
"tsroten/pynlpir" -> "hankcs/pyhanlp"
"tsroten/pynlpir" -> "ml-distribution/chinese-corpus"
"tsroten/pynlpir" -> "zhenlohuang/python-nlpir"
"tsroten/pynlpir" -> "taozhijiang/chinese_correct_wsd"
"tsroten/pynlpir" -> "2shou/TextGrocery"
"tsroten/pynlpir" -> "thunlp/NRE" ["e"=1]
"tsroten/pynlpir" -> "koth/kcws"
"tsroten/pynlpir" -> "FudanNLP/fnlp"
"WojciechMula/pyahocorasick" -> "abusix/ahocorapy"
"WojciechMula/pyahocorasick" -> "scoder/acora"
"WojciechMula/pyahocorasick" -> "wharris/esmre"
"WojciechMula/pyahocorasick" -> "hankcs/AhoCorasickDoubleArrayTrie"
"WojciechMula/pyahocorasick" -> "pytries/marisa-trie"
"WojciechMula/pyahocorasick" -> "ChineseGLUE/ChineseGLUE"
"WojciechMula/pyahocorasick" -> "google/pygtrie"
"WojciechMula/pyahocorasick" -> "chakki-works/seqeval"
"WojciechMula/pyahocorasick" -> "ztane/python-Levenshtein" ["e"=1]
"WojciechMula/pyahocorasick" -> "xizhicode/ahocorasick-python"
"WojciechMula/pyahocorasick" -> "shangjingbo1226/AutoPhrase"
"WojciechMula/pyahocorasick" -> "zhanzecheng/Time_NLP"
"WojciechMula/pyahocorasick" -> "kyzhouhzau/BERT-NER"
"WojciechMula/pyahocorasick" -> "airaria/TextBrewer"
"WojciechMula/pyahocorasick" -> "ShannonAI/mrc-for-flat-nested-ner"
"viewlei/fsauor2018" -> "Syd-Q/Text-Mining-Sentiment-Analysis-2020-"
"kpe/bert-for-tf2" -> "kamalkraj/ALBERT-TF2.0"
"kpe/bert-for-tf2" -> "brightmart/albert_zh"
"kpe/bert-for-tf2" -> "CyberZHG/keras-bert"
"kpe/bert-for-tf2" -> "kamalkraj/BERT-NER-TF"
"kpe/bert-for-tf2" -> "BrikerMan/Kashgari"
"kpe/bert-for-tf2" -> "brightmart/roberta_zh"
"kpe/bert-for-tf2" -> "google-research/albert"
"kpe/bert-for-tf2" -> "bojone/bert_in_keras"
"kpe/bert-for-tf2" -> "bojone/bert4keras"
"kpe/bert-for-tf2" -> "tensorflow/addons" ["e"=1]
"kpe/bert-for-tf2" -> "ChineseGLUE/ChineseGLUE"
"kpe/bert-for-tf2" -> "CyberZHG/keras-transformer"
"kpe/bert-for-tf2" -> "kyzhouhzau/BERT-NER"
"kpe/bert-for-tf2" -> "Separius/BERT-keras"
"kpe/bert-for-tf2" -> "yongzhuo/Keras-TextClassification"
"changwookjun/nlp-paper" -> "THUNLP-MT/TG-Reading-List" ["e"=1]
"changwookjun/nlp-paper" -> "MLNLP-World/Top-AI-Conferences-Paper-with-Code"
"changwookjun/nlp-paper" -> "soulbliss/NLP-conference-compendium"
"changwookjun/nlp-paper" -> "loujie0822/Pre-trained-Models"
"changwookjun/nlp-paper" -> "km1994/nlp_paper_study"
"changwookjun/nlp-paper" -> "IndexFziQ/GNN4NLP-Papers" ["e"=1]
"changwookjun/nlp-paper" -> "loujie0822/DeepIE"
"changwookjun/nlp-paper" -> "huawei-noah/Pretrained-Language-Model"
"changwookjun/nlp-paper" -> "thunlp/NREPapers" ["e"=1]
"changwookjun/nlp-paper" -> "msgi/nlp-journey"
"changwookjun/nlp-paper" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"changwookjun/nlp-paper" -> "ZhuiyiTechnology/pretrained-models"
"changwookjun/nlp-paper" -> "quincyliang/nlp-data-augmentation"
"changwookjun/nlp-paper" -> "DA-southampton/Tech_Aarticle"
"changwookjun/nlp-paper" -> "ChineseGLUE/ChineseGLUE"
"stanleylsx/text_classifier_tf2" -> "stanleylsx/app_comments_spider"
"stanleylsx/text_classifier_tf2" -> "stanleylsx/entity_extractor_by_ner"
"stanleylsx/text_classifier_tf2" -> "stanleylsx/entity_extractor_by_pointer"
"stanleylsx/text_classifier_tf2" -> "stanleylsx/bert_nlu_joint"
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "threelittlemonkeys/lstm-crf-pytorch"
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "sgrvinod/Deep-Tutorials-for-PyTorch" ["e"=1]
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "allanj/pytorch_neural_crf"
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" -> "epwalsh/pytorch-crf"
"allenai/allennlp-as-a-library-example" -> "allenai/allennlp-demo"
"YichenGong/Densely-Interactive-Inference-Network" -> "YerevaNN/DIIN-in-Keras"
"YichenGong/Densely-Interactive-Inference-Network" -> "lukecq1231/nli"
"YichenGong/Densely-Interactive-Inference-Network" -> "taoshen58/DiSAN" ["e"=1]
"YichenGong/Densely-Interactive-Inference-Network" -> "zhiguowang/BiMPM"
"YichenGong/Densely-Interactive-Inference-Network" -> "nyu-mll/multiNLI"
"YichenGong/Densely-Interactive-Inference-Network" -> "lanwuwei/SPM_toolkit"
"YichenGong/Densely-Interactive-Inference-Network" -> "erickrf/multiffn-nli"
"YichenGong/Densely-Interactive-Inference-Network" -> "shuohangwang/SeqMatchSeq" ["e"=1]
"YichenGong/Densely-Interactive-Inference-Network" -> "shuuki4/decomposable_attention"
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" -> "pengshuang/AI-Comp"
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" -> "xueyouluo/fsauor2018"
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" -> "chenghuige/wenzheng"
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" -> "AIChallenger/AI_Challenger_2018"
"foamliu/Sentiment-Analysis" -> "pengshuang/AI-Comp"
"foamliu/Sentiment-Analysis" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"foamliu/Sentiment-Analysis" -> "chaoming0625/WaiMaiOpinionMiner"
"foamliu/Sentiment-Analysis" -> "YZHANG1270/Aspect-Based-Sentiment-Analysis" ["e"=1]
"foamliu/Sentiment-Analysis" -> "viewlei/fsauor2018"
"foamliu/Sentiment-Analysis" -> "Syd-Q/Text-Mining-Sentiment-Analysis-2020-"
"foamliu/Sentiment-Analysis" -> "chenghuige/wenzheng"
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" -> "nlpjoe/2018-CCL-UIIMCS"
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" -> "idorce/sentiment-analysis-ccf-bdci"
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" -> "yilifzf/BDCI_Car_2018"
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" -> "nlpjoe/daguan-classify-2018"
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" -> "312shan/Subject-and-Sentiment-Analysis"
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" -> "chantcalf/ccf-car"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "pengshuang/AI-Comp"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "chenghuige/wenzheng"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "xueyouluo/fsauor2018"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "foamliu/Sentiment-Analysis"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "yilifzf/BDCI_Car_2018"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "wxue004cs/GCAE" ["e"=1]
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "YZHANG1270/Aspect-Based-Sentiment-Analysis" ["e"=1]
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "viewlei/fsauor2018"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "AIChallenger/AI_Challenger_2018"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "brightmart/sentiment_analysis_fine_grain"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018"
"BigHeartC/Al_challenger_2018_sentiment_analysis" -> "scruel/sentiment_analysis"
"yilifzf/BDCI_Car_2018" -> "nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018"
"yilifzf/BDCI_Car_2018" -> "chenghuige/wenzheng"
"yilifzf/BDCI_Car_2018" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"yilifzf/BDCI_Car_2018" -> "xueyouluo/fsauor2018"
"yilifzf/BDCI_Car_2018" -> "PPshrimpGo/BDCI2018-ChinauUicom-1st-solution" ["e"=1]
"yilifzf/BDCI_Car_2018" -> "pengshuang/AI-Comp"
"yilifzf/BDCI_Car_2018" -> "PandasCute/2018-CCF-BDCI-China-Unicom-Research-Institute-top2" ["e"=1]
"yilifzf/BDCI_Car_2018" -> "nlpjoe/2018-CCL-UIIMCS"
"yilifzf/BDCI_Car_2018" -> "Dikea/Dialog-System-with-Task-Retrieval-and-Seq2seq" ["e"=1]
"yilifzf/BDCI_Car_2018" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"yilifzf/BDCI_Car_2018" -> "zhanzecheng/SOHU_competition"
"yilifzf/BDCI_Car_2018" -> "zengbin93/jddc_solution_4th" ["e"=1]
"yilifzf/BDCI_Car_2018" -> "bojone/kg-2019" ["e"=1]
"yilifzf/BDCI_Car_2018" -> "chantcalf/ccf-car"
"yilifzf/BDCI_Car_2018" -> "zhpmatrix/nlp-competitions-list-review"
"FNo0/LIFT_for_NLP" -> "FNo0/Knight"
"moxiu2012/PJ_NLP" -> "littletiger0712/text-classification-mutli-label"
"moxiu2012/PJ_NLP" -> "murray-z/Multi_Label_TextCNN"
"moxiu2012/PJ_NLP" -> "lushishuai/BERT-ROBERTA-pytorch-multi-label-classification"
"moxiu2012/PJ_NLP" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"moxiu2012/PJ_NLP" -> "percent4/keras_bert_multi_label_cls"
"hecongqing/Legal-Charge-Prediction" -> "yangtaoxf/spider_lawyer_case_doc"
"hecongqing/Legal-Charge-Prediction" -> "xmmmmmovo/FaBao"
"fighting41love/Chinese_from_dongxiexidian" -> "foowaa/Chinese_from_dongxiexidian"
"fighting41love/Chinese_from_dongxiexidian" -> "thunlp/THUOCL"
"fighting41love/Chinese_from_dongxiexidian" -> "guotong1988/chinese_dictionary"
"fighting41love/Chinese_from_dongxiexidian" -> "zhangyics/Chinese-abbreviation-dataset"
"fighting41love/Chinese_from_dongxiexidian" -> "fighting41love/cocoNLP"
"fighting41love/Chinese_from_dongxiexidian" -> "tinyfool/ChineseWithEnglish"
"fighting41love/Chinese_from_dongxiexidian" -> "practicingman/chinese_ulmfit" ["e"=1]
"lemonhu/NER-BERT-pytorch" -> "circlePi/Bert_Chinese_Ner_pytorch"
"lemonhu/NER-BERT-pytorch" -> "weizhepei/BERT-NER"
"lemonhu/NER-BERT-pytorch" -> "kamalkraj/BERT-NER"
"lemonhu/NER-BERT-pytorch" -> "hemingkx/CLUENER2020"
"lemonhu/NER-BERT-pytorch" -> "lonePatient/BERT-NER-Pytorch"
"lemonhu/NER-BERT-pytorch" -> "yanwii/ChinsesNER-pytorch"
"lemonhu/NER-BERT-pytorch" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"lemonhu/NER-BERT-pytorch" -> "CLUEbenchmark/CLUENER2020"
"lemonhu/NER-BERT-pytorch" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"lemonhu/NER-BERT-pytorch" -> "ai-forever/ner-bert"
"lemonhu/NER-BERT-pytorch" -> "Kyubyong/bert_ner"
"lemonhu/NER-BERT-pytorch" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"lemonhu/NER-BERT-pytorch" -> "v-mipeng/LexiconAugmentedNER"
"lemonhu/NER-BERT-pytorch" -> "panchunguang/ccks_baidu_entity_link"
"lemonhu/NER-BERT-pytorch" -> "LeeSureman/Flat-Lattice-Transformer"
"yongyehuang/zhihu-text-classification" -> "Magic-Bubble/Zhihu"
"yongyehuang/zhihu-text-classification" -> "chenyuntc/PyTorchText"
"yongyehuang/zhihu-text-classification" -> "coderSkyChen/zhihu_kanshan_cup_2017"
"yongyehuang/zhihu-text-classification" -> "RandolphVI/Multi-Label-Text-Classification"
"yongyehuang/zhihu-text-classification" -> "yilifzf/BDCI_Car_2018"
"yongyehuang/zhihu-text-classification" -> "NLPScott/bert-Chinese-classification-task"
"yongyehuang/zhihu-text-classification" -> "brightmart/bert_language_understanding"
"yongyehuang/zhihu-text-classification" -> "chenghuige/wenzheng"
"yongyehuang/zhihu-text-classification" -> "MLjian/TextClassificationImplement"
"yongyehuang/zhihu-text-classification" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"yongyehuang/zhihu-text-classification" -> "lancopku/SGM" ["e"=1]
"liuhuanyong/SentenceSimilarity" -> "liuhuanyong/SiameseSentenceSimilarity"
"liuhuanyong/SentenceSimilarity" -> "yanqiangmiffy/sentence-similarity"
"liuhuanyong/SentenceSimilarity" -> "yaleimeng/Final_word_Similarity"
"liuhuanyong/SentenceSimilarity" -> "liuhuanyong/ChineseEmbedding"
"liuhuanyong/SentenceSimilarity" -> "cjymz886/sentence-similarity"
"liuhuanyong/SentenceSimilarity" -> "liuhuanyong/ChineseNLPCorpus"
"liuhuanyong/SentenceSimilarity" -> "IAdmireu/ChineseSTS"
"liuhuanyong/SentenceSimilarity" -> "pengming617/bert_textMatching"
"lonePatient/BERT-NER-Pytorch" -> "CLUEbenchmark/CLUENER2020"
"lonePatient/BERT-NER-Pytorch" -> "loujie0822/DeepIE"
"lonePatient/BERT-NER-Pytorch" -> "z814081807/DeepNER"
"lonePatient/BERT-NER-Pytorch" -> "luopeixiang/named_entity_recognition"
"lonePatient/BERT-NER-Pytorch" -> "macanv/BERT-BiLSTM-CRF-NER"
"lonePatient/BERT-NER-Pytorch" -> "LeeSureman/Flat-Lattice-Transformer"
"lonePatient/BERT-NER-Pytorch" -> "ymcui/Chinese-BERT-wwm"
"lonePatient/BERT-NER-Pytorch" -> "CLUEbenchmark/CLUE"
"lonePatient/BERT-NER-Pytorch" -> "ShannonAI/mrc-for-flat-nested-ner"
"lonePatient/BERT-NER-Pytorch" -> "jiesutd/LatticeLSTM"
"lonePatient/BERT-NER-Pytorch" -> "DA-southampton/ner"
"lonePatient/BERT-NER-Pytorch" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"lonePatient/BERT-NER-Pytorch" -> "kamalkraj/BERT-NER"
"lonePatient/BERT-NER-Pytorch" -> "bojone/bert4keras"
"lonePatient/BERT-NER-Pytorch" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"wainshine/Company-Names-Corpus" -> "wainshine/Chinese-Names-Corpus"
"wainshine/Company-Names-Corpus" -> "fighting41love/cocoNLP"
"wainshine/Company-Names-Corpus" -> "nonamestreet/weixin_public_corpus"
"wainshine/Company-Names-Corpus" -> "ownthink/Jiagu"
"wainshine/Company-Names-Corpus" -> "zjy-ucas/ChineseNER"
"wainshine/Company-Names-Corpus" -> "NLPScott/bert-Chinese-classification-task"
"wainshine/Company-Names-Corpus" -> "smoothnlp/FinancialDatasets"
"wainshine/Company-Names-Corpus" -> "crownpku/Information-Extraction-Chinese"
"wainshine/Company-Names-Corpus" -> "observerss/ngender"
"wainshine/Company-Names-Corpus" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"wainshine/Company-Names-Corpus" -> "InsaneLife/ChineseNLPCorpus"
"wainshine/Company-Names-Corpus" -> "zhanzecheng/Chinese_segment_augment"
"wainshine/Company-Names-Corpus" -> "yongzhuo/nlp_xiaojiang"
"wainshine/Company-Names-Corpus" -> "CLUEbenchmark/CLUENER2020"
"wainshine/Company-Names-Corpus" -> "thunlp/THUOCL"
"Law-AI/summarization" -> "Law-AI/DELSumm"
"Law-AI/summarization" -> "Law-AI/semantic-segmentation"
"Law-AI/summarization" -> "Law-AI/codscomad2023tutorial"
"SimmerChan/corpus" -> "loujie0822/DeepIE"
"SimmerChan/corpus" -> "OYE93/Chinese-NLP-Corpus"
"SimmerChan/corpus" -> "CLUEbenchmark/CLUENER2020"
"SimmerChan/corpus" -> "luge-ai/luge-ai"
"SimmerChan/corpus" -> "BDBC-KG-NLP/QA-Survey-CN"
"SimmerChan/corpus" -> "liuhuanyong/ChineseEmbedding"
"SimmerChan/corpus" -> "InsaneLife/ChineseNLPCorpus"
"SimmerChan/corpus" -> "CLUEbenchmark/CLUEDatasetSearch"
"SimmerChan/corpus" -> "z814081807/DeepNER"
"SimmerChan/corpus" -> "ZhuiyiTechnology/pretrained-models"
"SimmerChan/corpus" -> "airaria/TextBrewer"
"SimmerChan/corpus" -> "zhpmatrix/nlp-competitions-list-review"
"SimmerChan/corpus" -> "LeeSureman/Flat-Lattice-Transformer"
"SimmerChan/corpus" -> "ZhuiyiTechnology/simbert"
"SimmerChan/corpus" -> "TingFree/NLPer-Arsenal"
"qingyujean/ssc" -> "wenyangchou/SimilarCharactor"
"qingyujean/ssc" -> "houbb/nlp-hanzi-similar"
"qingyujean/ssc" -> "contr4l/SimilarCharacter"
"qingyujean/ssc" -> "wdimmy/Automatic-Corpus-Generation"
"qingyujean/ssc" -> "gitabtion/SoftMaskedBert-PyTorch"
"qingyujean/ssc" -> "hiyoung123/YoungCorrector" ["e"=1]
"jasonwei20/eda_nlp" -> "zhanlaoban/EDA_NLP_for_Chinese"
"jasonwei20/eda_nlp" -> "makcedward/nlpaug" ["e"=1]
"jasonwei20/eda_nlp" -> "google-research/uda" ["e"=1]
"jasonwei20/eda_nlp" -> "namisan/mt-dnn"
"jasonwei20/eda_nlp" -> "styfeng/DataAug4NLP" ["e"=1]
"jasonwei20/eda_nlp" -> "princeton-nlp/SimCSE"
"jasonwei20/eda_nlp" -> "brightmart/roberta_zh"
"jasonwei20/eda_nlp" -> "QData/TextAttack" ["e"=1]
"jasonwei20/eda_nlp" -> "brightmart/albert_zh"
"jasonwei20/eda_nlp" -> "425776024/nlpcda"
"jasonwei20/eda_nlp" -> "ZhuiyiTechnology/pretrained-models"
"jasonwei20/eda_nlp" -> "yongzhuo/nlp_xiaojiang"
"jasonwei20/eda_nlp" -> "dbiir/UER-py"
"jasonwei20/eda_nlp" -> "huawei-noah/Pretrained-Language-Model"
"jasonwei20/eda_nlp" -> "Tencent/NeuralNLP-NeuralClassifier"
"houbb/opencc4j" -> "houbb/pinyin"
"houbb/opencc4j" -> "houbb/segment"
"houbb/opencc4j" -> "houbb/word-checker"
"houbb/opencc4j" -> "houbb/nlp-hanzi-similar"
"houbb/opencc4j" -> "infinilabs/analysis-stconvert" ["e"=1]
"houbb/opencc4j" -> "luhuiguo/chinese-utils" ["e"=1]
"houbb/opencc4j" -> "tianlian0/duplicate-check-sample" ["e"=1]
"houbb/opencc4j" -> "BYVoid/OpenCC"
"houbb/opencc4j" -> "huaban/jieba-analysis" ["e"=1]
"houbb/opencc4j" -> "NLPchina/nlp-lang" ["e"=1]
"RandolphVI/Multi-Label-Text-Classification" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"RandolphVI/Multi-Label-Text-Classification" -> "RandolphVI/Hierarchical-Multi-Label-Text-Classification"
"RandolphVI/Multi-Label-Text-Classification" -> "lancopku/SGM" ["e"=1]
"RandolphVI/Multi-Label-Text-Classification" -> "inspirehep/magpie"
"RandolphVI/Multi-Label-Text-Classification" -> "chenzhi1992/Multi-Label-Text-Classification"
"RandolphVI/Multi-Label-Text-Classification" -> "Tencent/NeuralNLP-NeuralClassifier"
"RandolphVI/Multi-Label-Text-Classification" -> "yongyehuang/zhihu-text-classification"
"RandolphVI/Multi-Label-Text-Classification" -> "hellonlp/classifier-multi-label"
"RandolphVI/Multi-Label-Text-Classification" -> "lancopku/SU4MLC" ["e"=1]
"RandolphVI/Multi-Label-Text-Classification" -> "yourh/AttentionXML" ["e"=1]
"RandolphVI/Multi-Label-Text-Classification" -> "Vincent131499/Multi_Label_Classifier_finetune"
"RandolphVI/Multi-Label-Text-Classification" -> "hscspring/Multi-Label-Text-Classification-for-Chinese"
"RandolphVI/Multi-Label-Text-Classification" -> "brightmart/multi-label_classification"
"RandolphVI/Multi-Label-Text-Classification" -> "brightmart/sentiment_analysis_fine_grain"
"RandolphVI/Multi-Label-Text-Classification" -> "yongzhuo/Keras-TextClassification"
"kk7nc/RMDL" -> "kk7nc/HDLTex"
"kk7nc/RMDL" -> "TobiasLee/Text-Classification" ["e"=1]
"kk7nc/RMDL" -> "castorini/hedwig" ["e"=1]
"Separius/BERT-keras" -> "CyberZHG/keras-bert"
"Separius/BERT-keras" -> "brightmart/bert_language_understanding"
"Separius/BERT-keras" -> "lsdefine/attention-is-all-you-need-keras"
"Separius/BERT-keras" -> "kpot/keras-transformer"
"Separius/BERT-keras" -> "bojone/bert_in_keras"
"Separius/BERT-keras" -> "strongio/keras-elmo"
"Separius/BERT-keras" -> "allenai/bilm-tf" ["e"=1]
"Separius/BERT-keras" -> "philipperemy/keras-attention"
"Separius/BERT-keras" -> "strongio/keras-bert"
"Separius/BERT-keras" -> "Jiakui/awesome-bert"
"Separius/BERT-keras" -> "BrikerMan/Kashgari"
"Separius/BERT-keras" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"Separius/BERT-keras" -> "huggingface/hmtl" ["e"=1]
"Separius/BERT-keras" -> "bojone/attention"
"Separius/BERT-keras" -> "brightmart/sentiment_analysis_fine_grain"
"brightmart/bert_language_understanding" -> "brightmart/sentiment_analysis_fine_grain"
"brightmart/bert_language_understanding" -> "Separius/BERT-keras"
"brightmart/bert_language_understanding" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"brightmart/bert_language_understanding" -> "NLPScott/bert-Chinese-classification-task"
"brightmart/bert_language_understanding" -> "Jiakui/awesome-bert"
"brightmart/bert_language_understanding" -> "brightmart/text_classification"
"brightmart/bert_language_understanding" -> "kyzhouhzau/BERT-NER"
"brightmart/bert_language_understanding" -> "ProHiryu/bert-chinese-ner"
"brightmart/bert_language_understanding" -> "allenai/bilm-tf" ["e"=1]
"brightmart/bert_language_understanding" -> "brightmart/nlu_sim"
"brightmart/bert_language_understanding" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"brightmart/bert_language_understanding" -> "chenghuige/wenzheng"
"brightmart/bert_language_understanding" -> "yilifzf/BDCI_Car_2018"
"brightmart/bert_language_understanding" -> "ChineseGLUE/ChineseGLUE"
"brightmart/bert_language_understanding" -> "AtmaHou/Task-Oriented-Dialogue-Research-Progress-Survey" ["e"=1]
"brightmart/sentiment_analysis_fine_grain" -> "brightmart/bert_language_understanding"
"brightmart/sentiment_analysis_fine_grain" -> "chenghuige/wenzheng"
"brightmart/sentiment_analysis_fine_grain" -> "NLPScott/bert-Chinese-classification-task"
"brightmart/sentiment_analysis_fine_grain" -> "pengshuang/AI-Comp"
"brightmart/sentiment_analysis_fine_grain" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"brightmart/sentiment_analysis_fine_grain" -> "kaushaltrivedi/bert-toxic-comments-multilabel"
"brightmart/sentiment_analysis_fine_grain" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"brightmart/sentiment_analysis_fine_grain" -> "xueyouluo/fsauor2018"
"brightmart/sentiment_analysis_fine_grain" -> "AIChallenger/AI_Challenger_2018"
"brightmart/sentiment_analysis_fine_grain" -> "kyzhouhzau/BERT-NER"
"brightmart/sentiment_analysis_fine_grain" -> "Jiakui/awesome-bert"
"brightmart/sentiment_analysis_fine_grain" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"brightmart/sentiment_analysis_fine_grain" -> "Y1ran/NLP-BERT--ChineseVersion"
"brightmart/sentiment_analysis_fine_grain" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"brightmart/sentiment_analysis_fine_grain" -> "lancopku/SGM" ["e"=1]
"MachineLP/TextMatch" -> "zhaogaofeng611/TextMatch"
"MachineLP/TextMatch" -> "terrifyzhao/text_matching"
"MachineLP/TextMatch" -> "ZhuiyiTechnology/pretrained-models"
"MachineLP/TextMatch" -> "yongzhuo/nlp_xiaojiang"
"MachineLP/TextMatch" -> "terrifyzhao/bert-utils"
"MachineLP/TextMatch" -> "loujie0822/DeepIE"
"MachineLP/TextMatch" -> "BDBC-KG-NLP/QA-Survey-CN"
"MachineLP/TextMatch" -> "zhanlaoban/EDA_NLP_for_Chinese"
"MachineLP/TextMatch" -> "murray-z/text_clustering"
"MachineLP/TextMatch" -> "wangle1218/deep_text_matching"
"MachineLP/TextMatch" -> "425776024/nlpcda"
"MachineLP/TextMatch" -> "WenRichard/KBQA-BERT" ["e"=1]
"MachineLP/TextMatch" -> "bojone/attention"
"MachineLP/TextMatch" -> "charlesXu86/Chatbot_CN" ["e"=1]
"MachineLP/TextMatch" -> "liuhuanyong/ChineseEmbedding"
"keitakurita/practical-torchtext" -> "atnlp/torchtext-summary"
"keitakurita/practical-torchtext" -> "keitakurita/Practical_NLP_in_PyTorch"
"jiesutd/LatticeLSTM" -> "LeeSureman/Flat-Lattice-Transformer"
"jiesutd/LatticeLSTM" -> "luopeixiang/named_entity_recognition"
"jiesutd/LatticeLSTM" -> "zjy-ucas/ChineseNER"
"jiesutd/LatticeLSTM" -> "v-mipeng/LexiconAugmentedNER"
"jiesutd/LatticeLSTM" -> "jiesutd/NCRFpp"
"jiesutd/LatticeLSTM" -> "macanv/BERT-BiLSTM-CRF-NER"
"jiesutd/LatticeLSTM" -> "CLUEbenchmark/CLUENER2020"
"jiesutd/LatticeLSTM" -> "loujie0822/DeepIE"
"jiesutd/LatticeLSTM" -> "hltcoe/golden-horse"
"jiesutd/LatticeLSTM" -> "FuYanzhe2/Name-Entity-Recognition"
"jiesutd/LatticeLSTM" -> "Determined22/zh-NER-TF"
"jiesutd/LatticeLSTM" -> "lonePatient/BERT-NER-Pytorch"
"jiesutd/LatticeLSTM" -> "buppt/ChineseNER"
"jiesutd/LatticeLSTM" -> "crownpku/Information-Extraction-Chinese"
"jiesutd/LatticeLSTM" -> "guillaumegenthial/sequence_tagging"
"hecongqing/2018-daguan-competition" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"hecongqing/2018-daguan-competition" -> "moneyDboat/data_grand"
"hecongqing/2018-daguan-competition" -> "nlpjoe/daguan-classify-2018"
"hecongqing/2018-daguan-competition" -> "MLjian/TextClassificationImplement"
"hecongqing/2018-daguan-competition" -> "Rowchen/Text-classifier"
"hecongqing/2018-daguan-competition" -> "CortexFoundation/-"
"hecongqing/2018-daguan-competition" -> "Magic-Bubble/Zhihu"
"hecongqing/2018-daguan-competition" -> "yuquanle/2018-daguan-competition-rank4"
"hecongqing/2018-daguan-competition" -> "chenghuige/wenzheng"
"hecongqing/2018-daguan-competition" -> "AbnerYang/2016CCF-SouGou" ["e"=1]
"hecongqing/2018-daguan-competition" -> "nzc/tencent-contest" ["e"=1]
"liuwei1206/CCW-NER" -> "PhantomGrapes/MultiDigraphNER"
"liuwei1206/CCW-NER" -> "zerohd4869/Chinese-NER"
"allanj/ner_incomplete_annotation" -> "allanj/neural-partialCRF"
"allanj/ner_incomplete_annotation" -> "allanj/ner_with_dependency"
"allanj/ner_incomplete_annotation" -> "ZhuiyiTechnology/AutoIE"
"leodotnet/neural-chinese-address-parsing" -> "xueyouluo/ccks2021-track2-code"
"leodotnet/neural-chinese-address-parsing" -> "yihenglu/chinese-address-segment"
"leodotnet/neural-chinese-address-parsing" -> "wodejiafeiyu/ccks2021-track3-top1"
"allanj/ner_with_dependency" -> "allanj/ner_incomplete_annotation"
"PhantomGrapes/MultiDigraphNER" -> "liuwei1206/CCW-NER"
"RowitZou/LGN" -> "DianboWork/Graph4CNER"
"RowitZou/LGN" -> "liuwei1206/CCW-NER"
"RowitZou/LGN" -> "LeeSureman/Batch_Parallel_LatticeLSTM"
"RowitZou/LGN" -> "zerohd4869/Chinese-NER"
"bojone/bert_in_keras" -> "CyberZHG/keras-bert"
"bojone/bert_in_keras" -> "bojone/kg-2019" ["e"=1]
"bojone/bert_in_keras" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"bojone/bert_in_keras" -> "beader/tianchi_nl2sql" ["e"=1]
"bojone/bert_in_keras" -> "ZhuiyiTechnology/nl2sql_baseline" ["e"=1]
"bojone/bert_in_keras" -> "ymcui/Chinese-XLNet"
"bojone/bert_in_keras" -> "BrikerMan/Kashgari"
"bojone/bert_in_keras" -> "stephen-v/zh-NER-keras"
"bojone/bert_in_keras" -> "panchunguang/ccks_baidu_entity_link"
"bojone/bert_in_keras" -> "eguilg/nl2sql" ["e"=1]
"bojone/bert_in_keras" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"bojone/bert_in_keras" -> "bojone/bert4keras"
"bojone/bert_in_keras" -> "CyberZHG/summary"
"bojone/bert_in_keras" -> "terrifyzhao/bert-utils"
"bojone/bert_in_keras" -> "Separius/BERT-keras"
"allanj/pytorch_neural_crf" -> "allanj/ner_with_dependency"
"allanj/pytorch_neural_crf" -> "threelittlemonkeys/lstm-crf-pytorch"
"allanj/pytorch_neural_crf" -> "yhcc/OntoNotes-5.0-NER"
"allanj/pytorch_neural_crf" -> "jidasheng/bi-lstm-crf"
"allanj/pytorch_neural_crf" -> "INK-USC/TriggerNER"
"allanj/pytorch_neural_crf" -> "allanj/ner_incomplete_annotation"
"allanj/pytorch_neural_crf" -> "allanj/neural-partialCRF"
"allanj/pytorch_neural_crf" -> "yuchenlin/OntoNotes-5.0-NER-BIO"
"allanj/pytorch_neural_crf" -> "sutd-statnlp/statnlp-neural"
"allanj/pytorch_neural_crf" -> "juntaoy/biaffine-ner"
"allanj/pytorch_neural_crf" -> "pfliu-nlp/Named-Entity-Recognition-NER-Papers"
"allanj/pytorch_neural_crf" -> "bentrevett/pytorch-pos-tagging" ["e"=1]
"allanj/pytorch_neural_crf" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"allanj/pytorch_neural_crf" -> "ZihanWangKi/CrossWeigh"
"allanj/pytorch_neural_crf" -> "Nealcly/BiLSTM-LAN"
"shiyybua/NER" -> "zjy-ucas/ChineseNER"
"shiyybua/NER" -> "Determined22/zh-NER-TF"
"shiyybua/NER" -> "buppt/ChineseNER"
"shiyybua/NER" -> "guillaumegenthial/sequence_tagging"
"shiyybua/NER" -> "crownpku/Information-Extraction-Chinese"
"shiyybua/NER" -> "ProHiryu/bert-chinese-ner"
"shiyybua/NER" -> "jiesutd/LatticeLSTM"
"shiyybua/NER" -> "macanv/BERT-BiLSTM-CRF-NER"
"shiyybua/NER" -> "liu-nlper/NER-LSTM-CRF"
"shiyybua/NER" -> "FuYanzhe2/Name-Entity-Recognition"
"shiyybua/NER" -> "lpty/nlp_base"
"shiyybua/NER" -> "kyzhouhzau/BERT-NER"
"shiyybua/NER" -> "jiesutd/YEDDA"
"shiyybua/NER" -> "luopeixiang/named_entity_recognition"
"shiyybua/NER" -> "rockingdingo/deepnlp"
"michaelliao/itranswarp" -> "michaelliao/warpexchange"
"michaelliao/itranswarp" -> "michaelliao/shici"
"michaelliao/itranswarp" -> "michaelliao/itranswarp.js" ["e"=1]
"howl-anderson/hanzi_char_featurizer" -> "charlesXu86/char_featurizer"
"howl-anderson/hanzi_char_featurizer" -> "howl-anderson/hanzi_chaizi"
"howl-anderson/hanzi_char_featurizer" -> "kfcd/chaizi"
"howl-anderson/hanzi_char_featurizer" -> "contr4l/SimilarCharacter"
"howl-anderson/hanzi_char_featurizer" -> "howl-anderson/four_corner_method"
"Edward1Chou/textClustering" -> "RandyPen/TextCluster"
"Edward1Chou/textClustering" -> "arnab64/textclusteringDBSCAN" ["e"=1]
"Edward1Chou/textClustering" -> "Edward1Chou/Textclassification"
"Edward1Chou/textClustering" -> "murray-z/text_clustering"
"murray-z/text_clustering" -> "FesonX/cn-text-classifier"
"murray-z/text_clustering" -> "RandyPen/TextCluster"
"murray-z/text_clustering" -> "Edward1Chou/textClustering"
"murray-z/text_clustering" -> "angeliababy/textcluster"
"murray-z/text_clustering" -> "yanqiangmiffy/text-cluster"
"murray-z/text_clustering" -> "liuhuanyong/TopicCluster" ["e"=1]
"murray-z/text_clustering" -> "murray-z/text_analysis_tools"
"murray-z/text_clustering" -> "MachineLP/TextMatch"
"murray-z/text_clustering" -> "AimeeLee77/keyword_extraction"
"murray-z/text_clustering" -> "Roshanson/TextInfoExp"
"murray-z/text_clustering" -> "HaowenHOU/single-pass-clustering-for-chinese-text"
"murray-z/text_clustering" -> "amazon-science/sccl"
"FesonX/cn-text-classifier" -> "HaowenHOU/single-pass-clustering-for-chinese-text"
"FesonX/cn-text-classifier" -> "murray-z/text_clustering"
"AIChallenger/AI_Challenger_2018" -> "chenghuige/wenzheng"
"AIChallenger/AI_Challenger_2018" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"AIChallenger/AI_Challenger_2018" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"AIChallenger/AI_Challenger_2018" -> "AIChallenger/AI_Challenger_2017" ["e"=1]
"AIChallenger/AI_Challenger_2018" -> "brightmart/sentiment_analysis_fine_grain"
"AIChallenger/AI_Challenger_2018" -> "zengbin93/jddc_solution_4th" ["e"=1]
"AIChallenger/AI_Challenger_2018" -> "pengshuang/AI-Comp"
"AIChallenger/AI_Challenger_2018" -> "HouJP/kaggle-quora-question-pairs"
"AIChallenger/AI_Challenger_2018" -> "yilifzf/BDCI_Car_2018"
"AIChallenger/AI_Challenger_2018" -> "huangxiangzhou/NLPCC2016KBQA" ["e"=1]
"AIChallenger/AI_Challenger_2018" -> "xueyouluo/fsauor2018"
"AIChallenger/AI_Challenger_2018" -> "brightmart/bert_language_understanding"
"AIChallenger/AI_Challenger_2018" -> "NLPScott/bert-Chinese-classification-task"
"AIChallenger/AI_Challenger_2018" -> "jimmyyfeng/TD-LSTM" ["e"=1]
"AIChallenger/AI_Challenger_2018" -> "lixinsu/RCZoo" ["e"=1]
"lsdefine/attention-is-all-you-need-keras" -> "kpot/keras-transformer"
"lsdefine/attention-is-all-you-need-keras" -> "Separius/BERT-keras"
"lsdefine/attention-is-all-you-need-keras" -> "philipperemy/keras-attention"
"lsdefine/attention-is-all-you-need-keras" -> "bojone/attention"
"lsdefine/attention-is-all-you-need-keras" -> "datalogue/keras-attention"
"lsdefine/attention-is-all-you-need-keras" -> "CyberZHG/keras-transformer"
"lsdefine/attention-is-all-you-need-keras" -> "CyberZHG/keras-self-attention"
"lsdefine/attention-is-all-you-need-keras" -> "lvapeab/nmt-keras" ["e"=1]
"lsdefine/attention-is-all-you-need-keras" -> "CyberZHG/keras-bert"
"lsdefine/attention-is-all-you-need-keras" -> "farizrahman4u/seq2seq" ["e"=1]
"lsdefine/attention-is-all-you-need-keras" -> "Kyubyong/transformer" ["e"=1]
"lsdefine/attention-is-all-you-need-keras" -> "keras-team/keras-contrib"
"lsdefine/attention-is-all-you-need-keras" -> "strongio/keras-elmo"
"lsdefine/attention-is-all-you-need-keras" -> "tkipf/keras-gcn" ["e"=1]
"lsdefine/attention-is-all-you-need-keras" -> "iliaschalkidis/ELMo-keras"
"liuhuanyong/SiameseSentenceSimilarity" -> "liuhuanyong/SentenceSimilarity"
"liuhuanyong/SiameseSentenceSimilarity" -> "yanqiangmiffy/sentence-similarity"
"liuhuanyong/SiameseSentenceSimilarity" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"liuhuanyong/SiameseSentenceSimilarity" -> "ATEC2018/deep-siamese-text-similarity"
"liuhuanyong/SiameseSentenceSimilarity" -> "ziweipolaris/atec2018-nlp"
"liuhuanyong/SiameseSentenceSimilarity" -> "pengming617/text_matching"
"EOA-AILab/NER-Chinese" -> "EOA-AILab/Seg_Pos"
"EOA-AILab/NER-Chinese" -> "ProHiryu/albert-chinese-ner"
"EOA-AILab/NER-Chinese" -> "xiaofei05/Distant-Supervised-Chinese-Relation-Extraction" ["e"=1]
"EOA-AILab/NER-Chinese" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"EOA-AILab/NER-Chinese" -> "ProHiryu/bert-chinese-ner"
"EOA-AILab/NER-Chinese" -> "xuanzebi/BERT-CH-NER"
"EOA-AILab/NER-Chinese" -> "CLUEbenchmark/CLUENER2020"
"EOA-AILab/NER-Chinese" -> "lonePatient/BERT-NER-Pytorch"
"EOA-AILab/NER-Chinese" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" ["e"=1]
"EOA-AILab/NER-Chinese" -> "yumath/bertNER"
"EOA-AILab/NER-Chinese" -> "bojone/kg-2019" ["e"=1]
"HKUST-KnowComp/DeepGraphCNNforTexts" -> "morningmoni/HiLAP"
"UKPLab/elmo-bilstm-cnn-crf" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"UKPLab/elmo-bilstm-cnn-crf" -> "strongio/keras-elmo"
"UKPLab/elmo-bilstm-cnn-crf" -> "PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec"
"UKPLab/elmo-bilstm-cnn-crf" -> "allenai/bilm-tf" ["e"=1]
"UKPLab/elmo-bilstm-cnn-crf" -> "rokid/ELMo-chinese"
"UKPLab/elmo-bilstm-cnn-crf" -> "searobbersduck/ELMo_Chin"
"UKPLab/elmo-bilstm-cnn-crf" -> "PrashantRanjan09/Elmo-Tutorial"
"UKPLab/elmo-bilstm-cnn-crf" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"UKPLab/elmo-bilstm-cnn-crf" -> "Hironsan/anago"
"UKPLab/elmo-bilstm-cnn-crf" -> "kermitt2/delft"
"OYE93/Chinese-NLP-Corpus" -> "LeeSureman/Flat-Lattice-Transformer"
"OYE93/Chinese-NLP-Corpus" -> "ChineseGLUE/ChineseGLUE"
"OYE93/Chinese-NLP-Corpus" -> "jiesutd/LatticeLSTM"
"OYE93/Chinese-NLP-Corpus" -> "lonePatient/BERT-NER-Pytorch"
"OYE93/Chinese-NLP-Corpus" -> "CLUEbenchmark/CLUENER2020"
"OYE93/Chinese-NLP-Corpus" -> "loujie0822/DeepIE"
"OYE93/Chinese-NLP-Corpus" -> "InsaneLife/ChineseNLPCorpus"
"OYE93/Chinese-NLP-Corpus" -> "hltcoe/golden-horse"
"OYE93/Chinese-NLP-Corpus" -> "panchunguang/ccks_baidu_entity_link"
"OYE93/Chinese-NLP-Corpus" -> "alibaba-research/ChineseBLUE" ["e"=1]
"OYE93/Chinese-NLP-Corpus" -> "v-mipeng/LexiconAugmentedNER"
"OYE93/Chinese-NLP-Corpus" -> "GanjinZero/awesome_Chinese_medical_NLP" ["e"=1]
"OYE93/Chinese-NLP-Corpus" -> "MenglinLu/Chinese-clinical-NER" ["e"=1]
"OYE93/Chinese-NLP-Corpus" -> "CLUEbenchmark/CLUE"
"OYE93/Chinese-NLP-Corpus" -> "425776024/nlpcda"
"quincyliang/nlp-public-dataset" -> "yaleimeng/NER_corpus_chinese"
"quincyliang/nlp-public-dataset" -> "v-mipeng/LexiconAugmentedNER"
"quincyliang/nlp-public-dataset" -> "LeeSureman/Flat-Lattice-Transformer"
"quincyliang/nlp-public-dataset" -> "benywon/en-ch-NMT" ["e"=1]
"quincyliang/nlp-public-dataset" -> "VectorFist/RNN-NMT" ["e"=1]
"quincyliang/nlp-public-dataset" -> "fastnlp/TENER"
"quincyliang/nlp-public-dataset" -> "OYE93/Chinese-NLP-Corpus"
"howl-anderson/tools_for_corpus_of_people_daily" -> "zhangyics/Chinese-abbreviation-dataset"
"howl-anderson/tools_for_corpus_of_people_daily" -> "AlanConstantine/PeoplesDailyNER"
"howl-anderson/tools_for_corpus_of_people_daily" -> "practicingman/chinese_ulmfit" ["e"=1]
"zhangyics/Chinese-abbreviation-dataset" -> "kfcd/chaizi"
"zhangyics/Chinese-abbreviation-dataset" -> "rainarch/SentiBridge"
"EricLingRui/NLP-tools" -> "FanhuaandLuomu/BiLstm_CNN_CRF_CWS"
"EricLingRui/NLP-tools" -> "GlassyWing/bi-lstm-crf"
"EricLingRui/NLP-tools" -> "yaleimeng/NER_corpus_chinese"
"EricLingRui/NLP-tools" -> "supercoderhawk/DNN_CWS"
"EricLingRui/NLP-tools" -> "X-jun-0130/Easy_NER_biLSTM_CRF" ["e"=1]
"CyberZHG/keras-self-attention" -> "CyberZHG/keras-multi-head"
"CyberZHG/keras-self-attention" -> "philipperemy/keras-attention"
"CyberZHG/keras-self-attention" -> "CyberZHG/keras-transformer"
"CyberZHG/keras-self-attention" -> "foamliu/Self-Attention-Keras"
"CyberZHG/keras-self-attention" -> "kpot/keras-transformer"
"CyberZHG/keras-self-attention" -> "thushv89/attention_keras"
"CyberZHG/keras-self-attention" -> "ningshixian/LSTM_Attention"
"CyberZHG/keras-self-attention" -> "lsdefine/attention-is-all-you-need-keras"
"CyberZHG/keras-self-attention" -> "datalogue/keras-attention"
"CyberZHG/keras-self-attention" -> "CyberZHG/keras-bert"
"CyberZHG/keras-self-attention" -> "Choco31415/Attention_Network_With_Keras"
"CyberZHG/keras-self-attention" -> "strongio/keras-elmo"
"CyberZHG/keras-self-attention" -> "Separius/BERT-keras"
"CyberZHG/keras-self-attention" -> "uzaymacar/attention-mechanisms"
"CyberZHG/keras-self-attention" -> "bojone/attention"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "Alibaba-NLP/HiAGM"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "ShimShim46/HFT-CNN"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "uhh-lt/BlurbGenreCollection-HMC"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "Tencent/NeuralNLP-NeuralClassifier"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "RandolphVI/Multi-Label-Text-Classification"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "morningmoni/HiLAP"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "kk7nc/HDLTex"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "yourh/AttentionXML" ["e"=1]
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "HKUST-KnowComp/DeepGraphCNNforTexts"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "minqukanq/hierarchical-multi-label-text-classification"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "electron1c/HARNN-pytorch"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "wzh9969/contrastive-htc"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "hellonlp/classifier-multi-label"
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" -> "lancopku/SGM" ["e"=1]
"accordproject/template-archive" -> "accordproject/ergo"
"accordproject/template-archive" -> "accordproject/cicero-template-library"
"accordproject/template-archive" -> "accordproject/concerto"
"accordproject/template-archive" -> "accordproject/web-components"
"accordproject/template-archive" -> "accordproject/techdocs"
"accordproject/template-archive" -> "accordproject/models"
"accordproject/template-archive" -> "accordproject/cicero-ui"
"accordproject/template-archive" -> "accordproject/template-studio"
"accordproject/template-archive" -> "statedecoded/statedecoded"
"accordproject/template-archive" -> "Liquid-Legal-Institute/Legal-Text-Analytics"
"accordproject/template-archive" -> "accordproject/cicero-word-add-in-deprecated"
"accordproject/template-archive" -> "LexPredict/lexpredict-contraxsuite"
"contr4l/SimilarCharacter" -> "houbb/nlp-hanzi-similar"
"contr4l/SimilarCharacter" -> "howl-anderson/hanzi_chaizi"
"contr4l/SimilarCharacter" -> "howl-anderson/hanzi_char_featurizer"
"contr4l/SimilarCharacter" -> "kfcd/chaizi"
"contr4l/SimilarCharacter" -> "qingyujean/ssc"
"contr4l/SimilarCharacter" -> "charlesXu86/char_featurizer"
"contr4l/SimilarCharacter" -> "LiangsLi/ChineseHomophones"
"contr4l/SimilarCharacter" -> "iqiyi/FASPell"
"contr4l/SimilarCharacter" -> "ccheng16/correction"
"contr4l/SimilarCharacter" -> "wdimmy/Automatic-Corpus-Generation"
"contr4l/SimilarCharacter" -> "bojone/word-discovery"
"contr4l/SimilarCharacter" -> "panchunguang/ccks_baidu_entity_link"
"contr4l/SimilarCharacter" -> "liuhuanyong/ChineseEmbedding"
"contr4l/SimilarCharacter" -> "liuhuanyong/QueryCorrection"
"lambdal/bert" -> "haoyuhu/bert-multi-gpu"
"lambdal/bert" -> "guotong1988/BERT-pre-training"
"jannson/yaha" -> "jannson/wordmaker"
"jannson/yaha" -> "avplayer/wordmaker"
"jannson/yaha" -> "sing1ee/dict_build"
"jannson/yaha" -> "GeorgeBourne/grid"
"jannson/yaha" -> "yanghanxy/New-Word-Detection"
"jannson/yaha" -> "chenbjin/ASExtractor" ["e"=1]
"liuhuanyong/LawCrimeMining" -> "liuhuanyong/CrimeKgAssitant"
"liuhuanyong/LawCrimeMining" -> "pengxiao-song/awesome-chinese-legal-resources"
"liuhuanyong/LawCrimeMining" -> "zhang17173/Event-Extraction" ["e"=1]
"liuhuanyong/LawCrimeMining" -> "thunlp/CAIL"
"liuhuanyong/LawCrimeMining" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"liuhuanyong/LawCrimeMining" -> "shelleyHLX/cail"
"liuhuanyong/LawCrimeMining" -> "LawRefBook/Laws"
"liuhuanyong/LawCrimeMining" -> "china-ai-law-challenge/CAIL2019"
"liuhuanyong/LawCrimeMining" -> "FanhuaandLuomu/ParseLawDocuments"
"liuhuanyong/LawCrimeMining" -> "brightmart/ai_law"
"liuhuanyong/LawCrimeMining" -> "renjunxiang/Competition_CAIL"
"liuhuanyong/LawCrimeMining" -> "thunlp/OpenCLaP"
"liuhuanyong/LawCrimeMining" -> "AndrewZhe/lawyer-llama"
"liuhuanyong/LawCrimeMining" -> "zhihaiLLM/wisdomInterrogatory"
"liuhuanyong/LawCrimeMining" -> "siat-nlp/HanFei"
"crabcamp/lexrank" -> "sildar/potara"
"liuhuanyong/ChineseNLPCorpus" -> "liuhuanyong/KnowledgeGraphSlides" ["e"=1]
"liuhuanyong/ChineseNLPCorpus" -> "liuhuanyong/SentenceSimilarity"
"liuhuanyong/ChineseNLPCorpus" -> "liuhuanyong/ChineseEmbedding"
"liuhuanyong/ChineseNLPCorpus" -> "liuhuanyong/SequentialEventExtration" ["e"=1]
"liuhuanyong/ChineseNLPCorpus" -> "ChineseGLUE/ChineseGLUE"
"liuhuanyong/ChineseNLPCorpus" -> "nonamestreet/weixin_public_corpus"
"liuhuanyong/ChineseNLPCorpus" -> "GlassyWing/bi-lstm-crf"
"liuhuanyong/ChineseNLPCorpus" -> "SunYanCN/BAND"
"liuhuanyong/ChineseNLPCorpus" -> "ProHiryu/bert-chinese-ner"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "thunlp/LegalPapers"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "thunlp/CAIL"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "thunlp/TopJudge"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "china-ai-law-challenge/CAIL2019"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "thunlp/attribute_charge"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "thunlp/OpenCLaP"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "GuidoPaul/CAIL2019"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "renjunxiang/Competition_CAIL"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "thunlp/CLAIM"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "shelleyHLX/cail"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "china-ai-law-challenge/CAIL2020"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "brightmart/ai_law"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "padeoe/cail2019"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "huanghuidmml/cail2019_track2"
"dalinvip/Awesome-Law-NLP-Research-Work" -> "liuhuanyong/LawCrimeMining"
"likejazz/Siamese-LSTM" -> "aditya1503/Siamese-LSTM"
"likejazz/Siamese-LSTM" -> "amansrivastava17/lstm-siamese-text-similarity"
"likejazz/Siamese-LSTM" -> "fionn-mac/Manhattan-LSTM"
"likejazz/Siamese-LSTM" -> "tlatkowski/multihead-siamese-nets"
"likejazz/Siamese-LSTM" -> "dhwajraj/deep-siamese-text-similarity"
"likejazz/Siamese-LSTM" -> "LuJunru/Sentences_Pair_Similarity_Calculation_Siamese_LSTM"
"likejazz/Siamese-LSTM" -> "THTBSE/siamese-lstm-network"
"likejazz/Siamese-LSTM" -> "jx00109/siamese-lstm-for-sentence-similarity"
"likejazz/Siamese-LSTM" -> "MahmoudWahdan/Siamese-Sentence-Similarity"
"likejazz/Siamese-LSTM" -> "eliorc/Medium"
"likejazz/Siamese-LSTM" -> "ATEC2018/deep-siamese-text-similarity"
"likejazz/Siamese-LSTM" -> "zhaoyu18/quora_question_pairs"
"bojone/attention" -> "Kyubyong/transformer" ["e"=1]
"bojone/attention" -> "philipperemy/keras-attention"
"bojone/attention" -> "CyberZHG/keras-bert"
"bojone/attention" -> "bojone/bert4keras"
"bojone/attention" -> "lsdefine/attention-is-all-you-need-keras"
"bojone/attention" -> "ilivans/tf-rnn-attention" ["e"=1]
"bojone/attention" -> "bojone/kg-2019" ["e"=1]
"bojone/attention" -> "bojone/seq2seq"
"bojone/attention" -> "bojone/bert_in_keras"
"bojone/attention" -> "NTMC-Community/MatchZoo"
"bojone/attention" -> "brightmart/albert_zh"
"bojone/attention" -> "allenai/bilm-tf" ["e"=1]
"bojone/attention" -> "macanv/BERT-BiLSTM-CRF-NER"
"bojone/attention" -> "brightmart/text_classification"
"bojone/attention" -> "thunlp/OpenNRE"
"luozhouyang/python-string-similarity" -> "life4/textdistance" ["e"=1]
"luozhouyang/python-string-similarity" -> "yaleimeng/Final_word_Similarity"
"luozhouyang/python-string-similarity" -> "jamesturk/jellyfish" ["e"=1]
"luozhouyang/python-string-similarity" -> "mammothb/symspellpy" ["e"=1]
"luozhouyang/python-string-similarity" -> "tdebatty/java-string-similarity" ["e"=1]
"luozhouyang/python-string-similarity" -> "boudinfl/pke" ["e"=1]
"luozhouyang/python-string-similarity" -> "ZhuiyiTechnology/simbert"
"luozhouyang/python-string-similarity" -> "panchunguang/ccks_baidu_entity_link"
"luozhouyang/python-string-similarity" -> "rapidfuzz/RapidFuzz" ["e"=1]
"luozhouyang/python-string-similarity" -> "blmoistawinde/HarvestText"
"luozhouyang/python-string-similarity" -> "epfml/sent2vec" ["e"=1]
"luozhouyang/python-string-similarity" -> "ymcui/Chinese-XLNet"
"luozhouyang/python-string-similarity" -> "GEM-benchmark/NL-Augmenter" ["e"=1]
"luozhouyang/python-string-similarity" -> "ZhuiyiTechnology/pretrained-models"
"luozhouyang/python-string-similarity" -> "dbiir/UER-py"
"thushv89/attention_keras" -> "philipperemy/keras-attention"
"thushv89/attention_keras" -> "CyberZHG/keras-self-attention"
"thushv89/attention_keras" -> "datalogue/keras-attention"
"thushv89/attention_keras" -> "ningshixian/LSTM_Attention"
"thushv89/attention_keras" -> "aravindpai/How-to-build-own-text-summarizer-using-deep-learning" ["e"=1]
"thushv89/attention_keras" -> "CyberZHG/keras-transformer"
"thushv89/attention_keras" -> "lsdefine/attention-is-all-you-need-keras"
"thushv89/attention_keras" -> "CyberZHG/keras-multi-head"
"thushv89/attention_keras" -> "kpot/keras-transformer"
"thushv89/attention_keras" -> "lvapeab/nmt-keras" ["e"=1]
"thushv89/attention_keras" -> "uzaymacar/attention-mechanisms"
"thushv89/attention_keras" -> "gentaiscool/lstm-attention"
"yu4u/cutout-random-erasing" -> "yu4u/mixup-generator"
"yu4u/cutout-random-erasing" -> "zhunzhong07/Random-Erasing" ["e"=1]
"rokid/ELMo-chinese" -> "searobbersduck/ELMo_Chin"
"rokid/ELMo-chinese" -> "YC-wind/embedding_study"
"rokid/ELMo-chinese" -> "UKPLab/elmo-bilstm-cnn-crf"
"liuhuanyong/PoemMining" -> "evilking-yh/PoemSpider"
"strongio/keras-bert" -> "strongio/keras-elmo"
"strongio/keras-bert" -> "Separius/BERT-keras"
"BangLiu/ConcepT" -> "BangLiu/GIANT"
"BangLiu/ConcepT" -> "BangLiu/ArticlePairMatching"
"BangLiu/ConcepT" -> "BangLiu/StoryForest"
"BangLiu/ConcepT" -> "alibaba-research/ConceptGraph"
"rockyzhengwu/FoolNLTK" -> "thunlp/THULAC-Python"
"rockyzhengwu/FoolNLTK" -> "koth/kcws"
"rockyzhengwu/FoolNLTK" -> "baidu/Familia"
"rockyzhengwu/FoolNLTK" -> "deepwel/Chinese-Annotator"
"rockyzhengwu/FoolNLTK" -> "rockingdingo/deepnlp"
"rockyzhengwu/FoolNLTK" -> "chatopera/Synonyms"
"rockyzhengwu/FoolNLTK" -> "HIT-SCIR/pyltp"
"rockyzhengwu/FoolNLTK" -> "brightmart/albert_zh"
"rockyzhengwu/FoolNLTK" -> "lancopku/pkuseg-python"
"rockyzhengwu/FoolNLTK" -> "zjy-ucas/ChineseNER"
"rockyzhengwu/FoolNLTK" -> "crownpku/Awesome-Chinese-NLP"
"rockyzhengwu/FoolNLTK" -> "baidu/AnyQ"
"rockyzhengwu/FoolNLTK" -> "baidu/lac"
"rockyzhengwu/FoolNLTK" -> "facebookresearch/MUSE" ["e"=1]
"rockyzhengwu/FoolNLTK" -> "hankcs/pyhanlp"
"aceimnorstuvwxz/toutiao-multilevel-text-classfication-dataset" -> "aceimnorstuvwxz/toutiao-text-classfication-dataset"
"aceimnorstuvwxz/toutiao-multilevel-text-classfication-dataset" -> "yongyehuang/zhihu-text-classification"
"aceimnorstuvwxz/toutiao-multilevel-text-classfication-dataset" -> "Tencent/NeuralNLP-NeuralClassifier"
"renjunxiang/Competition_CAIL" -> "shelleyHLX/cail"
"renjunxiang/Competition_CAIL" -> "jingyihiter/mycail"
"renjunxiang/Competition_CAIL" -> "thunlp/CAIL"
"renjunxiang/Competition_CAIL" -> "thunlp/CAIL2018"
"renjunxiang/Competition_CAIL" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"renjunxiang/Competition_CAIL" -> "ShenDezhou/CAIL"
"renjunxiang/Competition_CAIL" -> "HenryYuxuanWang/judicial_competition"
"renjunxiang/Competition_CAIL" -> "FanhuaandLuomu/ParseLawDocuments"
"renjunxiang/Competition_CAIL" -> "GuidoPaul/CAIL2019"
"renjunxiang/Competition_CAIL" -> "shelleyHLX/text-classification"
"renjunxiang/Competition_CAIL" -> "padeoe/cail2019"
"renjunxiang/Competition_CAIL" -> "FengBli/CAIL2018-toy"
"renjunxiang/Competition_CAIL" -> "brightmart/ai_law"
"renjunxiang/Competition_CAIL" -> "china-ai-law-challenge/CAIL2019"
"renjunxiang/Competition_CAIL" -> "huanghuidmml/cail2019_track2"
"HenryYuxuanWang/judicial_competition" -> "jingyihiter/mycail"
"HenryYuxuanWang/judicial_competition" -> "shelleyHLX/cail"
"zhanlaoban/EDA_NLP_for_Chinese" -> "425776024/nlpcda"
"zhanlaoban/EDA_NLP_for_Chinese" -> "jasonwei20/eda_nlp"
"zhanlaoban/EDA_NLP_for_Chinese" -> "yongzhuo/nlp_xiaojiang"
"zhanlaoban/EDA_NLP_for_Chinese" -> "brightmart/albert_zh"
"zhanlaoban/EDA_NLP_for_Chinese" -> "ZhuiyiTechnology/pretrained-models"
"zhanlaoban/EDA_NLP_for_Chinese" -> "brightmart/roberta_zh"
"zhanlaoban/EDA_NLP_for_Chinese" -> "loujie0822/DeepIE"
"zhanlaoban/EDA_NLP_for_Chinese" -> "CLUEbenchmark/CLUE"
"zhanlaoban/EDA_NLP_for_Chinese" -> "dbiir/UER-py"
"zhanlaoban/EDA_NLP_for_Chinese" -> "bojone/bert4keras"
"zhanlaoban/EDA_NLP_for_Chinese" -> "ZhuiyiTechnology/simbert"
"zhanlaoban/EDA_NLP_for_Chinese" -> "ChineseGLUE/ChineseGLUE"
"zhanlaoban/EDA_NLP_for_Chinese" -> "panchunguang/ccks_baidu_entity_link"
"zhanlaoban/EDA_NLP_for_Chinese" -> "zhpmatrix/nlp-competitions-list-review"
"zhanlaoban/EDA_NLP_for_Chinese" -> "ymcui/Chinese-BERT-wwm"
"ShimShim46/HFT-CNN" -> "RandolphVI/Hierarchical-Multi-Label-Text-Classification"
"ShimShim46/HFT-CNN" -> "morningmoni/HiLAP"
"ShimShim46/HFT-CNN" -> "uhh-lt/BlurbGenreCollection-HMC"
"ShimShim46/HFT-CNN" -> "Alibaba-NLP/HiAGM"
"ShimShim46/HFT-CNN" -> "ductri/reuters_loader"
"deepcs233/jieba_fast" -> "ArthurRizar/tensorflow_ernie"
"deepcs233/jieba_fast" -> "rockyzhengwu/FoolNLTK"
"deepcs233/jieba_fast" -> "ymcui/Chinese-XLNet"
"deepcs233/jieba_fast" -> "yichen0831/opencc-python" ["e"=1]
"deepcs233/jieba_fast" -> "CLUEbenchmark/CLUEPretrainedModels"
"deepcs233/jieba_fast" -> "fighting41love/Chinese_from_dongxiexidian"
"deepcs233/jieba_fast" -> "ArtistScript/FastTextRank"
"deepcs233/jieba_fast" -> "liuhuanyong/ComplexEventExtraction" ["e"=1]
"deepcs233/jieba_fast" -> "thunlp/THULAC-Python"
"deepcs233/jieba_fast" -> "ZhuiyiTechnology/pretrained-models"
"deepcs233/jieba_fast" -> "fighting41love/cocoNLP"
"deepcs233/jieba_fast" -> "ChineseGLUE/ChineseGLUE"
"jackeyGao/chinese-poetry" -> "todototry/AncientChinesePoemsDB"
"jackeyGao/chinese-poetry" -> "justdark/pytorch-poetry-gen"
"graykode/xlnet-Pytorch" -> "pingpong-ai/xlnet-pytorch"
"graykode/xlnet-Pytorch" -> "zihangdai/xlnet" ["e"=1]
"graykode/xlnet-Pytorch" -> "ymcui/Chinese-XLNet"
"graykode/xlnet-Pytorch" -> "asyml/texar-pytorch" ["e"=1]
"graykode/xlnet-Pytorch" -> "kimiyoung/transformer-xl" ["e"=1]
"graykode/xlnet-Pytorch" -> "mrqa/MRQA-Shared-Task-2019" ["e"=1]
"graykode/xlnet-Pytorch" -> "renatoviolin/xlnet"
"graykode/xlnet-Pytorch" -> "graykode/gpt-2-Pytorch" ["e"=1]
"graykode/xlnet-Pytorch" -> "thunlp/ERNIE"
"graykode/xlnet-Pytorch" -> "dhlee347/pytorchic-bert" ["e"=1]
"graykode/xlnet-Pytorch" -> "nyu-dl/bert-gen" ["e"=1]
"graykode/xlnet-Pytorch" -> "Jiakui/awesome-bert"
"graykode/xlnet-Pytorch" -> "graykode/ALBERT-Pytorch"
"real-brilliant/bert_chinese_pytorch" -> "duanzhihua/bert_chinese_pytorch"
"real-brilliant/bert_chinese_pytorch" -> "duanzhihua/pytorch-pretrained-BERT"
"real-brilliant/bert_chinese_pytorch" -> "FakerYFX/Bert-Pytorch-Chinese-TextClassification"
"real-brilliant/bert_chinese_pytorch" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"cjymz886/sentence-similarity" -> "yanqiangmiffy/sentence-similarity"
"cjymz886/sentence-similarity" -> "PengboLiu/Doc2Vec-Document-Similarity"
"cjymz886/sentence-similarity" -> "liuhuanyong/SentenceSimilarity"
"cjymz886/sentence-similarity" -> "JepsonWong/Text_Matching"
"cjymz886/sentence-similarity" -> "phychaos/TextSimilar"
"cjymz886/sentence-similarity" -> "zle1992/atec"
"cjymz886/sentence-similarity" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"cjymz886/sentence-similarity" -> "Brokenwind/BertSimilarity"
"cjymz886/sentence-similarity" -> "pengming617/text_matching"
"cjymz886/sentence-similarity" -> "downdawn/Similarity"
"cjymz886/sentence-similarity" -> "GiantPeterZhou/Word2vec-with-Chinese-character"
"cjymz886/sentence-similarity" -> "IAdmireu/ChineseSTS"
"cjymz886/sentence-similarity" -> "terrifyzhao/bert-utils"
"cjymz886/sentence-similarity" -> "cjymz886/find-Chinese-medical-words"
"x-hacker/CNN_ChineseTextBinaryClassify" -> "Edward1Chou/Textclassification"
"caoxingyu/chinese-gushiwen" -> "yxcs/poems-db"
"caoxingyu/chinese-gushiwen" -> "Werneror/Poetry"
"caoxingyu/chinese-gushiwen" -> "javayhu/poetry"
"caoxingyu/chinese-gushiwen" -> "yaonphy/PoetryLibrary"
"caoxingyu/chinese-gushiwen" -> "Kooooooma/chinese-poetry-mysql"
"caoxingyu/chinese-gushiwen" -> "chinese-poetry/huajianji"
"caoxingyu/chinese-gushiwen" -> "dengxiuqi/ChineseLyrics" ["e"=1]
"caoxingyu/chinese-gushiwen" -> "yht050511/gushiwen"
"caoxingyu/chinese-gushiwen" -> "hxgdzyuyi/tang_poetry"
"caoxingyu/chinese-gushiwen" -> "michaelliao/shici"
"caoxingyu/chinese-gushiwen" -> "mahavivo/scripta-sinica"
"caoxingyu/chinese-gushiwen" -> "yuxqiu/modern-poetry"
"caoxingyu/chinese-gushiwen" -> "NiuTrans/Classical-Modern"
"caoxingyu/chinese-gushiwen" -> "chinese-poetry/chinese-poetry-npm"
"caoxingyu/chinese-gushiwen" -> "snowtraces/poetry-source"
"ZeweiChu/PyTorch-Course" -> "aespresso/a_journey_into_math_of_ml"
"ZeweiChu/PyTorch-Course" -> "xavier-zy/Awesome-pytorch-list-CNVersion" ["e"=1]
"ZeweiChu/PyTorch-Course" -> "Iallen520/lhy_DL_Hw" ["e"=1]
"ZeweiChu/PyTorch-Course" -> "dragen1860/Deep-Learning-with-PyTorch-Tutorials" ["e"=1]
"ZeweiChu/PyTorch-Course" -> "Sakura-gh/ML-notes" ["e"=1]
"ZeweiChu/PyTorch-Course" -> "zibuyu/research_tao"
"ZeweiChu/PyTorch-Course" -> "ShusenTang/Dive-into-DL-PyTorch" ["e"=1]
"ZeweiChu/PyTorch-Course" -> "apachecn/nlp-pytorch-zh"
"ZeweiChu/PyTorch-Course" -> "MorvanZhou/NLP-Tutorials"
"ZeweiChu/PyTorch-Course" -> "shuhuai007/Machine-Learning-Session" ["e"=1]
"ZeweiChu/PyTorch-Course" -> "MorvanZhou/PyTorch-Tutorial" ["e"=1]
"ZeweiChu/PyTorch-Course" -> "songyingxin/NLPer-Interview"
"ZeweiChu/PyTorch-Course" -> "lonePatient/BERT-NER-Pytorch"
"ZeweiChu/PyTorch-Course" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"ZeweiChu/PyTorch-Course" -> "649453932/Chinese-Text-Classification-Pytorch"
"phychaos/transformer_crf" -> "XingyanLee/Chinese-NER"
"songyingxin/TextClassification" -> "songyingxin/Bert-TextClassification"
"songyingxin/TextClassification" -> "zibuyu/research_tao"
"songyingxin/TextClassification" -> "songyingxin/BERT-pytorch"
"songyingxin/TextClassification" -> "songyingxin/NLPer-Interview"
"songyingxin/TextClassification" -> "AnubhavGupta3377/Text-Classification-Models-Pytorch" ["e"=1]
"songyingxin/TextClassification" -> "atnlp/torchtext-summary"
"songyingxin/TextClassification" -> "FreedomIntelligence/TextClassificationBenchmark" ["e"=1]
"songyingxin/TextClassification" -> "prakashpandey9/Text-Classification-Pytorch" ["e"=1]
"songyingxin/TextClassification" -> "songyingxin/python-algorithm"
"songyingxin/TextClassification" -> "Jiakui/awesome-bert"
"songyingxin/TextClassification" -> "zhpmatrix/nlp-competitions-list-review"
"songyingxin/TextClassification" -> "Lizhen0628/text_classification"
"songyingxin/TextClassification" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"songyingxin/TextClassification" -> "zhanlaoban/Transformers_for_Text_Classification"
"songyingxin/TextClassification" -> "Dod-o/NLP-practice-program"
"SophonPlus/ChineseWordVectors" -> "SophonPlus/ChineseAnnotator"
"zedom1/Error-Detection" -> "berniey/hanziconv"
"javayhu/poetry" -> "caoxingyu/chinese-gushiwen"
"javayhu/poetry" -> "yxcs/poems-db"
"javayhu/poetry" -> "Werneror/Poetry"
"javayhu/poetry" -> "hxgdzyuyi/tang_poetry"
"javayhu/poetry" -> "Kooooooma/chinese-poetry-mysql"
"javayhu/poetry" -> "javayhu/haitang" ["e"=1]
"javayhu/poetry" -> "chinese-poetry/chinese-poetry-zhCN"
"javayhu/poetry" -> "johnnyzhang1992/gushi_lite"
"javayhu/poetry" -> "jackeyGao/chinese-poetry"
"Luvata/CS224N-2019" -> "ZacBi/CS224n-2019-solutions"
"Luvata/CS224N-2019" -> "rishabh-16/cs231n-2019-assignments" ["e"=1]
"Luvata/CS224N-2019" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"Luvata/CS224N-2019" -> "lrs1353281004/CS224n_winter2019_notes_and_assignments"
"Luvata/CS224N-2019" -> "chrischute/squad" ["e"=1]
"Luvata/CS224N-2019" -> "jon-tow/cs224n"
"Luvata/CS224N-2019" -> "alongstar518/CS224NHomeworks"
"Luvata/CS224N-2019" -> "LooperXX/CS224n-Reading-Notes"
"zepingyu0512/srnn" -> "dinghanshen/SWEM" ["e"=1]
"zepingyu0512/srnn" -> "bojone/seq2seq"
"panchunguang/ccks_baidu_entity_link" -> "AlexYangLi/ccks2019_el" ["e"=1]
"panchunguang/ccks_baidu_entity_link" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"panchunguang/ccks_baidu_entity_link" -> "loujie0822/DeepIE"
"panchunguang/ccks_baidu_entity_link" -> "bojone/kg-2019" ["e"=1]
"panchunguang/ccks_baidu_entity_link" -> "bojone/el-2019" ["e"=1]
"panchunguang/ccks_baidu_entity_link" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"panchunguang/ccks_baidu_entity_link" -> "ZhuiyiTechnology/pretrained-models"
"panchunguang/ccks_baidu_entity_link" -> "WenRichard/KBQA-BERT" ["e"=1]
"panchunguang/ccks_baidu_entity_link" -> "z814081807/DeepNER"
"panchunguang/ccks_baidu_entity_link" -> "CLUEbenchmark/CLUENER2020"
"panchunguang/ccks_baidu_entity_link" -> "ymcui/Chinese-XLNet"
"panchunguang/ccks_baidu_entity_link" -> "ZhuiyiTechnology/simbert"
"panchunguang/ccks_baidu_entity_link" -> "brightmart/roberta_zh"
"panchunguang/ccks_baidu_entity_link" -> "jiesutd/LatticeLSTM"
"panchunguang/ccks_baidu_entity_link" -> "WuHuRestaurant/xf_event_extraction2020Top1" ["e"=1]
"zhihu/cuBERT" -> "Tencent/TurboTransformers"
"zhihu/cuBERT" -> "qiangsiwei/bert_distill"
"zhihu/cuBERT" -> "bytedance/effective_transformer"
"zhihu/cuBERT" -> "autoliuweijie/FastBERT"
"zhihu/cuBERT" -> "bohanli/BERT-flow"
"zhihu/cuBERT" -> "qsyao/cudaBERT" ["e"=1]
"zhihu/cuBERT" -> "ZhuiyiTechnology/pretrained-models"
"zhihu/cuBERT" -> "guotong1988/BERT-pre-training"
"zhihu/cuBERT" -> "LeeJuly30/BERTCpp"
"zhihu/cuBERT" -> "bytedance/lightseq"
"zhihu/cuBERT" -> "microsoft/fastformers" ["e"=1]
"zhihu/cuBERT" -> "ymcui/Chinese-XLNet"
"zhihu/cuBERT" -> "ymcui/Chinese-ELECTRA"
"LiyuanLucasLiu/LD-Net" -> "LiyuanLucasLiu/Torch-Scope"
"LiyuanLucasLiu/LD-Net" -> "LiyuanLucasLiu/LightNER"
"LiyuanLucasLiu/LD-Net" -> "LiyuanLucasLiu/Fast-Furious-Paper"
"LiyuanLucasLiu/LD-Net" -> "LiyuanLucasLiu/Vanilla_NER"
"LiyuanLucasLiu/LD-Net" -> "GentleZhu/ReMine"
"ZhixiuYe/HSCRF-pytorch" -> "ZhixiuYe/NER-pytorch"
"ZhixiuYe/HSCRF-pytorch" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"ZhixiuYe/HSCRF-pytorch" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"ZhixiuYe/HSCRF-pytorch" -> "rainarch/DSNER"
"ZhixiuYe/HSCRF-pytorch" -> "liu-nlper/SLTK"
"ZhixiuYe/HSCRF-pytorch" -> "shangjingbo1226/AutoNER"
"ZhixiuYe/HSCRF-pytorch" -> "CPF-NLPR/AT4ChineseNER"
"NTMC-Community/MatchZoo-py" -> "NTMC-Community/awesome-neural-models-for-semantic-match"
"NTMC-Community/MatchZoo-py" -> "NTMC-Community/MatchZoo"
"NTMC-Community/MatchZoo-py" -> "Georgetown-IR-Lab/cedr" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "alibaba-edu/simple-effective-text-matching"
"NTMC-Community/MatchZoo-py" -> "nyu-dl/dl4marco-bert" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "pengshuang/Text-Similarity"
"NTMC-Community/MatchZoo-py" -> "thunlp/OpenMatch" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "zhaogaofeng611/TextMatch"
"NTMC-Community/MatchZoo-py" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"NTMC-Community/MatchZoo-py" -> "AdeDZY/DeepCT" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "castorini/anserini" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "Albert-Ma/PROP" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "DataTerminatorX/Keyword-BERT"
"NTMC-Community/MatchZoo-py" -> "sebastian-hofstaetter/matchmaker" ["e"=1]
"NTMC-Community/MatchZoo-py" -> "coetaur0/ESIM"
"mahavivo/scripta-sinica" -> "Ethan-yt/guwenbert"
"mahavivo/scripta-sinica" -> "JiangYanting/Pre-modern_Chinese_corpus_dataset"
"mahavivo/scripta-sinica" -> "garychowcmu/daizhigev20"
"mahavivo/scripta-sinica" -> "jiaeyan/Jiayan"
"mahavivo/scripta-sinica" -> "Ethan-yt/guwen-models"
"mahavivo/scripta-sinica" -> "BangBOOM/Classical-Chinese"
"mahavivo/scripta-sinica" -> "rime-aca/corpus"
"mahavivo/scripta-sinica" -> "NiuTrans/Classical-Modern"
"mahavivo/scripta-sinica" -> "mahavivo/qianzhongshu" ["e"=1]
"mahavivo/scripta-sinica" -> "jizijing/C-CLUE"
"mahavivo/scripta-sinica" -> "tanpero/Reservator"
"mahavivo/scripta-sinica" -> "CIRCSE/LT4HALA"
"mahavivo/scripta-sinica" -> "yxcs/poems-db"
"mahavivo/scripta-sinica" -> "Ethan-yt/CCLUE"
"mahavivo/scripta-sinica" -> "caoxingyu/chinese-gushiwen"
"mhagiwara/realworldnlp" -> "keitakurita/Practical_NLP_in_PyTorch"
"mhagiwara/realworldnlp" -> "allenai/allennlp-as-a-library-example"
"mhagiwara/realworldnlp" -> "jbarrow/allennlp_tutorial"
"michaelliao/learngit" -> "michaelliao/learn-sql"
"michaelliao/learngit" -> "michaelliao/learn-javascript" ["e"=1]
"michaelliao/learngit" -> "michaelliao/shici"
"michaelliao/learngit" -> "michaelliao/learn-java"
"michaelliao/learngit" -> "michaelliao/springcloud"
"achernodub/targer" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"achernodub/targer" -> "liu-nlper/SLTK"
"achernodub/targer" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"achernodub/targer" -> "ZhixiuYe/HSCRF-pytorch"
"achernodub/targer" -> "lonePatient/BiLSTM-CRF-NER-PyTorch"
"yanqiangmiffy/char-rnn-writer" -> "chriswangweb/chinese-poem-creater" ["e"=1]
"littletiger0712/text-classification-mutli-label" -> "murray-z/Multi_Label_TextCNN"
"SophonPlus/ChineseAnnotator" -> "SophonPlus/ChineseWordVectors"
"ICLRandD/Blackstone" -> "LexPredict/lexpredict-lexnlp"
"ICLRandD/Blackstone" -> "Liquid-Legal-Institute/Legal-Text-Analytics"
"ICLRandD/Blackstone" -> "maastrichtlawtech/awesome-legal-nlp"
"ICLRandD/Blackstone" -> "thunlp/LegalPapers"
"ICLRandD/Blackstone" -> "jenojp/negspacy" ["e"=1]
"ICLRandD/Blackstone" -> "TheAtticusProject/cuad"
"ICLRandD/Blackstone" -> "gandersen101/spaczz" ["e"=1]
"ICLRandD/Blackstone" -> "freelawproject/eyecite"
"ICLRandD/Blackstone" -> "LexPredict/lexpredict-contraxsuite"
"ICLRandD/Blackstone" -> "msg-systems/holmes-extractor" ["e"=1]
"ICLRandD/Blackstone" -> "LexPredict/lexpredict-legal-dictionary"
"ICLRandD/Blackstone" -> "openlegaldata/awesome-legal-data"
"ICLRandD/Blackstone" -> "HazyResearch/legalbench"
"ICLRandD/Blackstone" -> "explosion/spacy-transformers" ["e"=1]
"ICLRandD/Blackstone" -> "explosion/projects" ["e"=1]
"Rayarrow/New-Word-Discovery" -> "NCXiaozui/New-Word-Detection"
"Rayarrow/New-Word-Discovery" -> "zoulala/New_words_find"
"Rayarrow/New-Word-Discovery" -> "izisong/new-words-discovery"
"Rayarrow/New-Word-Discovery" -> "bojone/word-discovery"
"Rayarrow/New-Word-Discovery" -> "zhanzecheng/Chinese_segment_augment"
"thunlp/CAIL2018" -> "shelleyHLX/cail"
"thunlp/CAIL2018" -> "thunlp/CAIL"
"thunlp/CAIL2018" -> "renjunxiang/Competition_CAIL"
"thunlp/CAIL2018" -> "thunlp/attribute_charge"
"thunlp/CAIL2018" -> "brightmart/ai_law"
"thunlp/CAIL2018" -> "thunlp/TopJudge"
"thunlp/CAIL2018" -> "jingyihiter/mycail"
"thunlp/CAIL2018" -> "FengBli/CAIL2018-toy"
"THUNLP-AIPoet/PaperList" -> "THUNLP-AIPoet/StylisticPoetry"
"THUNLP-AIPoet/PaperList" -> "THUNLP-AIPoet/Datasets"
"THUNLP-AIPoet/PaperList" -> "THUNLP-AIPoet/BERT-CCPoem"
"THUNLP-AIPoet/PaperList" -> "THUNLP-AIPoet/MixPoet"
"THUNLP-AIPoet/PaperList" -> "whaleloops/interpoetry"
"THUNLP-AIPoet/PaperList" -> "THUNLP-MT/TG-Reading-List" ["e"=1]
"THUNLP-AIPoet/PaperList" -> "THUNLP-AIPoet/WMPoetry"
"EOA-AILab/Seg_Pos" -> "EOA-AILab/NER-Chinese"
"tlwg/thpronun" -> "tlwg/swath"
"iliaschalkidis/ELMo-keras" -> "strongio/keras-elmo"
"iliaschalkidis/ELMo-keras" -> "JHart96/keras_elmo_embedding_layer"
"wipen/bert_and_ernie" -> "ArthurRizar/tensorflow_ernie"
"pengming617/bert_textMatching" -> "pengming617/text_matching"
"pengming617/bert_textMatching" -> "pengming617/text_classification"
"pengming617/bert_textMatching" -> "pengming617/LanguageModel"
"pengming617/bert_textMatching" -> "Menyoupingxiaoguo/AliyunSendMail"
"pengming617/bert_textMatching" -> "Menyoupingxiaoguo/MQTT"
"pengming617/bert_textMatching" -> "alibaba-edu/simple-effective-text-matching"
"china-ai-law-challenge/CAIL2019" -> "GuidoPaul/CAIL2019"
"china-ai-law-challenge/CAIL2019" -> "NoneWait/cail2019"
"china-ai-law-challenge/CAIL2019" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"china-ai-law-challenge/CAIL2019" -> "thunlp/CAIL"
"china-ai-law-challenge/CAIL2019" -> "thunlp/OpenCLaP"
"china-ai-law-challenge/CAIL2019" -> "padeoe/cail2019"
"china-ai-law-challenge/CAIL2019" -> "thunlp/LegalPapers"
"china-ai-law-challenge/CAIL2019" -> "huanghuidmml/cail2019_track2"
"china-ai-law-challenge/CAIL2019" -> "china-ai-law-challenge/CAIL2020"
"china-ai-law-challenge/CAIL2019" -> "china-ai-law-challenge/CAIL2018"
"china-ai-law-challenge/CAIL2019" -> "circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension"
"china-ai-law-challenge/CAIL2019" -> "thunlp/TopJudge"
"china-ai-law-challenge/CAIL2019" -> "shelleyHLX/cail"
"china-ai-law-challenge/CAIL2019" -> "thunlp/attribute_charge"
"china-ai-law-challenge/CAIL2019" -> "renjunxiang/Competition_CAIL"
"abusix/ahocorapy" -> "WojciechMula/pyahocorasick"
"abusix/ahocorapy" -> "G-Research/ahocorasick_rs"
"fighting41love/hardNLU" -> "guotong1988/chinese_dictionary"
"fighting41love/hardNLU" -> "zhanzecheng/Time_NLP"
"guotong1988/chinese_dictionary" -> "yaleimeng/Final_word_Similarity"
"guotong1988/chinese_dictionary" -> "liuhuanyong/ChineseSemanticKB"
"guotong1988/chinese_dictionary" -> "Keson96/SynoCN"
"guotong1988/chinese_dictionary" -> "fighting41love/cocoNLP"
"guotong1988/chinese_dictionary" -> "zhangyics/Chinese-abbreviation-dataset"
"guotong1988/chinese_dictionary" -> "fighting41love/Chinese_from_dongxiexidian"
"guotong1988/chinese_dictionary" -> "NLPScott/bert-Chinese-classification-task"
"guotong1988/chinese_dictionary" -> "thunlp/THUOCL"
"guotong1988/chinese_dictionary" -> "rainarch/SentiBridge"
"guotong1988/chinese_dictionary" -> "chatopera/Synonyms"
"guotong1988/chinese_dictionary" -> "zhanzecheng/Time_NLP"
"guotong1988/chinese_dictionary" -> "fighting41love/hardNLU"
"guotong1988/chinese_dictionary" -> "kfcd/chaizi"
"guotong1988/chinese_dictionary" -> "tigerchen52/synonym_detection"
"guotong1988/chinese_dictionary" -> "nonamestreet/weixin_public_corpus"
"stephen-v/zh-NER-keras" -> "liushaoweihua/keras-bert-ner"
"stephen-v/zh-NER-keras" -> "bojone/bert_in_keras"
"stephen-v/zh-NER-keras" -> "stephen-v/zh-segmentation-keras"
"stephen-v/zh-NER-keras" -> "GlassyWing/bi-lstm-crf"
"stephen-v/zh-NER-keras" -> "littledeepthink/NER-in-Chinese-Text"
"stephen-v/zh-NER-keras" -> "keras-team/keras-contrib"
"stephen-v/zh-NER-keras" -> "CLOVEXCWZ/NER_DEMO"
"stephen-v/zh-NER-keras" -> "ProHiryu/bert-chinese-ner"
"stephen-v/zh-NER-keras" -> "kifish/NER-demo"
"stephen-v/zh-NER-keras" -> "bojone/seq2seq"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "ZacBi/CS224n-2019-solutions"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "xixiaoyao/CS224n-winter-together"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "LooperXX/CS224n-Reading-Notes"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "apachecn/stanford-cs224n-notes-zh"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "LooperXX/CS224n-Resource"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "Luvata/CS224N-2019"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "hankcs/CS224n"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "stanfordnlp/cs224n-winter17-notes" ["e"=1]
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "apachecn/nlp-pytorch-zh"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "songyingxin/NLPer-Interview"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "learning511/cs224n-learning-camp"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "songyingxin/TextClassification"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "zhpmatrix/nlp-competitions-list-review"
"zhanlaoban/CS224N-Stanford-Winter-2019" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"shelleyHLX/cail" -> "shelleyHLX/text-classification"
"shelleyHLX/cail" -> "renjunxiang/Competition_CAIL"
"shelleyHLX/cail" -> "jingyihiter/mycail"
"shelleyHLX/cail" -> "HenryYuxuanWang/judicial_competition"
"shelleyHLX/cail" -> "thunlp/CAIL2018"
"shelleyHLX/cail" -> "thunlp/CAIL"
"shelleyHLX/cail" -> "FengBli/CAIL2018-toy"
"shelleyHLX/cail" -> "sihuajian/cail2018"
"pmichel31415/are-16-heads-really-better-than-1" -> "lena-voita/the-story-of-heads"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "liu-nlper/SLTK"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "yanwii/ChinsesNER-pytorch"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "lonePatient/BiLSTM-CRF-NER-PyTorch"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "ZhixiuYe/HSCRF-pytorch"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "ZhixiuYe/NER-pytorch"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "v-mipeng/LexiconAugmentedNER"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "lemonhu/NER-BERT-pytorch"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "achernodub/targer"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "threelittlemonkeys/lstm-crf-pytorch"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "circlePi/Bert_Chinese_Ner_pytorch"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "ZephyrChenzf/NER-Sequence-labeling--Textcnn-bilstm-crf-pytorch"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "jayavardhanr/End-to-end-Sequence-Labeling-via-Bi-directional-LSTM-CNNs-CRF-Tutorial"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "ai-forever/ner-bert"
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "Cartus/AGGCN" ["e"=1]
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"microsoft/vert-papers" -> "thunlp/Few-NERD"
"microsoft/vert-papers" -> "asappresearch/structshot"
"microsoft/vert-papers" -> "psunlpgroup/CONTaiNER"
"microsoft/vert-papers" -> "rtmaww/EntLM"
"microsoft/vert-papers" -> "AidenHuen/FGN-NER"
"microsoft/vert-papers" -> "kaisugi/entity-related-papers" ["e"=1]
"microsoft/vert-papers" -> "v-mipeng/LexiconAugmentedNER"
"microsoft/vert-papers" -> "ShannonAI/mrc-for-flat-nested-ner"
"microsoft/vert-papers" -> "few-shot-NER-benchmark/BaselineCode"
"microsoft/vert-papers" -> "LeePleased/NegSampling-NER"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "RandolphVI/Multi-Label-Text-Classification"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "hellonlp/classifier-multi-label"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "Tencent/NeuralNLP-NeuralClassifier"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "songyingxin/Bert-TextClassification"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "kaushaltrivedi/bert-toxic-comments-multilabel"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "javaidnabi31/Multi-Label-Text-classification-Using-BERT"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "yongzhuo/Keras-TextClassification"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "RandolphVI/Hierarchical-Multi-Label-Text-Classification"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "brightmart/sentiment_analysis_fine_grain"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "hscspring/Multi-Label-Text-Classification-for-Chinese"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "AnubhavGupta3377/Text-Classification-Models-Pytorch" ["e"=1]
"lonePatient/Bert-Multi-Label-Text-Classification" -> "lonePatient/BERT-NER-Pytorch"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "Vincent131499/Multi_Label_Classifier_finetune"
"lonePatient/Bert-Multi-Label-Text-Classification" -> "lancopku/SGM" ["e"=1]
"mandarjoshi90/coref" -> "kentonl/e2e-coref"
"mandarjoshi90/coref" -> "facebookresearch/SpanBERT"
"mandarjoshi90/coref" -> "shayneobrien/coreference-resolution"
"mandarjoshi90/coref" -> "ShannonAI/CorefQA"
"mandarjoshi90/coref" -> "bkntr/coref-ee"
"mandarjoshi90/coref" -> "clarkkev/deep-coref"
"mandarjoshi90/coref" -> "conll/reference-coreference-scorers"
"mandarjoshi90/coref" -> "troublemaker-r/Chinese_Coreference_Resolution"
"mandarjoshi90/coref" -> "vdobrovolskii/wl-coref"
"mandarjoshi90/coref" -> "google-research-datasets/gap-coreference"
"mandarjoshi90/coref" -> "lxucs/coref-hoi"
"mandarjoshi90/coref" -> "huggingface/neuralcoref" ["e"=1]
"mandarjoshi90/coref" -> "emorynlp/coref-hoi"
"mandarjoshi90/coref" -> "ontonotes/conll-formatted-ontonotes-5.0"
"CyberZHG/keras-layer-normalization" -> "CyberZHG/keras-gcn" ["e"=1]
"chakki-works/seqeval" -> "juand-r/entity-recognition-datasets"
"chakki-works/seqeval" -> "kamalkraj/BERT-NER"
"chakki-works/seqeval" -> "jiesutd/NCRFpp"
"chakki-works/seqeval" -> "kmkurn/pytorch-crf"
"chakki-works/seqeval" -> "ShannonAI/mrc-for-flat-nested-ner"
"chakki-works/seqeval" -> "Hironsan/anago"
"chakki-works/seqeval" -> "guillaumegenthial/tf_ner"
"chakki-works/seqeval" -> "lavis-nlp/spert" ["e"=1]
"chakki-works/seqeval" -> "makcedward/nlpaug" ["e"=1]
"chakki-works/seqeval" -> "sighsmile/conlleval"
"chakki-works/seqeval" -> "airaria/TextBrewer"
"chakki-works/seqeval" -> "scrapinghub/python-crfsuite"
"chakki-works/seqeval" -> "loujie0822/DeepIE"
"chakki-works/seqeval" -> "LeeSureman/Flat-Lattice-Transformer"
"chakki-works/seqeval" -> "pytorch/text" ["e"=1]
"crownpku/Somiao-Pinyin" -> "Kyubyong/neural_chinese_transliterator"
"crownpku/Somiao-Pinyin" -> "Pelhans/ZASR_tensorflow" ["e"=1]
"crownpku/Somiao-Pinyin" -> "LiuRoy/Pinyin_Demo"
"crownpku/Somiao-Pinyin" -> "letiantian/Pinyin2Hanzi"
"crownpku/Somiao-Pinyin" -> "audier/DeepSpeechRecognition" ["e"=1]
"shaypal5/skift" -> "vishnumani2009/sklearn-fasttext"
"shaypal5/skift" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"shaypal5/skift" -> "shaypal5/s3bp"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "wshuyi/demo-fastbert-multi-label-classification"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "wshuyi/demo_chinese_text_classification_bert_fastai"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "real-brilliant/bert_chinese_pytorch"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "songyingxin/Bert-TextClassification"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "yongzhuo/Keras-TextClassification"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "jiangxinyang227/textClassifier"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "CyberZHG/keras-bert"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "NLPScott/bert-Chinese-classification-task"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "bojone/bert_in_keras"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "SunYanCN/BAND"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "terrifyzhao/bert-utils"
"wshuyi/demo-chinese-text-binary-classification-with-bert" -> "kpe/bert-for-tf2"
"cliuxinxin/TX-WORD2VEC-SMALL" -> "terrifyzhao/bert-utils"
"cliuxinxin/TX-WORD2VEC-SMALL" -> "airaria/TextBrewer"
"cliuxinxin/TX-WORD2VEC-SMALL" -> "425776024/nlpcda"
"luopeixiang/textclf" -> "Lizhen0628/text_classification"
"luopeixiang/textclf" -> "xyionwu/ccks-2020-finance-transfer-ee-baseline" ["e"=1]
"apachecn/stanford-cs224n-notes-zh" -> "LooperXX/CS224n-Reading-Notes"
"apachecn/stanford-cs224n-notes-zh" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"apachecn/stanford-cs224n-notes-zh" -> "apachecn/stanford-cs234-notes-zh" ["e"=1]
"apachecn/stanford-cs224n-notes-zh" -> "LooperXX/CS224n-Resource"
"apachecn/stanford-cs224n-notes-zh" -> "ZacBi/CS224n-2019-solutions"
"kpot/keras-transformer" -> "lsdefine/attention-is-all-you-need-keras"
"kpot/keras-transformer" -> "CyberZHG/keras-transformer"
"kpot/keras-transformer" -> "Separius/BERT-keras"
"kpot/keras-transformer" -> "CyberZHG/keras-self-attention"
"kpot/keras-transformer" -> "CyberZHG/keras-multi-head"
"kpot/keras-transformer" -> "CyberZHG/keras-bert"
"kpot/keras-transformer" -> "datalogue/keras-attention"
"kpot/keras-transformer" -> "kpe/bert-for-tf2"
"kpot/keras-transformer" -> "strongio/keras-elmo"
"kpot/keras-transformer" -> "keras-team/keras-contrib"
"kpot/keras-transformer" -> "philipperemy/keras-attention"
"kpot/keras-transformer" -> "CyberZHG/keras-transformer-xl"
"kpot/keras-transformer" -> "lvapeab/nmt-keras" ["e"=1]
"kpot/keras-transformer" -> "thushv89/attention_keras"
"kpot/keras-transformer" -> "BrikerMan/Kashgari"
"tigerchen52/synonym_detection" -> "Keson96/SynoCN"
"tigerchen52/synonym_detection" -> "BiLiangLtd/WordSimilarity"
"tigerchen52/synonym_detection" -> "czhang99/SynonymNet"
"tigerchen52/synonym_detection" -> "mickeysjm/SynSetMine-pytorch"
"yhcc/OntoNotes-5.0-NER" -> "yuchenlin/OntoNotes-5.0-NER-BIO"
"yhcc/OntoNotes-5.0-NER" -> "HuHsinpang/Ontonotes5.0-pretreatment"
"yhcc/OntoNotes-5.0-NER" -> "juntaoy/biaffine-ner"
"yhcc/OntoNotes-5.0-NER" -> "DianboWork/Graph4CNER"
"yhcc/OntoNotes-5.0-NER" -> "fastnlp/TENER"
"yhcc/OntoNotes-5.0-NER" -> "mmichazzj/Semantic-Role-Labeling"
"yhcc/OntoNotes-5.0-NER" -> "ontonotes/conll-formatted-ontonotes-5.0"
"accordproject/ergo" -> "accordproject/template-archive"
"accordproject/ergo" -> "accordproject/cicero-template-library"
"accordproject/ergo" -> "accordproject/models"
"accordproject/ergo" -> "accordproject/template-studio"
"accordproject/ergo" -> "accordproject/web-components"
"accordproject/ergo" -> "accordproject/concerto"
"accordproject/ergo" -> "accordproject/cicero-ui"
"accordproject/ergo" -> "accordproject/cicero-word-add-in-deprecated"
"accordproject/ergo" -> "clauseHQ/demo-clause-ibm-perishable-goods"
"accordproject/ergo" -> "accordproject/techdocs"
"wdimmy/Automatic-Corpus-Generation" -> "ACL2020SpellGCN/SpellGCN"
"wdimmy/Automatic-Corpus-Generation" -> "DaDaMrX/ReaLiSe"
"wdimmy/Automatic-Corpus-Generation" -> "destwang/CTCResources"
"wdimmy/Automatic-Corpus-Generation" -> "destwang/CTC2021"
"wdimmy/Automatic-Corpus-Generation" -> "FDChongLi/TwoWaysToImproveCSC"
"wdimmy/Automatic-Corpus-Generation" -> "sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check"
"wdimmy/Automatic-Corpus-Generation" -> "liushulinle/PLOME"
"wdimmy/Automatic-Corpus-Generation" -> "gitabtion/BertBasedCorrectionModels"
"wdimmy/Automatic-Corpus-Generation" -> "onebula/sighan_raw"
"wdimmy/Automatic-Corpus-Generation" -> "nghuyong/Chinese-text-correction-papers"
"wdimmy/Automatic-Corpus-Generation" -> "HillZhang1999/MuCGEC"
"wdimmy/Automatic-Corpus-Generation" -> "destwang/DCN"
"wdimmy/Automatic-Corpus-Generation" -> "gitabtion/SoftMaskedBert-PyTorch"
"wdimmy/Automatic-Corpus-Generation" -> "zhaoyyoo/NLPCC2018_GEC"
"wdimmy/Automatic-Corpus-Generation" -> "liushulinle/CRASpell"
"ccheng16/correction" -> "PengheLiu/Cn_Speck_Checker"
"ccheng16/correction" -> "taozhijiang/chinese_correct_wsd"
"ccheng16/correction" -> "beyondacm/Autochecker4Chinese"
"ccheng16/correction" -> "iqiyi/FASPell"
"ccheng16/correction" -> "contr4l/SimilarCharacter"
"ccheng16/correction" -> "shibing624/pycorrector"
"ccheng16/correction" -> "blcuicall/NLPCC_2018_TASK2_GEC"
"ccheng16/correction" -> "ACL2020SpellGCN/SpellGCN"
"ccheng16/correction" -> "SeanLee97/xmnlp"
"ccheng16/correction" -> "zhangsonglei/ChineseSpellingCheck"
"shangjingbo1226/AutoNER" -> "shangjingbo1226/AutoPhrase"
"shangjingbo1226/AutoNER" -> "LiyuanLucasLiu/LightNER"
"shangjingbo1226/AutoNER" -> "cliang1453/BOND"
"shangjingbo1226/AutoNER" -> "lingluodlut/BioNER-Progress" ["e"=1]
"shangjingbo1226/AutoNER" -> "LiyuanLucasLiu/LD-Net"
"shangjingbo1226/AutoNER" -> "v-mipeng/LexiconNER"
"shangjingbo1226/AutoNER" -> "rainarch/DSNER"
"shangjingbo1226/AutoNER" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"shangjingbo1226/AutoNER" -> "ZhixiuYe/HSCRF-pytorch"
"shangjingbo1226/AutoNER" -> "ZihanWangKi/CrossWeigh"
"shangjingbo1226/AutoNER" -> "yuzhimanhua/Multi-BioNER" ["e"=1]
"shangjingbo1226/AutoNER" -> "jiesutd/LatticeLSTM"
"shangjingbo1226/AutoNER" -> "v-mipeng/LexiconAugmentedNER"
"shangjingbo1226/AutoNER" -> "CPF-NLPR/AT4ChineseNER"
"shangjingbo1226/AutoNER" -> "qiufengyuyi/sequence_tagging"
"NLPScott/bert-Chinese-classification-task" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"NLPScott/bert-Chinese-classification-task" -> "ProHiryu/bert-chinese-ner"
"NLPScott/bert-Chinese-classification-task" -> "brightmart/sentiment_analysis_fine_grain"
"NLPScott/bert-Chinese-classification-task" -> "Y1ran/NLP-BERT--ChineseVersion"
"NLPScott/bert-Chinese-classification-task" -> "terrifyzhao/bert-utils"
"NLPScott/bert-Chinese-classification-task" -> "brightmart/bert_language_understanding"
"NLPScott/bert-Chinese-classification-task" -> "renxingkai/BERT_Chinese_Classification" ["e"=1]
"NLPScott/bert-Chinese-classification-task" -> "Jiakui/awesome-bert"
"NLPScott/bert-Chinese-classification-task" -> "zhpmatrix/bert-sequence-tagging"
"NLPScott/bert-Chinese-classification-task" -> "bojone/bert_in_keras"
"NLPScott/bert-Chinese-classification-task" -> "kyzhouhzau/BERT-NER"
"NLPScott/bert-Chinese-classification-task" -> "liyibo/text-classification-demos"
"NLPScott/bert-Chinese-classification-task" -> "jiangxinyang227/textClassifier"
"NLPScott/bert-Chinese-classification-task" -> "songyingxin/Bert-TextClassification"
"NLPScott/bert-Chinese-classification-task" -> "ymcui/Chinese-XLNet"
"FakerYFX/Bert-Pytorch-Chinese-TextClassification" -> "real-brilliant/bert_chinese_pytorch"
"FakerYFX/Bert-Pytorch-Chinese-TextClassification" -> "hichenway/CodeShare"
"FakerYFX/Bert-Pytorch-Chinese-TextClassification" -> "lonePatient/BERT-chinese-text-classification-pytorch"
"pengshuang/AI-Comp" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"pengshuang/AI-Comp" -> "foamliu/Sentiment-Analysis"
"pengshuang/AI-Comp" -> "chenghuige/wenzheng"
"pengshuang/AI-Comp" -> "panyang/fastText-for-AI-Challenger-Sentiment-Analysis"
"pengshuang/AI-Comp" -> "xueyouluo/fsauor2018"
"pengshuang/AI-Comp" -> "brightmart/sentiment_analysis_fine_grain"
"pengshuang/AI-Comp" -> "viewlei/fsauor2018"
"pengshuang/AI-Comp" -> "scruel/sentiment_analysis"
"pengshuang/AI-Comp" -> "yilifzf/BDCI_Car_2018"
"yuquanle/funNLP" -> "yuquanle/NLP-progress"
"yuquanle/funNLP" -> "yuquanle/DeepLearning-500-questions"
"yuquanle/funNLP" -> "yuquanle/Algorithm_Interview_Notes-Chinese"
"bigzhao/Keyword_Extraction" -> "Rowchen/Keyword-Extraction"
"bigzhao/Keyword_Extraction" -> "AimeeLee77/keyword_extraction"
"bigzhao/Keyword_Extraction" -> "ArtistScript/FastTextRank"
"bigzhao/Keyword_Extraction" -> "sunyilgdx/SIFRank_zh" ["e"=1]
"bigzhao/Keyword_Extraction" -> "dongrixinyu/chinese_keyphrase_extractor"
"bigzhao/Keyword_Extraction" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"bigzhao/Keyword_Extraction" -> "Dikea/Shence-Cup-Keyword-Extractor"
"zeitiempo/ECSD" -> "rainarch/SentiBridge"
"zeitiempo/ECSD" -> "Codelegant92/SentimentAnalysis-chinese"
"fangj/rmrb" -> "ppmm/get-people-daily"
"fangj/rmrb" -> "caspiankexin/people-daily-crawler-date"
"fangj/rmrb" -> "AlanConstantine/PeoplesDailyNER"
"LiyuanLucasLiu/LightNER" -> "LiyuanLucasLiu/Fast-Furious-Paper"
"LiyuanLucasLiu/LightNER" -> "GentleZhu/ReMine"
"LiyuanLucasLiu/LightNER" -> "LiyuanLucasLiu/Vanilla_NER"
"LiyuanLucasLiu/LightNER" -> "LiyuanLucasLiu/LD-Net"
"ArthurRizar/tensorflow_ernie" -> "wipen/bert_and_ernie"
"ZhixiuYe/NER-pytorch" -> "ZhixiuYe/HSCRF-pytorch"
"ZhixiuYe/NER-pytorch" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"ZhixiuYe/NER-pytorch" -> "liu-nlper/SLTK"
"ZhixiuYe/NER-pytorch" -> "threelittlemonkeys/lstm-crf-pytorch"
"ZhixiuYe/NER-pytorch" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"ZhixiuYe/NER-pytorch" -> "glample/tagger"
"ZhixiuYe/NER-pytorch" -> "liu-nlper/NER-LSTM-CRF"
"ZhixiuYe/NER-pytorch" -> "rainarch/DSNER"
"ZhixiuYe/NER-pytorch" -> "jiesutd/NCRFpp"
"ZhixiuYe/NER-pytorch" -> "kamalkraj/BERT-NER"
"ZhixiuYe/NER-pytorch" -> "ai-forever/ner-bert"
"ZhixiuYe/NER-pytorch" -> "jiesutd/LatticeLSTM"
"wonderfulsuccess/chinese_abstractive_corpus" -> "bifeng/nlp_paper_notes"
"wonderfulsuccess/chinese_abstractive_corpus" -> "yongzhuo/nlg-yongzhuo"
"china-ai-law-challenge/CAIL2018" -> "prometheusXN/LADAN"
"china-ai-law-challenge/CAIL2018" -> "china-ai-law-challenge/CAIL2019"
"guotong1988/BERT-pre-training" -> "haoyuhu/bert-multi-gpu"
"guotong1988/BERT-pre-training" -> "zhp510730568/bert-ad"
"guotong1988/BERT-pre-training" -> "lambdal/bert"
"guotong1988/BERT-pre-training" -> "wipen/bert_and_ernie"
"haoyuhu/bert-multi-gpu" -> "guotong1988/BERT-pre-training"
"haoyuhu/bert-multi-gpu" -> "lambdal/bert"
"haoyuhu/bert-multi-gpu" -> "JayYip/m3tl"
"nslogx/weapp-poem" -> "Kooooooma/chinese-poetry-mysql"
"nslogx/weapp-poem" -> "caochangkui/miniprogram-project" ["e"=1]
"nslogx/weapp-poem" -> "yxcs/poems-db"
"nslogx/weapp-poem" -> "chinese-poetry/huajianji"
"nslogx/weapp-poem" -> "chinese-poetry/weapp-calendar" ["e"=1]
"nslogx/weapp-poem" -> "Werneror/Poetry"
"nslogx/weapp-poem" -> "chinese-poetry/poetry-calendar"
"nslogx/weapp-poem" -> "szpnygo/wepy_ios_top" ["e"=1]
"nslogx/weapp-poem" -> "michaelliao/shici"
"LiyuanLucasLiu/Torch-Scope" -> "LiyuanLucasLiu/Fast-Furious-Paper"
"LiyuanLucasLiu/Torch-Scope" -> "shangjingbo1226/PL2M"
"pengshuang/Text-Similarity" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"pengshuang/Text-Similarity" -> "zhaogaofeng611/TextMatch"
"pengshuang/Text-Similarity" -> "pengming617/text_matching"
"pengshuang/Text-Similarity" -> "alibaba-edu/simple-effective-text-matching"
"pengshuang/Text-Similarity" -> "coetaur0/ESIM"
"pengshuang/Text-Similarity" -> "yanqiangmiffy/sentence-similarity"
"pengshuang/Text-Similarity" -> "terrifyzhao/text_matching"
"pengshuang/Text-Similarity" -> "JianWenJun/MLDemo"
"pengshuang/Text-Similarity" -> "lukecq1231/nli"
"pengshuang/Text-Similarity" -> "DataTerminatorX/Keyword-BERT"
"pengshuang/Text-Similarity" -> "JepsonWong/Text_Matching"
"pengshuang/Text-Similarity" -> "NTMC-Community/MatchZoo-py"
"pengshuang/Text-Similarity" -> "ziweipolaris/atec2018-nlp"
"pengshuang/Text-Similarity" -> "IAdmireu/ChineseSTS"
"pengshuang/Text-Similarity" -> "wangle1218/deep_text_matching"
"GlassyWing/bi-lstm-crf" -> "GlassyWing/transformer-word-segmenter"
"GlassyWing/bi-lstm-crf" -> "FanhuaandLuomu/BiLstm_CNN_CRF_CWS"
"GlassyWing/bi-lstm-crf" -> "EricLingRui/NLP-tools"
"GlassyWing/bi-lstm-crf" -> "stephen-v/zh-NER-keras"
"GlassyWing/bi-lstm-crf" -> "X-jun-0130/Easy_CWS_biLSTM_CRF" ["e"=1]
"GlassyWing/bi-lstm-crf" -> "ProHiryu/bert-chinese-ner"
"GlassyWing/bi-lstm-crf" -> "WhiteGive-Boy/CWS-Hmm_BiLSTM-CRF"
"GlassyWing/bi-lstm-crf" -> "CLOVEXCWZ/NER_DEMO"
"GlassyWing/bi-lstm-crf" -> "shen1994/chinese_bilstm_cnn_crf"
"GlassyWing/bi-lstm-crf" -> "liuhuanyong/ChineseNLPCorpus"
"GlassyWing/bi-lstm-crf" -> "lpty/nlp_base"
"GlassyWing/bi-lstm-crf" -> "FuYanzhe2/Name-Entity-Recognition"
"GlassyWing/bi-lstm-crf" -> "yanwii/ChinsesNER-pytorch"
"GlassyWing/bi-lstm-crf" -> "yongzhuo/Macadam"
"liuhuanyong/HyponymyExtraction" -> "liuhuanyong/BaikeKnowledgeSchema"
"liuhuanyong/HyponymyExtraction" -> "facebookresearch/hypernymysuite"
"liuhuanyong/HyponymyExtraction" -> "liuhuanyong/CognitiveInference"
"globality-corp/sklearn-hierarchical-classification" -> "morningmoni/HiLAP"
"globality-corp/sklearn-hierarchical-classification" -> "scikit-learn-contrib/hiclass"
"globality-corp/sklearn-hierarchical-classification" -> "Alibaba-NLP/HiAGM"
"MLjian/TextClassificationImplement" -> "moneyDboat/data_grand"
"MLjian/TextClassificationImplement" -> "hecongqing/2018-daguan-competition"
"MLjian/TextClassificationImplement" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"MLjian/TextClassificationImplement" -> "nlpjoe/daguan-classify-2018"
"MLjian/TextClassificationImplement" -> "Rowchen/Text-classifier"
"MLjian/TextClassificationImplement" -> "yanqiangmiffy/daguan"
"MLjian/TextClassificationImplement" -> "Magic-Bubble/Zhihu"
"MLjian/TextClassificationImplement" -> "RedstoneWill/MachineLearningInAction-Camp" ["e"=1]
"MLjian/TextClassificationImplement" -> "learning511/cs224n-learning-camp"
"MLjian/TextClassificationImplement" -> "cjymz886/text_rnn_attention" ["e"=1]
"MLjian/TextClassificationImplement" -> "yuquanle/2018-daguan-competition-rank4"
"PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec" -> "PrashantRanjan09/Elmo-Tutorial"
"PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec" -> "UKPLab/elmo-bilstm-cnn-crf"
"PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec" -> "strongio/keras-elmo"
"CyberZHG/summary" -> "bojone/accum_optimizer_for_keras"
"CyberZHG/summary" -> "bojone/bert_in_keras"
"lspvic/CopyNet" -> "mjc92/CopyNet"
"lspvic/CopyNet" -> "MultiPath/CopyNet"
"lspvic/CopyNet" -> "adamklec/copynet"
"yaleimeng/Final_word_Similarity" -> "BiLiangLtd/WordSimilarity"
"yaleimeng/Final_word_Similarity" -> "ashengtx/CilinSimilarity"
"yaleimeng/Final_word_Similarity" -> "thunlp/OpenHowNet"
"yaleimeng/Final_word_Similarity" -> "liuhuanyong/SentenceSimilarity"
"yaleimeng/Final_word_Similarity" -> "guotong1988/chinese_dictionary"
"yaleimeng/Final_word_Similarity" -> "chatopera/Synonyms"
"yaleimeng/Final_word_Similarity" -> "Keson96/SynoCN"
"yaleimeng/Final_word_Similarity" -> "taozhijiang/chinese_correct_wsd"
"yaleimeng/Final_word_Similarity" -> "liuhuanyong/ChineseSemanticKB"
"yaleimeng/Final_word_Similarity" -> "HIT-SCIR/pyltp"
"yaleimeng/Final_word_Similarity" -> "liuhuanyong/EventTriplesExtraction" ["e"=1]
"yaleimeng/Final_word_Similarity" -> "zhanlaoban/EDA_NLP_for_Chinese"
"yaleimeng/Final_word_Similarity" -> "terrifyzhao/bert-utils"
"yaleimeng/Final_word_Similarity" -> "liuhuanyong/ChineseEmbedding"
"yaleimeng/Final_word_Similarity" -> "yongzhuo/nlp_xiaojiang"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "NLPScott/bert-Chinese-classification-task"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "jiangxinyang227/textClassifier"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "Y1ran/NLP-BERT--ChineseVersion"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "ProHiryu/bert-chinese-ner"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "terrifyzhao/bert-utils"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "Jiakui/awesome-bert"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "brightmart/albert_zh"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "CyberZHG/keras-bert"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "ymcui/Chinese-XLNet"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "zhpmatrix/nlp-competitions-list-review"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "xmxoxo/BERT-train2deploy"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "brightmart/roberta_zh"
"yuanxiaosc/BERT_Paper_Chinese_Translation" -> "baidu/information-extraction" ["e"=1]
"xuanzebi/BERT-CH-NER" -> "ProHiryu/bert-chinese-ner"
"xuanzebi/BERT-CH-NER" -> "yumath/bertNER"
"xuanzebi/BERT-CH-NER" -> "kyzhouhzau/BERT-NER"
"xuanzebi/BERT-CH-NER" -> "FuYanzhe2/Name-Entity-Recognition"
"xuanzebi/BERT-CH-NER" -> "liuhuanyong/MedicalNamedEntityRecognition" ["e"=1]
"xuanzebi/BERT-CH-NER" -> "CLUEbenchmark/CLUENER2020"
"xuanzebi/BERT-CH-NER" -> "EOA-AILab/NER-Chinese"
"xuanzebi/BERT-CH-NER" -> "ProHiryu/albert-chinese-ner"
"xuanzebi/BERT-CH-NER" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"xuanzebi/BERT-CH-NER" -> "yanwii/ChinsesNER-pytorch"
"xuanzebi/BERT-CH-NER" -> "zhengyima/kg-baseline-pytorch" ["e"=1]
"xuanzebi/BERT-CH-NER" -> "macanv/BERT-BiLSTM-CRF-NER"
"xuanzebi/BERT-CH-NER" -> "F-debug/Medical-named-entity-recognition" ["e"=1]
"xuanzebi/BERT-CH-NER" -> "luopeixiang/named_entity_recognition"
"xuanzebi/BERT-CH-NER" -> "buppt/ChineseNER"
"LooperXX/CS224n-Resource" -> "LooperXX/CS224n-Reading-Notes"
"LooperXX/CS224n-Resource" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"LooperXX/CS224n-Resource" -> "ZacBi/CS224n-2019-solutions"
"LooperXX/CS224n-Resource" -> "xixiaoyao/CS224n-winter-together"
"LooperXX/CS224n-Resource" -> "apachecn/stanford-cs224n-notes-zh"
"HaowenHOU/single-pass-clustering-for-chinese-text" -> "FesonX/cn-text-classifier"
"JNhua/Chinese_NER_with_Attention" -> "evilbear/mgw-ner"
"JNhua/Chinese_NER_with_Attention" -> "XingyanLee/Chinese-NER"
"JNhua/Chinese_NER_with_Attention" -> "evilbear/emr-ner"
"adelevie/walverine" -> "unitedstates/citation"
"bkntr/coref-ee" -> "ShannonAI/CorefQA"
"bkntr/coref-ee" -> "HKUST-KnowComp/Pronoun-Coref"
"bkntr/coref-ee" -> "HKUST-KnowComp/Pronoun-Coref-KG"
"MirunaPislar/Sarcasm-Detection" -> "AniSkywalker/SarcasmDetection"
"MirunaPislar/Sarcasm-Detection" -> "surajr/SarcasmDetection"
"MirunaPislar/Sarcasm-Detection" -> "NIHRIO/IronyDetectionInTwitter"
"BonnieHuangxin/Bert_sentence_similarity" -> "GiantPeterZhou/Word2vec-with-Chinese-character"
"llcing/BiLSTM-CRF-ChineseNER.pytorch" -> "guocheng18/BiLSTM-CRF"
"alibaba-edu/simple-effective-text-matching" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"alibaba-edu/simple-effective-text-matching" -> "pengshuang/Text-Similarity"
"alibaba-edu/simple-effective-text-matching" -> "DataTerminatorX/Keyword-BERT"
"alibaba-edu/simple-effective-text-matching" -> "pengming617/text_matching"
"alibaba-edu/simple-effective-text-matching" -> "terrifyzhao/text_matching"
"alibaba-edu/simple-effective-text-matching" -> "pengming617/bert_textMatching"
"alibaba-edu/simple-effective-text-matching" -> "NTMC-Community/MatchZoo-py"
"alibaba-edu/simple-effective-text-matching" -> "NTMC-Community/awesome-neural-models-for-semantic-match"
"alibaba-edu/simple-effective-text-matching" -> "BangLiu/ArticlePairMatching"
"alibaba-edu/simple-effective-text-matching" -> "alibaba/esim-response-selection"
"alibaba-edu/simple-effective-text-matching" -> "zhaogaofeng611/TextMatch"
"alibaba-edu/simple-effective-text-matching" -> "ZhuiyiTechnology/pretrained-models"
"duanhongyi/genius" -> "fangpenlin/loso"
"s-yata/darts-clone" -> "rixwew/darts-clone-python"
"s-yata/darts-clone" -> "tlwg/libdatrie"
"s-yata/darts-clone" -> "s-yata/marisa-trie"
"CyberZHG/keras-multi-head" -> "CyberZHG/keras-self-attention"
"CyberZHG/keras-multi-head" -> "CyberZHG/keras-transformer"
"CyberZHG/keras-multi-head" -> "kpot/keras-transformer"
"CyberZHG/keras-multi-head" -> "CyberZHG/keras-layer-normalization"
"k5h9999/keywordfilter" -> "qloog/sensitive_words"
"k5h9999/keywordfilter" -> "andyzty/sensitivewd-filter"
"k5h9999/keywordfilter" -> "elulis/sensitive-words"
"k5h9999/keywordfilter" -> "morenjiujiu/sensitive_content_filter"
"k5h9999/keywordfilter" -> "lining0806/TextFilter"
"k5h9999/keywordfilter" -> "57ing/Sensitive-word"
"k5h9999/keywordfilter" -> "fwwdn/sensitive-stop-words"
"FNo0/Knight" -> "FNo0/LIFT_for_NLP"
"youyuge34/Poems_generator_Keras" -> "ioiogoo/poetry_generator_Keras"
"youyuge34/Poems_generator_Keras" -> "hjptriplebee/Chinese_poem_generator"
"youyuge34/Poems_generator_Keras" -> "LandyGuo/WritePoems"
"youyuge34/Poems_generator_Keras" -> "norybaby/poet"
"renjunxiang/Text_Generate" -> "kwsy/FictionAnalysis"
"renjunxiang/Text_Generate" -> "wandouduoduo/SunRnn"
"renjunxiang/Text_Generate" -> "JunnYu/Paddle-AI-Writer" ["e"=1]
"renjunxiang/Text_Generate" -> "songyouwei/fiction_generator"
"renjunxiang/Text_Generate" -> "GaoPeng97/transformer-xl-chinese"
"renjunxiang/Text_Generate" -> "zpeng1989/RNN_learning_text_code"
"renjunxiang/Text_Generate" -> "stardut/Text-Generate-RNN"
"LittletreeZou/Question-Pairs-Matching" -> "ziweipolaris/atec2018-nlp"
"LittletreeZou/Question-Pairs-Matching" -> "databinQ/paipaidai_comp"
"LittletreeZou/Question-Pairs-Matching" -> "Huijun-Cui/ATEC-NLP"
"LittletreeZou/Question-Pairs-Matching" -> "zle1992/atec"
"ziweipolaris/atec2018-nlp" -> "raven4752/huabei"
"ziweipolaris/atec2018-nlp" -> "Huijun-Cui/ATEC-NLP"
"ziweipolaris/atec2018-nlp" -> "zle1992/atec"
"ziweipolaris/atec2018-nlp" -> "ami66/nlp-competitions-list-review"
"ziweipolaris/atec2018-nlp" -> "Lapis-Hong/atec-nlp" ["e"=1]
"ziweipolaris/atec2018-nlp" -> "LittletreeZou/Question-Pairs-Matching"
"ziweipolaris/atec2018-nlp" -> "world2vec/atec_2018_nlp"
"ziweipolaris/atec2018-nlp" -> "brightmart/nlu_sim"
"YC-wind/embedding_study" -> "rokid/ELMo-chinese"
"YC-wind/embedding_study" -> "searobbersduck/ELMo_Chin"
"YC-wind/embedding_study" -> "codertimo/ELMO-tf"
"GeminiLn/EarningsCall_Dataset" -> "Earnings-Call-Dataset/MAEC-A-Multimodal-Aligned-Earnings-Conference-Call-Dataset-for-Financial-Risk-Prediction"
"GeminiLn/EarningsCall_Dataset" -> "YangLinyi/HTML-Hierarchical-Transformer-based-Multi-task-Learning-for-Volatility-Prediction"
"GeminiLn/EarningsCall_Dataset" -> "cdubiel08/Earnings-Calls-NLP"
"psychbruce/ChineseNames" -> "psychbruce/drawMap"
"ling0322/webdict" -> "ml-distribution/chinese-corpus"
"dongrixinyu/chinese_keyphrase_extractor" -> "sunyilgdx/SIFRank_zh" ["e"=1]
"dongrixinyu/chinese_keyphrase_extractor" -> "dongrixinyu/JioNLP"
"dongrixinyu/chinese_keyphrase_extractor" -> "murray-z/text_analysis_tools"
"dongrixinyu/chinese_keyphrase_extractor" -> "bigzhao/Keyword_Extraction"
"dongrixinyu/chinese_keyphrase_extractor" -> "ZhuiyiTechnology/pretrained-models"
"dongrixinyu/chinese_keyphrase_extractor" -> "boudinfl/pke" ["e"=1]
"dongrixinyu/chinese_keyphrase_extractor" -> "DataTerminatorX/Keyword-BERT"
"dongrixinyu/chinese_keyphrase_extractor" -> "smoothnlp/SmoothNLP"
"dongrixinyu/chinese_keyphrase_extractor" -> "yongzhuo/Macropodus"
"dongrixinyu/chinese_keyphrase_extractor" -> "rsanshierli/EasyBert"
"dongrixinyu/chinese_keyphrase_extractor" -> "liuhuanyong/ImportantEventExtractor" ["e"=1]
"dongrixinyu/chinese_keyphrase_extractor" -> "425776024/nlpcda"
"dongrixinyu/chinese_keyphrase_extractor" -> "blmoistawinde/HarvestText"
"dongrixinyu/chinese_keyphrase_extractor" -> "liuhuanyong/EventTriplesExtraction" ["e"=1]
"dongrixinyu/chinese_keyphrase_extractor" -> "JackHCC/Chinese-Keyphrase-Extraction" ["e"=1]
"NCXiaozui/New-Word-Detection" -> "chenaoxd/dtopwords"
"NCXiaozui/New-Word-Detection" -> "Rayarrow/New-Word-Discovery"
"NCXiaozui/New-Word-Detection" -> "izisong/new-words-discovery"
"openlegaldata/awesome-legal-data" -> "openlegaldata/legal-reference-extraction"
"shayneobrien/coreference-resolution" -> "kentonl/e2e-coref"
"shayneobrien/coreference-resolution" -> "mandarjoshi90/coref"
"shayneobrien/coreference-resolution" -> "bkntr/coref-ee"
"shayneobrien/coreference-resolution" -> "clarkkev/deep-coref"
"shayneobrien/coreference-resolution" -> "conll/reference-coreference-scorers"
"shayneobrien/coreference-resolution" -> "ontonotes/conll-formatted-ontonotes-5.0"
"shayneobrien/coreference-resolution" -> "lxucs/coref-hoi"
"shayneobrien/coreference-resolution" -> "google-research-datasets/gap-coreference"
"shayneobrien/coreference-resolution" -> "ShannonAI/CorefQA"
"shayneobrien/coreference-resolution" -> "cheniison/e2e-coref-pytorch"
"shayneobrien/coreference-resolution" -> "YangXuanyue/pytorch-e2e-coref"
"shayneobrien/coreference-resolution" -> "arthisuresh/coreference-resolution"
"shayneobrien/coreference-resolution" -> "swiseman/nn_coref"
"yuxiaowww/Big-data-analysis-and-processing" -> "yuxiaowww/IJCAI-18-TIANCHI"
"yuxiaowww/Big-data-analysis-and-processing" -> "yuxiaowww/2018-China-University-Computer-Contest"
"rime-aca/corpus" -> "BYVoid/ytenx" ["e"=1]
"rime-aca/corpus" -> "cjkvi/cjkvi-dict" ["e"=1]
"rime-aca/corpus" -> "mahavivo/scripta-sinica"
"rime-aca/corpus" -> "nk2028/tshet-uinh-autoderiver" ["e"=1]
"rime-aca/corpus" -> "KoichiYasuoka/UD-Kanbun"
"haoxizhong/pytorch-worker" -> "thunlp/jec-qa"
"haoxizhong/pytorch-worker" -> "haoxizhong/law_pre"
"haoxizhong/pytorch-worker" -> "thunlp/QAJudge"
"haoxizhong/pytorch-worker" -> "thunlp/CLAIM"
"v-mipeng/LexiconNER" -> "v-mipeng/LexiconAugmentedNER"
"v-mipeng/LexiconNER" -> "zig-kwin-hu/Low-Resource-Name-Tagging"
"v-mipeng/LexiconNER" -> "Adaxry/GCDT"
"v-mipeng/LexiconNER" -> "cslydia/BiFlaG"
"v-mipeng/LexiconNER" -> "fishjh2/merge_label"
"stanleylsx/app_comments_spider" -> "stanleylsx/image_classification"
"stanleylsx/app_comments_spider" -> "stanleylsx/bert_nlu_joint"
"stanleylsx/app_comments_spider" -> "stanleylsx/entity_extractor_by_pointer"
"stanleylsx/app_comments_spider" -> "stanleylsx/text_classifier_tf2"
"Louis-udm/NER-BERT-CRF" -> "Kyubyong/bert_ner"
"Louis-udm/NER-BERT-CRF" -> "Dhanachandra/bert_crf"
"chinese-poetry/chinese-poetry-zhCN" -> "Kooooooma/chinese-poetry-mysql"
"chinese-poetry/chinese-poetry-zhCN" -> "chinese-poetry/chinese-poetry-npm"
"chinese-poetry/chinese-poetry-zhCN" -> "Clover27/ancient-Chinese-poem-generator"
"chenzhi1992/Multi-Label-Text-Classification" -> "RandolphVI/Multi-Label-Text-Classification"
"Tushar-N/attributes-as-operators" -> "facebookresearch/taskmodularnets"
"Fritz449/ProtoNER" -> "asappresearch/structshot"
"guillaumegenthial/tf_metrics" -> "guillaumegenthial/tf_ner"
"meizhiju/layered-bilstm-crf" -> "berlino/nest-trans-em18"
"meizhiju/layered-bilstm-crf" -> "sanmusunrise/ARNs"
"meizhiju/layered-bilstm-crf" -> "thecharm/boundary-aware-nested-ner"
"meizhiju/layered-bilstm-crf" -> "fishjh2/merge_label"
"meizhiju/layered-bilstm-crf" -> "cslydia/BiFlaG"
"meizhiju/layered-bilstm-crf" -> "yahshibu/nested-ner-tacl2020-transformers"
"meizhiju/layered-bilstm-crf" -> "berlino/overlapping-ner-em18"
"murray-z/Multi_Label_TextCNN" -> "littletiger0712/text-classification-mutli-label"
"thunlp/TopJudge" -> "thunlp/attribute_charge"
"thunlp/TopJudge" -> "prometheusXN/LADAN"
"thunlp/TopJudge" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"thunlp/TopJudge" -> "thunlp/QAJudge"
"thunlp/TopJudge" -> "thunlp/CLAIM"
"thunlp/TopJudge" -> "WAPAY/EPM"
"thunlp/TopJudge" -> "thunlp/CAIL2018"
"thunlp/TopJudge" -> "thunlp/CAIL"
"jiangxinyang227/NLP-Project" -> "jiangxinyang227/textClassifier"
"jiangxinyang227/NLP-Project" -> "jiangxinyang227/bert-for-task"
"jiangxinyang227/NLP-Project" -> "jkszw2014/bert-kbqa-NLPCC2017" ["e"=1]
"jiangxinyang227/NLP-Project" -> "songyingxin/Bert-TextClassification"
"jiangxinyang227/NLP-Project" -> "yongzhuo/Keras-TextClassification"
"jiangxinyang227/NLP-Project" -> "zhanlaoban/Transformers_for_Text_Classification"
"jiangxinyang227/NLP-Project" -> "FuYanzhe2/Name-Entity-Recognition"
"jiangxinyang227/NLP-Project" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"ProHiryu/bert-chinese-ner" -> "ProHiryu/albert-chinese-ner"
"ProHiryu/bert-chinese-ner" -> "kyzhouhzau/BERT-NER"
"ProHiryu/bert-chinese-ner" -> "FuYanzhe2/Name-Entity-Recognition"
"ProHiryu/bert-chinese-ner" -> "NLPScott/bert-Chinese-classification-task"
"ProHiryu/bert-chinese-ner" -> "macanv/BERT-BiLSTM-CRF-NER"
"ProHiryu/bert-chinese-ner" -> "zjy-ucas/ChineseNER"
"ProHiryu/bert-chinese-ner" -> "xuanzebi/BERT-CH-NER"
"ProHiryu/bert-chinese-ner" -> "crownpku/Information-Extraction-Chinese"
"ProHiryu/bert-chinese-ner" -> "buppt/ChineseNER"
"ProHiryu/bert-chinese-ner" -> "yumath/bertNER"
"ProHiryu/bert-chinese-ner" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"ProHiryu/bert-chinese-ner" -> "terrifyzhao/bert-utils"
"ProHiryu/bert-chinese-ner" -> "jiesutd/LatticeLSTM"
"ProHiryu/bert-chinese-ner" -> "shiyybua/NER"
"ProHiryu/bert-chinese-ner" -> "brightmart/albert_zh"
"psnonis/FinBERT" -> "Sudy/coling2018"
"songyingxin/python-algorithm" -> "songyingxin/NLPer-Interview"
"songyingxin/python-algorithm" -> "songyingxin/TextClassification"
"songyingxin/python-algorithm" -> "yanqiangmiffy/NLP-Interview-Notes"
"songyingxin/python-algorithm" -> "songyingxin/Bert-TextClassification"
"songyingxin/python-algorithm" -> "shenweichen/coding_interviews" ["e"=1]
"galsang/BIMPM-pytorch" -> "ijinmao/BiMPM_keras"
"galsang/BIMPM-pytorch" -> "zhiguowang/BiMPM"
"brightmart/ai_law" -> "thunlp/CAIL2018"
"brightmart/ai_law" -> "thunlp/attribute_charge"
"brightmart/ai_law" -> "jingyihiter/mycail"
"brightmart/ai_law" -> "thunlp/CAIL"
"brightmart/ai_law" -> "renjunxiang/Competition_CAIL"
"brightmart/ai_law" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"brightmart/ai_law" -> "shelleyHLX/cail"
"brightmart/ai_law" -> "liuhuanyong/LawCrimeMining"
"brightmart/ai_law" -> "prometheusXN/LADAN"
"brightmart/ai_law" -> "thunlp/TopJudge"
"brightmart/ai_law" -> "ShawnyXiao/2017-CCF-BDCI-AIJudge" ["e"=1]
"Socialbird-AILab/BERT-Classification-Tutorial" -> "NLPScott/bert-Chinese-classification-task"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "brightmart/bert_language_understanding"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "brightmart/sentiment_analysis_fine_grain"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "real-brilliant/bert_chinese_pytorch"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "Jiakui/awesome-bert"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "ProHiryu/bert-chinese-ner"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "songyingxin/Bert-TextClassification"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "Y1ran/NLP-BERT--ChineseVersion"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "zengbin93/jddc_solution_4th" ["e"=1]
"Socialbird-AILab/BERT-Classification-Tutorial" -> "terrifyzhao/bert-utils"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "huangxiangzhou/NLPCC2016KBQA" ["e"=1]
"Socialbird-AILab/BERT-Classification-Tutorial" -> "lc222/text_classification_AI100" ["e"=1]
"Socialbird-AILab/BERT-Classification-Tutorial" -> "TobiasLee/Text-Classification" ["e"=1]
"Socialbird-AILab/BERT-Classification-Tutorial" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"Socialbird-AILab/BERT-Classification-Tutorial" -> "jiegzhan/multi-class-text-classification-cnn" ["e"=1]
"zhanlaoban/NLP_PEMDC" -> "zhanlaoban/Transformers_for_Text_Classification"
"zhanlaoban/NLP_PEMDC" -> "zhanlaoban/NLP_competitions"
"zhanlaoban/NLP_PEMDC" -> "zhanlaoban/CCF_BDCI_2019_datafountain350"
"kk7nc/HDLTex" -> "Alibaba-NLP/HiAGM"
"kk7nc/HDLTex" -> "wzh9969/contrastive-htc"
"kk7nc/HDLTex" -> "morningmoni/HiLAP"
"kk7nc/HDLTex" -> "RandolphVI/Hierarchical-Multi-Label-Text-Classification"
"kk7nc/HDLTex" -> "kk7nc/RMDL"
"kk7nc/HDLTex" -> "yumeng5/WeSHClass"
"kk7nc/HDLTex" -> "koustuvsinha/hier-class"
"kk7nc/HDLTex" -> "uhh-lt/BlurbGenreCollection-HMC"
"kk7nc/HDLTex" -> "HKUST-KnowComp/DeepGraphCNNforTexts"
"kk7nc/HDLTex" -> "ShimShim46/HFT-CNN"
"kk7nc/HDLTex" -> "kongds/HBGL"
"kk7nc/HDLTex" -> "HKUST-KnowComp/PathPredictionForTextClassification"
"liyibo/text-classification-demos" -> "cjymz886/text_bert_cnn"
"liyibo/text-classification-demos" -> "NLPScott/bert-Chinese-classification-task"
"liyibo/text-classification-demos" -> "Edward1Chou/Textclassification"
"lena-voita/the-story-of-heads" -> "pmichel31415/are-16-heads-really-better-than-1"
"lena-voita/the-story-of-heads" -> "lena-voita/description-length-probing"
"lena-voita/the-story-of-heads" -> "yilinyang7/fairseq_multi_fix"
"lena-voita/the-story-of-heads" -> "lena-voita/good-translation-wrong-in-context" ["e"=1]
"lena-voita/the-story-of-heads" -> "neulab/word-embeddings-for-nmt" ["e"=1]
"lena-voita/the-story-of-heads" -> "clarkkev/attention-analysis" ["e"=1]
"smoothnlp/SmoothNLP" -> "smoothnlp/FinancialDatasets"
"smoothnlp/SmoothNLP" -> "bojone/word-discovery"
"smoothnlp/SmoothNLP" -> "smoothnlp/DomainWords"
"smoothnlp/SmoothNLP" -> "ZhuiyiTechnology/pretrained-models"
"smoothnlp/SmoothNLP" -> "sing1ee/dict_build"
"smoothnlp/SmoothNLP" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"smoothnlp/SmoothNLP" -> "panchunguang/ccks_baidu_entity_link"
"smoothnlp/SmoothNLP" -> "dongrixinyu/chinese_keyphrase_extractor"
"smoothnlp/SmoothNLP" -> "autoliuweijie/FastBERT"
"smoothnlp/SmoothNLP" -> "LeeSureman/Flat-Lattice-Transformer"
"smoothnlp/SmoothNLP" -> "yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" ["e"=1]
"smoothnlp/SmoothNLP" -> "yongzhuo/Macropodus"
"smoothnlp/SmoothNLP" -> "ChineseGLUE/ChineseGLUE"
"smoothnlp/SmoothNLP" -> "brightmart/roberta_zh"
"smoothnlp/SmoothNLP" -> "WenRichard/KBQA-BERT" ["e"=1]
"Chevalier1024/SOHU-baseline" -> "sohucampus2019/coreEntityEmotion_baseline"
"Chevalier1024/SOHU-baseline" -> "lmhgithi/SOHU-baseline"
"Chevalier1024/SOHU-baseline" -> "lmhgithi/2019-sohu-finals"
"Chevalier1024/SOHU-baseline" -> "ouwenjie03/sohucampus2019"
"Chevalier1024/SOHU-baseline" -> "wangbin4317/BDCI_Car_2018-master"
"CyberZHG/keras-transformer" -> "kpot/keras-transformer"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-self-attention"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-multi-head"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-xlnet"
"CyberZHG/keras-transformer" -> "lsdefine/attention-is-all-you-need-keras"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-bert"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-transformer-xl"
"CyberZHG/keras-transformer" -> "kpe/bert-for-tf2"
"CyberZHG/keras-transformer" -> "thushv89/attention_keras"
"CyberZHG/keras-transformer" -> "xiaosongshine/transfromer_keras"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-layer-normalization"
"CyberZHG/keras-transformer" -> "bojone/seq2seq"
"CyberZHG/keras-transformer" -> "Separius/BERT-keras"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-gpt-2"
"CyberZHG/keras-transformer" -> "CyberZHG/keras-pos-embd"
"AlexGidiotis/Document-Classifier-LSTM" -> "gentaiscool/lstm-attention"
"yaleimeng/TextClassify_with_BERT" -> "songyingxin/Bert-TextClassification"
"yaleimeng/TextClassify_with_BERT" -> "renxingkai/BERT_Chinese_Classification" ["e"=1]
"rainarch/DSNER" -> "nooralahzadeh/DSNER-pytorch"
"rainarch/DSNER" -> "zig-kwin-hu/Low-Resource-Name-Tagging"
"timvieira/crf" -> "shawntan/python-crf"
"timvieira/crf" -> "scrapinghub/python-crfsuite"
"timvieira/crf" -> "timvieira/arsenal" ["e"=1]
"timvieira/crf" -> "chokkan/crfsuite"
"timvieira/crf" -> "lancifollia/crf"
"timvieira/crf" -> "TeamHG-Memex/sklearn-crfsuite"
"timvieira/crf" -> "taku910/crfpp"
"ne7ermore/yolo-v3" -> "ne7ermore/gRBAC"
"nitishgupta/nmn-drop" -> "allenai/allennlp-semparse"
"XingyanLee/Chinese-NER" -> "JNhua/Chinese_NER_with_Attention"
"XingyanLee/Chinese-NER" -> "Spyder2017/Named-Entity-Recognition"
"XingyanLee/Chinese-NER" -> "evilbear/emr-ner"
"mickeysjm/awesome-taxonomy" -> "mickeysjm/TaxoExpan"
"mickeysjm/awesome-taxonomy" -> "mickeysjm/HiExpan"
"mickeysjm/awesome-taxonomy" -> "morningmoni/TaxoRL"
"mickeysjm/awesome-taxonomy" -> "mickeysjm/SynSetMine-pytorch"
"mickeysjm/awesome-taxonomy" -> "mickeysjm/SetExpan"
"mickeysjm/awesome-taxonomy" -> "IBM/gnn-taxo-construction"
"mickeysjm/awesome-taxonomy" -> "facebookresearch/hypernymysuite"
"mickeysjm/awesome-taxonomy" -> "franticnerd/taxogen"
"mickeysjm/awesome-taxonomy" -> "sheryc/HEF"
"mickeysjm/awesome-taxonomy" -> "mickeysjm/SetRank"
"mickeysjm/awesome-taxonomy" -> "JieyuZ2/TMN"
"hankcs/multi-criteria-cws" -> "FudanNLP/adversarial-multi-criteria-learning-for-CWS"
"hankcs/multi-criteria-cws" -> "fudannlp16/CWS_Dict"
"hankcs/multi-criteria-cws" -> "jcyk/greedyCWS"
"hankcs/multi-criteria-cws" -> "SVAIGBA/WMSeg"
"hankcs/multi-criteria-cws" -> "jiesutd/RichWordSegmentor"
"hankcs/multi-criteria-cws" -> "ownthink/evaluation"
"hankcs/multi-criteria-cws" -> "FudanNLP/NLPCC-WordSeg-Weibo"
"hankcs/multi-criteria-cws" -> "jcyk/CWS"
"hankcs/multi-criteria-cws" -> "Moonshile/ChineseWordSegmentation"
"shanybar/event_entity_coref_ecb_plus" -> "kiankd/events"
"shanybar/event_entity_coref_ecb_plus" -> "ariecattan/coref"
"shanybar/event_entity_coref_ecb_plus" -> "prafulla77/ACL-2018-Event-Coreference"
"shanybar/event_entity_coref_ecb_plus" -> "aviclu/CDLM"
"ariecattan/coref" -> "aviclu/CDLM"
"ariecattan/coref" -> "shanybar/event_entity_coref_ecb_plus"
"taki0112/AdaBound-Tensorflow" -> "titu1994/keras-adabound"
"Keson96/SynoCN" -> "tigerchen52/synonym_detection"
"Keson96/SynoCN" -> "ashengtx/CilinSimilarity"
"Keson96/SynoCN" -> "yaleimeng/Final_word_Similarity"
"Keson96/SynoCN" -> "BiLiangLtd/WordSimilarity"
"Keson96/SynoCN" -> "guotong1988/chinese_dictionary"
"Keson96/SynoCN" -> "chatopera/wikidata-corpus"
"adamklec/copynet" -> "mjc92/CopyNet"
"adamklec/copynet" -> "xueyouluo/my_seq2seq"
"HKUST-KnowComp/Pronoun-Coref-KG" -> "HKUST-KnowComp/Pronoun-Coref"
"nlpjoe/daguan-classify-2018" -> "moneyDboat/data_grand"
"nlpjoe/daguan-classify-2018" -> "Rowchen/Text-classifier"
"nlpjoe/daguan-classify-2018" -> "hecongqing/2018-daguan-competition"
"nlpjoe/daguan-classify-2018" -> "nlpjoe/2018-CCL-UIIMCS"
"nlpjoe/daguan-classify-2018" -> "nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018"
"nlpjoe/daguan-classify-2018" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"nlpjoe/daguan-classify-2018" -> "wangchuan2008888/daguan-2018-longtext-classify"
"nlpjoe/daguan-classify-2018" -> "MLjian/TextClassificationImplement"
"strongio/keras-elmo" -> "UKPLab/elmo-bilstm-cnn-crf"
"strongio/keras-elmo" -> "iliaschalkidis/ELMo-keras"
"strongio/keras-elmo" -> "strongio/keras-bert"
"strongio/keras-elmo" -> "JHart96/keras_elmo_embedding_layer"
"strongio/keras-elmo" -> "PrashantRanjan09/Elmo-Tutorial"
"strongio/keras-elmo" -> "PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec"
"strongio/keras-elmo" -> "searobbersduck/ELMo_Chin"
"strongio/keras-elmo" -> "allenai/bilm-tf" ["e"=1]
"strongio/keras-elmo" -> "Separius/BERT-keras"
"strongio/keras-elmo" -> "nlpjoe/2018-CCL-UIIMCS"
"GeorgeBourne/grid" -> "izisong/new-words-discovery"
"Machine-Tom/bertsum-chinese-LAI" -> "425776024/bertsum-chinese"
"Wall-ee/chinese2digits" -> "Ailln/cn2an"
"Wall-ee/chinese2digits" -> "zhanzecheng/Time_NLP"
"Wall-ee/chinese2digits" -> "BiLiangLtd/WordSimilarity"
"titu1994/keras-one-cycle" -> "psklight/keras_one_cycle_clr"
"titu1994/keras-one-cycle" -> "surmenok/keras_lr_finder"
"titu1994/keras-one-cycle" -> "bckenstler/CLR"
"titu1994/keras-one-cycle" -> "shaoanlu/AdamW-and-SGDW"
"titu1994/keras-one-cycle" -> "WittmannF/LRFinder"
"titu1994/keras-one-cycle" -> "yu4u/mixup-generator"
"titu1994/keras-one-cycle" -> "emrul/Learning-Rate"
"titu1994/keras-one-cycle" -> "titu1994/keras-adabound"
"titu1994/keras-adabound" -> "CyberZHG/keras-adabound"
"titu1994/keras-adabound" -> "taki0112/AdaBound-Tensorflow"
"titu1994/keras-adabound" -> "bojone/keras_lookahead"
"CyberZHG/keras-xlnet" -> "CyberZHG/keras-transformer-xl"
"CyberZHG/keras-xlnet" -> "zedom1/XLNet_embbeding"
"CyberZHG/keras-xlnet" -> "ymcui/Chinese-XLNet"
"CyberZHG/keras-xlnet" -> "CyberZHG/keras-transformer"
"CyberZHG/keras-xlnet" -> "bojone/bert_in_keras"
"CyberZHG/keras-xlnet" -> "CyberZHG/keras-lr-multiplier"
"wb14123/couplet-dataset" -> "wb14123/seq2seq-couplet" ["e"=1]
"wb14123/couplet-dataset" -> "v-zich/couplet-clean-dataset"
"wb14123/couplet-dataset" -> "liuslnlp/CoupletAI"
"wb14123/couplet-dataset" -> "imcaspar/gpt2-ml"
"wb14123/couplet-dataset" -> "guotong1988/chinese_dictionary"
"wb14123/couplet-dataset" -> "Werneror/Poetry"
"wb14123/couplet-dataset" -> "liuhuanyong/MusicLyricChatbot" ["e"=1]
"wb14123/couplet-dataset" -> "CLUEbenchmark/CLGE"
"wb14123/couplet-dataset" -> "NiuTrans/Classical-Modern"
"wb14123/couplet-dataset" -> "zhanzecheng/Time_NLP"
"wb14123/couplet-dataset" -> "THUNLP-AIPoet/Datasets"
"wb14123/couplet-dataset" -> "liuhuanyong/ChineseSemanticKB"
"wb14123/couplet-dataset" -> "thunlp/Chinese_Rumor_Dataset" ["e"=1]
"wb14123/couplet-dataset" -> "panhaiqi/AncientPoetry"
"wb14123/couplet-dataset" -> "nonamestreet/weixin_public_corpus"
"beyondacm/Autochecker4Chinese" -> "taozhijiang/chinese_correct_wsd"
"beyondacm/Autochecker4Chinese" -> "PengheLiu/Cn_Speck_Checker"
"beyondacm/Autochecker4Chinese" -> "tongchangD/bert_for_corrector"
"beyondacm/Autochecker4Chinese" -> "apanly/proofreadv1"
"beyondacm/Autochecker4Chinese" -> "FreeFlyXiaoMa/pycorrector"
"beyondacm/Autochecker4Chinese" -> "fushengwuyu/chinese_spelling_correction"
"beyondacm/Autochecker4Chinese" -> "ccheng16/correction"
"beyondacm/Autochecker4Chinese" -> "hiyoung123/YoungCorrector" ["e"=1]
"beyondacm/Autochecker4Chinese" -> "houbb/word-checker"
"beyondacm/Autochecker4Chinese" -> "li-aolong/li-aolong.github.io"
"beyondacm/Autochecker4Chinese" -> "iqiyi/FASPell"
"beyondacm/Autochecker4Chinese" -> "wanglke/Soft-Masked-BERT"
"beyondacm/Autochecker4Chinese" -> "ACL2020SpellGCN/SpellGCN"
"JepsonWong/Text_Matching" -> "terrifyzhao/text_matching"
"JepsonWong/Text_Matching" -> "pengming617/text_matching"
"JepsonWong/Text_Matching" -> "pengshuang/Text-Similarity"
"JepsonWong/Text_Matching" -> "zhaogaofeng611/TextMatch"
"JepsonWong/Text_Matching" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"JepsonWong/Text_Matching" -> "Brokenwind/BertSimilarity"
"JepsonWong/Text_Matching" -> "cjymz886/sentence-similarity"
"JepsonWong/Text_Matching" -> "alibaba-edu/simple-effective-text-matching"
"JepsonWong/Text_Matching" -> "BonnieHuangxin/Bert_sentence_similarity"
"JepsonWong/Text_Matching" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"JepsonWong/Text_Matching" -> "phychaos/TextSimilar"
"JepsonWong/Text_Matching" -> "downdawn/Similarity"
"JepsonWong/Text_Matching" -> "PengboLiu/Doc2Vec-Document-Similarity"
"JepsonWong/Text_Matching" -> "zzy99/epidemic-sentence-pair"
"JepsonWong/Text_Matching" -> "YJiangcm/Chinese-sentence-pair-modeling"
"Rowchen/Text-classifier" -> "moneyDboat/data_grand"
"Rowchen/Text-classifier" -> "nlpjoe/daguan-classify-2018"
"Rowchen/Text-classifier" -> "JonneryR/2019.1-TianChi-Jinnan"
"Edward1Chou/Textclassification" -> "x-hacker/CNN_ChineseTextBinaryClassify"
"Edward1Chou/Textclassification" -> "yongfengxuemei/NLP"
"Edward1Chou/Textclassification" -> "Edward1Chou/textClustering"
"Edward1Chou/Textclassification" -> "liyibo/text-classification-demos"
"berlino/SA-Sent" -> "sutd-statnlp/statnlp-neural"
"Ac-heron/luxun" -> "Suffoquer-fang/LuXun-GPT"
"BangLiu/StoryForest" -> "BangLiu/ArticlePairMatching"
"BangLiu/StoryForest" -> "RingBDStack/KPGNN"
"JayYip/m3tl" -> "haoyuhu/bert-multi-gpu"
"JayYip/m3tl" -> "guotong1988/BERT-pre-training"
"JayYip/m3tl" -> "mbs0221/Multitask-Learning" ["e"=1]
"JayYip/m3tl" -> "ZhuiyiTechnology/pretrained-models"
"JayYip/m3tl" -> "namisan/mt-dnn"
"JayYip/m3tl" -> "ymcui/Chinese-XLNet"
"JayYip/m3tl" -> "kyzhouhzau/BERT-NER"
"JayYip/m3tl" -> "thunlp/ERNIE"
"JayYip/m3tl" -> "ChineseGLUE/ChineseGLUE"
"JayYip/m3tl" -> "shangjingbo1226/AutoNER"
"JayYip/m3tl" -> "brightmart/sentiment_analysis_fine_grain"
"JayYip/m3tl" -> "huggingface/hmtl" ["e"=1]
"JayYip/m3tl" -> "CPF-NLPR/AT4ChineseNER"
"JayYip/m3tl" -> "Jiakui/awesome-bert"
"JayYip/m3tl" -> "bekou/multihead_joint_entity_relation_extraction" ["e"=1]
"hjzin/PolyphoneDisambiguation" -> "letiantian/ChineseTone"
"yuankeyi/2019-SOHU-Contest" -> "Zessay/sohu_2019"
"yuankeyi/2019-SOHU-Contest" -> "lmhgithi/2019-sohu-finals"
"LLouice/Sohu2019" -> "Zessay/sohu_2019"
"LLouice/Sohu2019" -> "lmhgithi/2019-sohu-finals"
"LLouice/Sohu2019" -> "yuankeyi/2019-SOHU-Contest"
"LLouice/Sohu2019" -> "sys1874/seq2seq-model-for-Sohu-2019"
"sys1874/seq2seq-model-for-Sohu-2019" -> "gaoming95/Sohu"
"sys1874/seq2seq-model-for-Sohu-2019" -> "LLouice/Sohu2019"
"gbcolborne/hypernym_discovery" -> "vered1986/UnsupervisedHypernymy"
"javaidnabi31/Multi-Label-Text-classification-Using-BERT" -> "yajian/bert"
"javaidnabi31/Multi-Label-Text-classification-Using-BERT" -> "kaushaltrivedi/bert-toxic-comments-multilabel"
"javaidnabi31/Multi-Label-Text-classification-Using-BERT" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"javaidnabi31/Multi-Label-Text-classification-Using-BERT" -> "maksna/bert-fine-tuning-for-chinese-multiclass-classification"
"BatsResearch/labelmodels" -> "BatsResearch/alfred"
"atnlp/torchtext-summary" -> "keitakurita/practical-torchtext"
"atnlp/torchtext-summary" -> "real-brilliant/bert_chinese_pytorch"
"zhpmatrix/cged_tf" -> "LorraineZhou/NLP-CGED"
"zhpmatrix/cged_tf" -> "imrdong/cged-crf"
"zhpmatrix/cged_tf" -> "swjtu-gec/zlyang-master-dissertation-code"
"zhpmatrix/cged_tf" -> "voidful/ChineseErrorDataset"
"sanmusunrise/ARNs" -> "berlino/overlapping-ner-em18"
"sanmusunrise/ARNs" -> "fishjh2/merge_label"
"BatsResearch/wiser" -> "BatsResearch/safranchik-aaai20-code"
"BatsResearch/wiser" -> "BatsResearch/labelmodels"
"BatsResearch/wiser" -> "BatsResearch/taglets"
"thespectrewithin/cross-lingual_NER" -> "davidandym/multilingual-NER"
"thespectrewithin/cross-lingual_NER" -> "zig-kwin-hu/Low-Resource-Name-Tagging"
"ioiogoo/poetry_generator_Keras" -> "youyuge34/Poems_generator_Keras"
"ne7ermore/deeping-flow" -> "ne7ermore/gRBAC"
"yuchenlin/OntoNotes-5.0-NER-BIO" -> "yhcc/OntoNotes-5.0-NER"
"yuchenlin/OntoNotes-5.0-NER-BIO" -> "ontonotes/conll-formatted-ontonotes-5.0"
"zx576/rhyme" -> "liuaiting/Hip-Hop-Seq2Seq"
"liuhuanyong/BaikeInfoExtraction" -> "liuhuanyong/BaikeKnowledgeSchema"
"pingpong-ai/xlnet-pytorch" -> "graykode/xlnet-Pytorch"
"THUNLP-AIPoet/StylisticPoetry" -> "THUNLP-AIPoet/Datasets"
"THUNLP-AIPoet/StylisticPoetry" -> "THUNLP-AIPoet/PaperList"
"THUNLP-AIPoet/StylisticPoetry" -> "THUNLP-AIPoet/WMPoetry"
"THUNLP-AIPoet/StylisticPoetry" -> "THUNLP-AIPoet/MixPoet"
"THUNLP-AIPoet/StylisticPoetry" -> "Disiok/poetry-seq2seq"
"THUNLP-AIPoet/StylisticPoetry" -> "whaleloops/interpoetry"
"surmenok/keras_lr_finder" -> "titu1994/keras-one-cycle"
"surmenok/keras_lr_finder" -> "bckenstler/CLR"
"surmenok/keras_lr_finder" -> "WittmannF/LRFinder"
"surmenok/keras_lr_finder" -> "titu1994/Snapshot-Ensembles"
"surmenok/keras_lr_finder" -> "psklight/keras_one_cycle_clr"
"surmenok/keras_lr_finder" -> "yu4u/mixup-generator"
"yanqiangmiffy/daguan" -> "Genpeng/datagrand-text-classification"
"lonePatient/BiLSTM-CRF-NER-PyTorch" -> "llcing/BiLSTM-CRF-ChineseNER.pytorch"
"lonePatient/BiLSTM-CRF-NER-PyTorch" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"lonePatient/BiLSTM-CRF-NER-PyTorch" -> "goxdve/BiLSTM-CRF"
"rikeda71/TorchCRF" -> "shushanxingzhe/transformers_ner"
"norybaby/poet" -> "hjptriplebee/Chinese_poem_generator"
"norybaby/poet" -> "youyuge34/Poems_generator_Keras"
"norybaby/poet" -> "LandyGuo/WritePoems"
"norybaby/poet" -> "MrQianjinsi/poetry_analyzer"
"norybaby/poet" -> "DevinZ1993/Chinese-Poetry-Generation"
"norybaby/poet" -> "Clover27/ancient-Chinese-poem-generator"
"norybaby/poet" -> "wandouduoduo/SunRnn"
"norybaby/poet" -> "lucasjinreal/tensorflow_poems"
"norybaby/poet" -> "GaoPeng97/transformer-xl-chinese"
"mscarey/AuthoritySpoke" -> "ciarrocki/LibreLaw"
"mscarey/AuthoritySpoke" -> "officeanddragons/awesome-lawtech"
"phychaos/TextSimilar" -> "PengboLiu/Doc2Vec-Document-Similarity"
"weizhepei/BERT-NER" -> "lemonhu/NER-BERT-pytorch"
"weizhepei/BERT-NER" -> "liuyukid/transformers-ner"
"CyberZHG/keras-transformer-xl" -> "CyberZHG/keras-adaptive-softmax"
"CyberZHG/keras-transformer-xl" -> "CyberZHG/keras-ordered-neurons" ["e"=1]
"dayihengliu/a2m_chineseNMT" -> "dicalab-scu/Research"
"amansrivastava17/lstm-siamese-text-similarity" -> "dhwajraj/deep-siamese-text-similarity"
"amansrivastava17/lstm-siamese-text-similarity" -> "likejazz/Siamese-LSTM"
"amansrivastava17/lstm-siamese-text-similarity" -> "tlatkowski/multihead-siamese-nets"
"amansrivastava17/lstm-siamese-text-similarity" -> "zqhZY/semanaly"
"amansrivastava17/lstm-siamese-text-similarity" -> "DengBoCong/text-similarity"
"amansrivastava17/lstm-siamese-text-similarity" -> "pengshuang/Text-Similarity"
"amansrivastava17/lstm-siamese-text-similarity" -> "aditya1503/Siamese-LSTM"
"amansrivastava17/lstm-siamese-text-similarity" -> "liuhuanyong/SiameseSentenceSimilarity"
"amansrivastava17/lstm-siamese-text-similarity" -> "yanqiangmiffy/sentence-similarity"
"makeplanetoheaven/NlpModel" -> "makeplanetoheaven/IntelligentService"
"makeplanetoheaven/NlpModel" -> "DataTerminatorX/Keyword-BERT"
"openlegaldata/oldp" -> "openlegaldata/legal-reference-extraction"
"openlegaldata/oldp" -> "openlegaldata/awesome-legal-data"
"openlegaldata/oldp" -> "dot-legal/reference"
"jannson/wordmaker" -> "jannson/yaha"
"jannson/wordmaker" -> "avplayer/wordmaker"
"JonneryR/2019.1-TianChi-Jinnan" -> "taoyafan/jinnan"
"JonneryR/2019.1-TianChi-Jinnan" -> "MsUberyl/BiLSTMwithBF"
"MahmoudWahdan/dialog-nlu" -> "lytum/joint-intent-classification-and-slot-filling-based-on-BERT"
"ATEC2018/deep-siamese-text-similarity" -> "jllan/sentence_similarity"
"ATEC2018/deep-siamese-text-similarity" -> "THTBSE/siamese-lstm-network"
"ATEC2018/deep-siamese-text-similarity" -> "ziweipolaris/atec2018-nlp"
"lonePatient/BERT-chinese-text-classification-pytorch" -> "lonePatient/ERNIE-text-classification-pytorch"
"JiangYanting/Pre-modern_Chinese_corpus_dataset" -> "hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing"
"JiangYanting/Pre-modern_Chinese_corpus_dataset" -> "mahavivo/scripta-sinica"
"berlino/nest-trans-em18" -> "meizhiju/layered-bilstm-crf"
"berlino/nest-trans-em18" -> "berlino/overlapping-ner-em18"
"Ushiao/wordiscovery" -> "izisong/new-words-discovery"
"SunYanCN/BAND" -> "xmxoxo/BERT-train2deploy"
"bojone/crf" -> "bojone/seq2seq"
"bojone/crf" -> "bojone/bert_in_keras"
"bojone/crf" -> "bojone/on-lstm" ["e"=1]
"bojone/crf" -> "bojone/kg-2019-baseline" ["e"=1]
"pengming617/LanguageModel" -> "Menyoupingxiaoguo/AliyunSendMail"
"pengming617/LanguageModel" -> "Menyoupingxiaoguo/AliyunRDS"
"pengming617/LanguageModel" -> "Menyoupingxiaoguo/MQTT"
"pengming617/LanguageModel" -> "Menyoupingxiaoguo/DDMessageCallback"
"ztz818/Automatic-generation-of-text-summaries" -> "CourteousWood/text-summarization"
"ztz818/Automatic-generation-of-text-summaries" -> "God-Fish-X/Extractable-automatic-Text"
"ztz818/Automatic-generation-of-text-summaries" -> "1148270327/TextSummary"
"ztz818/Automatic-generation-of-text-summaries" -> "ArtistScript/FastTextRank"
"ztz818/Automatic-generation-of-text-summaries" -> "HorieYuan/TransformerTextSummarization"
"ztz818/Automatic-generation-of-text-summaries" -> "pingyuan2016/word2vec_textrank"
"ztz818/Automatic-generation-of-text-summaries" -> "Valuebai/Text-Auto-Summarization"
"ztz818/Automatic-generation-of-text-summaries" -> "yongzhuo/nlg-yongzhuo"
"ztz818/Automatic-generation-of-text-summaries" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"ztz818/Automatic-generation-of-text-summaries" -> "lancopku/superAE" ["e"=1]
"ztz818/Automatic-generation-of-text-summaries" -> "sys1874/chinese-textsum"
"ztz818/Automatic-generation-of-text-summaries" -> "qingkongzhiqian/GPT2-Summary"
"ztz818/Automatic-generation-of-text-summaries" -> "dongjun-Lee/text-summarization-tensorflow" ["e"=1]
"ztz818/Automatic-generation-of-text-summaries" -> "zingp/pointer-generator-pytorch"
"ztz818/Automatic-generation-of-text-summaries" -> "zpppy/seq2seq-chinese-textsum"
"davidawad/lobe" -> "officeanddragons/awesome-lawtech"
"davidawad/lobe" -> "Aditya-shahh/Legal-AI"
"FengBli/CAIL2018-toy" -> "sihuajian/cail2018"
"harvard-lil/cap-examples" -> "paultopia/quantitative-methods-for-lawyers"
"wshuyi/demo-fastbert-multi-label-classification" -> "wshuyi/demo-multi-label-classification-bert"
"zhanzecheng/SOHU_competition" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"zhanzecheng/SOHU_competition" -> "fennuDetudou/BERT_implement"
"zhanzecheng/SOHU_competition" -> "sanshibayuan/Sohu-2018-4th-place-solution"
"zhanzecheng/SOHU_competition" -> "sohucampus2019/coreEntityEmotion_baseline"
"zhanzecheng/SOHU_competition" -> "Chevalier1024/SOHU-baseline"
"zhanzecheng/SOHU_competition" -> "lmhgithi/SOHU-baseline"
"zhanzecheng/SOHU_competition" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"jbarrow/allennlp_tutorial" -> "allenai/allennlp-hub"
"accordproject/template-studio" -> "accordproject/models"
"YangKing0834131/2018-KUAISHOU-TSINGHUA-Solutions-" -> "FNo0/2018-KUAISHOU"
"YangKing0834131/2018-KUAISHOU-TSINGHUA-Solutions-" -> "YangKing0834131/2018-User-purchase-forecast"
"YangKing0834131/2018-KUAISHOU-TSINGHUA-Solutions-" -> "FNo0/LIFT_for_NLP"
"YangKing0834131/2018-KUAISHOU-TSINGHUA-Solutions-" -> "FNo0/Knight"
"hadifar/stc_clustering" -> "rashadulrakib/short-text-clustering-enhancement"
"hadifar/stc_clustering" -> "jacoxu/STC2"
"apanly/proofreadv1" -> "PengheLiu/Cn_Speck_Checker"
"yangtaoxf/spider_lawyer_case_doc" -> "hecongqing/Legal-Charge-Prediction"
"mjc92/CopyNet" -> "adamklec/copynet"
"mjc92/CopyNet" -> "MultiPath/CopyNet"
"mjc92/CopyNet" -> "lspvic/CopyNet"
"yinwenpeng/Attentive_Convolution" -> "yinwenpeng/Answer_Selection"
"yinwenpeng/Attentive_Convolution" -> "hanxiao/tf-attentive-conv"
"alexyoung/ircd.js" -> "martynsmith/node-irc"
"yashbonde/freeciv-python" -> "chris1869/freeciv-bot"
"pengming617/text_classification" -> "pengming617/LanguageModel"
"pengming617/text_classification" -> "Menyoupingxiaoguo/AliyunSendMail"
"pengming617/text_classification" -> "Menyoupingxiaoguo/MQTT"
"pengming617/text_classification" -> "pengming617/bert_textMatching"
"pengming617/text_classification" -> "Menyoupingxiaoguo/DDMessageCallback"
"pengming617/text_classification" -> "Menyoupingxiaoguo/Kafka"
"lmhgithi/SOHU-baseline" -> "Chevalier1024/SOHU-baseline"
"lmhgithi/SOHU-baseline" -> "lmhgithi/2019-sohu-finals"
"ns-moosavi/coval" -> "jkkummerfeld/berkeley-coreference-analyser"
"AlonEirew/extract-wec" -> "AlonEirew/cross-doc-event-coref"
"fudannlp16/CWS_Dict" -> "jcyk/CWS"
"fudannlp16/CWS_Dict" -> "FudanNLP/CWS_LSTM"
"fudannlp16/CWS_Dict" -> "jcyk/greedyCWS"
"fudannlp16/CWS_Dict" -> "jiesutd/RichWordSegmentor"
"chinese-poetry/poetry-calendar" -> "chinese-poetry/weapp-calendar" ["e"=1]
"chinese-poetry/poetry-calendar" -> "chinese-poetry/huajianji"
"chinese-poetry/poetry-calendar" -> "okcy1016/poem-onthefly"
"idorce/sentiment-analysis-ccf-bdci" -> "nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018"
"quincyliang/nlp-data-augmentation" -> "noisemix/noisemix" ["e"=1]
"quincyliang/nlp-data-augmentation" -> "zhanlaoban/EDA_NLP_for_Chinese"
"quincyliang/nlp-data-augmentation" -> "pfnet-research/contextual_augmentation" ["e"=1]
"quincyliang/nlp-data-augmentation" -> "yongzhuo/nlp_xiaojiang"
"Genpeng/datagrand-text-classification" -> "Genpeng/play-with-leetcode"
"jiesutd/SubwordEncoding-CWS" -> "jiesutd/RichWordSegmentor"
"uhh-lt/BlurbGenreCollection-HMC" -> "morningmoni/HiLAP"
"uhh-lt/BlurbGenreCollection-HMC" -> "RandolphVI/Hierarchical-Multi-Label-Text-Classification"
"uhh-lt/BlurbGenreCollection-HMC" -> "bcol23/HyperIM"
"uhh-lt/BlurbGenreCollection-HMC" -> "Alibaba-NLP/HiAGM"
"yuquanle/NLP-progress" -> "yuquanle/funNLP"
"yuquanle/NLP-progress" -> "yuquanle/Algorithm_Interview_Notes-Chinese"
"yuquanle/NLP-progress" -> "yuquanle/DeepLearning-500-questions"
"caldreaming/CAIL" -> "circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension"
"caldreaming/CAIL" -> "NoneWait/cail2019"
"caldreaming/CAIL" -> "caitian521/QADomain"
"caldreaming/CAIL" -> "Tianxiaomo/cail2019_rc"
"li-aolong/li-aolong.github.io" -> "swjtu-gec/zlyang-master-dissertation-code"
"cjymz886/text_bert_cnn" -> "SuMeng123/text_bert_cnn_rnn"
"coderSkyChen/zhihu_kanshan_cup_2017" -> "Magic-Bubble/Zhihu"
"moneyDboat/data_grand" -> "nlpjoe/daguan-classify-2018"
"moneyDboat/data_grand" -> "Rowchen/Text-classifier"
"moneyDboat/data_grand" -> "hecongqing/2018-daguan-competition"
"moneyDboat/data_grand" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"moneyDboat/data_grand" -> "MLjian/TextClassificationImplement"
"moneyDboat/data_grand" -> "Magic-Bubble/Zhihu"
"searobbersduck/ELMo_Chin" -> "rokid/ELMo-chinese"
"searobbersduck/ELMo_Chin" -> "YC-wind/embedding_study"
"mickeysjm/HiExpan" -> "mickeysjm/SetExpan"
"mickeysjm/HiExpan" -> "mickeysjm/TaxoExpan"
"mickeysjm/HiExpan" -> "mickeysjm/SynSetMine-pytorch"
"mickeysjm/HiExpan" -> "mickeysjm/SetRank"
"mickeysjm/HiExpan" -> "morningmoni/TaxoRL"
"mickeysjm/HiExpan" -> "PxYu/entity-expansion"
"mickeysjm/HiExpan" -> "franticnerd/taxogen"
"mickeysjm/HiExpan" -> "mickeysjm/awesome-taxonomy"
"mickeysjm/HiExpan" -> "yzhan238/CGExpan"
"yumeng5/WeSHClass" -> "yumeng5/WeSTClass"
"yumeng5/WeSHClass" -> "yuzhimanhua/HIMECat"
"yumeng5/WeSHClass" -> "morningmoni/HiLAP"
"yumeng5/WeSHClass" -> "yuzhimanhua/HiGitClass"
"GlassyWing/transformer-word-segmenter" -> "GlassyWing/bi-lstm-crf"
"liuhuanyong/Pinyin2Chinese" -> "EvilPsyCHo/TaskBot"
"accordproject/cicero-template-library" -> "accordproject/models"
"accordproject/cicero-template-library" -> "accordproject/ergo"
"accordproject/cicero-template-library" -> "accordproject/web-components"
"accordproject/cicero-template-library" -> "accordproject/template-engine"
"accordproject/cicero-template-library" -> "accordproject/template-archive"
"YerevaNN/DIIN-in-Keras" -> "YichenGong/Densely-Interactive-Inference-Network"
"YerevaNN/DIIN-in-Keras" -> "ijinmao/BiMPM_keras"
"morningmoni/TaxoRL" -> "mickeysjm/HiExpan"
"morningmoni/TaxoRL" -> "IBM/gnn-taxo-construction"
"morningmoni/TaxoRL" -> "franticnerd/taxogen"
"PxYu/entity-expansion" -> "mickeysjm/SetExpan"
"swjtu-gec/zlyang-master-dissertation-code" -> "blcu-nlp/GEC-Reading-List"
"databinQ/paipaidai_comp" -> "alphanlp/aphchatbot"
"bojone/accum_optimizer_for_keras" -> "CyberZHG/keras-gradient-accumulation"
"bojone/accum_optimizer_for_keras" -> "CyberZHG/summary"
"nlpjoe/2018-CCL-UIIMCS" -> "nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018"
"nlpjoe/2018-CCL-UIIMCS" -> "nlpjoe/daguan-classify-2018"
"nlpjoe/2018-CCL-UIIMCS" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"blcuicall/NLPCC_2018_TASK2_GEC" -> "zhaoyyoo/NLPCC2018_GEC"
"blcuicall/NLPCC_2018_TASK2_GEC" -> "blcu-nlp/GEC-Reading-List"
"blcuicall/NLPCC_2018_TASK2_GEC" -> "swjtu-gec/zlyang-master-dissertation-code"
"blcuicall/NLPCC_2018_TASK2_GEC" -> "nusnlp/m2scorer" ["e"=1]
"CPF-NLPR/AT4ChineseNER" -> "DianboWork/Graph4CNER"
"CPF-NLPR/AT4ChineseNER" -> "hltcoe/golden-horse"
"CPF-NLPR/AT4ChineseNER" -> "rainarch/DSNER"
"CPF-NLPR/AT4ChineseNER" -> "evilbear/emr-ner"
"CPF-NLPR/AT4ChineseNER" -> "liuwei1206/CCW-NER"
"CPF-NLPR/AT4ChineseNER" -> "v-mipeng/LexiconAugmentedNER"
"CPF-NLPR/AT4ChineseNER" -> "JNhua/Chinese_NER_with_Attention"
"CPF-NLPR/AT4ChineseNER" -> "kimiyoung/transfer"
"blcu-nlp/GEC-Reading-List" -> "swjtu-gec/zlyang-master-dissertation-code"
"jiachenwestlake/Cross-Domain_NER" -> "jiachenwestlake/Multi-Cell_LSTM"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/MQTT"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/AliyunSendMail"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/AliyunRDS"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/DDMessageCallback"
"Menyoupingxiaoguo/DDRobot" -> "Menyoupingxiaoguo/Kafka"
"sutd-statnlp/statnlp-neural" -> "haorannlp/mix"
"mickeysjm/SetRank" -> "mickeysjm/SetExpan"
"mickeysjm/SynSetMine-pytorch" -> "mickeysjm/SetExpan"
"mickeysjm/SynSetMine-pytorch" -> "mickeysjm/SetRank"
"mickeysjm/SynSetMine-pytorch" -> "mickeysjm/HiExpan"
"mickeysjm/SynSetMine-pytorch" -> "mickeysjm/TaxoExpan"
"accordproject/techdocs" -> "accordproject/models"
"accordproject/techdocs" -> "accordproject/cicero-ui"
"accordproject/techdocs" -> "accordproject/web-components"
"foamliu/Self-Attention-Keras" -> "CyberZHG/keras-self-attention"
"foamliu/Self-Attention-Keras" -> "tsterbak/keras_attention"
"GLambard/AdamW_Keras" -> "OverLordGoldDragon/keras-adamw"
"IceFlameWorm/NLP_Datasets" -> "iseesaw/FAQ-Semantic-Retrieval"
"IceFlameWorm/NLP_Datasets" -> "pluto-junzeng/CNSD"
"HsiaoYetGun/ESIM" -> "EternalFeather/ESIM"
"HsiaoYetGun/ESIM" -> "sdnr1/EBIM-NLI"
"makeplanetoheaven/IntelligentService" -> "0x0cafe/SparkiForest"
"nickyringland/nested_named_entities" -> "yahshibu/nested-ner-tacl2020"
"nickyringland/nested_named_entities" -> "fishjh2/merge_label"
"songyingxin/BERT-pytorch" -> "songyingxin/TextClassification"
"songyingxin/BERT-pytorch" -> "songyingxin/Bert-TextClassification"
"facebookresearch/hypernymysuite" -> "mmichelsonIF/hearst_patterns_python"
"facebookresearch/hypernymysuite" -> "vered1986/UnsupervisedHypernymy"
"facebookresearch/hypernymysuite" -> "gbcolborne/hypernym_discovery"
"facebookresearch/hypernymysuite" -> "mickeysjm/SynSetMine-pytorch"
"facebookresearch/hypernymysuite" -> "nguyenkh/HyperVec"
"facebookresearch/hypernymysuite" -> "morningmoni/TaxoRL"
"facebookresearch/hypernymysuite" -> "vered1986/HypeNET"
"sys1874/chinese-textsum" -> "zpppy/seq2seq-chinese-textsum"
"sys1874/chinese-textsum" -> "PeaceWish/seq2seq_textsum"
"facebookresearch/taskmodularnets" -> "Tushar-N/attributes-as-operators"
"duanzhihua/pytorch-pretrained-BERT" -> "duanzhihua/bert_chinese_pytorch"
"zle1992/atec" -> "ziweipolaris/atec2018-nlp"
"zle1992/atec" -> "Huijun-Cui/ATEC-NLP"
"zle1992/atec" -> "raven4752/huabei"
"zle1992/atec" -> "Lapis-Hong/atec-nlp" ["e"=1]
"zle1992/atec" -> "databinQ/paipaidai_comp"
"sml2h3/wenshu" -> "yangtaoxf/spider_lawyer_case_doc"
"zpeng1989/RNN_learning_text_code" -> "wandouduoduo/SunRnn"
"altmanWang/IJCAI-18-CVR" -> "yuxiaowww/IJCAI-18-TIANCHI"
"yuxiaowww/IJCAI-18-TIANCHI" -> "yuxiaowww/User-purchase-forecast-in-consumer-finance-scenarios"
"yuxiaowww/IJCAI-18-TIANCHI" -> "yuxiaowww/Big-data-analysis-and-processing"
"zhaoyyoo/NLPCC2018_GEC" -> "blcuicall/NLPCC_2018_TASK2_GEC"
"zhaoyyoo/NLPCC2018_GEC" -> "blcu-nlp/GEC-Reading-List"
"zhaoyyoo/NLPCC2018_GEC" -> "YingyWang/NLPCC_2018_TASK2_GEC"
"zhaoyyoo/NLPCC2018_GEC" -> "swjtu-gec/zlyang-master-dissertation-code"
"zhaoyyoo/NLPCC2018_GEC" -> "voidful/ChineseErrorDataset"
"zhaoyyoo/NLPCC2018_GEC" -> "nusnlp/m2scorer" ["e"=1]
"ZooTopiaGG/wx-small-program" -> "chuan6/structured-law-document"
"0x0cafe/SparkiForest" -> "makeplanetoheaven/IntelligentService"
"Genpeng/play-with-leetcode" -> "Genpeng/datagrand-text-classification"
"Rowchen/Keyword-Extraction" -> "bigzhao/Keyword_Extraction"
"Rowchen/Keyword-Extraction" -> "yanqiangmiffy/shence-cup"
"Rowchen/Keyword-Extraction" -> "Dikea/Shence-Cup-Keyword-Extractor"
"qili5/TruePIE" -> "mjiang89/MetaPAD"
"freelawproject/citation-regexes" -> "freelawproject/related-literature"
"substack/node-ssh" -> "ChienDevIT/papirus-icon-theme"
"substack/node-ssh" -> "ChienDevIT/socket.io-client-cpp"
"substack/node-ssh" -> "ChienDevIT/javalin"
"substack/node-ssh" -> "ChienDevIT/pyright"
"substack/node-ssh" -> "ChienDevIT/micrometer"
"substack/node-ssh" -> "ChienDevIT/electron-vue"
"substack/node-ssh" -> "ChienDevIT/guava"
"substack/node-ssh" -> "ChienDevIT/fish-shell"
"substack/node-ssh" -> "ChienDevIT/DeepLearning-500-questions"
"zqhZY/short_text_cnn_cluster" -> "jacoxu/STC2"
"HKUST-KnowComp/Pronoun-Coref" -> "HKUST-KnowComp/Pronoun-Coref-KG"
"yuquanle/Algorithm_Interview_Notes-Chinese" -> "yuquanle/DeepLearning-500-questions"
"yuquanle/Algorithm_Interview_Notes-Chinese" -> "yuquanle/funNLP"
"yuquanle/Algorithm_Interview_Notes-Chinese" -> "yuquanle/NLP-progress"
"CNMan/HYDZD" -> "CNMan/XDHYDCD"
"circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension" -> "caitian521/QADomain"
"circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension" -> "caldreaming/CAIL"
"circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension" -> "NoneWait/cail2019"
"circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension" -> "Tianxiaomo/cail2019_rc"
"circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension" -> "circlePi/knowledge-driven-dialogue-lic2019"
"EternalFeather/ESIM" -> "guoday/PaiPaiDai2018_rank16"
"circlePi/knowledge-driven-dialogue-lic2019" -> "circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension"
"circlePi/knowledge-driven-dialogue-lic2019" -> "circlePi/NER"
"Tianyijian/poetry" -> "Tianyijian/GushiWenSpider"
"taoyafan/jinnan" -> "JonneryR/2019.1-TianChi-Jinnan"
"Adaxry/GCDT" -> "cslydia/Hire-NER"
"Adaxry/GCDT" -> "Adaxry/get_aligned_BERT_emb"
"fishjh2/merge_label" -> "cslydia/BiFlaG"
"fishjh2/merge_label" -> "sanmusunrise/ARNs"
"FNo0/2018-KUAISHOU" -> "FNo0/Knight"
"FNo0/2018-KUAISHOU" -> "YangKing0834131/2018-KUAISHOU-TSINGHUA-Solutions-"
"kiankd/events" -> "shanybar/event_entity_coref_ecb_plus"
"kiankd/events" -> "prafulla77/ACL-2018-Event-Coreference"
"kiankd/events" -> "cltl/EventCoreference"
"nguyenkh/HyperVec" -> "vered1986/UnsupervisedHypernymy"
"tucunchao/legalpapers" -> "haoxizhong/law_pre"
"FNo0/Algorithm_Interview_Notes-Chinese" -> "FNo0/LIFT_for_NLP"
"yuquanle/DeepLearning-500-questions" -> "yuquanle/Algorithm_Interview_Notes-Chinese"
"yuquanle/DeepLearning-500-questions" -> "yuquanle/funNLP"
"yuquanle/DeepLearning-500-questions" -> "yuquanle/NLP-progress"
"accordproject/markdown-editor" -> "accordproject/cicero-ui"
"accordproject/markdown-editor" -> "accordproject/cicero-word-add-in-deprecated"
"Huijun-Cui/ATEC-NLP" -> "ziweipolaris/atec2018-nlp"
"Huijun-Cui/ATEC-NLP" -> "zle1992/atec"
"Huijun-Cui/ATEC-NLP" -> "rover9632/atec_nlp" ["e"=1]
"ami66/nlp-competitions-list-review" -> "ziweipolaris/atec2018-nlp"
"zerohd4869/Chinese-NER" -> "zerohd4869/SLK-NER"
"liuhuanyong/BaikeKnowledgeSchema" -> "liuhuanyong/BaikeInfoExtraction"
"cltl/EventCoreference" -> "kiankd/events"
"YORK-CHAN/Rank1-Crawler-weather---of-BDCI-2018-Supply-Chain-Demand-Forecast" -> "FNo0/Knight"
"YORK-CHAN/Rank1-Crawler-weather---of-BDCI-2018-Supply-Chain-Demand-Forecast" -> "sunwantong/Kuaishou-Active-User"
"TianWuYuJiangHenShou/Multi-label_Text_classification" -> "FBI1314/textClassification"
"Menyoupingxiaoguo/MQTT" -> "Menyoupingxiaoguo/AliyunSendMail"
"Menyoupingxiaoguo/MQTT" -> "Menyoupingxiaoguo/AliyunRDS"
"Menyoupingxiaoguo/MQTT" -> "Menyoupingxiaoguo/DDMessageCallback"
"Menyoupingxiaoguo/MQTT" -> "Menyoupingxiaoguo/Kafka"
"guoday/PaiPaiDai2018_rank16" -> "qrfaction/paipaidai"
"sunwantong/Xsm_Education_App" -> "FNo0/Knight"
"YinpeiDai/Seq2Seq-Models" -> "airaria/text-summarization"
"Menyoupingxiaoguo/AliyunSendMail" -> "Menyoupingxiaoguo/MQTT"
"Menyoupingxiaoguo/AliyunSendMail" -> "Menyoupingxiaoguo/AliyunRDS"
"Menyoupingxiaoguo/AliyunSendMail" -> "Menyoupingxiaoguo/DDMessageCallback"
"Menyoupingxiaoguo/AliyunRDS" -> "Menyoupingxiaoguo/MQTT"
"sihuajian/cail2018" -> "FengBli/CAIL2018-toy"
"accordproject/cicero-ui" -> "accordproject/markdown-editor"
"accordproject/cicero-ui" -> "accordproject/cicero-word-add-in-deprecated"
"jiangnanboy/python_search" -> "jiangnanboy/text_grapher"
"yuxiaowww/NLP-Basic-Learning" -> "yuxiaowww/2018-China-University-Computer-Contest"
"yuxiaowww/User-purchase-forecast-in-consumer-finance-scenarios" -> "yuxiaowww/IJCAI-18-TIANCHI"
"yuxiaowww/2018-China-University-Computer-Contest" -> "yuxiaowww/NLP-Basic-Learning"
"yuxiaowww/2018-China-University-Computer-Contest" -> "FNo0/LIFT_for_NLP"
"yuxiaowww/2018-China-University-Computer-Contest" -> "FNo0/Knight"
"accordproject/vscode-extension" -> "accordproject/cicero-word-add-in-deprecated"
"accordproject/cicero-word-add-in-deprecated" -> "accordproject/cicero-word-add-in"
"accordproject/cicero-word-add-in-deprecated" -> "accordproject/vscode-extension"
"accordproject/cicero-word-add-in-deprecated" -> "accordproject/cicero-ui"
"Moeinh77/jump-start-machine-learning" -> "Moeinh77/Kaggle-House-Prices-Advanced-Regression-Techniques"
"Moeinh77/jump-start-machine-learning" -> "Moeinh77/Chatbot-with-TensorFlow-and-Keras"
"caitian521/QADomain" -> "circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension"
"caitian521/QADomain" -> "caldreaming/CAIL"
"caitian521/QADomain" -> "Tianxiaomo/cail2019_rc"
"DengBoCong/WelcomePage" -> "DengBoCong/Algorithm"
"DengBoCong/WelcomePage" -> "DengBoCong/aided_driving_app"
"Moeinh77/Kaggle-House-Prices-Advanced-Regression-Techniques" -> "Moeinh77/jump-start-machine-learning"
"allenai/bettermap" -> "allenai/allennlp-language-modeling"
"DA-southampton/NLP_ability" -> "DA-southampton/Tech_Aarticle"
"DA-southampton/NLP_ability" -> "songyingxin/NLPer-Interview"
"DA-southampton/NLP_ability" -> "km1994/NLP-Interview-Notes"
"DA-southampton/NLP_ability" -> "km1994/nlp_paper_study"
"DA-southampton/NLP_ability" -> "ymcui/Chinese-BERT-wwm"
"DA-southampton/NLP_ability" -> "NLP-LOVE/ML-NLP" ["e"=1]
"DA-southampton/NLP_ability" -> "graykode/nlp-tutorial" ["e"=1]
"DA-southampton/NLP_ability" -> "FudanNLP/nlp-beginner"
"DA-southampton/NLP_ability" -> "649453932/Chinese-Text-Classification-Pytorch"
"DA-southampton/NLP_ability" -> "Embedding/Chinese-Word-Vectors"
"DA-southampton/NLP_ability" -> "bojone/bert4keras"
"DA-southampton/NLP_ability" -> "TingFree/NLPer-Arsenal"
"DA-southampton/NLP_ability" -> "zhpmatrix/nlp-competitions-list-review"
"DA-southampton/NLP_ability" -> "CLUEbenchmark/CLUEDatasetSearch"
"DA-southampton/NLP_ability" -> "loujie0822/DeepIE"
"loujie0822/DeepIE" -> "LeeSureman/Flat-Lattice-Transformer"
"loujie0822/DeepIE" -> "z814081807/DeepNER"
"loujie0822/DeepIE" -> "lonePatient/BERT-NER-Pytorch"
"loujie0822/DeepIE" -> "131250208/TPlinker-joint-extraction" ["e"=1]
"loujie0822/DeepIE" -> "weizhepei/CasRel" ["e"=1]
"loujie0822/DeepIE" -> "ShannonAI/mrc-for-flat-nested-ner"
"loujie0822/DeepIE" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"loujie0822/DeepIE" -> "jiesutd/LatticeLSTM"
"loujie0822/DeepIE" -> "bojone/bert4keras"
"loujie0822/DeepIE" -> "CLUEbenchmark/CLUENER2020"
"loujie0822/DeepIE" -> "princeton-nlp/PURE" ["e"=1]
"loujie0822/DeepIE" -> "thunlp/OpenNRE"
"loujie0822/DeepIE" -> "GanjinZero/awesome_Chinese_medical_NLP" ["e"=1]
"loujie0822/DeepIE" -> "panchunguang/ccks_baidu_entity_link"
"loujie0822/DeepIE" -> "brightmart/albert_zh"
"pluto-junzeng/CNSD" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"pluto-junzeng/CNSD" -> "zhoujx4/NLP-Series-sentence-embeddings"
"pluto-junzeng/CNSD" -> "zhengyanzhao1997/NLP-model"
"pluto-junzeng/CNSD" -> "zejunwang1/CSTS"
"pluto-junzeng/CNSD" -> "bojone/SimCSE"
"pluto-junzeng/CNSD" -> "pluto-junzeng/ChineseSquad" ["e"=1]
"pluto-junzeng/CNSD" -> "KwangKa/SIMCSE_unsup"
"pluto-junzeng/CNSD" -> "xinyi-code/SimCSE-Pytorch"
"pluto-junzeng/CNSD" -> "bojone/CoSENT"
"pluto-junzeng/CNSD" -> "ZhuiyiTechnology/pretrained-models"
"pluto-junzeng/CNSD" -> "yangjianxin1/SimCSE"
"pluto-junzeng/CNSD" -> "CLUEbenchmark/OCNLI"
"pluto-junzeng/CNSD" -> "liuhuanyong/ChineseTextualInference"
"pluto-junzeng/CNSD" -> "bojone/BERT-whitening"
"pluto-junzeng/CNSD" -> "IceFlameWorm/NLP_Datasets"
"CLUEbenchmark/CLUE" -> "ChineseGLUE/ChineseGLUE"
"CLUEbenchmark/CLUE" -> "brightmart/albert_zh"
"CLUEbenchmark/CLUE" -> "ymcui/Chinese-BERT-wwm"
"CLUEbenchmark/CLUE" -> "CLUEbenchmark/CLUEDatasetSearch"
"CLUEbenchmark/CLUE" -> "bojone/bert4keras"
"CLUEbenchmark/CLUE" -> "brightmart/nlp_chinese_corpus"
"CLUEbenchmark/CLUE" -> "brightmart/roberta_zh"
"CLUEbenchmark/CLUE" -> "InsaneLife/ChineseNLPCorpus"
"CLUEbenchmark/CLUE" -> "dbiir/UER-py"
"CLUEbenchmark/CLUE" -> "CLUEbenchmark/CLUENER2020"
"CLUEbenchmark/CLUE" -> "huawei-noah/Pretrained-Language-Model"
"CLUEbenchmark/CLUE" -> "PaddlePaddle/ERNIE"
"CLUEbenchmark/CLUE" -> "Embedding/Chinese-Word-Vectors"
"CLUEbenchmark/CLUE" -> "macanv/BERT-BiLSTM-CRF-NER"
"CLUEbenchmark/CLUE" -> "lonePatient/BERT-NER-Pytorch"
"hankcs/HanLP" -> "fxsjy/jieba"
"hankcs/HanLP" -> "fighting41love/funNLP" ["e"=1]
"hankcs/HanLP" -> "chinabugotech/hutool" ["e"=1]
"hankcs/HanLP" -> "Embedding/Chinese-Word-Vectors"
"hankcs/HanLP" -> "google-research/bert" ["e"=1]
"hankcs/HanLP" -> "sqshq/piggymetrics" ["e"=1]
"hankcs/HanLP" -> "ymcui/Chinese-BERT-wwm"
"hankcs/HanLP" -> "halo-dev/halo" ["e"=1]
"hankcs/HanLP" -> "brightmart/nlp_chinese_corpus"
"hankcs/HanLP" -> "crownpku/Awesome-Chinese-NLP"
"hankcs/HanLP" -> "alibaba/arthas" ["e"=1]
"hankcs/HanLP" -> "hankcs/pyhanlp"
"hankcs/HanLP" -> "NLPchina/ansj_seg" ["e"=1]
"hankcs/HanLP" -> "infinilabs/analysis-ik" ["e"=1]
"hankcs/HanLP" -> "apache/dubbo" ["e"=1]
"microsoft/DeBERTa" -> "google-research/electra"
"microsoft/DeBERTa" -> "facebookresearch/DPR" ["e"=1]
"microsoft/DeBERTa" -> "princeton-nlp/SimCSE"
"microsoft/DeBERTa" -> "google-research/text-to-text-transfer-transformer" ["e"=1]
"microsoft/DeBERTa" -> "allenai/longformer"
"microsoft/DeBERTa" -> "facebookresearch/SpanBERT"
"microsoft/DeBERTa" -> "timoschick/pet" ["e"=1]
"microsoft/DeBERTa" -> "CarperAI/trlx" ["e"=1]
"microsoft/DeBERTa" -> "namisan/mt-dnn"
"microsoft/DeBERTa" -> "huawei-noah/Pretrained-Language-Model"
"microsoft/DeBERTa" -> "beir-cellar/beir" ["e"=1]
"microsoft/DeBERTa" -> "facebookresearch/cc_net" ["e"=1]
"microsoft/DeBERTa" -> "tomohideshibata/BERT-related-papers"
"microsoft/DeBERTa" -> "google-research/albert"
"microsoft/DeBERTa" -> "facebookresearch/XLM" ["e"=1]
"kamalkraj/BERT-NER-TF" -> "kpe/bert-for-tf2"
"kamalkraj/BERT-NER-TF" -> "kamalkraj/ALBERT-TF2.0"
"kamalkraj/BERT-NER-TF" -> "saiwaiyanyu/bi-lstm-crf-ner-tf2.0"
"liuyukid/transformers-ner" -> "weizhepei/BERT-NER"
"liuyukid/transformers-ner" -> "lonePatient/daguan_2019_rank9"
"ShannonAI/dice_loss_for_NLP" -> "ShannonAI/mrc-for-flat-nested-ner"
"ShannonAI/dice_loss_for_NLP" -> "fursovia/self-adj-dice"
"ShannonAI/dice_loss_for_NLP" -> "tricktreat/locate-and-label"
"ShannonAI/dice_loss_for_NLP" -> "LeePleased/NegSampling-NER"
"ShannonAI/dice_loss_for_NLP" -> "v-mipeng/LexiconAugmentedNER"
"ShannonAI/dice_loss_for_NLP" -> "LeeSureman/Flat-Lattice-Transformer"
"ShannonAI/dice_loss_for_NLP" -> "modelscope/AdaSeq" ["e"=1]
"ShannonAI/dice_loss_for_NLP" -> "syuoni/eznlp"
"ShannonAI/dice_loss_for_NLP" -> "DianboWork/SPN4RE" ["e"=1]
"ShannonAI/dice_loss_for_NLP" -> "ljynlp/W2NER"
"ShannonAI/dice_loss_for_NLP" -> "juntaoy/biaffine-ner"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "hemingkx/CLUENER2020"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "stanleylsx/entity_extractor_by_ner"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "lemonhu/NER-BERT-pytorch"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "yumath/bertNER"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "taishan1994/BERT-BILSTM-CRF"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "DA-southampton/ner"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "goxdve/BiLSTM-CRF"
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "XavierWww/Chinese-Medical-Entity-Recognition" ["e"=1]
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "taishan1994/pytorch_triple_extraction" ["e"=1]
"cooscao/Bert-BiLSTM-CRF-pytorch" -> "yanwii/ChinsesNER-pytorch"
"murray-z/text_analysis_tools" -> "SeanLee97/xmnlp"
"murray-z/text_analysis_tools" -> "linguishi/chinese_sentiment" ["e"=1]
"murray-z/text_analysis_tools" -> "blmoistawinde/HarvestText"
"murray-z/text_analysis_tools" -> "ownthink/Jiagu"
"murray-z/text_analysis_tools" -> "rsanshierli/EasyBert"
"murray-z/text_analysis_tools" -> "dongrixinyu/chinese_keyphrase_extractor"
"murray-z/text_analysis_tools" -> "yongzhuo/nlg-yongzhuo"
"murray-z/text_analysis_tools" -> "liuhuanyong/EventTriplesExtraction" ["e"=1]
"murray-z/text_analysis_tools" -> "jasoncao11/nlp-notebook"
"murray-z/text_analysis_tools" -> "yongzhuo/Macropodus"
"murray-z/text_analysis_tools" -> "AimeeLee77/keyword_extraction"
"murray-z/text_analysis_tools" -> "dengxiuqi/WeiboSentiment" ["e"=1]
"murray-z/text_analysis_tools" -> "murray-z/text_clustering"
"murray-z/text_analysis_tools" -> "yongzhuo/nlp_xiaojiang"
"murray-z/text_analysis_tools" -> "hellonlp/sentiment-analysis" ["e"=1]
"yangjianxin1/GPT2-chitchat" -> "Morizeyao/GPT2-Chinese"
"yangjianxin1/GPT2-chitchat" -> "thu-coai/CDial-GPT"
"yangjianxin1/GPT2-chitchat" -> "imcaspar/gpt2-ml"
"yangjianxin1/GPT2-chitchat" -> "codemayq/chinese-chatbot-corpus"
"yangjianxin1/GPT2-chitchat" -> "brightmart/albert_zh"
"yangjianxin1/GPT2-chitchat" -> "microsoft/DialoGPT" ["e"=1]
"yangjianxin1/GPT2-chitchat" -> "brightmart/roberta_zh"
"yangjianxin1/GPT2-chitchat" -> "brightmart/nlp_chinese_corpus"
"yangjianxin1/GPT2-chitchat" -> "ymcui/Chinese-BERT-wwm"
"yangjianxin1/GPT2-chitchat" -> "CLUEbenchmark/CLUE"
"yangjianxin1/GPT2-chitchat" -> "yangjianxin1/CPM"
"yangjianxin1/GPT2-chitchat" -> "bojone/bert4keras"
"yangjianxin1/GPT2-chitchat" -> "qingkongzhiqian/GPT2-Summary"
"yangjianxin1/GPT2-chitchat" -> "dbiir/UER-py"
"yangjianxin1/GPT2-chitchat" -> "TsinghuaAI/CPM-1-Generate"
"thu-coai/CDial-GPT" -> "yangjianxin1/GPT2-chitchat"
"thu-coai/CDial-GPT" -> "codemayq/chinese-chatbot-corpus"
"thu-coai/CDial-GPT" -> "thu-coai/CrossWOZ" ["e"=1]
"thu-coai/CDial-GPT" -> "lemon234071/clean-dialog" ["e"=1]
"thu-coai/CDial-GPT" -> "thu-coai/EVA" ["e"=1]
"thu-coai/CDial-GPT" -> "Morizeyao/GPT2-Chinese"
"thu-coai/CDial-GPT" -> "CLUEbenchmark/CLUE"
"thu-coai/CDial-GPT" -> "dbiir/UER-py"
"thu-coai/CDial-GPT" -> "thu-coai/KdConv" ["e"=1]
"thu-coai/CDial-GPT" -> "imcaspar/gpt2-ml"
"thu-coai/CDial-GPT" -> "TsinghuaAI/CPM-1-Generate"
"thu-coai/CDial-GPT" -> "microsoft/DialoGPT" ["e"=1]
"thu-coai/CDial-GPT" -> "CLUEbenchmark/CLUECorpus2020"
"thu-coai/CDial-GPT" -> "princeton-nlp/SimCSE"
"thu-coai/CDial-GPT" -> "huawei-noah/Pretrained-Language-Model"
"bojone/bert4keras" -> "CyberZHG/keras-bert"
"bojone/bert4keras" -> "ymcui/Chinese-BERT-wwm"
"bojone/bert4keras" -> "brightmart/albert_zh"
"bojone/bert4keras" -> "CLUEbenchmark/CLUE"
"bojone/bert4keras" -> "brightmart/roberta_zh"
"bojone/bert4keras" -> "macanv/BERT-BiLSTM-CRF-NER"
"bojone/bert4keras" -> "loujie0822/DeepIE"
"bojone/bert4keras" -> "brightmart/nlp_chinese_corpus"
"bojone/bert4keras" -> "Embedding/Chinese-Word-Vectors"
"bojone/bert4keras" -> "ZhuiyiTechnology/pretrained-models"
"bojone/bert4keras" -> "huawei-noah/Pretrained-Language-Model"
"bojone/bert4keras" -> "BrikerMan/Kashgari"
"bojone/bert4keras" -> "PaddlePaddle/ERNIE"
"bojone/bert4keras" -> "dbiir/UER-py"
"bojone/bert4keras" -> "CLUEbenchmark/CLUEDatasetSearch"
"ymcui/Chinese-ELECTRA" -> "google-research/electra"
"ymcui/Chinese-ELECTRA" -> "ymcui/Chinese-XLNet"
"ymcui/Chinese-ELECTRA" -> "brightmart/roberta_zh"
"ymcui/Chinese-ELECTRA" -> "ymcui/MacBERT"
"ymcui/Chinese-ELECTRA" -> "brightmart/albert_zh"
"ymcui/Chinese-ELECTRA" -> "airaria/TextBrewer"
"ymcui/Chinese-ELECTRA" -> "ZhuiyiTechnology/pretrained-models"
"ymcui/Chinese-ELECTRA" -> "ZhuiyiTechnology/simbert"
"ymcui/Chinese-ELECTRA" -> "ChineseGLUE/ChineseGLUE"
"ymcui/Chinese-ELECTRA" -> "CLUEbenchmark/CLUE"
"ymcui/Chinese-ELECTRA" -> "dbiir/UER-py"
"ymcui/Chinese-ELECTRA" -> "huawei-noah/Pretrained-Language-Model"
"ymcui/Chinese-ELECTRA" -> "ymcui/Chinese-BERT-wwm"
"ymcui/Chinese-ELECTRA" -> "425776024/nlpcda"
"ymcui/Chinese-ELECTRA" -> "CLUEbenchmark/CLUEPretrainedModels"
"brightmart/albert_zh" -> "brightmart/roberta_zh"
"brightmart/albert_zh" -> "ymcui/Chinese-BERT-wwm"
"brightmart/albert_zh" -> "ChineseGLUE/ChineseGLUE"
"brightmart/albert_zh" -> "CLUEbenchmark/CLUE"
"brightmart/albert_zh" -> "bojone/bert4keras"
"brightmart/albert_zh" -> "ymcui/Chinese-XLNet"
"brightmart/albert_zh" -> "google-research/albert"
"brightmart/albert_zh" -> "macanv/BERT-BiLSTM-CRF-NER"
"brightmart/albert_zh" -> "PaddlePaddle/ERNIE"
"brightmart/albert_zh" -> "lonePatient/albert_pytorch"
"brightmart/albert_zh" -> "brightmart/nlp_chinese_corpus"
"brightmart/albert_zh" -> "huawei-noah/Pretrained-Language-Model"
"brightmart/albert_zh" -> "zihangdai/xlnet" ["e"=1]
"brightmart/albert_zh" -> "dbiir/UER-py"
"brightmart/albert_zh" -> "CyberZHG/keras-bert"
"DefuLi/Emotional-Analysis-Transformers2.0-Bert" -> "DefuLi/Emotional-Analysis-of-Internet-News"
"DefuLi/Emotional-Analysis-Transformers2.0-Bert" -> "DefuLi/Emotional-Analysis-Bert-As-Service"
"DefuLi/Emotional-Analysis-Transformers2.0-Bert" -> "linhaow/TextClassification"
"lizhe2004/chatbot-list" -> "charlesXu86/Chatbot_CN" ["e"=1]
"lizhe2004/chatbot-list" -> "chatopera/chatbot.catalog.customer-service"
"lizhe2004/chatbot-list" -> "GaoQ1/rasa_chatbot_cn" ["e"=1]
"lizhe2004/chatbot-list" -> "BDBC-KG-NLP/QA-Survey-CN"
"lizhe2004/chatbot-list" -> "baidu/AnyQ"
"lizhe2004/chatbot-list" -> "qhduan/ConversationalRobotDesign" ["e"=1]
"lizhe2004/chatbot-list" -> "ZhuiyiTechnology/simbert"
"lizhe2004/chatbot-list" -> "codemayq/chinese-chatbot-corpus"
"lizhe2004/chatbot-list" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"lizhe2004/chatbot-list" -> "liuhuanyong/MiningZhiDaoQACorpus" ["e"=1]
"lizhe2004/chatbot-list" -> "thu-coai/CrossWOZ" ["e"=1]
"lizhe2004/chatbot-list" -> "thu-coai/CDial-GPT"
"lizhe2004/chatbot-list" -> "zhanlaoban/EDA_NLP_for_Chinese"
"lizhe2004/chatbot-list" -> "425776024/nlpcda"
"lizhe2004/chatbot-list" -> "ZhuiyiTechnology/pretrained-models"
"NLP-LOVE/Introduction-NLP" -> "hankcs/pyhanlp"
"NLP-LOVE/Introduction-NLP" -> "km1994/nlp_paper_study"
"NLP-LOVE/Introduction-NLP" -> "NLP-LOVE/ML-NLP" ["e"=1]
"NLP-LOVE/Introduction-NLP" -> "DA-southampton/NLP_ability"
"NLP-LOVE/Introduction-NLP" -> "leerumor/nlp_tutorial"
"NLP-LOVE/Introduction-NLP" -> "FudanNLP/nlp-beginner"
"NLP-LOVE/Introduction-NLP" -> "CLUEbenchmark/CLUEDatasetSearch"
"NLP-LOVE/Introduction-NLP" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"NLP-LOVE/Introduction-NLP" -> "zhpmatrix/nlp-competitions-list-review"
"NLP-LOVE/Introduction-NLP" -> "bojone/bert4keras"
"NLP-LOVE/Introduction-NLP" -> "CLUEbenchmark/CLUE"
"NLP-LOVE/Introduction-NLP" -> "songyingxin/NLPer-Interview"
"NLP-LOVE/Introduction-NLP" -> "km1994/NLP-Interview-Notes"
"NLP-LOVE/Introduction-NLP" -> "ymcui/Chinese-BERT-wwm"
"NLP-LOVE/Introduction-NLP" -> "InsaneLife/ChineseNLPCorpus"
"airaria/TextBrewer" -> "ymcui/Chinese-ELECTRA"
"airaria/TextBrewer" -> "huawei-noah/Pretrained-Language-Model"
"airaria/TextBrewer" -> "airaria/TextPruner" ["e"=1]
"airaria/TextBrewer" -> "brightmart/roberta_zh"
"airaria/TextBrewer" -> "loujie0822/DeepIE"
"airaria/TextBrewer" -> "dbiir/UER-py"
"airaria/TextBrewer" -> "425776024/nlpcda"
"airaria/TextBrewer" -> "brightmart/albert_zh"
"airaria/TextBrewer" -> "CLUEbenchmark/CLUE"
"airaria/TextBrewer" -> "ZhuiyiTechnology/simbert"
"airaria/TextBrewer" -> "ymcui/Chinese-XLNet"
"airaria/TextBrewer" -> "ZhuiyiTechnology/pretrained-models"
"airaria/TextBrewer" -> "autoliuweijie/FastBERT"
"airaria/TextBrewer" -> "nghuyong/ERNIE-Pytorch"
"airaria/TextBrewer" -> "ymcui/Chinese-BERT-wwm"
"brightmart/roberta_zh" -> "brightmart/albert_zh"
"brightmart/roberta_zh" -> "ymcui/Chinese-XLNet"
"brightmart/roberta_zh" -> "ymcui/Chinese-BERT-wwm"
"brightmart/roberta_zh" -> "CLUEbenchmark/CLUE"
"brightmart/roberta_zh" -> "ChineseGLUE/ChineseGLUE"
"brightmart/roberta_zh" -> "dbiir/UER-py"
"brightmart/roberta_zh" -> "bojone/bert4keras"
"brightmart/roberta_zh" -> "ymcui/Chinese-ELECTRA"
"brightmart/roberta_zh" -> "PaddlePaddle/ERNIE"
"brightmart/roberta_zh" -> "brightmart/nlp_chinese_corpus"
"brightmart/roberta_zh" -> "macanv/BERT-BiLSTM-CRF-NER"
"brightmart/roberta_zh" -> "huawei-noah/Pretrained-Language-Model"
"brightmart/roberta_zh" -> "zihangdai/xlnet" ["e"=1]
"brightmart/roberta_zh" -> "ZhuiyiTechnology/pretrained-models"
"brightmart/roberta_zh" -> "loujie0822/DeepIE"
"lonePatient/albert_pytorch" -> "brightmart/albert_zh"
"lonePatient/albert_pytorch" -> "nghuyong/ERNIE-Pytorch"
"lonePatient/albert_pytorch" -> "ymcui/Chinese-XLNet"
"lonePatient/albert_pytorch" -> "google-research/albert"
"lonePatient/albert_pytorch" -> "graykode/ALBERT-Pytorch"
"lonePatient/albert_pytorch" -> "lonePatient/CLUE_pytorch"
"lonePatient/albert_pytorch" -> "brightmart/roberta_zh"
"lonePatient/albert_pytorch" -> "ChineseGLUE/ChineseGLUE"
"lonePatient/albert_pytorch" -> "ymcui/Chinese-ELECTRA"
"lonePatient/albert_pytorch" -> "ZhuiyiTechnology/pretrained-models"
"lonePatient/albert_pytorch" -> "lonePatient/NeZha_Chinese_PyTorch" ["e"=1]
"lonePatient/albert_pytorch" -> "lonePatient/BERT-NER-Pytorch"
"lonePatient/albert_pytorch" -> "thunlp/ERNIE"
"lonePatient/albert_pytorch" -> "huawei-noah/Pretrained-Language-Model"
"lonePatient/albert_pytorch" -> "CLUEbenchmark/CLUE"
"juntaoy/biaffine-ner" -> "suolyer/PyTorch_BERT_Biaffine_NER"
"juntaoy/biaffine-ner" -> "amir-zeldes/biaffine-ner"
"juntaoy/biaffine-ner" -> "yhcc/OntoNotes-5.0-NER"
"juntaoy/biaffine-ner" -> "tricktreat/locate-and-label"
"juntaoy/biaffine-ner" -> "ShannonAI/mrc-for-flat-nested-ner"
"juntaoy/biaffine-ner" -> "thecharm/boundary-aware-nested-ner"
"juntaoy/biaffine-ner" -> "v-mipeng/LexiconAugmentedNER"
"juntaoy/biaffine-ner" -> "yhcc/BARTNER"
"juntaoy/biaffine-ner" -> "131250208/TPlinker-joint-extraction" ["e"=1]
"juntaoy/biaffine-ner" -> "princeton-nlp/PURE" ["e"=1]
"juntaoy/biaffine-ner" -> "thunlp/Few-NERD"
"juntaoy/biaffine-ner" -> "fastnlp/TENER"
"juntaoy/biaffine-ner" -> "luanyi/DyGIE" ["e"=1]
"juntaoy/biaffine-ner" -> "LeeSureman/Flat-Lattice-Transformer"
"juntaoy/biaffine-ner" -> "pfliu-nlp/Named-Entity-Recognition-NER-Papers"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "km1994/nlp_paper_study"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "loujie0822/DeepIE"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "MLNLP-World/Paper-Writing-Tips" ["e"=1]
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "ymcui/Chinese-BERT-wwm"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "DA-southampton/NLP_ability"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "CLUEbenchmark/CLUE"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "km1994/NLP-Interview-Notes"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "thunlp/PromptPapers" ["e"=1]
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "princeton-nlp/SimCSE"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "bojone/bert4keras"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "MLNLP-World/AI-Paper-Collector" ["e"=1]
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "CLUEbenchmark/CLUEDatasetSearch"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "fastnlp/fastNLP"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "zhpmatrix/nlp-competitions-list-review"
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" -> "TingFree/NLPer-Arsenal"
"allenai/longformer" -> "lucidrains/reformer-pytorch" ["e"=1]
"allenai/longformer" -> "google-research/electra"
"allenai/longformer" -> "google-research/bigbird" ["e"=1]
"allenai/longformer" -> "kimiyoung/transformer-xl" ["e"=1]
"allenai/longformer" -> "zihangdai/xlnet" ["e"=1]
"allenai/longformer" -> "google-research/text-to-text-transfer-transformer" ["e"=1]
"allenai/longformer" -> "princeton-nlp/SimCSE"
"allenai/longformer" -> "nlpyang/PreSumm" ["e"=1]
"allenai/longformer" -> "facebookresearch/XLM" ["e"=1]
"allenai/longformer" -> "facebookresearch/DPR" ["e"=1]
"allenai/longformer" -> "facebookresearch/SpanBERT"
"allenai/longformer" -> "marcotcr/checklist" ["e"=1]
"allenai/longformer" -> "huawei-noah/Pretrained-Language-Model"
"allenai/longformer" -> "microsoft/DeBERTa"
"allenai/longformer" -> "brightmart/roberta_zh"
"rsanshierli/EasyBert" -> "zhaogaofeng611/TextMatch"
"rsanshierli/EasyBert" -> "920232796/bert_seq2seq"
"rsanshierli/EasyBert" -> "CLUEbenchmark/CLUENER2020"
"rsanshierli/EasyBert" -> "lonePatient/BERT-NER-Pytorch"
"rsanshierli/EasyBert" -> "hellonlp/sentiment-analysis" ["e"=1]
"rsanshierli/EasyBert" -> "yongzhuo/nlp_xiaojiang"
"rsanshierli/EasyBert" -> "danan0755/Bert_Classifier"
"rsanshierli/EasyBert" -> "hellonlp/classifier-multi-label"
"rsanshierli/EasyBert" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"rsanshierli/EasyBert" -> "murray-z/text_analysis_tools"
"rsanshierli/EasyBert" -> "DA-southampton/Read_Bert_Code"
"rsanshierli/EasyBert" -> "Jacen789/relation-extraction" ["e"=1]
"rsanshierli/EasyBert" -> "haiker2011/awesome-nlp-sentiment-analysis" ["e"=1]
"rsanshierli/EasyBert" -> "425776024/nlpcda"
"rsanshierli/EasyBert" -> "Brokenwind/BertSimilarity"
"lushishuai/BERT-ROBERTA-pytorch-multi-label-classification" -> "murray-z/multi_label_classification"
"lushishuai/BERT-ROBERTA-pytorch-multi-label-classification" -> "Vincent131499/Multi_Label_Classifier_finetune"
"lushishuai/BERT-ROBERTA-pytorch-multi-label-classification" -> "murray-z/Multi_Label_TextCNN"
"lushishuai/BERT-ROBERTA-pytorch-multi-label-classification" -> "TianWuYuJiangHenShou/Multi-label_Text_classification"
"lushishuai/BERT-ROBERTA-pytorch-multi-label-classification" -> "hellonlp/classifier_multi_label"
"lushishuai/BERT-ROBERTA-pytorch-multi-label-classification" -> "hscspring/Multi-Label-Text-Classification-for-Chinese"
"lushishuai/BERT-ROBERTA-pytorch-multi-label-classification" -> "moxiu2012/PJ_NLP"
"moon-hotel/MachineLearningWithMe" -> "moon-hotel/DeepLearningWithMe"
"moon-hotel/MachineLearningWithMe" -> "moon-hotel/BertWithPretrained"
"moon-hotel/MachineLearningWithMe" -> "moon-hotel/TransformerTranslation"
"HIT-SCIR/pyltp" -> "HIT-SCIR/ltp"
"HIT-SCIR/pyltp" -> "thunlp/THULAC-Python"
"HIT-SCIR/pyltp" -> "hankcs/pyhanlp"
"HIT-SCIR/pyltp" -> "crownpku/Information-Extraction-Chinese"
"HIT-SCIR/pyltp" -> "FudanNLP/fnlp"
"HIT-SCIR/pyltp" -> "zjy-ucas/ChineseNER"
"HIT-SCIR/pyltp" -> "liuhuanyong/EventTriplesExtraction" ["e"=1]
"HIT-SCIR/pyltp" -> "NLPIR-team/NLPIR"
"HIT-SCIR/pyltp" -> "Lynten/stanford-corenlp"
"HIT-SCIR/pyltp" -> "rockingdingo/deepnlp"
"HIT-SCIR/pyltp" -> "tsroten/pynlpir"
"HIT-SCIR/pyltp" -> "isnowfy/snownlp"
"HIT-SCIR/pyltp" -> "deepwel/Chinese-Annotator"
"HIT-SCIR/pyltp" -> "twjiang/fact_triple_extraction" ["e"=1]
"HIT-SCIR/pyltp" -> "brightmart/albert_zh"
"letiantian/TextRank4ZH" -> "isnowfy/snownlp"
"letiantian/TextRank4ZH" -> "ownthink/Jiagu"
"letiantian/TextRank4ZH" -> "ArtistScript/FastTextRank"
"letiantian/TextRank4ZH" -> "blmoistawinde/HarvestText"
"letiantian/TextRank4ZH" -> "Embedding/Chinese-Word-Vectors"
"letiantian/TextRank4ZH" -> "AimeeLee77/keyword_extraction"
"letiantian/TextRank4ZH" -> "hankcs/pyhanlp"
"letiantian/TextRank4ZH" -> "ymcui/Chinese-BERT-wwm"
"letiantian/TextRank4ZH" -> "chatopera/Synonyms"
"letiantian/TextRank4ZH" -> "Roshanson/TextInfoExp"
"letiantian/TextRank4ZH" -> "HIT-SCIR/ltp"
"letiantian/TextRank4ZH" -> "brightmart/nlp_chinese_corpus"
"letiantian/TextRank4ZH" -> "brightmart/albert_zh"
"letiantian/TextRank4ZH" -> "terrifyzhao/bert-utils"
"letiantian/TextRank4ZH" -> "macanv/BERT-BiLSTM-CRF-NER"
"jiaeyan/Jiayan" -> "Ethan-yt/guwenbert"
"jiaeyan/Jiayan" -> "Ethan-yt/guwen-models"
"jiaeyan/Jiayan" -> "NiuTrans/Classical-Modern"
"jiaeyan/Jiayan" -> "hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing"
"jiaeyan/Jiayan" -> "garychowcmu/daizhigev20"
"jiaeyan/Jiayan" -> "mahavivo/scripta-sinica"
"jiaeyan/Jiayan" -> "KoichiYasuoka/UD-Kanbun"
"jiaeyan/Jiayan" -> "Ethan-yt/CCLUE"
"jiaeyan/Jiayan" -> "ttzHome/AnchiBERT"
"jiaeyan/Jiayan" -> "THUNLP-AIPoet/BERT-CCPoem"
"jiaeyan/Jiayan" -> "Xunzi-LLM-of-Chinese-classics/XunziALLM"
"jiaeyan/Jiayan" -> "raynardj/yuan"
"jiaeyan/Jiayan" -> "BangBOOM/Classical-Chinese"
"jiaeyan/Jiayan" -> "JiangYanting/Pre-modern_Chinese_corpus_dataset"
"jiaeyan/Jiayan" -> "iris2hu/ancient_chinese_sense_annotation"
"jd-aig/nlp_baai" -> "kitaharatomoyo/JDDC2020-3rd-SourceCode"
"jd-aig/nlp_baai" -> "ConvLab/ConvLab" ["e"=1]
"OverLordGoldDragon/keras-adamw" -> "GLambard/AdamW_Keras"
"OverLordGoldDragon/keras-adamw" -> "CyberZHG/keras-radam"
"OverLordGoldDragon/keras-adamw" -> "CyberZHG/keras-lr-multiplier"
"CLUEbenchmark/CLUEDatasetSearch" -> "CLUEbenchmark/CLUE"
"CLUEbenchmark/CLUEDatasetSearch" -> "InsaneLife/ChineseNLPCorpus"
"CLUEbenchmark/CLUEDatasetSearch" -> "ymcui/Chinese-BERT-wwm"
"CLUEbenchmark/CLUEDatasetSearch" -> "brightmart/nlp_chinese_corpus"
"CLUEbenchmark/CLUEDatasetSearch" -> "SophonPlus/ChineseNlpCorpus"
"CLUEbenchmark/CLUEDatasetSearch" -> "bojone/bert4keras"
"CLUEbenchmark/CLUEDatasetSearch" -> "brightmart/albert_zh"
"CLUEbenchmark/CLUEDatasetSearch" -> "Embedding/Chinese-Word-Vectors"
"CLUEbenchmark/CLUEDatasetSearch" -> "425776024/nlpcda"
"CLUEbenchmark/CLUEDatasetSearch" -> "649453932/Chinese-Text-Classification-Pytorch"
"CLUEbenchmark/CLUEDatasetSearch" -> "loujie0822/DeepIE"
"CLUEbenchmark/CLUEDatasetSearch" -> "dbiir/UER-py"
"CLUEbenchmark/CLUEDatasetSearch" -> "zhpmatrix/nlp-competitions-list-review"
"CLUEbenchmark/CLUEDatasetSearch" -> "brightmart/roberta_zh"
"CLUEbenchmark/CLUEDatasetSearch" -> "huawei-noah/Pretrained-Language-Model"
"iqiyi/FASPell" -> "ACL2020SpellGCN/SpellGCN"
"iqiyi/FASPell" -> "tiantian91091317/OCR-Corrector" ["e"=1]
"iqiyi/FASPell" -> "shibing624/pycorrector"
"iqiyi/FASPell" -> "wdimmy/Automatic-Corpus-Generation"
"iqiyi/FASPell" -> "hiyoung123/SoftMaskedBert" ["e"=1]
"iqiyi/FASPell" -> "HillZhang1999/MuCGEC"
"iqiyi/FASPell" -> "DaDaMrX/ReaLiSe"
"iqiyi/FASPell" -> "liushulinle/PLOME"
"iqiyi/FASPell" -> "gitabtion/BertBasedCorrectionModels"
"iqiyi/FASPell" -> "ymcui/Chinese-ELECTRA"
"iqiyi/FASPell" -> "ZhuiyiTechnology/pretrained-models"
"iqiyi/FASPell" -> "ShannonAI/ChineseBert"
"iqiyi/FASPell" -> "destwang/CTCResources"
"iqiyi/FASPell" -> "tongchangD/bert_for_corrector"
"iqiyi/FASPell" -> "brightmart/roberta_zh"
"hxgdzyuyi/tang_poetry" -> "todototry/AncientChinesePoemsDB"
"hxgdzyuyi/tang_poetry" -> "caoxingyu/chinese-gushiwen"
"hxgdzyuyi/tang_poetry" -> "Kooooooma/chinese-poetry-mysql"
"hxgdzyuyi/tang_poetry" -> "javayhu/poetry"
"hxgdzyuyi/tang_poetry" -> "grezbo/cn_zipcode"
"PaddlePaddle/Research" -> "loujie0822/DeepIE"
"PaddlePaddle/Research" -> "PaddlePaddle/ERNIE"
"PaddlePaddle/Research" -> "PaddlePaddle/Knover" ["e"=1]
"PaddlePaddle/Research" -> "panchunguang/ccks_baidu_entity_link"
"PaddlePaddle/Research" -> "bojone/bert4keras"
"PaddlePaddle/Research" -> "CLUEbenchmark/CLUE"
"PaddlePaddle/Research" -> "brightmart/roberta_zh"
"PaddlePaddle/Research" -> "luhua-rain/MRC_Competition_Dureader"
"PaddlePaddle/Research" -> "dbiir/UER-py"
"PaddlePaddle/Research" -> "ymcui/Chinese-BERT-wwm"
"PaddlePaddle/Research" -> "thu-coai/CDial-GPT"
"PaddlePaddle/Research" -> "bojone/kg-2019" ["e"=1]
"PaddlePaddle/Research" -> "brightmart/albert_zh"
"PaddlePaddle/Research" -> "ymcui/Chinese-ELECTRA"
"PaddlePaddle/Research" -> "huawei-noah/Pretrained-Language-Model"
"BDBC-KG-NLP/QA-Survey-CN" -> "WenRichard/KBQA-BERT" ["e"=1]
"BDBC-KG-NLP/QA-Survey-CN" -> "duterscmy/ccks2019-ckbqa-4th-codes" ["e"=1]
"BDBC-KG-NLP/QA-Survey-CN" -> "lihanghang/NLP-Knowledge-Graph" ["e"=1]
"BDBC-KG-NLP/QA-Survey-CN" -> "malllabiisc/EmbedKGQA" ["e"=1]
"BDBC-KG-NLP/QA-Survey-CN" -> "TingFree/NLPer-Arsenal"
"BDBC-KG-NLP/QA-Survey-CN" -> "km1994/nlp_paper_study"
"BDBC-KG-NLP/QA-Survey-CN" -> "wangle1218/KBQA-for-Diagnosis" ["e"=1]
"BDBC-KG-NLP/QA-Survey-CN" -> "zhpmatrix/nlp-competitions-list-review"
"BDBC-KG-NLP/QA-Survey-CN" -> "loujie0822/DeepIE"
"BDBC-KG-NLP/QA-Survey-CN" -> "BshoterJ/awesome-kgqa" ["e"=1]
"BDBC-KG-NLP/QA-Survey-CN" -> "panchunguang/ccks_baidu_entity_link"
"BDBC-KG-NLP/QA-Survey-CN" -> "luhua-rain/MRC_Competition_Dureader"
"BDBC-KG-NLP/QA-Survey-CN" -> "husthuke/awesome-knowledge-graph" ["e"=1]
"BDBC-KG-NLP/QA-Survey-CN" -> "CLUEbenchmark/CLUEDatasetSearch"
"BDBC-KG-NLP/QA-Survey-CN" -> "liuhuanyong/QASystemOnMedicalKG" ["e"=1]
"TingFree/NLPer-Arsenal" -> "zhpmatrix/nlp-competitions-list-review"
"TingFree/NLPer-Arsenal" -> "km1994/nlp_paper_study"
"TingFree/NLPer-Arsenal" -> "km1994/NLP-Interview-Notes"
"TingFree/NLPer-Arsenal" -> "loujie0822/DeepIE"
"TingFree/NLPer-Arsenal" -> "425776024/nlpcda"
"TingFree/NLPer-Arsenal" -> "songyingxin/NLPer-Interview"
"TingFree/NLPer-Arsenal" -> "DA-southampton/NLP_ability"
"TingFree/NLPer-Arsenal" -> "BDBC-KG-NLP/QA-Survey-CN"
"TingFree/NLPer-Arsenal" -> "lonePatient/BERT-NER-Pytorch"
"TingFree/NLPer-Arsenal" -> "z814081807/DeepNER"
"TingFree/NLPer-Arsenal" -> "leerumor/nlp_tutorial"
"TingFree/NLPer-Arsenal" -> "FreedomIntelligence/Medical_NLP" ["e"=1]
"TingFree/NLPer-Arsenal" -> "CLUEbenchmark/CLUEDatasetSearch"
"TingFree/NLPer-Arsenal" -> "GanjinZero/awesome_Chinese_medical_NLP" ["e"=1]
"TingFree/NLPer-Arsenal" -> "lonePatient/awesome-pretrained-chinese-nlp-models" ["e"=1]
"ChineseGLUE/ChineseGLUE" -> "CLUEbenchmark/CLUE"
"ChineseGLUE/ChineseGLUE" -> "brightmart/albert_zh"
"ChineseGLUE/ChineseGLUE" -> "brightmart/roberta_zh"
"ChineseGLUE/ChineseGLUE" -> "ymcui/Chinese-XLNet"
"ChineseGLUE/ChineseGLUE" -> "brightmart/nlp_chinese_corpus"
"ChineseGLUE/ChineseGLUE" -> "ymcui/Chinese-BERT-wwm"
"ChineseGLUE/ChineseGLUE" -> "huawei-noah/Pretrained-Language-Model"
"ChineseGLUE/ChineseGLUE" -> "ymcui/Chinese-ELECTRA"
"ChineseGLUE/ChineseGLUE" -> "dbiir/UER-py"
"ChineseGLUE/ChineseGLUE" -> "CyberZHG/keras-bert"
"ChineseGLUE/ChineseGLUE" -> "Jiakui/awesome-bert"
"ChineseGLUE/ChineseGLUE" -> "InsaneLife/ChineseNLPCorpus"
"ChineseGLUE/ChineseGLUE" -> "bojone/bert4keras"
"ChineseGLUE/ChineseGLUE" -> "CLUEbenchmark/CLUEPretrainedModels"
"ChineseGLUE/ChineseGLUE" -> "PaddlePaddle/ERNIE"
"Alibaba-NLP/HiAGM" -> "wzh9969/contrastive-htc"
"Alibaba-NLP/HiAGM" -> "qianlima-lab/HiMatch"
"Alibaba-NLP/HiAGM" -> "RandolphVI/Hierarchical-Multi-Label-Text-Classification"
"Alibaba-NLP/HiAGM" -> "kk7nc/HDLTex"
"Alibaba-NLP/HiAGM" -> "morningmoni/HiLAP"
"Alibaba-NLP/HiAGM" -> "uhh-lt/BlurbGenreCollection-HMC"
"Alibaba-NLP/HiAGM" -> "ShimShim46/HFT-CNN"
"Alibaba-NLP/HiAGM" -> "kongds/HBGL"
"Alibaba-NLP/HiAGM" -> "Rooooyy/HiTIN"
"Alibaba-NLP/HiAGM" -> "ductri/reuters_loader"
"Alibaba-NLP/HiAGM" -> "HKUST-KnowComp/DeepGraphCNNforTexts"
"Alibaba-NLP/HiAGM" -> "minqukanq/hierarchical-multi-label-text-classification"
"facebookresearch/SpanBERT" -> "mandarjoshi90/coref"
"facebookresearch/SpanBERT" -> "kentonl/e2e-coref"
"facebookresearch/SpanBERT" -> "lavis-nlp/spert" ["e"=1]
"facebookresearch/SpanBERT" -> "princeton-nlp/PURE" ["e"=1]
"facebookresearch/SpanBERT" -> "dwadden/dygiepp" ["e"=1]
"facebookresearch/SpanBERT" -> "thunlp/ERNIE"
"facebookresearch/SpanBERT" -> "mrqa/MRQA-Shared-Task-2019" ["e"=1]
"facebookresearch/SpanBERT" -> "google-research/electra"
"facebookresearch/SpanBERT" -> "shayneobrien/coreference-resolution"
"facebookresearch/SpanBERT" -> "juntaoy/biaffine-ner"
"facebookresearch/SpanBERT" -> "namisan/mt-dnn"
"facebookresearch/SpanBERT" -> "ShannonAI/mrc-for-flat-nested-ner"
"facebookresearch/SpanBERT" -> "princeton-nlp/SimCSE"
"facebookresearch/SpanBERT" -> "cooelf/AwesomeMRC" ["e"=1]
"facebookresearch/SpanBERT" -> "plkmo/BERT-Relation-Extraction" ["e"=1]
"liwenzhu/corpusZh" -> "ml-distribution/chinese-corpus"
"wmathor/nlp-tutorial" -> "leerumor/nlp_tutorial"
"wmathor/nlp-tutorial" -> "jayparks/transformer" ["e"=1]
"wmathor/nlp-tutorial" -> "km1994/NLP-Interview-Notes"
"wmathor/nlp-tutorial" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"wmathor/nlp-tutorial" -> "DA-southampton/NLP_ability"
"wmathor/nlp-tutorial" -> "km1994/nlp_paper_study"
"wmathor/nlp-tutorial" -> "DA-southampton/Read_Bert_Code"
"wmathor/nlp-tutorial" -> "aespresso/a_journey_into_math_of_ml"
"wmathor/nlp-tutorial" -> "649453932/Chinese-Text-Classification-Pytorch"
"wmathor/nlp-tutorial" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"wmathor/nlp-tutorial" -> "graykode/nlp-tutorial" ["e"=1]
"wmathor/nlp-tutorial" -> "wangshusen/DeepLearning" ["e"=1]
"wmathor/nlp-tutorial" -> "lonePatient/BERT-NER-Pytorch"
"wmathor/nlp-tutorial" -> "zhpmatrix/nlp-competitions-list-review"
"wmathor/nlp-tutorial" -> "MorvanZhou/NLP-Tutorials"
"illiterate/BertClassifier" -> "taishan1994/pytorch_bert_chinese_text_classification"
"illiterate/BertClassifier" -> "JackHCC/Chinese-Text-Classification-PyTorch"
"illiterate/BertClassifier" -> "zejunwang1/bert_text_classification"
"illiterate/BertClassifier" -> "lushishuai/BERT-ROBERTA-pytorch-multi-label-classification"
"illiterate/BertClassifier" -> "taishan1994/pytorch_bert_multi_classification"
"secsilm/zi-dataset" -> "Kybs0/HanziDictionary"
"thunlp/PLMpapers" -> "tomohideshibata/BERT-related-papers"
"thunlp/PLMpapers" -> "thunlp/PromptPapers" ["e"=1]
"thunlp/PLMpapers" -> "zihangdai/xlnet" ["e"=1]
"thunlp/PLMpapers" -> "brightmart/albert_zh"
"thunlp/PLMpapers" -> "thunlp/KRLPapers" ["e"=1]
"thunlp/PLMpapers" -> "allenai/allennlp" ["e"=1]
"thunlp/PLMpapers" -> "huawei-noah/Pretrained-Language-Model"
"thunlp/PLMpapers" -> "THUNLP-MT/MT-Reading-List" ["e"=1]
"thunlp/PLMpapers" -> "CLUEbenchmark/CLUE"
"thunlp/PLMpapers" -> "PaddlePaddle/ERNIE"
"thunlp/PLMpapers" -> "thunlp/ERNIE"
"thunlp/PLMpapers" -> "facebookresearch/XLM" ["e"=1]
"thunlp/PLMpapers" -> "ymcui/Chinese-BERT-wwm"
"thunlp/PLMpapers" -> "ChineseGLUE/ChineseGLUE"
"thunlp/PLMpapers" -> "thunlp/RCPapers" ["e"=1]
"LingDong-/cope" -> "wenyan-lang/book"
"LingDong-/cope" -> "LingDong-/edges2calligraphy" ["e"=1]
"LingDong-/cope" -> "Ethan-yt/guwenbert"
"LingDong-/cope" -> "THUNLP-AIPoet/Datasets"
"LingDong-/cope" -> "LingDong-/rrpl" ["e"=1]
"LingDong-/cope" -> "LingDong-/ci-ren"
"LingDong-/cope" -> "LingDong-/nonflowers" ["e"=1]
"lzhang10/maxent" -> "Jekub/Wapiti"
"lzhang10/maxent" -> "panyang/yuzhen_nlp_edu_tools"
"lzhang10/maxent" -> "thu-ml/warplda" ["e"=1]
"lzhang10/maxent" -> "minixalpha/PyCWS"
"lzhang10/maxent" -> "hankcs/MaxEnt"
"FXLP/MarkTool" -> "deepwel/Chinese-Annotator"
"FXLP/MarkTool" -> "chosendai/MarkTool"
"FXLP/MarkTool" -> "jiesutd/YEDDA"
"FXLP/MarkTool" -> "loujie0822/DeepIE"
"FXLP/MarkTool" -> "nlplab/brat"
"FXLP/MarkTool" -> "universal-ie/UIE" ["e"=1]
"FXLP/MarkTool" -> "synyi/poplar"
"FXLP/MarkTool" -> "panchunguang/ccks_baidu_entity_link"
"FXLP/MarkTool" -> "princeton-nlp/PURE" ["e"=1]
"FXLP/MarkTool" -> "yongzhuo/Pytorch-NLU"
"FXLP/MarkTool" -> "carrie0307/DL_EventExtractionPapers" ["e"=1]
"FXLP/MarkTool" -> "z814081807/DeepNER"
"FXLP/MarkTool" -> "xiaoqian19940510/Event-Extraction" ["e"=1]
"FXLP/MarkTool" -> "lonePatient/BERT-NER-Pytorch"
"FXLP/MarkTool" -> "cocacola-lab/ChatIE" ["e"=1]
"ewrfcas/bert_cn_finetune" -> "NoneWait/cail2019"
"ewrfcas/bert_cn_finetune" -> "ymcui/Chinese-RC-Datasets" ["e"=1]
"ewrfcas/bert_cn_finetune" -> "chujiezheng/ChID-Dataset"
"ewrfcas/bert_cn_finetune" -> "china-ai-law-challenge/CAIL2019"
"DA-southampton/Tech_Aarticle" -> "DA-southampton/NLP_ability"
"DA-southampton/Tech_Aarticle" -> "loujie0822/DeepIE"
"DA-southampton/Tech_Aarticle" -> "km1994/nlp_paper_study"
"DA-southampton/Tech_Aarticle" -> "zhpmatrix/nlp-competitions-list-review"
"DA-southampton/Tech_Aarticle" -> "km1994/NLP-Interview-Notes"
"DA-southampton/Tech_Aarticle" -> "songyingxin/NLPer-Interview"
"DA-southampton/Tech_Aarticle" -> "leerumor/nlp_tutorial"
"DA-southampton/Tech_Aarticle" -> "TingFree/NLPer-Arsenal"
"DA-southampton/Tech_Aarticle" -> "brightmart/albert_zh"
"DA-southampton/Tech_Aarticle" -> "lonePatient/BERT-NER-Pytorch"
"DA-southampton/Tech_Aarticle" -> "CLUEbenchmark/CLUEDatasetSearch"
"DA-southampton/Tech_Aarticle" -> "CLUEbenchmark/CLUE"
"DA-southampton/Tech_Aarticle" -> "brightmart/roberta_zh"
"DA-southampton/Tech_Aarticle" -> "BDBC-KG-NLP/QA-Survey-CN"
"DA-southampton/Tech_Aarticle" -> "ymcui/Chinese-BERT-wwm"
"yumeng5/CatE" -> "yumeng5/JoSH"
"accordproject/markdown-transform" -> "accordproject/web-components"
"accordproject/markdown-transform" -> "accordproject/cicero-word-add-in"
"accordproject/markdown-transform" -> "accordproject/cicero-ui"
"CLOVEXCWZ/NER_DEMO" -> "yumath/bertNER"
"CLOVEXCWZ/NER_DEMO" -> "stanleylsx/entity_extractor_by_ner"
"CLOVEXCWZ/NER_DEMO" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"CLOVEXCWZ/NER_DEMO" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"CLOVEXCWZ/NER_DEMO" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"CLOVEXCWZ/NER_DEMO" -> "DSXiangLi/ChineseNER"
"CLOVEXCWZ/NER_DEMO" -> "liushaoweihua/keras-bert-ner"
"CLOVEXCWZ/NER_DEMO" -> "Marilynmontu/ChineseNER-pytorch"
"CLOVEXCWZ/NER_DEMO" -> "FuYanzhe2/Name-Entity-Recognition"
"CLOVEXCWZ/NER_DEMO" -> "stephen-v/zh-NER-keras"
"CLOVEXCWZ/NER_DEMO" -> "xuanzebi/BERT-CH-NER"
"CLOVEXCWZ/NER_DEMO" -> "taishan1994/BERT-BILSTM-CRF"
"rojagtap/transformer-abstractive-summarization" -> "aj-naik/Text-Summarization"
"rojagtap/transformer-abstractive-summarization" -> "Moeinh77/Transformers-for-abstractive-summarization"
"rojagtap/transformer-abstractive-summarization" -> "HorieYuan/TransformerTextSummarization"
"dongrixinyu/JioNLP" -> "425776024/nlpcda"
"dongrixinyu/JioNLP" -> "CLUEbenchmark/CLUEDatasetSearch"
"dongrixinyu/JioNLP" -> "shibing624/pycorrector"
"dongrixinyu/JioNLP" -> "ymcui/Chinese-BERT-wwm"
"dongrixinyu/JioNLP" -> "dongrixinyu/chinese_keyphrase_extractor"
"dongrixinyu/JioNLP" -> "blmoistawinde/HarvestText"
"dongrixinyu/JioNLP" -> "CLUEbenchmark/CLUE"
"dongrixinyu/JioNLP" -> "LianjiaTech/BELLE" ["e"=1]
"dongrixinyu/JioNLP" -> "bojone/bert4keras"
"dongrixinyu/JioNLP" -> "dbiir/UER-py"
"dongrixinyu/JioNLP" -> "shibing624/text2vec" ["e"=1]
"dongrixinyu/JioNLP" -> "InsaneLife/ChineseNLPCorpus"
"dongrixinyu/JioNLP" -> "lonePatient/awesome-pretrained-chinese-nlp-models" ["e"=1]
"dongrixinyu/JioNLP" -> "brightmart/nlp_chinese_corpus"
"dongrixinyu/JioNLP" -> "km1994/NLP-Interview-Notes"
"DengBoCong/nlp-paper" -> "km1994/nlp_paper_study"
"DengBoCong/nlp-paper" -> "leerumor/nlp_tutorial"
"DengBoCong/nlp-paper" -> "DengBoCong/nlp-dialogue"
"DengBoCong/nlp-paper" -> "TingFree/NLPer-Arsenal"
"DengBoCong/nlp-paper" -> "km1994/NLP-Interview-Notes"
"DengBoCong/nlp-paper" -> "DA-southampton/NLP_ability"
"DengBoCong/nlp-paper" -> "DengBoCong/text-similarity"
"DengBoCong/nlp-paper" -> "loujie0822/DeepIE"
"DengBoCong/nlp-paper" -> "DA-southampton/Tech_Aarticle"
"DengBoCong/nlp-paper" -> "zhpmatrix/nlp-competitions-list-review"
"DengBoCong/nlp-paper" -> "MLNLP-World/Top-AI-Conferences-Paper-with-Code"
"DengBoCong/nlp-paper" -> "jasoncao11/nlp-notebook"
"DengBoCong/nlp-paper" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"DengBoCong/nlp-paper" -> "FudanNLP/nlp-beginner"
"DengBoCong/nlp-paper" -> "songyingxin/NLPer-Interview"
"leehanchung/cs224n" -> "mantasu/cs224n" ["e"=1]
"leehanchung/cs224n" -> "jon-tow/cs224n"
"xixiaoyao/CS224n-winter-together" -> "ZacBi/CS224n-2019-solutions"
"xixiaoyao/CS224n-winter-together" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"xixiaoyao/CS224n-winter-together" -> "LooperXX/CS224n-Reading-Notes"
"xixiaoyao/CS224n-winter-together" -> "LooperXX/CS224n-Resource"
"xixiaoyao/CS224n-winter-together" -> "leehanchung/cs224n"
"xixiaoyao/CS224n-winter-together" -> "ZhuiyiTechnology/pretrained-models"
"xixiaoyao/CS224n-winter-together" -> "changwookjun/nlp-paper"
"xixiaoyao/CS224n-winter-together" -> "DataTerminatorX/Keyword-BERT"
"xixiaoyao/CS224n-winter-together" -> "loujie0822/DeepIE"
"xixiaoyao/CS224n-winter-together" -> "DA-southampton/Tech_Aarticle"
"xixiaoyao/CS224n-winter-together" -> "songyingxin/NLPer-Interview"
"xixiaoyao/CS224n-winter-together" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"xixiaoyao/CS224n-winter-together" -> "lrs1353281004/CS224n_winter2019_notes_and_assignments"
"xixiaoyao/CS224n-winter-together" -> "zibuyu/research_tao"
"xixiaoyao/CS224n-winter-together" -> "FudanNLP/nlp-beginner"
"houbb/segment" -> "houbb/pinyin"
"houbb/segment" -> "houbb/nlp-hanzi-similar"
"autoliuweijie/K-BERT" -> "thunlp/ERNIE"
"autoliuweijie/K-BERT" -> "autoliuweijie/FastBERT"
"autoliuweijie/K-BERT" -> "dbiir/UER-py"
"autoliuweijie/K-BERT" -> "yao8839836/kg-bert" ["e"=1]
"autoliuweijie/K-BERT" -> "loujie0822/DeepIE"
"autoliuweijie/K-BERT" -> "LeeSureman/Flat-Lattice-Transformer"
"autoliuweijie/K-BERT" -> "brightmart/albert_zh"
"autoliuweijie/K-BERT" -> "ChineseGLUE/ChineseGLUE"
"autoliuweijie/K-BERT" -> "allenai/kb" ["e"=1]
"autoliuweijie/K-BERT" -> "THU-KEG/KEPLER" ["e"=1]
"autoliuweijie/K-BERT" -> "txsun1997/CoLAKE" ["e"=1]
"autoliuweijie/K-BERT" -> "brightmart/roberta_zh"
"autoliuweijie/K-BERT" -> "ZhuiyiTechnology/pretrained-models"
"autoliuweijie/K-BERT" -> "WenRichard/KBQA-BERT" ["e"=1]
"autoliuweijie/K-BERT" -> "huawei-noah/Pretrained-Language-Model"
"Tencent/TurboTransformers" -> "bytedance/lightseq"
"Tencent/TurboTransformers" -> "bytedance/effective_transformer"
"Tencent/TurboTransformers" -> "NVIDIA/FasterTransformer" ["e"=1]
"Tencent/TurboTransformers" -> "airaria/TextBrewer"
"Tencent/TurboTransformers" -> "bytedance/ByteTransformer" ["e"=1]
"Tencent/TurboTransformers" -> "autoliuweijie/FastBERT"
"Tencent/TurboTransformers" -> "zhihu/cuBERT"
"Tencent/TurboTransformers" -> "alibaba/BladeDISC" ["e"=1]
"Tencent/TurboTransformers" -> "microsoft/nnfusion" ["e"=1]
"Tencent/TurboTransformers" -> "Tencent/Forward" ["e"=1]
"Tencent/TurboTransformers" -> "huawei-noah/Pretrained-Language-Model"
"Tencent/TurboTransformers" -> "ymcui/Chinese-ELECTRA"
"Tencent/TurboTransformers" -> "brightmart/roberta_zh"
"Tencent/TurboTransformers" -> "brightmart/albert_zh"
"Tencent/TurboTransformers" -> "ZhuiyiTechnology/pretrained-models"
"bytedance/effective_transformer" -> "Tencent/TurboTransformers"
"bytedance/effective_transformer" -> "bytedance/ByteTransformer" ["e"=1]
"bytedance/effective_transformer" -> "bytedance/lightseq"
"bytedance/effective_transformer" -> "zhihu/cuBERT"
"bytedance/effective_transformer" -> "NVIDIA-Merlin/HugeCTR" ["e"=1]
"bytedance/effective_transformer" -> "NVIDIA/FasterTransformer" ["e"=1]
"bytedance/effective_transformer" -> "bytedance/matxscript" ["e"=1]
"bytedance/effective_transformer" -> "AlibabaResearch/flash-llm" ["e"=1]
"freelawproject/juriscraper" -> "freelawproject/courtlistener"
"freelawproject/juriscraper" -> "freelawproject/reporters-db"
"freelawproject/juriscraper" -> "freelawproject/eyecite"
"freelawproject/juriscraper" -> "freelawproject/recap-chrome"
"freelawproject/juriscraper" -> "freelawproject/courts-db"
"freelawproject/juriscraper" -> "freelawproject/doctor"
"freelawproject/juriscraper" -> "freelawproject/free.law"
"freelawproject/juriscraper" -> "freelawproject/citation-regexes"
"freelawproject/juriscraper" -> "freelawproject/x-ray"
"freelawproject/juriscraper" -> "unitedstates/citation"
"freelawproject/juriscraper" -> "freelawproject/seal-rookery"
"freelawproject/juriscraper" -> "adelevie/walverine"
"freelawproject/juriscraper" -> "harvard-lil/cap-examples"
"freelawproject/juriscraper" -> "freelawproject/judge-pics"
"freelawproject/juriscraper" -> "freelawproject/bigcases2"
"Lizhen0628/text_classification" -> "Feuoy/sentiment-analysis" ["e"=1]
"Lizhen0628/text_classification" -> "zhanlaoban/Transformers_for_Text_Classification"
"Lizhen0628/text_classification" -> "xiaoqian19940510/text-classification-surveys" ["e"=1]
"Lizhen0628/text_classification" -> "luopeixiang/textclf"
"Lizhen0628/text_classification" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"Lizhen0628/text_classification" -> "songyingxin/Bert-TextClassification"
"Lizhen0628/text_classification" -> "649453932/Chinese-Text-Classification-Pytorch"
"Lizhen0628/text_classification" -> "hellonlp/classifier-multi-label"
"Lizhen0628/text_classification" -> "yongzhuo/Macadam"
"Lizhen0628/text_classification" -> "zzy99/epidemic-sentence-pair"
"Lizhen0628/text_classification" -> "zhaogaofeng611/TextMatch"
"Lizhen0628/text_classification" -> "Renovamen/Text-Classification" ["e"=1]
"Lizhen0628/text_classification" -> "yongzhuo/Keras-TextClassification"
"Lizhen0628/text_classification" -> "songyingxin/TextClassification"
"Lizhen0628/text_classification" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"hanzi-chai/chai" -> "hanzi-chai/hanzi-chai.github.io" ["e"=1]
"hanzi-chai/chai" -> "hanzi-chai/data"
"tyistyler/Bert-Chinese-RE" -> "tyistyler/Bert-Bi-LSTM-CRF"
"CLUEbenchmark/CLUECorpus2020" -> "CLUEbenchmark/CLUEPretrainedModels"
"CLUEbenchmark/CLUECorpus2020" -> "CLUEbenchmark/CLUE"
"CLUEbenchmark/CLUECorpus2020" -> "dbiir/UER-py"
"CLUEbenchmark/CLUECorpus2020" -> "thu-coai/CDial-GPT"
"CLUEbenchmark/CLUECorpus2020" -> "ChineseGLUE/ChineseGLUE"
"CLUEbenchmark/CLUECorpus2020" -> "airaria/TextBrewer"
"CLUEbenchmark/CLUECorpus2020" -> "ZhuiyiTechnology/pretrained-models"
"CLUEbenchmark/CLUECorpus2020" -> "brightmart/nlp_chinese_corpus"
"CLUEbenchmark/CLUECorpus2020" -> "ydli-ai/CSL" ["e"=1]
"CLUEbenchmark/CLUECorpus2020" -> "ZhuiyiTechnology/simbert"
"CLUEbenchmark/CLUECorpus2020" -> "brightmart/roberta_zh"
"CLUEbenchmark/CLUECorpus2020" -> "InsaneLife/ChineseNLPCorpus"
"CLUEbenchmark/CLUECorpus2020" -> "esbatmop/MNBVC" ["e"=1]
"CLUEbenchmark/CLUECorpus2020" -> "CLUEbenchmark/CLUEDatasetSearch"
"CLUEbenchmark/CLUECorpus2020" -> "ymcui/Chinese-ELECTRA"
"duguiming111/NER-BERT-BiLSTM-CRF-" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"duguiming111/NER-BERT-BiLSTM-CRF-" -> "yumath/bertNER"
"duguiming111/NER-BERT-BiLSTM-CRF-" -> "Htring/BERT-BiLSTM-CRF_PL"
"duguiming111/NER-BERT-BiLSTM-CRF-" -> "CLOVEXCWZ/NER_DEMO"
"duguiming111/NER-BERT-BiLSTM-CRF-" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"duguiming111/NER-BERT-BiLSTM-CRF-" -> "DeShuiYu/nlp_from_dsy"
"duguiming111/NER-BERT-BiLSTM-CRF-" -> "Marilynmontu/ChineseNER-pytorch"
"fursovia/self-adj-dice" -> "ShannonAI/dice_loss_for_NLP"
"hellohaptik/multi-task-NLP" -> "yashbonde/freeciv-python"
"hellohaptik/multi-task-NLP" -> "hellohaptik/chatbot_ner"
"hellohaptik/multi-task-NLP" -> "JayYip/m3tl"
"hellohaptik/multi-task-NLP" -> "huggingface/hmtl" ["e"=1]
"v-mipeng/LexiconAugmentedNER" -> "LeeSureman/Flat-Lattice-Transformer"
"v-mipeng/LexiconAugmentedNER" -> "jiesutd/LatticeLSTM"
"v-mipeng/LexiconAugmentedNER" -> "ShannonAI/mrc-for-flat-nested-ner"
"v-mipeng/LexiconAugmentedNER" -> "qiufengyuyi/sequence_tagging"
"v-mipeng/LexiconAugmentedNER" -> "liuwei1206/LEBERT"
"v-mipeng/LexiconAugmentedNER" -> "juntaoy/biaffine-ner"
"v-mipeng/LexiconAugmentedNER" -> "suolyer/PyTorch_BERT_SimpleLexicon_NER"
"v-mipeng/LexiconAugmentedNER" -> "hltcoe/golden-horse"
"v-mipeng/LexiconAugmentedNER" -> "loujie0822/DeepIE"
"v-mipeng/LexiconAugmentedNER" -> "v-mipeng/LexiconNER"
"v-mipeng/LexiconAugmentedNER" -> "LeeSureman/Batch_Parallel_LatticeLSTM"
"v-mipeng/LexiconAugmentedNER" -> "CLUEbenchmark/CLUENER2020"
"v-mipeng/LexiconAugmentedNER" -> "fastnlp/TENER"
"v-mipeng/LexiconAugmentedNER" -> "DSXiangLi/ChineseNER"
"v-mipeng/LexiconAugmentedNER" -> "yhcc/OntoNotes-5.0-NER"
"fastnlp/TENER" -> "yhcc/OntoNotes-5.0-NER"
"fastnlp/TENER" -> "LeeSureman/Flat-Lattice-Transformer"
"fastnlp/TENER" -> "v-mipeng/LexiconAugmentedNER"
"fastnlp/TENER" -> "LeeSureman/Batch_Parallel_LatticeLSTM"
"fastnlp/TENER" -> "juntaoy/biaffine-ner"
"fastnlp/TENER" -> "ShannonAI/mrc-for-flat-nested-ner"
"fastnlp/TENER" -> "yhcc/BARTNER"
"fastnlp/TENER" -> "liuwei1206/LEBERT"
"fastnlp/TENER" -> "DianboWork/Graph4CNER"
"fastnlp/TENER" -> "jiesutd/LatticeLSTM"
"fastnlp/TENER" -> "Nealcly/BiLSTM-LAN"
"fastnlp/TENER" -> "qiufengyuyi/sequence_tagging"
"fastnlp/TENER" -> "liuwei1206/CCW-NER"
"fastnlp/TENER" -> "CPF-NLPR/AT4ChineseNER"
"zhanlaoban/Transformers_for_Text_Classification" -> "zhanlaoban/NLP_PEMDC"
"zhanlaoban/Transformers_for_Text_Classification" -> "zhanlaoban/CCF_BDCI_2019_datafountain350"
"zhanlaoban/Transformers_for_Text_Classification" -> "zhanlaoban/NLP_competitions"
"zhanlaoban/Transformers_for_Text_Classification" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"zhanlaoban/Transformers_for_Text_Classification" -> "songyingxin/Bert-TextClassification"
"zhanlaoban/Transformers_for_Text_Classification" -> "linhaow/TextClassification"
"zhanlaoban/Transformers_for_Text_Classification" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"zhanlaoban/Transformers_for_Text_Classification" -> "Lizhen0628/text_classification"
"zhanlaoban/Transformers_for_Text_Classification" -> "Vincent131499/TextClassifier_Transformer"
"zhanlaoban/Transformers_for_Text_Classification" -> "zhanlaoban/EDA_NLP_for_Chinese"
"zhanlaoban/Transformers_for_Text_Classification" -> "yaleimeng/TextClassify_with_BERT"
"zhanlaoban/Transformers_for_Text_Classification" -> "renxingkai/BERT_Chinese_Classification" ["e"=1]
"425776024/bertsum-chinese" -> "Machine-Tom/bertsum-chinese-LAI"
"425776024/bertsum-chinese" -> "yongzhuo/nlg-yongzhuo"
"425776024/bertsum-chinese" -> "PolarisRisingWar/text_summarization_chinese"
"425776024/bertsum-chinese" -> "maszhongming/MatchSum" ["e"=1]
"425776024/bertsum-chinese" -> "yamonc/New-Pytorch-Chinese"
"425776024/bertsum-chinese" -> "God-Fish-X/Extractable-automatic-Text"
"425776024/bertsum-chinese" -> "qiufengyuyi/event_extraction" ["e"=1]
"425776024/bertsum-chinese" -> "lxj5957/CLTS-Dataset"
"zhusleep/pytorch_chinese_lm_pretrain" -> "lonePatient/NeZha_Chinese_PyTorch" ["e"=1]
"zhusleep/pytorch_chinese_lm_pretrain" -> "ZhuiyiTechnology/simbert"
"zhusleep/pytorch_chinese_lm_pretrain" -> "ZhuiyiTechnology/pretrained-models"
"zhusleep/pytorch_chinese_lm_pretrain" -> "qiufengyuyi/sequence_tagging"
"zhusleep/pytorch_chinese_lm_pretrain" -> "CLUEbenchmark/CLUEPretrainedModels"
"zhusleep/pytorch_chinese_lm_pretrain" -> "nghuyong/ERNIE-Pytorch"
"zhusleep/pytorch_chinese_lm_pretrain" -> "nilboy/gaic_track3_pair_sim" ["e"=1]
"zhusleep/pytorch_chinese_lm_pretrain" -> "LeeSureman/Flat-Lattice-Transformer"
"zhusleep/pytorch_chinese_lm_pretrain" -> "z814081807/DeepNER"
"zhusleep/pytorch_chinese_lm_pretrain" -> "bojone/SimCSE"
"zhusleep/pytorch_chinese_lm_pretrain" -> "brightmart/roberta_zh"
"zhusleep/pytorch_chinese_lm_pretrain" -> "zhengyanzhao1997/NLP-model"
"zhusleep/pytorch_chinese_lm_pretrain" -> "HuiResearch/epidemicTextMatch" ["e"=1]
"zhusleep/pytorch_chinese_lm_pretrain" -> "Macielyoung/sentence_representation_matching"
"zhusleep/pytorch_chinese_lm_pretrain" -> "autoliuweijie/BERT-whitening-pytorch"
"xuyige/BERT4doc-Classification" -> "allenai/dont-stop-pretraining"
"xuyige/BERT4doc-Classification" -> "songyingxin/Bert-TextClassification"
"xuyige/BERT4doc-Classification" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"xuyige/BERT4doc-Classification" -> "CLUEbenchmark/CLUEPretrainedModels"
"xuyige/BERT4doc-Classification" -> "yym6472/ConSERT"
"xuyige/BERT4doc-Classification" -> "princeton-nlp/SimCSE"
"xuyige/BERT4doc-Classification" -> "dbiir/UER-py"
"xuyige/BERT4doc-Classification" -> "princeton-nlp/LM-BFF" ["e"=1]
"xuyige/BERT4doc-Classification" -> "yumeng5/LOTClass"
"xuyige/BERT4doc-Classification" -> "lonePatient/NeZha_Chinese_PyTorch" ["e"=1]
"xuyige/BERT4doc-Classification" -> "yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification"
"xuyige/BERT4doc-Classification" -> "huawei-noah/Pretrained-Language-Model"
"xuyige/BERT4doc-Classification" -> "ZhuiyiTechnology/pretrained-models"
"xuyige/BERT4doc-Classification" -> "JayYip/m3tl"
"xuyige/BERT4doc-Classification" -> "zhanlaoban/EDA_NLP_for_Chinese"
"920232796/bert_seq2seq" -> "lonePatient/BERT-NER-Pytorch"
"920232796/bert_seq2seq" -> "rsanshierli/EasyBert"
"920232796/bert_seq2seq" -> "liucongg/GPT2-NewsTitle"
"920232796/bert_seq2seq" -> "bojone/bert4keras"
"920232796/bert_seq2seq" -> "YunwenTechnology/Unilm"
"920232796/bert_seq2seq" -> "ZhuiyiTechnology/pretrained-models"
"920232796/bert_seq2seq" -> "bojone/SPACES"
"920232796/bert_seq2seq" -> "z814081807/DeepNER"
"920232796/bert_seq2seq" -> "loujie0822/DeepIE"
"920232796/bert_seq2seq" -> "qingkongzhiqian/GPT2-Summary"
"920232796/bert_seq2seq" -> "yongzhuo/nlg-yongzhuo"
"920232796/bert_seq2seq" -> "ymcui/Chinese-BERT-wwm"
"920232796/bert_seq2seq" -> "425776024/nlpcda"
"920232796/bert_seq2seq" -> "brightmart/roberta_zh"
"920232796/bert_seq2seq" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"yongzhuo/nlg-yongzhuo" -> "CLUEbenchmark/CLGE"
"yongzhuo/nlg-yongzhuo" -> "ztz818/Automatic-generation-of-text-summaries"
"yongzhuo/nlg-yongzhuo" -> "bojone/SPACES"
"yongzhuo/nlg-yongzhuo" -> "425776024/bertsum-chinese"
"yongzhuo/nlg-yongzhuo" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"yongzhuo/nlg-yongzhuo" -> "qingkongzhiqian/GPT2-Summary"
"yongzhuo/nlg-yongzhuo" -> "HorieYuan/TransformerTextSummarization"
"yongzhuo/nlg-yongzhuo" -> "yongzhuo/Macropodus"
"yongzhuo/nlg-yongzhuo" -> "ArtistScript/FastTextRank"
"yongzhuo/nlg-yongzhuo" -> "wonderfulsuccess/chinese_abstractive_corpus"
"yongzhuo/nlg-yongzhuo" -> "liucongg/GPT2-NewsTitle"
"yongzhuo/nlg-yongzhuo" -> "YunwenTechnology/Unilm"
"yongzhuo/nlg-yongzhuo" -> "yamonc/New-Pytorch-Chinese"
"yongzhuo/nlg-yongzhuo" -> "920232796/bert_seq2seq"
"yongzhuo/nlg-yongzhuo" -> "jasoncao11/nlp-notebook"
"Chevalier1024/CCF-BDCI-ABSA" -> "rebornZH/2019-CCF-BDCI-NLP"
"Chevalier1024/CCF-BDCI-ABSA" -> "xiong666/ccf_financial_negative"
"Chevalier1024/CCF-BDCI-ABSA" -> "Makaixin/Correlation-between-requirements-and-achievements"
"finlay-liu/kaggle_public" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"finlay-liu/kaggle_public" -> "dayeren/Kaggle_Competition_Treasure" ["e"=1]
"finlay-liu/kaggle_public" -> "hertz-pj/BDCI2019_Financial_Entities_Baseline"
"finlay-liu/kaggle_public" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"finlay-liu/kaggle_public" -> "rebornZH/2019-CCF-BDCI-NLP"
"finlay-liu/kaggle_public" -> "luoda888/HUAWEI-DIGIX-AgeGroup" ["e"=1]
"finlay-liu/kaggle_public" -> "guoday/Tencent2019_Preliminary_Rank1st" ["e"=1]
"finlay-liu/kaggle_public" -> "linhaow/TextClassification"
"finlay-liu/kaggle_public" -> "bettenW/Tencent2019_Finals_Rank1st" ["e"=1]
"finlay-liu/kaggle_public" -> "chizhu/yiguan_sex_age_predict_1st_solution" ["e"=1]
"finlay-liu/kaggle_public" -> "bojone/bert_in_keras"
"finlay-liu/kaggle_public" -> "WenRichard/DIAC2019-Adversarial-Attack-Share"
"finlay-liu/kaggle_public" -> "anzhizh/2019-taida-jdata-top3" ["e"=1]
"ZhuiyiTechnology/pretrained-models" -> "ZhuiyiTechnology/simbert"
"ZhuiyiTechnology/pretrained-models" -> "ZhuiyiTechnology/roformer-sim"
"ZhuiyiTechnology/pretrained-models" -> "bojone/bert4keras"
"ZhuiyiTechnology/pretrained-models" -> "brightmart/roberta_zh"
"ZhuiyiTechnology/pretrained-models" -> "ymcui/Chinese-ELECTRA"
"ZhuiyiTechnology/pretrained-models" -> "425776024/nlpcda"
"ZhuiyiTechnology/pretrained-models" -> "CLUEbenchmark/CLUEPretrainedModels"
"ZhuiyiTechnology/pretrained-models" -> "brightmart/albert_zh"
"ZhuiyiTechnology/pretrained-models" -> "panchunguang/ccks_baidu_entity_link"
"ZhuiyiTechnology/pretrained-models" -> "zhanlaoban/EDA_NLP_for_Chinese"
"ZhuiyiTechnology/pretrained-models" -> "loujie0822/DeepIE"
"ZhuiyiTechnology/pretrained-models" -> "ZhuiyiTechnology/WoBERT"
"ZhuiyiTechnology/pretrained-models" -> "huawei-noah/Pretrained-Language-Model"
"ZhuiyiTechnology/pretrained-models" -> "dbiir/UER-py"
"ZhuiyiTechnology/pretrained-models" -> "CLUEbenchmark/CLUE"
"wuba/qa_match" -> "wuba/dl_inference" ["e"=1]
"wuba/qa_match" -> "DataTerminatorX/Keyword-BERT"
"wuba/qa_match" -> "ZhuiyiTechnology/pretrained-models"
"wuba/qa_match" -> "ZhuiyiTechnology/simbert"
"wuba/qa_match" -> "alibaba-edu/simple-effective-text-matching"
"wuba/qa_match" -> "charlesXu86/Chatbot_CN" ["e"=1]
"bytedance/lightseq" -> "NVIDIA/FasterTransformer" ["e"=1]
"bytedance/lightseq" -> "Tencent/TurboTransformers"
"bytedance/lightseq" -> "bytedance/byteps" ["e"=1]
"bytedance/lightseq" -> "ModelTC/lightllm" ["e"=1]
"bytedance/lightseq" -> "dbiir/UER-py"
"bytedance/lightseq" -> "deepspeedai/Megatron-DeepSpeed" ["e"=1]
"bytedance/lightseq" -> "huawei-noah/Pretrained-Language-Model"
"bytedance/lightseq" -> "NVIDIA/TransformerEngine" ["e"=1]
"bytedance/lightseq" -> "bytedance/effective_transformer"
"bytedance/lightseq" -> "airaria/TextBrewer"
"bytedance/lightseq" -> "NVIDIA/Megatron-LM" ["e"=1]
"bytedance/lightseq" -> "princeton-nlp/SimCSE"
"bytedance/lightseq" -> "alibaba/BladeDISC" ["e"=1]
"bytedance/lightseq" -> "CLUEbenchmark/CLUE"
"bytedance/lightseq" -> "Oneflow-Inc/oneflow" ["e"=1]
"dcjones/hat-trie" -> "pytries/hat-trie"
"dcjones/hat-trie" -> "malbrain/HatTrie"
"memect/hao" -> "memect/kg-beijing" ["e"=1]
"memect/hao" -> "koth/kcws"
"memect/hao" -> "ahangchen/GDLnotes" ["e"=1]
"memect/hao" -> "licstar/compare" ["e"=1]
"memect/hao" -> "white127/QA-deep-learning" ["e"=1]
"memect/hao" -> "joanbruna/stat212b" ["e"=1]
"memect/hao" -> "JustFollowUs/Natural-Language-Processing"
"memect/hao" -> "rockingdingo/deepnlp"
"memect/hao" -> "FudanNLP/fnlp"
"memect/hao" -> "thunlp/KB2E" ["e"=1]
"memect/hao" -> "andrewt3000/DL4NLP" ["e"=1]
"memect/hao" -> "lipiji/App-DL" ["e"=1]
"memect/hao" -> "ExtremeMart/DeepLearningBook-CN" ["e"=1]
"memect/hao" -> "HIT-SCIR/pyltp"
"memect/hao" -> "yanxionglu/text_pdf" ["e"=1]
"sing1ee/dict_build" -> "GeorgeBourne/grid"
"sing1ee/dict_build" -> "Moonshile/ChineseWordSegmentation"
"sing1ee/dict_build" -> "jannson/yaha"
"sing1ee/dict_build" -> "bojone/word-discovery"
"sing1ee/dict_build" -> "zhanzecheng/Chinese_segment_augment"
"sing1ee/dict_build" -> "yanghanxy/New-Word-Detection"
"sing1ee/dict_build" -> "smoothnlp/SmoothNLP"
"sing1ee/dict_build" -> "baidu/Familia"
"sing1ee/dict_build" -> "Rayarrow/New-Word-Discovery"
"sing1ee/dict_build" -> "shangjingbo1226/AutoPhrase"
"sing1ee/dict_build" -> "rockingdingo/deepnlp"
"sing1ee/dict_build" -> "thunlp/THUOCL"
"sing1ee/dict_build" -> "koth/kcws"
"sing1ee/dict_build" -> "chilynn/sequence-labeling"
"sing1ee/dict_build" -> "brightmart/bert_language_understanding"
"LooperXX/CS224n-Reading-Notes" -> "LooperXX/CS224n-Resource"
"LooperXX/CS224n-Reading-Notes" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"LooperXX/CS224n-Reading-Notes" -> "apachecn/stanford-cs224n-notes-zh"
"LooperXX/CS224n-Reading-Notes" -> "ZacBi/CS224n-2019-solutions"
"LooperXX/CS224n-Reading-Notes" -> "xixiaoyao/CS224n-winter-together"
"LooperXX/CS224n-Reading-Notes" -> "LooperXX/LooperXX.github.io"
"LooperXX/CS224n-Reading-Notes" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"LooperXX/CS224n-Reading-Notes" -> "leerumor/nlp_tutorial"
"LooperXX/CS224n-Reading-Notes" -> "PKU-TANGENT/nlp-tutorial" ["e"=1]
"LooperXX/CS224n-Reading-Notes" -> "FudanNLP/nlp-beginner"
"LooperXX/CS224n-Reading-Notes" -> "Luvata/CS224N-2019"
"LooperXX/CS224n-Reading-Notes" -> "DengBoCong/nlp-paper"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "ICLRandD/Blackstone"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "maastrichtlawtech/awesome-legal-nlp"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "LexPredict/lexpredict-lexnlp"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "thunlp/LegalPapers"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "Liquid-Legal-Institute/Legal-Ontologies"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "openlegaldata/awesome-legal-data"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "Liquid-Legal-Institute/Legal-LLMs-GPTs"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "HazyResearch/legalbench"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "freelawproject/eyecite"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "neelguha/legal-ml-datasets"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "coastalcph/lex-glue"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "TracyWang95/legal-prompts-for-gpt" ["e"=1]
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "statedecoded/statedecoded"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "LexPredict/lexpredict-legal-dictionary"
"Liquid-Legal-Institute/Legal-Text-Analytics" -> "accordproject/template-archive"
"loujie0822/Pre-trained-Models" -> "loujie0822/DeepIE"
"loujie0822/Pre-trained-Models" -> "131250208/TPlinker-joint-extraction" ["e"=1]
"loujie0822/Pre-trained-Models" -> "ZhuiyiTechnology/pretrained-models"
"loujie0822/Pre-trained-Models" -> "lonePatient/BERT-NER-Pytorch"
"loujie0822/Pre-trained-Models" -> "brightmart/roberta_zh"
"loujie0822/Pre-trained-Models" -> "panchunguang/ccks_baidu_entity_link"
"loujie0822/Pre-trained-Models" -> "km1994/NLP-Interview-Notes"
"loujie0822/Pre-trained-Models" -> "airaria/TextBrewer"
"loujie0822/Pre-trained-Models" -> "ChineseGLUE/ChineseGLUE"
"loujie0822/Pre-trained-Models" -> "CLUEbenchmark/FewCLUE"
"loujie0822/Pre-trained-Models" -> "LeeSureman/Flat-Lattice-Transformer"
"loujie0822/Pre-trained-Models" -> "CLUEbenchmark/CLUEPretrainedModels"
"loujie0822/Pre-trained-Models" -> "z814081807/DeepNER"
"loujie0822/Pre-trained-Models" -> "WuHuRestaurant/xf_event_extraction2020Top1" ["e"=1]
"loujie0822/Pre-trained-Models" -> "gaohongkui/GlobalPointer_pytorch" ["e"=1]
"imcaspar/gpt2-ml" -> "Morizeyao/GPT2-Chinese"
"imcaspar/gpt2-ml" -> "yangjianxin1/GPT2-chitchat"
"imcaspar/gpt2-ml" -> "TsinghuaAI/CPM-1-Generate"
"imcaspar/gpt2-ml" -> "thu-coai/CDial-GPT"
"imcaspar/gpt2-ml" -> "ymcui/Chinese-XLNet"
"imcaspar/gpt2-ml" -> "brightmart/roberta_zh"
"imcaspar/gpt2-ml" -> "dbiir/UER-py"
"imcaspar/gpt2-ml" -> "liucongg/GPT2-NewsTitle"
"imcaspar/gpt2-ml" -> "Morizeyao/Decoders-Chinese-TF2.0"
"imcaspar/gpt2-ml" -> "ZhuiyiTechnology/pretrained-models"
"imcaspar/gpt2-ml" -> "GaoPeng97/transformer-xl-chinese"
"imcaspar/gpt2-ml" -> "brightmart/albert_zh"
"imcaspar/gpt2-ml" -> "brightmart/nlp_chinese_corpus"
"imcaspar/gpt2-ml" -> "CLUEbenchmark/CLUE"
"imcaspar/gpt2-ml" -> "ChineseGLUE/ChineseGLUE"
"DA-southampton/Read_Bert_Code" -> "DA-southampton/TRM_tutorial"
"DA-southampton/Read_Bert_Code" -> "rsanshierli/EasyBert"
"DA-southampton/Read_Bert_Code" -> "ChineseGLUE/ChineseGLUE"
"DA-southampton/Read_Bert_Code" -> "DA-southampton/Tech_Aarticle"
"DA-southampton/Read_Bert_Code" -> "loujie0822/Pre-trained-Models"
"DA-southampton/Read_Bert_Code" -> "DA-southampton/ner"
"DA-southampton/Read_Bert_Code" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"DA-southampton/Read_Bert_Code" -> "DA-southampton/NLP_ability"
"DA-southampton/Read_Bert_Code" -> "leerumor/nlp_tutorial"
"DA-southampton/Read_Bert_Code" -> "yaleimeng/TextClassify_with_BERT"
"DA-southampton/Read_Bert_Code" -> "aespresso/a_journey_into_math_of_ml"
"DA-southampton/Read_Bert_Code" -> "TingFree/NLPer-Arsenal"
"DA-southampton/Read_Bert_Code" -> "km1994/nlp_paper_study"
"DA-southampton/Read_Bert_Code" -> "MuQiuJun-AI/bert4pytorch"
"DA-southampton/Read_Bert_Code" -> "920232796/bert_seq2seq"
"425776024/nlpcda" -> "zhanlaoban/EDA_NLP_for_Chinese"
"425776024/nlpcda" -> "loujie0822/DeepIE"
"425776024/nlpcda" -> "ZhuiyiTechnology/pretrained-models"
"425776024/nlpcda" -> "TingFree/NLPer-Arsenal"
"425776024/nlpcda" -> "ZhuiyiTechnology/simbert"
"425776024/nlpcda" -> "CLUEbenchmark/CLUEDatasetSearch"
"425776024/nlpcda" -> "CLUEbenchmark/CLUE"
"425776024/nlpcda" -> "dongrixinyu/JioNLP"
"425776024/nlpcda" -> "airaria/TextBrewer"
"425776024/nlpcda" -> "dbiir/UER-py"
"425776024/nlpcda" -> "brightmart/roberta_zh"
"425776024/nlpcda" -> "LeeSureman/Flat-Lattice-Transformer"
"425776024/nlpcda" -> "bojone/bert4keras"
"425776024/nlpcda" -> "lonePatient/BERT-NER-Pytorch"
"425776024/nlpcda" -> "ymcui/Chinese-ELECTRA"
"qingkongzhiqian/GPT2-Summary" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"qingkongzhiqian/GPT2-Summary" -> "liucongg/GPT2-NewsTitle"
"qingkongzhiqian/GPT2-Summary" -> "YunwenTechnology/Unilm"
"qingkongzhiqian/GPT2-Summary" -> "yongzhuo/nlg-yongzhuo"
"qingkongzhiqian/GPT2-Summary" -> "SunnyGJing/t5-pegasus-chinese"
"qingkongzhiqian/GPT2-Summary" -> "bojone/SPACES"
"qingkongzhiqian/GPT2-Summary" -> "HorieYuan/TransformerTextSummarization"
"qingkongzhiqian/GPT2-Summary" -> "ZhuiyiTechnology/t5-pegasus"
"qingkongzhiqian/GPT2-Summary" -> "CLUEbenchmark/CLGE"
"qingkongzhiqian/GPT2-Summary" -> "yangjianxin1/GPT2-chitchat"
"qingkongzhiqian/GPT2-Summary" -> "maszhongming/MatchSum" ["e"=1]
"qingkongzhiqian/GPT2-Summary" -> "ztz818/Automatic-generation-of-text-summaries"
"qingkongzhiqian/GPT2-Summary" -> "fangpings/BERT-Transformer-for-Summarization" ["e"=1]
"qingkongzhiqian/GPT2-Summary" -> "920232796/bert_seq2seq"
"qingkongzhiqian/GPT2-Summary" -> "wonderfulsuccess/chinese_abstractive_corpus"
"baidu/DDParser" -> "baidu/lac"
"baidu/DDParser" -> "yzhangcs/parser" ["e"=1]
"baidu/DDParser" -> "425776024/nlpcda"
"baidu/DDParser" -> "PaddlePaddle/TrustAI" ["e"=1]
"baidu/DDParser" -> "ZhuiyiTechnology/pretrained-models"
"baidu/DDParser" -> "fastnlp/fastHan"
"baidu/DDParser" -> "LeeSureman/Flat-Lattice-Transformer"
"baidu/DDParser" -> "loujie0822/DeepIE"
"baidu/DDParser" -> "ymcui/Chinese-ELECTRA"
"baidu/DDParser" -> "liuhuanyong/ChineseSemanticKB"
"baidu/DDParser" -> "liuhuanyong/EventTriplesExtraction" ["e"=1]
"baidu/DDParser" -> "BDBC-KG-NLP/QA-Survey-CN"
"baidu/DDParser" -> "airaria/TextBrewer"
"baidu/DDParser" -> "baidu/DuReader" ["e"=1]
"baidu/DDParser" -> "baidu/AnyQ"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "finlay-liu/kaggle_public"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "unclegem/Sentiment-analysis"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "linhaow/TextClassification"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "rebornZH/2019-CCF-BDCI-NLP"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "brightmart/roberta_zh"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "ymcui/Chinese-XLNet"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "bojone/bert_in_keras"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "zhanlaoban/CCF_BDCI_2019_datafountain350"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "yilifzf/BDCI_Car_2018"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "CLUEbenchmark/CLUEPretrainedModels"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "WenRichard/DIAC2019-Adversarial-Attack-Share"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "ArthurRizar/tensorflow_ernie"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018"
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" -> "zhanlaoban/Transformers_for_Text_Classification"
"coughresearch/Cough-signal-processing" -> "coughresearch/cough-research-papers"
"coughresearch/Cough-signal-processing" -> "coughresearch/Cough-data"
"coughresearch/Cough-signal-processing" -> "coughresearch/cough-classification"
"accordproject/web-components" -> "accordproject/markdown-transform"
"accordproject/web-components" -> "accordproject/concerto"
"accordproject/web-components" -> "accordproject/cicero-template-library"
"accordproject/web-components" -> "accordproject/cicero-ui"
"accordproject/web-components" -> "accordproject/cicero-word-add-in"
"accordproject/web-components" -> "accordproject/ergo"
"accordproject/web-components" -> "accordproject/markdown-editor"
"accordproject/web-components" -> "accordproject/techdocs"
"accordproject/web-components" -> "accordproject/models"
"accordproject/web-components" -> "accordproject/cicero-word-add-in-deprecated"
"ACL2020SpellGCN/SpellGCN" -> "wdimmy/Automatic-Corpus-Generation"
"ACL2020SpellGCN/SpellGCN" -> "DaDaMrX/ReaLiSe"
"ACL2020SpellGCN/SpellGCN" -> "sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check"
"ACL2020SpellGCN/SpellGCN" -> "liushulinle/PLOME"
"ACL2020SpellGCN/SpellGCN" -> "FDChongLi/TwoWaysToImproveCSC"
"ACL2020SpellGCN/SpellGCN" -> "hiyoung123/SoftMaskedBert" ["e"=1]
"ACL2020SpellGCN/SpellGCN" -> "iqiyi/FASPell"
"ACL2020SpellGCN/SpellGCN" -> "whgaara/pytorch-soft-masked-bert"
"ACL2020SpellGCN/SpellGCN" -> "destwang/CTCResources"
"ACL2020SpellGCN/SpellGCN" -> "destwang/CTC2021"
"ACL2020SpellGCN/SpellGCN" -> "destwang/DCN"
"ACL2020SpellGCN/SpellGCN" -> "gitabtion/SoftMaskedBert-PyTorch"
"ACL2020SpellGCN/SpellGCN" -> "gitabtion/BertBasedCorrectionModels"
"ACL2020SpellGCN/SpellGCN" -> "HillZhang1999/MuCGEC"
"ACL2020SpellGCN/SpellGCN" -> "nghuyong/Chinese-text-correction-papers"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "linhaow/TextClassification"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "zhanlaoban/CCF_BDCI_2019_datafountain350"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "rebornZH/2019-CCF-BDCI-NLP"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "zhanlaoban/Transformers_for_Text_Classification"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "finlay-liu/kaggle_public"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "zzy99/epidemic-sentence-pair"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "A-Rain/BDCI2019-Negative_Finance_Info_Judge"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "xiong666/ccf_financial_negative"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "z814081807/DeepNER"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "Makaixin/Correlation-between-requirements-and-achievements"
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "xv44586/ccf_2020_qa_match" ["e"=1]
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "HuiResearch/epidemicTextMatch" ["e"=1]
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "guoday/Tencent2020_Rank1st" ["e"=1]
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" -> "YZHANG1270/Aspect-Based-Sentiment-Analysis" ["e"=1]
"google-research/electra" -> "ymcui/Chinese-ELECTRA"
"google-research/electra" -> "google-research/albert"
"google-research/electra" -> "zihangdai/xlnet" ["e"=1]
"google-research/electra" -> "brightmart/albert_zh"
"google-research/electra" -> "google-research/text-to-text-transfer-transformer" ["e"=1]
"google-research/electra" -> "brightmart/roberta_zh"
"google-research/electra" -> "huawei-noah/Pretrained-Language-Model"
"google-research/electra" -> "namisan/mt-dnn"
"google-research/electra" -> "facebookresearch/XLM" ["e"=1]
"google-research/electra" -> "kimiyoung/transformer-xl" ["e"=1]
"google-research/electra" -> "tomohideshibata/BERT-related-papers"
"google-research/electra" -> "microsoft/DeBERTa"
"google-research/electra" -> "CLUEbenchmark/CLUE"
"google-research/electra" -> "PaddlePaddle/ERNIE"
"google-research/electra" -> "ChineseGLUE/ChineseGLUE"
"2shou/TextGrocery" -> "salestock/fastText.py" ["e"=1]
"2shou/TextGrocery" -> "sing1ee/dict_build"
"2shou/TextGrocery" -> "jiegzhan/multi-class-text-classification-cnn" ["e"=1]
"2shou/TextGrocery" -> "2shou/python-libshorttext"
"2shou/TextGrocery" -> "white127/QA-deep-learning" ["e"=1]
"2shou/TextGrocery" -> "cjlin1/liblinear" ["e"=1]
"2shou/TextGrocery" -> "baidu/Familia"
"2shou/TextGrocery" -> "xlvector/learning-dl" ["e"=1]
"2shou/TextGrocery" -> "dhammack/Word2VecExample" ["e"=1]
"2shou/TextGrocery" -> "isnowfy/snownlp"
"2shou/TextGrocery" -> "linanqiu/word2vec-sentiments" ["e"=1]
"2shou/TextGrocery" -> "cosmichut/TextGrocery"
"2shou/TextGrocery" -> "inspirehep/magpie"
"2shou/TextGrocery" -> "memect/hao"
"2shou/TextGrocery" -> "ycjuan/kaggle-2014-criteo" ["e"=1]
"gumblex/zhconv" -> "berniey/hanziconv"
"gumblex/zhconv" -> "yichen0831/opencc-python" ["e"=1]
"gumblex/zhconv" -> "tsroten/zhon" ["e"=1]
"gumblex/zhconv" -> "Ailln/cn2an"
"gumblex/zhconv" -> "BYVoid/OpenCC"
"gumblex/zhconv" -> "wenet-e2e/WeTextProcessing" ["e"=1]
"gumblex/zhconv" -> "linzehui/mRASP" ["e"=1]
"Valuebai/Text-Auto-Summarization" -> "ishine/New-Pytorch-Chinese"
"mukut03/ESG-BERT" -> "hannahawalsh/ESG_AI"
"mukut03/ESG-BERT" -> "edgetrader/esg-nlp"
"mukut03/ESG-BERT" -> "databricks-industry-solutions/esg-scoring"
"mukut03/ESG-BERT" -> "adamFinastra/ESGAI"
"ilastik/lazyflow" -> "ilastik/volumina"
"lena-voita/description-length-probing" -> "rycolab/info-theoretic-probing"
"salgadev/medical-nlp" -> "soukron/maragi"
"salgadev/medical-nlp" -> "kavgan/clinical-concepts"
"jiangxinyang227/bert-for-task" -> "jiangxinyang227/textClassifier"
"jiangxinyang227/bert-for-task" -> "realcactus/bert"
"jiangxinyang227/bert-for-task" -> "jiangxinyang227/NLP-Project"
"jiangxinyang227/bert-for-task" -> "ProHiryu/albert-chinese-ner"
"RandyPen/TextCluster" -> "Edward1Chou/textClustering"
"RandyPen/TextCluster" -> "murray-z/text_clustering"
"RandyPen/TextCluster" -> "FesonX/cn-text-classifier"
"RandyPen/TextCluster" -> "galesour/BTM" ["e"=1]
"A-Rain/BDCI2019-Negative_Finance_Info_Judge" -> "rebornZH/2019-CCF-BDCI-NLP"
"A-Rain/BDCI2019-Negative_Finance_Info_Judge" -> "Chevalier1024/CCF-BDCI-ABSA"
"A-Rain/BDCI2019-Negative_Finance_Info_Judge" -> "icoxfog417/awesome-financial-nlp"
"A-Rain/BDCI2019-Negative_Finance_Info_Judge" -> "xiong666/ccf_financial_negative"
"DA-southampton/ner" -> "lonePatient/BERT-NER-Pytorch"
"DA-southampton/ner" -> "yanwii/ChinsesNER-pytorch"
"DA-southampton/ner" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"DA-southampton/ner" -> "wavewangyue/ner"
"DA-southampton/ner" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"DA-southampton/ner" -> "z814081807/DeepNER"
"DA-southampton/ner" -> "luopeixiang/named_entity_recognition"
"DA-southampton/ner" -> "hemingkx/CLUENER2020"
"DA-southampton/ner" -> "yumath/bertNER"
"DA-southampton/ner" -> "loujie0822/DeepIE"
"DA-southampton/ner" -> "stanleylsx/entity_extractor_by_ner"
"DA-southampton/ner" -> "FuYanzhe2/Name-Entity-Recognition"
"DA-southampton/ner" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"DA-southampton/ner" -> "CLUEbenchmark/CLUENER2020"
"DA-southampton/ner" -> "xiaofei05/Chinese-NER"
"abhimishra91/transformers-tutorials" -> "ThilinaRajapakse/simpletransformers" ["e"=1]
"abhimishra91/transformers-tutorials" -> "utterworks/fast-bert" ["e"=1]
"abhimishra91/transformers-tutorials" -> "abhimishra91/insight" ["e"=1]
"abhimishra91/transformers-tutorials" -> "patil-suraj/exploring-T5" ["e"=1]
"abhimishra91/transformers-tutorials" -> "ThilinaRajapakse/pytorch-transformers-classification" ["e"=1]
"abhimishra91/transformers-tutorials" -> "patil-suraj/question_generation" ["e"=1]
"abhimishra91/transformers-tutorials" -> "allenai/longformer"
"abhimishra91/transformers-tutorials" -> "huggingface/notebooks" ["e"=1]
"abhimishra91/transformers-tutorials" -> "allenai/naacl2021-longdoc-tutorial" ["e"=1]
"abhimishra91/transformers-tutorials" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"abhimishra91/transformers-tutorials" -> "google-research/multilingual-t5"
"abhimishra91/transformers-tutorials" -> "cedrickchee/awesome-transformer-nlp"
"abhimishra91/transformers-tutorials" -> "nlp-with-transformers/notebooks" ["e"=1]
"abhimishra91/transformers-tutorials" -> "Shivampanwar/Bert-text-classification" ["e"=1]
"abhimishra91/transformers-tutorials" -> "HHousen/TransformerSum" ["e"=1]
"liuhuanyong/ChineseSemanticKB" -> "liuhuanyong/DomainWordsDict"
"liuhuanyong/ChineseSemanticKB" -> "guotong1988/chinese_dictionary"
"liuhuanyong/ChineseSemanticKB" -> "yaleimeng/Final_word_Similarity"
"liuhuanyong/ChineseSemanticKB" -> "liuhuanyong/MiningZhiDaoQACorpus" ["e"=1]
"liuhuanyong/ChineseSemanticKB" -> "sunyilgdx/SIFRank_zh" ["e"=1]
"liuhuanyong/ChineseSemanticKB" -> "ChineseGLUE/ChineseGLUE"
"liuhuanyong/ChineseSemanticKB" -> "fastnlp/fastHan"
"liuhuanyong/ChineseSemanticKB" -> "baidu/DDParser"
"liuhuanyong/ChineseSemanticKB" -> "liuhuanyong/ComplexEventExtraction" ["e"=1]
"liuhuanyong/ChineseSemanticKB" -> "thunlp/OpenHowNet"
"liuhuanyong/ChineseSemanticKB" -> "loujie0822/DeepIE"
"liuhuanyong/ChineseSemanticKB" -> "ZhuiyiTechnology/pretrained-models"
"liuhuanyong/ChineseSemanticKB" -> "425776024/nlpcda"
"liuhuanyong/ChineseSemanticKB" -> "zhanzecheng/Time_NLP"
"liuhuanyong/ChineseSemanticKB" -> "zhanlaoban/EDA_NLP_for_Chinese"
"stanleylsx/entity_extractor_by_ner" -> "CLOVEXCWZ/NER_DEMO"
"stanleylsx/entity_extractor_by_ner" -> "stanleylsx/entity_extractor_by_pointer"
"stanleylsx/entity_extractor_by_ner" -> "wzzzd/lm_ner"
"stanleylsx/entity_extractor_by_ner" -> "stanleylsx/text_classifier_tf2"
"stanleylsx/entity_extractor_by_ner" -> "DSXiangLi/ChineseNER"
"stanleylsx/entity_extractor_by_ner" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"stanleylsx/entity_extractor_by_ner" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"stanleylsx/entity_extractor_by_ner" -> "yumath/bertNER"
"stanleylsx/entity_extractor_by_ner" -> "hemingkx/CLUENER2020"
"stanleylsx/entity_extractor_by_ner" -> "yangjianxin1/LEBERT-NER-Chinese"
"stanleylsx/entity_extractor_by_ner" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"stanleylsx/entity_extractor_by_ner" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"stanleylsx/entity_extractor_by_ner" -> "Marilynmontu/ChineseNER-pytorch"
"stanleylsx/entity_extractor_by_ner" -> "DA-southampton/ner"
"stanleylsx/entity_extractor_by_ner" -> "saiwaiyanyu/bi-lstm-crf-ner-tf2.0"
"ChileWang0228/Deep-Learning-With-Python" -> "z814081807/DeepNER"
"ChileWang0228/Deep-Learning-With-Python" -> "loujie0822/DeepIE"
"ChileWang0228/Deep-Learning-With-Python" -> "CLUEbenchmark/CLUENER2020"
"ChileWang0228/Deep-Learning-With-Python" -> "qiufengyuyi/sequence_tagging"
"ChileWang0228/Deep-Learning-With-Python" -> "FuYanzhe2/Name-Entity-Recognition"
"ChileWang0228/Deep-Learning-With-Python" -> "xuanzebi/BERT-CH-NER"
"ChileWang0228/Deep-Learning-With-Python" -> "HuiResearch/epidemicTextMatch" ["e"=1]
"ChileWang0228/Deep-Learning-With-Python" -> "jiesutd/LatticeLSTM"
"ChileWang0228/Deep-Learning-With-Python" -> "macanv/BERT-BiLSTM-CRF-NER"
"ChileWang0228/Deep-Learning-With-Python" -> "zzy99/epidemic-sentence-pair"
"ChileWang0228/Deep-Learning-With-Python" -> "v-mipeng/LexiconAugmentedNER"
"ChileWang0228/Deep-Learning-With-Python" -> "bojone/lic2020_baselines" ["e"=1]
"ChileWang0228/Deep-Learning-With-Python" -> "lonePatient/BERT-NER-Pytorch"
"ChileWang0228/Deep-Learning-With-Python" -> "WuHuRestaurant/xf_event_extraction2020Top1" ["e"=1]
"ChileWang0228/Deep-Learning-With-Python" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"yihenglu/chinese-address-segment" -> "pyunits/pyunit-address"
"yihenglu/chinese-address-segment" -> "liuzhibin-cn/address-semantic-search"
"yihenglu/chinese-address-segment" -> "zhuyandong/ChineseAddressDict"
"yihenglu/chinese-address-segment" -> "leodotnet/neural-chinese-address-parsing"
"yihenglu/chinese-address-segment" -> "tidalmelon/addrseg"
"yihenglu/chinese-address-segment" -> "wangyulu1993/ranqi_word_split"
"yihenglu/chinese-address-segment" -> "xueyouluo/ccks2021-track2-code"
"yihenglu/chinese-address-segment" -> "bitlap/geocoding"
"ZhuiyiTechnology/simbert" -> "ZhuiyiTechnology/pretrained-models"
"ZhuiyiTechnology/simbert" -> "ZhuiyiTechnology/roformer-sim"
"ZhuiyiTechnology/simbert" -> "bojone/SimCSE"
"ZhuiyiTechnology/simbert" -> "bojone/BERT-whitening"
"ZhuiyiTechnology/simbert" -> "ymcui/Chinese-ELECTRA"
"ZhuiyiTechnology/simbert" -> "425776024/nlpcda"
"ZhuiyiTechnology/simbert" -> "ZhuiyiTechnology/WoBERT"
"ZhuiyiTechnology/simbert" -> "YunwenTechnology/Unilm"
"ZhuiyiTechnology/simbert" -> "airaria/TextBrewer"
"ZhuiyiTechnology/simbert" -> "brightmart/roberta_zh"
"ZhuiyiTechnology/simbert" -> "JunnYu/RoFormer_pytorch"
"ZhuiyiTechnology/simbert" -> "brightmart/albert_zh"
"ZhuiyiTechnology/simbert" -> "panchunguang/ccks_baidu_entity_link"
"ZhuiyiTechnology/simbert" -> "bojone/bert4keras"
"ZhuiyiTechnology/simbert" -> "princeton-nlp/SimCSE"
"ShannonAI/service-streamer" -> "dbiir/UER-py"
"ShannonAI/service-streamer" -> "airaria/TextBrewer"
"ShannonAI/service-streamer" -> "Tencent/TurboTransformers"
"ShannonAI/service-streamer" -> "brightmart/albert_zh"
"ShannonAI/service-streamer" -> "ZhuiyiTechnology/pretrained-models"
"ShannonAI/service-streamer" -> "ChineseGLUE/ChineseGLUE"
"ShannonAI/service-streamer" -> "brightmart/roberta_zh"
"ShannonAI/service-streamer" -> "ymcui/Chinese-XLNet"
"ShannonAI/service-streamer" -> "ShannonAI/mrc-for-flat-nested-ner"
"ShannonAI/service-streamer" -> "bytedance/lightseq"
"ShannonAI/service-streamer" -> "huawei-noah/Pretrained-Language-Model"
"ShannonAI/service-streamer" -> "bojone/kg-2019" ["e"=1]
"ShannonAI/service-streamer" -> "layerism/TensorRT-Inference-Server-Tutorial" ["e"=1]
"ShannonAI/service-streamer" -> "autoliuweijie/FastBERT"
"ShannonAI/service-streamer" -> "pytorch/serve" ["e"=1]
"GuidoPaul/CAIL2019" -> "padeoe/cail2019"
"GuidoPaul/CAIL2019" -> "china-ai-law-challenge/CAIL2019"
"GuidoPaul/CAIL2019" -> "NoneWait/cail2019"
"GuidoPaul/CAIL2019" -> "thunlp/OpenCLaP"
"GuidoPaul/CAIL2019" -> "huanghuidmml/cail2019_track2"
"GuidoPaul/CAIL2019" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"GuidoPaul/CAIL2019" -> "renjunxiang/Competition_CAIL"
"GuidoPaul/CAIL2019" -> "ShenDezhou/CAIL"
"GuidoPaul/CAIL2019" -> "hecongqing/CAIL2019"
"GuidoPaul/CAIL2019" -> "shelleyHLX/cail"
"GuidoPaul/CAIL2019" -> "Executedone/CAIL2021_LAJS"
"GuidoPaul/CAIL2019" -> "thunlp/CAIL"
"GuidoPaul/CAIL2019" -> "thunlp/LegalPapers"
"GuidoPaul/CAIL2019" -> "thunlp/attribute_charge"
"GuidoPaul/CAIL2019" -> "jingyihiter/mycail"
"onebula/sighan_raw" -> "nghuyong/cscd-ns"
"onebula/sighan_raw" -> "destwang/DCN"
"onebula/sighan_raw" -> "yzhihao/MCSCSet"
"onebula/sighan_raw" -> "wdimmy/Automatic-Corpus-Generation"
"brightmart/xlnet_zh" -> "ymcui/Chinese-XLNet"
"brightmart/xlnet_zh" -> "CLUEbenchmark/ELECTRA"
"Morizeyao/Decoders-Chinese-TF2.0" -> "wind91725/gpt2-ml-finetune-" ["e"=1]
"Morizeyao/Decoders-Chinese-TF2.0" -> "imcaspar/gpt2-ml"
"Morizeyao/Decoders-Chinese-TF2.0" -> "GaoPeng97/transformer-xl-chinese"
"houbb/pinyin" -> "houbb/segment"
"houbb/pinyin" -> "houbb/opencc4j"
"houbb/pinyin" -> "houbb/nlp-hanzi-similar"
"sinovation/ZEN" -> "ymcui/Chinese-XLNet"
"sinovation/ZEN" -> "brightmart/roberta_zh"
"sinovation/ZEN" -> "ZhuiyiTechnology/pretrained-models"
"sinovation/ZEN" -> "SVAIGBA/WMSeg"
"sinovation/ZEN" -> "ChineseGLUE/ChineseGLUE"
"sinovation/ZEN" -> "ymcui/Chinese-ELECTRA"
"sinovation/ZEN" -> "CLUEbenchmark/CLUEPretrainedModels"
"sinovation/ZEN" -> "brightmart/albert_zh"
"sinovation/ZEN" -> "dbiir/UER-py"
"sinovation/ZEN" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"sinovation/ZEN" -> "thunlp/OpenCLaP"
"sinovation/ZEN" -> "idmu/java_study" ["e"=1]
"sinovation/ZEN" -> "ShannonAI/glyce"
"sinovation/ZEN" -> "autoliuweijie/FastBERT"
"sinovation/ZEN" -> "didi/ChineseNLP"
"bojone/word-discovery" -> "Rayarrow/New-Word-Discovery"
"bojone/word-discovery" -> "zhanzecheng/Chinese_segment_augment"
"bojone/word-discovery" -> "smoothnlp/SmoothNLP"
"bojone/word-discovery" -> "ZhuiyiTechnology/pretrained-models"
"bojone/word-discovery" -> "yongzhuo/Macropodus"
"bojone/word-discovery" -> "sing1ee/dict_build"
"bojone/word-discovery" -> "ZhuiyiTechnology/simbert"
"bojone/word-discovery" -> "bojone/kg-2019" ["e"=1]
"bojone/word-discovery" -> "mattzheng/py-kenlm-model"
"bojone/word-discovery" -> "NCXiaozui/New-Word-Detection"
"bojone/word-discovery" -> "DenseAI/kaitian-xinci"
"bojone/word-discovery" -> "sunyilgdx/SIFRank_zh" ["e"=1]
"bojone/word-discovery" -> "DataTerminatorX/Keyword-BERT"
"bojone/word-discovery" -> "brightmart/nlu_sim"
"bojone/word-discovery" -> "InsaneLife/dssm" ["e"=1]
"LiyuanLucasLiu/Transformer-Clinic" -> "layer6ai-labs/T-Fixup"
"LiyuanLucasLiu/Transformer-Clinic" -> "namisan/exdeep-nmt"
"LiyuanLucasLiu/Transformer-Clinic" -> "LiyuanLucasLiu/LD-Net"
"allenai/allennlp-models" -> "allenai/allennlp-guide"
"allenai/allennlp-models" -> "allenai/allentune"
"allenai/allennlp-models" -> "allenai/allennlp-demo"
"allenai/allennlp-models" -> "allenai/allennlp-semparse"
"allenai/allennlp-models" -> "allenai/allennlp-as-a-library-example"
"allenai/allennlp-models" -> "jbarrow/allennlp_tutorial"
"allenai/allennlp-models" -> "allenai/SciREX" ["e"=1]
"allenai/allennlp-models" -> "MaksymDel/allennlp-light"
"allenai/allennlp-models" -> "miyyer/scpn" ["e"=1]
"allenai/allennlp-models" -> "allenai/specter" ["e"=1]
"allenai/allennlp-models" -> "adamklec/copynet"
"allenai/allennlp-models" -> "harvardnlp/pytorch-struct" ["e"=1]
"allenai/allennlp-models" -> "facebookresearch/SpanBERT"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "yumath/bertNER"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "CLOVEXCWZ/NER_DEMO"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "hemingkx/CLUENER2020"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "lonePatient/BERT-NER-Pytorch"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "yanwii/ChinsesNER-pytorch"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "CLUEbenchmark/CLUENER2020"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "lemonhu/NER-BERT-pytorch"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "DA-southampton/ner"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "luopeixiang/named_entity_recognition"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "Marilynmontu/ChineseNER-pytorch"
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" -> "Jacen789/relation-extraction" ["e"=1]
"hellonlp/classifier-multi-label" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"hellonlp/classifier-multi-label" -> "yongzhuo/Keras-TextClassification"
"hellonlp/classifier-multi-label" -> "murray-z/multi_label_classification"
"hellonlp/classifier-multi-label" -> "hellonlp/classifier_multi_label"
"hellonlp/classifier-multi-label" -> "hellonlp/sentiment-analysis" ["e"=1]
"hellonlp/classifier-multi-label" -> "yongzhuo/Pytorch-NLU"
"hellonlp/classifier-multi-label" -> "lushishuai/BERT-ROBERTA-pytorch-multi-label-classification"
"hellonlp/classifier-multi-label" -> "Tencent/NeuralNLP-NeuralClassifier"
"hellonlp/classifier-multi-label" -> "rsanshierli/EasyBert"
"hellonlp/classifier-multi-label" -> "RandolphVI/Multi-Label-Text-Classification"
"hellonlp/classifier-multi-label" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"hellonlp/classifier-multi-label" -> "RandolphVI/Hierarchical-Multi-Label-Text-Classification"
"hellonlp/classifier-multi-label" -> "Vincent131499/Multi_Label_Classifier_finetune"
"hellonlp/classifier-multi-label" -> "xiaoqian19940510/text-classification-surveys" ["e"=1]
"hellonlp/classifier-multi-label" -> "littletiger0712/text-classification-mutli-label"
"huawei-noah/Pretrained-Language-Model" -> "brightmart/albert_zh"
"huawei-noah/Pretrained-Language-Model" -> "CLUEbenchmark/CLUE"
"huawei-noah/Pretrained-Language-Model" -> "brightmart/roberta_zh"
"huawei-noah/Pretrained-Language-Model" -> "ymcui/Chinese-BERT-wwm"
"huawei-noah/Pretrained-Language-Model" -> "airaria/TextBrewer"
"huawei-noah/Pretrained-Language-Model" -> "dbiir/UER-py"
"huawei-noah/Pretrained-Language-Model" -> "bojone/bert4keras"
"huawei-noah/Pretrained-Language-Model" -> "ChineseGLUE/ChineseGLUE"
"huawei-noah/Pretrained-Language-Model" -> "ymcui/Chinese-ELECTRA"
"huawei-noah/Pretrained-Language-Model" -> "ZhuiyiTechnology/pretrained-models"
"huawei-noah/Pretrained-Language-Model" -> "PaddlePaddle/ERNIE"
"huawei-noah/Pretrained-Language-Model" -> "princeton-nlp/SimCSE"
"huawei-noah/Pretrained-Language-Model" -> "google-research/albert"
"huawei-noah/Pretrained-Language-Model" -> "brightmart/nlp_chinese_corpus"
"huawei-noah/Pretrained-Language-Model" -> "CLUEbenchmark/CLUEDatasetSearch"
"Smerity/sha-rnn" -> "facebookresearch/adaptive-span" ["e"=1]
"Smerity/sha-rnn" -> "lucidrains/reformer-pytorch" ["e"=1]
"Smerity/sha-rnn" -> "kimiyoung/transformer-xl" ["e"=1]
"Smerity/sha-rnn" -> "yikangshen/Ordered-Neurons" ["e"=1]
"Smerity/sha-rnn" -> "zihangdai/xlnet" ["e"=1]
"Smerity/sha-rnn" -> "google-research/electra"
"Smerity/sha-rnn" -> "salesforce/awd-lstm-lm" ["e"=1]
"Smerity/sha-rnn" -> "brightmart/albert_zh"
"Smerity/sha-rnn" -> "facebookresearch/XLM" ["e"=1]
"Smerity/sha-rnn" -> "harvardnlp/pytorch-struct" ["e"=1]
"Smerity/sha-rnn" -> "namisan/mt-dnn"
"Smerity/sha-rnn" -> "tomohideshibata/BERT-related-papers"
"Smerity/sha-rnn" -> "thunlp/ERNIE"
"Smerity/sha-rnn" -> "facebookresearch/unlikelihood_training" ["e"=1]
"Smerity/sha-rnn" -> "salesforce/ctrl" ["e"=1]
"ShannonAI/mrc-for-flat-nested-ner" -> "LeeSureman/Flat-Lattice-Transformer"
"ShannonAI/mrc-for-flat-nested-ner" -> "loujie0822/DeepIE"
"ShannonAI/mrc-for-flat-nested-ner" -> "v-mipeng/LexiconAugmentedNER"
"ShannonAI/mrc-for-flat-nested-ner" -> "juntaoy/biaffine-ner"
"ShannonAI/mrc-for-flat-nested-ner" -> "lonePatient/BERT-NER-Pytorch"
"ShannonAI/mrc-for-flat-nested-ner" -> "ShannonAI/dice_loss_for_NLP"
"ShannonAI/mrc-for-flat-nested-ner" -> "qiufengyuyi/sequence_tagging"
"ShannonAI/mrc-for-flat-nested-ner" -> "CLUEbenchmark/CLUENER2020"
"ShannonAI/mrc-for-flat-nested-ner" -> "ljynlp/W2NER"
"ShannonAI/mrc-for-flat-nested-ner" -> "z814081807/DeepNER"
"ShannonAI/mrc-for-flat-nested-ner" -> "131250208/TPlinker-joint-extraction" ["e"=1]
"ShannonAI/mrc-for-flat-nested-ner" -> "princeton-nlp/PURE" ["e"=1]
"ShannonAI/mrc-for-flat-nested-ner" -> "weizhepei/CasRel" ["e"=1]
"ShannonAI/mrc-for-flat-nested-ner" -> "fastnlp/TENER"
"ShannonAI/mrc-for-flat-nested-ner" -> "lavis-nlp/spert" ["e"=1]
"shibing624/addressparser" -> "leodotnet/neural-chinese-address-parsing"
"shibing624/addressparser" -> "DQinYuan/chinese_province_city_area_mapper"
"shibing624/addressparser" -> "shibing624/companynameparser"
"shibing624/addressparser" -> "liuzhibin-cn/address-semantic-search"
"icoxfog417/awesome-financial-nlp" -> "A-Rain/BDCI2019-Negative_Finance_Info_Judge"
"icoxfog417/awesome-financial-nlp" -> "YangLinyi/FinNLP-Progress" ["e"=1]
"icoxfog417/awesome-financial-nlp" -> "smoothnlp/FinancialDatasets"
"icoxfog417/awesome-financial-nlp" -> "psnonis/FinBERT"
"icoxfog417/awesome-financial-nlp" -> "yuriak/DLQuant" ["e"=1]
"icoxfog417/awesome-financial-nlp" -> "valuesimplex/FinBERT"
"icoxfog417/awesome-financial-nlp" -> "sudhamstarun/Understanding-Financial-Reports-using-Natural-Language-Processing"
"icoxfog417/awesome-financial-nlp" -> "PKUJohnson/OpenData" ["e"=1]
"icoxfog417/awesome-financial-nlp" -> "shun-zheng/Doc2EDAG" ["e"=1]
"icoxfog417/awesome-financial-nlp" -> "yya518/FinBERT"
"icoxfog417/awesome-financial-nlp" -> "MengLingchao/Chinese_financial_sentiment_dictionary" ["e"=1]
"icoxfog417/awesome-financial-nlp" -> "M0025/KnowledgeGraphOfA-shareCompanys" ["e"=1]
"icoxfog417/awesome-financial-nlp" -> "xiong666/ccf_financial_negative"
"icoxfog417/awesome-financial-nlp" -> "ProsusAI/finBERT" ["e"=1]
"DianboWork/Graph4CNER" -> "RowitZou/LGN"
"DianboWork/Graph4CNER" -> "CPF-NLPR/AT4ChineseNER"
"DianboWork/Graph4CNER" -> "yhcc/OntoNotes-5.0-NER"
"DianboWork/Graph4CNER" -> "liuwei1206/CCW-NER"
"ZihanWangKi/CrossWeigh" -> "Adaxry/GCDT"
"ZihanWangKi/CrossWeigh" -> "LiyuanLucasLiu/ArabicNER"
"ZihanWangKi/CrossWeigh" -> "allanj/ner_incomplete_annotation"
"ZihanWangKi/CrossWeigh" -> "pfliu-nlp/Named-Entity-Recognition-NER-Papers"
"qiufengyuyi/sequence_tagging" -> "qiufengyuyi/event_extraction" ["e"=1]
"qiufengyuyi/sequence_tagging" -> "v-mipeng/LexiconAugmentedNER"
"qiufengyuyi/sequence_tagging" -> "ShannonAI/mrc-for-flat-nested-ner"
"qiufengyuyi/sequence_tagging" -> "loujie0822/DeepIE"
"qiufengyuyi/sequence_tagging" -> "LeeSureman/Flat-Lattice-Transformer"
"qiufengyuyi/sequence_tagging" -> "z814081807/DeepNER"
"qiufengyuyi/sequence_tagging" -> "CLUEbenchmark/CLUENER2020"
"qiufengyuyi/sequence_tagging" -> "lonePatient/BERT-NER-Pytorch"
"qiufengyuyi/sequence_tagging" -> "FuYanzhe2/Name-Entity-Recognition"
"qiufengyuyi/sequence_tagging" -> "fastnlp/TENER"
"qiufengyuyi/sequence_tagging" -> "jiesutd/LatticeLSTM"
"qiufengyuyi/sequence_tagging" -> "suolyer/PyTorch_BERT_Biaffine_NER"
"qiufengyuyi/sequence_tagging" -> "qiangsiwei/bert_distill"
"CLUEbenchmark/CLUENER2020" -> "lonePatient/BERT-NER-Pytorch"
"CLUEbenchmark/CLUENER2020" -> "CLUEbenchmark/CLUE"
"CLUEbenchmark/CLUENER2020" -> "jiesutd/LatticeLSTM"
"CLUEbenchmark/CLUENER2020" -> "loujie0822/DeepIE"
"CLUEbenchmark/CLUENER2020" -> "LeeSureman/Flat-Lattice-Transformer"
"CLUEbenchmark/CLUENER2020" -> "luopeixiang/named_entity_recognition"
"CLUEbenchmark/CLUENER2020" -> "z814081807/DeepNER"
"CLUEbenchmark/CLUENER2020" -> "macanv/BERT-BiLSTM-CRF-NER"
"CLUEbenchmark/CLUENER2020" -> "ShannonAI/mrc-for-flat-nested-ner"
"CLUEbenchmark/CLUENER2020" -> "brightmart/roberta_zh"
"CLUEbenchmark/CLUENER2020" -> "v-mipeng/LexiconAugmentedNER"
"CLUEbenchmark/CLUENER2020" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"CLUEbenchmark/CLUENER2020" -> "brightmart/albert_zh"
"CLUEbenchmark/CLUENER2020" -> "panchunguang/ccks_baidu_entity_link"
"CLUEbenchmark/CLUENER2020" -> "ymcui/Chinese-BERT-wwm"
"LeeSureman/Flat-Lattice-Transformer" -> "v-mipeng/LexiconAugmentedNER"
"LeeSureman/Flat-Lattice-Transformer" -> "jiesutd/LatticeLSTM"
"LeeSureman/Flat-Lattice-Transformer" -> "loujie0822/DeepIE"
"LeeSureman/Flat-Lattice-Transformer" -> "ShannonAI/mrc-for-flat-nested-ner"
"LeeSureman/Flat-Lattice-Transformer" -> "lonePatient/BERT-NER-Pytorch"
"LeeSureman/Flat-Lattice-Transformer" -> "CLUEbenchmark/CLUENER2020"
"LeeSureman/Flat-Lattice-Transformer" -> "liuwei1206/LEBERT"
"LeeSureman/Flat-Lattice-Transformer" -> "fastnlp/TENER"
"LeeSureman/Flat-Lattice-Transformer" -> "OYE93/Chinese-NLP-Corpus"
"LeeSureman/Flat-Lattice-Transformer" -> "ljynlp/W2NER"
"LeeSureman/Flat-Lattice-Transformer" -> "z814081807/DeepNER"
"LeeSureman/Flat-Lattice-Transformer" -> "131250208/TPlinker-joint-extraction" ["e"=1]
"LeeSureman/Flat-Lattice-Transformer" -> "425776024/nlpcda"
"LeeSureman/Flat-Lattice-Transformer" -> "qiufengyuyi/sequence_tagging"
"LeeSureman/Flat-Lattice-Transformer" -> "juntaoy/biaffine-ner"
"ymcui/MacBERT" -> "ymcui/Chinese-ELECTRA"
"ymcui/MacBERT" -> "ymcui/Chinese-XLNet"
"ymcui/MacBERT" -> "ymcui/PERT" ["e"=1]
"ymcui/MacBERT" -> "airaria/TextBrewer"
"ymcui/MacBERT" -> "CLUEbenchmark/CLUEPretrainedModels"
"ymcui/MacBERT" -> "airaria/TextPruner" ["e"=1]
"ymcui/MacBERT" -> "ZhuiyiTechnology/pretrained-models"
"ymcui/MacBERT" -> "ymcui/LERT" ["e"=1]
"ymcui/MacBERT" -> "brightmart/roberta_zh"
"ymcui/MacBERT" -> "LeeSureman/Flat-Lattice-Transformer"
"ymcui/MacBERT" -> "425776024/nlpcda"
"ymcui/MacBERT" -> "dbiir/UER-py"
"ymcui/MacBERT" -> "ymcui/cmrc2018" ["e"=1]
"ymcui/MacBERT" -> "destwang/CTCResources"
"ymcui/MacBERT" -> "luhua-rain/MRC_Competition_Dureader"
"ProHiryu/albert-chinese-ner" -> "ProHiryu/bert-chinese-ner"
"ProHiryu/albert-chinese-ner" -> "MarsRoger/albert_ner"
"ProHiryu/albert-chinese-ner" -> "EOA-AILab/NER-Chinese"
"ProHiryu/albert-chinese-ner" -> "yumath/bertNER"
"ProHiryu/albert-chinese-ner" -> "jiangnanboy/albert_lstm_crf_ner"
"ProHiryu/albert-chinese-ner" -> "kyzhouhzau/BERT-NER"
"ProHiryu/albert-chinese-ner" -> "brightmart/albert_zh"
"ProHiryu/albert-chinese-ner" -> "lonePatient/BERT-NER-Pytorch"
"ProHiryu/albert-chinese-ner" -> "CLUEbenchmark/CLUENER2020"
"ProHiryu/albert-chinese-ner" -> "xiaofei05/Distant-Supervised-Chinese-Relation-Extraction" ["e"=1]
"ProHiryu/albert-chinese-ner" -> "yongzhuo/Macadam"
"ProHiryu/albert-chinese-ner" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"ProHiryu/albert-chinese-ner" -> "percent4/ALBERT_NER_KERAS"
"ProHiryu/albert-chinese-ner" -> "FuYanzhe2/Name-Entity-Recognition"
"ProHiryu/albert-chinese-ner" -> "xuanzebi/BERT-CH-NER"
"THUNLP-AIPoet/WMPoetry" -> "THUNLP-AIPoet/Datasets"
"THUNLP-AIPoet/WMPoetry" -> "THUNLP-AIPoet/StylisticPoetry"
"THUNLP-AIPoet/WMPoetry" -> "THUNLP-AIPoet/MixPoet"
"google-research/albert" -> "brightmart/albert_zh"
"google-research/albert" -> "google-research/electra"
"google-research/albert" -> "zihangdai/xlnet" ["e"=1]
"google-research/albert" -> "CLUEbenchmark/CLUE"
"google-research/albert" -> "brightmart/roberta_zh"
"google-research/albert" -> "huawei-noah/Pretrained-Language-Model"
"google-research/albert" -> "lonePatient/albert_pytorch"
"google-research/albert" -> "google-research/text-to-text-transfer-transformer" ["e"=1]
"google-research/albert" -> "ymcui/Chinese-BERT-wwm"
"google-research/albert" -> "PaddlePaddle/ERNIE"
"google-research/albert" -> "ChineseGLUE/ChineseGLUE"
"google-research/albert" -> "macanv/BERT-BiLSTM-CRF-NER"
"google-research/albert" -> "bojone/bert4keras"
"google-research/albert" -> "ymcui/Chinese-ELECTRA"
"google-research/albert" -> "ymcui/Chinese-XLNet"
"alibaba/EasyTransfer" -> "huawei-noah/Pretrained-Language-Model"
"alibaba/EasyTransfer" -> "airaria/TextBrewer"
"alibaba/EasyTransfer" -> "bojone/SimCSE"
"alibaba/EasyTransfer" -> "ZhuiyiTechnology/pretrained-models"
"alibaba/EasyTransfer" -> "bohanli/BERT-flow"
"alibaba/EasyTransfer" -> "ymcui/Chinese-ELECTRA"
"alibaba/EasyTransfer" -> "DataTerminatorX/Keyword-BERT"
"alibaba/EasyTransfer" -> "alibaba/EasyNLP"
"alibaba/EasyTransfer" -> "yym6472/ConSERT"
"alibaba/EasyTransfer" -> "dbiir/UER-py"
"alibaba/EasyTransfer" -> "autoliuweijie/FastBERT"
"alibaba/EasyTransfer" -> "alibaba/AliceMind"
"alibaba/EasyTransfer" -> "ZhuiyiTechnology/simbert"
"alibaba/EasyTransfer" -> "CLUEbenchmark/FewCLUE"
"alibaba/EasyTransfer" -> "TsinghuaAI/CPM-1-Generate"
"wenyan-lang/book" -> "wenyan-lang/wyg"
"wenyan-lang/book" -> "LingDong-/qiji-font" ["e"=1]
"wenyan-lang/book" -> "antfu/wenyan-lang-vscode"
"wenyan-lang/book" -> "LingDong-/tk-fangsong-font"
"wenyan-lang/book" -> "LingDong-/cope"
"wenyan-lang/book" -> "wenyan-lang/ide"
"ukoethe/vigra" -> "ChienDevIT/dropwizard"
"ukoethe/vigra" -> "ilastik/ilastik" ["e"=1]
"ukoethe/vigra" -> "opengm/opengm"
"ukoethe/vigra" -> "ChienDevIT/fish-shell"
"ukoethe/vigra" -> "ChienDevIT/docz"
"ukoethe/vigra" -> "ChienDevIT/electron-vue"
"ukoethe/vigra" -> "ilastik/volumina"
"ukoethe/vigra" -> "ChienDevIT/javalin"
"ukoethe/vigra" -> "substack/node-ssh"
"liuhuanyong/CognitiveInference" -> "liuhuanyong/CommonSchemaKG"
"soulbliss/NLP-conference-compendium" -> "changwookjun/nlp-paper"
"soulbliss/NLP-conference-compendium" -> "PengboLiu/NLP-Papers"
"soulbliss/NLP-conference-compendium" -> "thunlp/RCPapers" ["e"=1]
"soulbliss/NLP-conference-compendium" -> "loujie0822/DeepIE"
"soulbliss/NLP-conference-compendium" -> "didi/ChineseNLP"
"soulbliss/NLP-conference-compendium" -> "IndexFziQ/GNN4NLP-Papers" ["e"=1]
"soulbliss/NLP-conference-compendium" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"yxcs/poems-db" -> "caoxingyu/chinese-gushiwen"
"yxcs/poems-db" -> "yaonphy/PoetryLibrary"
"yxcs/poems-db" -> "Werneror/Poetry"
"yxcs/poems-db" -> "panhaiqi/AncientPoetry"
"yxcs/poems-db" -> "chinese-poetry/chinese-poetry-npm"
"yxcs/poems-db" -> "JasonWade001/chtxt"
"yxcs/poems-db" -> "chinese-poetry/huajianji"
"yxcs/poems-db" -> "snowtraces/poetry-source"
"yxcs/poems-db" -> "nslogx/weapp-poem"
"yxcs/poems-db" -> "mapull/chinese-dictionary"
"yxcs/poems-db" -> "jiaeyan/Jiayan"
"yxcs/poems-db" -> "liuhuanyong/PoemMining"
"yxcs/poems-db" -> "javayhu/poetry"
"yxcs/poems-db" -> "Tianyijian/poetry"
"yxcs/poems-db" -> "NiuTrans/Classical-Modern"
"danan0755/Bert_Classifier" -> "rsanshierli/EasyBert"
"danan0755/Bert_Classifier" -> "yongzhuo/Macadam"
"NoneWait/cail2019" -> "caldreaming/CAIL"
"NoneWait/cail2019" -> "circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension"
"NoneWait/cail2019" -> "china-ai-law-challenge/CAIL2019"
"NoneWait/cail2019" -> "padeoe/cail2019"
"NoneWait/cail2019" -> "GuidoPaul/CAIL2019"
"NoneWait/cail2019" -> "huanghuidmml/cail2019_track2"
"NoneWait/cail2019" -> "china-ai-law-challenge/CAIL2020"
"NoneWait/cail2019" -> "ewrfcas/bert_cn_finetune"
"NoneWait/cail2019" -> "caitian521/QADomain"
"NoneWait/cail2019" -> "SunnyMarkLiu/lic2019-dureader2.0-rank2" ["e"=1]
"NoneWait/cail2019" -> "YingZiqiang/LES-MMRC-Summary"
"NoneWait/cail2019" -> "cooscao/BERT-Dureader" ["e"=1]
"NoneWait/cail2019" -> "shelleyHLX/cail"
"NoneWait/cail2019" -> "ymcui/cmrc2019" ["e"=1]
"thunderboom/text_similarity" -> "daniellibin/nCoV-2019-sentence-similarity"
"yya518/FinBERT" -> "ProsusAI/finBERT" ["e"=1]
"yya518/FinBERT" -> "valuesimplex/FinBERT"
"yya518/FinBERT" -> "MS20190155/Measuring-Corporate-Culture-Using-Machine-Learning" ["e"=1]
"yya518/FinBERT" -> "Earnings-Call-Dataset/MAEC-A-Multimodal-Aligned-Earnings-Conference-Call-Dataset-for-Financial-Risk-Prediction"
"yya518/FinBERT" -> "YangLinyi/FinNLP-Progress" ["e"=1]
"yya518/FinBERT" -> "lefterisloukas/edgar-crawler" ["e"=1]
"yya518/FinBERT" -> "psnonis/FinBERT"
"yya518/FinBERT" -> "bkelly-lab/ReplicationCrisis" ["e"=1]
"yya518/FinBERT" -> "AI4Finance-Foundation/FinNLP" ["e"=1]
"yya518/FinBERT" -> "mukut03/ESG-BERT"
"yya518/FinBERT" -> "GeminiLn/EarningsCall_Dataset"
"yya518/FinBERT" -> "icoxfog417/awesome-financial-nlp"
"yya518/FinBERT" -> "gtfintechlab/fomc-hawkish-dovish"
"yya518/FinBERT" -> "abhijeet3922/finbert_embedding"
"yya518/FinBERT" -> "yuanbit/FinBERT-QA"
"CLUEbenchmark/CLUEPretrainedModels" -> "CLUEbenchmark/CLUECorpus2020"
"CLUEbenchmark/CLUEPretrainedModels" -> "ZhuiyiTechnology/pretrained-models"
"CLUEbenchmark/CLUEPretrainedModels" -> "brightmart/roberta_zh"
"CLUEbenchmark/CLUEPretrainedModels" -> "ChineseGLUE/ChineseGLUE"
"CLUEbenchmark/CLUEPretrainedModels" -> "ymcui/Chinese-ELECTRA"
"CLUEbenchmark/CLUEPretrainedModels" -> "dbiir/UER-py"
"CLUEbenchmark/CLUEPretrainedModels" -> "brightmart/albert_zh"
"CLUEbenchmark/CLUEPretrainedModels" -> "CLUEbenchmark/CLUE"
"CLUEbenchmark/CLUEPretrainedModels" -> "huawei-noah/Pretrained-Language-Model"
"CLUEbenchmark/CLUEPretrainedModels" -> "airaria/TextBrewer"
"CLUEbenchmark/CLUEPretrainedModels" -> "ymcui/MacBERT"
"CLUEbenchmark/CLUEPretrainedModels" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"CLUEbenchmark/CLUEPretrainedModels" -> "ymcui/Chinese-XLNet"
"CLUEbenchmark/CLUEPretrainedModels" -> "zzy99/epidemic-sentence-pair"
"CLUEbenchmark/CLUEPretrainedModels" -> "zhaogaofeng611/TextMatch"
"ShenDezhou/CAIL" -> "renjunxiang/Competition_CAIL"
"ShenDezhou/CAIL" -> "shelleyHLX/text-classification"
"ShenDezhou/CAIL" -> "GuidoPaul/CAIL2019"
"SALT-NLP/MixText" -> "SanghunYun/UDA_pytorch" ["e"=1]
"SALT-NLP/MixText" -> "SALT-NLP/AAAI_CLF"
"SALT-NLP/MixText" -> "yumeng5/LOTClass"
"SALT-NLP/MixText" -> "johnson7788/MixText"
"SALT-NLP/MixText" -> "crux82/ganbert"
"SALT-NLP/MixText" -> "bohanli/BERT-flow"
"SALT-NLP/MixText" -> "facebookresearch/SentAugment" ["e"=1]
"SALT-NLP/MixText" -> "SALT-NLP/LADA"
"SALT-NLP/MixText" -> "princeton-nlp/EntityQuestions" ["e"=1]
"tongchangD/bert_for_corrector" -> "fushengwuyu/chinese_spelling_correction"
"tongchangD/bert_for_corrector" -> "tongchangD/bert_ner_for_corrector"
"tongchangD/bert_for_corrector" -> "whgaara/pytorch-soft-masked-bert"
"tongchangD/bert_for_corrector" -> "taishan1994/pytorch_bert_chinese_spell_correction"
"tongchangD/bert_for_corrector" -> "gitabtion/BertBasedCorrectionModels"
"tongchangD/bert_for_corrector" -> "beyondacm/Autochecker4Chinese"
"tongchangD/bert_for_corrector" -> "apanly/proofreadv1"
"tongchangD/bert_for_corrector" -> "Wingsdh/soft_masked_bert_reiteration"
"nltk/nltk_contrib" -> "nltk/nltk_data"
"nltk/nltk_book" -> "nltk/nltk.github.com"
"nltk/nltk_book" -> "nltk/nltk_papers"
"nltk/nltk_book" -> "nltk/nltk_teach"
"nltk/nltk_book" -> "nltk/nltk_contrib"
"nltk/nltk_book" -> "nltk/nltk_data"
"nltk/nltk_teach" -> "nltk/nltk_papers"
"DengBoCong/prompt-tuning" -> "DengBoCong/Algorithm"
"DengBoCong/prompt-tuning" -> "DengBoCong/WelcomePage"
"DengBoCong/prompt-tuning" -> "DengBoCong/aided_driving_app"
"autoliuweijie/FastBERT" -> "BitVoyage/FastBERT"
"autoliuweijie/FastBERT" -> "autoliuweijie/K-BERT"
"autoliuweijie/FastBERT" -> "airaria/TextBrewer"
"autoliuweijie/FastBERT" -> "JetRunner/BERT-of-Theseus"
"autoliuweijie/FastBERT" -> "bohanli/BERT-flow"
"autoliuweijie/FastBERT" -> "DataTerminatorX/Keyword-BERT"
"autoliuweijie/FastBERT" -> "ZhuiyiTechnology/pretrained-models"
"autoliuweijie/FastBERT" -> "huawei-noah/Pretrained-Language-Model"
"autoliuweijie/FastBERT" -> "brightmart/roberta_zh"
"autoliuweijie/FastBERT" -> "brightmart/albert_zh"
"autoliuweijie/FastBERT" -> "ZhuiyiTechnology/simbert"
"autoliuweijie/FastBERT" -> "CLUEbenchmark/CLUEPretrainedModels"
"autoliuweijie/FastBERT" -> "ymcui/Chinese-XLNet"
"autoliuweijie/FastBERT" -> "castorini/DeeBERT" ["e"=1]
"autoliuweijie/FastBERT" -> "ymcui/Chinese-ELECTRA"
"xuanyuan14/CACM" -> "CHIANGEL/Neural-Click-Model"
"xuanyuan14/CACM" -> "xuanyuan14/THUIR_WSDM_Cup"
"allenai/dont-stop-pretraining" -> "thunlp/SelectiveMasking"
"allenai/dont-stop-pretraining" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"allenai/dont-stop-pretraining" -> "zhusleep/pytorch_chinese_lm_pretrain"
"allenai/dont-stop-pretraining" -> "princeton-nlp/LM-BFF" ["e"=1]
"allenai/dont-stop-pretraining" -> "xuyige/BERT4doc-Classification"
"allenai/dont-stop-pretraining" -> "allenai/longformer"
"allenai/dont-stop-pretraining" -> "yym6472/ConSERT"
"allenai/dont-stop-pretraining" -> "bojone/Pattern-Exploiting-Training"
"allenai/dont-stop-pretraining" -> "thunlp/ERNIE"
"VITA-Group/BERT-Tickets" -> "huggingface/block_movement_pruning"
"caspiankexin/people-daily-crawler-date" -> "fangj/rmrb"
"caspiankexin/people-daily-crawler-date" -> "prnake/CialloCorpus"
"goxdve/BiLSTM-CRF" -> "lonePatient/BiLSTM-CRF-NER-PyTorch"
"goxdve/BiLSTM-CRF" -> "jidasheng/bi-lstm-crf"
"goxdve/BiLSTM-CRF" -> "llcing/BiLSTM-CRF-ChineseNER.pytorch"
"jianzhu/dl-notes" -> "panyang/AINLP-Resource"
"jianzhu/dl-notes" -> "didi/ChineseNLP"
"jianzhu/dl-notes" -> "msgi/nlp-journey"
"jianzhu/dl-notes" -> "NTMC-Community/MatchZoo-py"
"jianzhu/dl-notes" -> "zibuyu/research_tao"
"jianzhu/dl-notes" -> "CastellanZhang/alphaFM" ["e"=1]
"jianzhu/dl-notes" -> "zhanggyb/nndl" ["e"=1]
"jianzhu/dl-notes" -> "songyingxin/BERT-pytorch"
"jianzhu/dl-notes" -> "liuhuanyong/ChineseNLPCorpus"
"jianzhu/dl-notes" -> "imsheridan/DeepRec" ["e"=1]
"jianzhu/dl-notes" -> "Pysamlam/Tips-of-Feature-engineering" ["e"=1]
"jianzhu/dl-notes" -> "hscspring/All4NLP"
"jianzhu/dl-notes" -> "yangxudong/deeplearning" ["e"=1]
"mickeysjm/TaxoExpan" -> "mickeysjm/HiExpan"
"mickeysjm/TaxoExpan" -> "sheryc/HEF"
"mickeysjm/TaxoExpan" -> "mickeysjm/awesome-taxonomy"
"mickeysjm/TaxoExpan" -> "mickeysjm/SynSetMine-pytorch"
"mickeysjm/TaxoExpan" -> "mickeysjm/SetExpan"
"mickeysjm/TaxoExpan" -> "teapot123/CoRel"
"mickeysjm/TaxoExpan" -> "yueyu1030/STEAM"
"maastrichtlawtech/awesome-legal-nlp" -> "Liquid-Legal-Institute/Legal-Text-Analytics"
"maastrichtlawtech/awesome-legal-nlp" -> "HazyResearch/legalbench"
"maastrichtlawtech/awesome-legal-nlp" -> "neelguha/legal-ml-datasets"
"maastrichtlawtech/awesome-legal-nlp" -> "coastalcph/lex-glue"
"maastrichtlawtech/awesome-legal-nlp" -> "ICLRandD/Blackstone"
"maastrichtlawtech/awesome-legal-nlp" -> "thunlp/LegalPapers"
"maastrichtlawtech/awesome-legal-nlp" -> "Liquid-Legal-Institute/Legal-Ontologies"
"maastrichtlawtech/awesome-legal-nlp" -> "openlegaldata/awesome-legal-data"
"maastrichtlawtech/awesome-legal-nlp" -> "TracyWang95/legal-prompts-for-gpt" ["e"=1]
"maastrichtlawtech/awesome-legal-nlp" -> "Breakend/PileOfLaw"
"maastrichtlawtech/awesome-legal-nlp" -> "reglab/casehold"
"maastrichtlawtech/awesome-legal-nlp" -> "Jeryi-Sun/LLM-and-Law"
"maastrichtlawtech/awesome-legal-nlp" -> "LexPredict/lexpredict-lexnlp"
"maastrichtlawtech/awesome-legal-nlp" -> "maastrichtlawtech/gdsr"
"maastrichtlawtech/awesome-legal-nlp" -> "Liquid-Legal-Institute/Legal-LLMs-GPTs"
"DataTerminatorX/Keyword-BERT" -> "alibaba-edu/simple-effective-text-matching"
"DataTerminatorX/Keyword-BERT" -> "sunyilgdx/SIFRank_zh" ["e"=1]
"DataTerminatorX/Keyword-BERT" -> "ZhuiyiTechnology/pretrained-models"
"DataTerminatorX/Keyword-BERT" -> "pengshuang/Text-Similarity"
"DataTerminatorX/Keyword-BERT" -> "wuba/qa_match"
"DataTerminatorX/Keyword-BERT" -> "autoliuweijie/FastBERT"
"DataTerminatorX/Keyword-BERT" -> "yym6472/ConSERT"
"HoyTta0/KnowledgeDistillation" -> "qiangsiwei/bert_distill"
"HoyTta0/KnowledgeDistillation" -> "Lisennlp/TinyBert"
"HoyTta0/KnowledgeDistillation" -> "murray-z/knowledge_distillation"
"HoyTta0/KnowledgeDistillation" -> "kevinmtian/distill-bert"
"mali19064/LSTM-CRF-pytorch-faster" -> "Hyfred/Pytroch_NER_tutorial"
"mali19064/LSTM-CRF-pytorch-faster" -> "jiesutd/RichWordSegmentor"
"berniey/hanziconv" -> "zedom1/Error-Detection"
"fastnlp/fastHan" -> "fastnlp/fastNLP"
"fastnlp/fastHan" -> "fastnlp/CPT"
"fastnlp/fastHan" -> "baidu/DDParser"
"fastnlp/fastHan" -> "liuhuanyong/ChineseSemanticKB"
"fastnlp/fastHan" -> "loujie0822/DeepIE"
"fastnlp/fastHan" -> "didi/ChineseNLP"
"fastnlp/fastHan" -> "ZhuiyiTechnology/pretrained-models"
"fastnlp/fastHan" -> "425776024/nlpcda"
"fastnlp/fastHan" -> "CLUEbenchmark/CLUENER2020"
"fastnlp/fastHan" -> "ymcui/Chinese-ELECTRA"
"fastnlp/fastHan" -> "LeeSureman/Flat-Lattice-Transformer"
"fastnlp/fastHan" -> "airaria/TextBrewer"
"fastnlp/fastHan" -> "ChineseGLUE/ChineseGLUE"
"fastnlp/fastHan" -> "fastnlp/TENER"
"fastnlp/fastHan" -> "autoliuweijie/FastBERT"
"moon-hotel/DeepLearningWithMe" -> "moon-hotel/MachineLearningWithMe"
"moon-hotel/DeepLearningWithMe" -> "moon-hotel/TransformerTranslation"
"moon-hotel/DeepLearningWithMe" -> "moon-hotel/BertWithPretrained"
"shawroad/NLP_pytorch_project" -> "zhengyanzhao1997/NLP-model"
"shawroad/NLP_pytorch_project" -> "lonePatient/BERT-NER-Pytorch"
"shawroad/NLP_pytorch_project" -> "zhaogaofeng611/TextMatch"
"shawroad/NLP_pytorch_project" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"shawroad/NLP_pytorch_project" -> "DSXiangLi/ChineseNER"
"shawroad/NLP_pytorch_project" -> "920232796/bert_seq2seq"
"shawroad/NLP_pytorch_project" -> "shawroad/CoSENT_Pytorch"
"shawroad/NLP_pytorch_project" -> "loujie0822/Pre-trained-Models"
"shawroad/NLP_pytorch_project" -> "TingFree/NLPer-Arsenal"
"shawroad/NLP_pytorch_project" -> "v-mipeng/LexiconAugmentedNER"
"shawroad/NLP_pytorch_project" -> "stanleylsx/entity_extractor_by_ner"
"shawroad/NLP_pytorch_project" -> "universal-ie/UIE" ["e"=1]
"shawroad/NLP_pytorch_project" -> "zhusleep/pytorch_chinese_lm_pretrain"
"shawroad/NLP_pytorch_project" -> "ShannonAI/mrc-for-flat-nested-ner"
"shawroad/NLP_pytorch_project" -> "luhua-rain/MRC_Competition_Dureader"
"panyang/AINLP-Resource" -> "zhuyuanxiang/NLTK-Python-CN"
"luge-ai/luge-ai" -> "AtmaHou/MetaDialog" ["e"=1]
"luge-ai/luge-ai" -> "jd-aig/nlp_baai"
"luge-ai/luge-ai" -> "SimmerChan/corpus"
"luge-ai/luge-ai" -> "baidu/DDParser"
"luge-ai/luge-ai" -> "ha-lins/MetaLearning4NLP-Papers" ["e"=1]
"freelawproject/courtlistener" -> "freelawproject/juriscraper"
"freelawproject/courtlistener" -> "freelawproject/reporters-db"
"freelawproject/courtlistener" -> "freelawproject/eyecite"
"freelawproject/courtlistener" -> "freelawproject/recap-chrome"
"freelawproject/courtlistener" -> "harvard-lil/capstone"
"freelawproject/courtlistener" -> "freelawproject/courts-db"
"freelawproject/courtlistener" -> "freelawproject/x-ray"
"freelawproject/courtlistener" -> "freelawproject/citation-regexes"
"freelawproject/courtlistener" -> "unitedstates/citation"
"freelawproject/courtlistener" -> "HazyResearch/legalbench"
"freelawproject/courtlistener" -> "freelawproject/doctor"
"freelawproject/courtlistener" -> "Liquid-Legal-Institute/Legal-Text-Analytics"
"freelawproject/courtlistener" -> "ICLRandD/Blackstone"
"freelawproject/courtlistener" -> "freelawproject/free.law"
"freelawproject/courtlistener" -> "adelevie/walverine"
"iiscleap/Coswara-Data" -> "virufy/virufy-data"
"iiscleap/Coswara-Data" -> "hernanmd/COVID-19-train-audio"
"iiscleap/Coswara-Data" -> "virufy/virufy-covid"
"iiscleap/Coswara-Data" -> "cam-mobsys/covid19-sounds-neurips"
"iiscleap/Coswara-Data" -> "Saranga7/covid19--cough-diagnosis"
"iiscleap/Coswara-Data" -> "walzter/COVID_Cough"
"iiscleap/Coswara-Data" -> "stanfordmlgroup/selfsupervised-lungandheartsounds"
"ZhuiyiTechnology/WoBERT" -> "ZhuiyiTechnology/pretrained-models"
"ZhuiyiTechnology/WoBERT" -> "ZhuiyiTechnology/simbert"
"ZhuiyiTechnology/WoBERT" -> "bojone/SPACES"
"ZhuiyiTechnology/WoBERT" -> "ZhuiyiTechnology/t5-pegasus"
"ZhuiyiTechnology/WoBERT" -> "JunnYu/WoBERT_pytorch"
"ZhuiyiTechnology/WoBERT" -> "bohanli/BERT-flow"
"ZhuiyiTechnology/WoBERT" -> "ymcui/Chinese-ELECTRA"
"ZhuiyiTechnology/WoBERT" -> "LeeSureman/Flat-Lattice-Transformer"
"ZhuiyiTechnology/WoBERT" -> "YunwenTechnology/Unilm"
"ZhuiyiTechnology/WoBERT" -> "nilboy/gaic_track3_pair_sim" ["e"=1]
"ZhuiyiTechnology/WoBERT" -> "brightmart/roberta_zh"
"ZhuiyiTechnology/WoBERT" -> "xv44586/ccf_2020_qa_match" ["e"=1]
"ZhuiyiTechnology/WoBERT" -> "bojone/BERT-whitening"
"ZhuiyiTechnology/WoBERT" -> "airaria/TextBrewer"
"ZhuiyiTechnology/WoBERT" -> "ZhuiyiTechnology/roformer-sim"
"antfu/wenyan-lang-vscode" -> "voldikss/vim-wenyan"
"antfu/wenyan-lang-vscode" -> "wenyan-lang/book"
"wangjiezju1988/aichpoem" -> "wangjiezju1988/kgqa"
"wangjiezju1988/aichpoem" -> "hululuzhu/chinese-ai-writing-share"
"liushaoweihua/Keras-Bert-Kbqa" -> "liushaoweihua/keras-bert-ner"
"liushaoweihua/Keras-Bert-Kbqa" -> "AI-YULU/KBQA-BERT"
"qiangsiwei/bert_distill" -> "HoyTta0/KnowledgeDistillation"
"qiangsiwei/bert_distill" -> "kevinmtian/distill-bert"
"qiangsiwei/bert_distill" -> "Lisennlp/TinyBert"
"qiangsiwei/bert_distill" -> "intersun/PKD-for-BERT-Model-Compression"
"qiangsiwei/bert_distill" -> "BitVoyage/FastBERT"
"qiangsiwei/bert_distill" -> "pengming617/text_matching"
"qiangsiwei/bert_distill" -> "CLUEbenchmark/DistilBert"
"qiangsiwei/bert_distill" -> "airaria/TextBrewer"
"qiangsiwei/bert_distill" -> "tacchinotacchi/distil-bilstm"
"qiangsiwei/bert_distill" -> "qiufengyuyi/sequence_tagging"
"qiangsiwei/bert_distill" -> "ArthurRizar/tensorflow_ernie"
"qiangsiwei/bert_distill" -> "lonePatient/NeZha_Chinese_PyTorch" ["e"=1]
"alexa/bort" -> "yitu-opensource/ConvBert"
"alexa/bort" -> "google-research/multilingual-t5"
"alexa/bort" -> "bohanli/BERT-flow"
"alexa/bort" -> "monologg/DistilKoBERT" ["e"=1]
"THUNLP-AIPoet/BERT-CCPoem" -> "THUNLP-AIPoet/PaperList"
"THUNLP-AIPoet/BERT-CCPoem" -> "THUNLP-AIPoet/Datasets"
"THUNLP-AIPoet/BERT-CCPoem" -> "THUNLP-AIPoet/WMPoetry"
"THUNLP-AIPoet/BERT-CCPoem" -> "THUNLP-AIPoet/MixPoet"
"THUNLP-AIPoet/BERT-CCPoem" -> "Ethan-yt/guwenbert"
"zhaogaofeng611/TextMatch" -> "pengshuang/Text-Similarity"
"zhaogaofeng611/TextMatch" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"zhaogaofeng611/TextMatch" -> "terrifyzhao/text_matching"
"zhaogaofeng611/TextMatch" -> "pengming617/text_matching"
"zhaogaofeng611/TextMatch" -> "wangle1218/deep_text_matching"
"zhaogaofeng611/TextMatch" -> "MachineLP/TextMatch"
"zhaogaofeng611/TextMatch" -> "YJiangcm/Chinese-sentence-pair-modeling"
"zhaogaofeng611/TextMatch" -> "rsanshierli/EasyBert"
"zhaogaofeng611/TextMatch" -> "JepsonWong/Text_Matching"
"zhaogaofeng611/TextMatch" -> "CLUEbenchmark/CLUEPretrainedModels"
"zhaogaofeng611/TextMatch" -> "pengming617/bert_textMatching"
"zhaogaofeng611/TextMatch" -> "ZhuiyiTechnology/simbert"
"zhaogaofeng611/TextMatch" -> "yongzhuo/nlp_xiaojiang"
"zhaogaofeng611/TextMatch" -> "alibaba-edu/simple-effective-text-matching"
"zhaogaofeng611/TextMatch" -> "zzy99/epidemic-sentence-pair"
"ROBINADC/BiGRU-CRF-with-Attention-for-NER" -> "DeShuiYu/nlp_from_dsy"
"poonlap/linuxbook" -> "tlwg/thpronun"
"xmxoxo/vector_server" -> "xmxoxo/Tencent_ChineseEmbedding_Process"
"xmxoxo/vector_server" -> "wangjiezju1988/kgqa"
"yangwei-nlp/bert_seq2seq" -> "mryuan0428/Title_Generator_CN"
"zzy99/epidemic-sentence-pair" -> "HuiResearch/epidemicTextMatch" ["e"=1]
"zzy99/epidemic-sentence-pair" -> "daniellibin/nCoV-2019-sentence-similarity"
"zzy99/epidemic-sentence-pair" -> "Makaixin/similar-sentence-pairs-in-epidemic" ["e"=1]
"zzy99/epidemic-sentence-pair" -> "ShuaichiLi/Chinese-sentence-similarity-task"
"zzy99/epidemic-sentence-pair" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"zzy99/epidemic-sentence-pair" -> "CLUEbenchmark/CLUEPretrainedModels"
"zzy99/epidemic-sentence-pair" -> "nilboy/gaic_track3_pair_sim" ["e"=1]
"zzy99/epidemic-sentence-pair" -> "zhaogaofeng611/TextMatch"
"zzy99/epidemic-sentence-pair" -> "xv44586/ccf_2020_qa_match" ["e"=1]
"zzy99/epidemic-sentence-pair" -> "ZhuiyiTechnology/pretrained-models"
"zzy99/epidemic-sentence-pair" -> "WuHuRestaurant/xf_event_extraction2020Top1" ["e"=1]
"zzy99/epidemic-sentence-pair" -> "qiangsiwei/bert_distill"
"zzy99/epidemic-sentence-pair" -> "pengming617/text_matching"
"zzy99/epidemic-sentence-pair" -> "WangShengguang/ccks-2020" ["e"=1]
"zzy99/epidemic-sentence-pair" -> "huanghuidmml/cail2019_track2"
"HorieYuan/TransformerTextSummarization" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"HorieYuan/TransformerTextSummarization" -> "ztz818/Automatic-generation-of-text-summaries"
"HorieYuan/TransformerTextSummarization" -> "Valuebai/Text-Auto-Summarization"
"HorieYuan/TransformerTextSummarization" -> "fangpings/BERT-Transformer-for-Summarization" ["e"=1]
"HorieYuan/TransformerTextSummarization" -> "yongzhuo/nlg-yongzhuo"
"HorieYuan/TransformerTextSummarization" -> "CourteousWood/text-summarization"
"HorieYuan/TransformerTextSummarization" -> "qingkongzhiqian/GPT2-Summary"
"HorieYuan/TransformerTextSummarization" -> "yamonc/New-Pytorch-Chinese"
"HorieYuan/TransformerTextSummarization" -> "BeHappyForMe/UniLM_summarization"
"HorieYuan/TransformerTextSummarization" -> "hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization-Chinese"
"HorieYuan/TransformerTextSummarization" -> "pingyuan2016/word2vec_textrank"
"HorieYuan/TransformerTextSummarization" -> "bojone/SPACES"
"HorieYuan/TransformerTextSummarization" -> "bxianghui/summarizer"
"God-Fish-X/Extractable-automatic-Text" -> "zhangxu999/AutoSummarization"
"YunwenTechnology/Unilm" -> "liucongg/UnilmChatchitRobot"
"YunwenTechnology/Unilm" -> "CLUEbenchmark/CLGE"
"YunwenTechnology/Unilm" -> "qingkongzhiqian/GPT2-Summary"
"YunwenTechnology/Unilm" -> "ZhuiyiTechnology/pretrained-models"
"YunwenTechnology/Unilm" -> "ZhuiyiTechnology/simbert"
"YunwenTechnology/Unilm" -> "YunwenTechnology/QueryGeneration"
"YunwenTechnology/Unilm" -> "liucongg/GPT2-NewsTitle"
"YunwenTechnology/Unilm" -> "zhongerqiandan/pretrained-unilm-Chinese"
"YunwenTechnology/Unilm" -> "bojone/SPACES"
"YunwenTechnology/Unilm" -> "percent4/UniLM_Chinese_DEMO"
"YunwenTechnology/Unilm" -> "ZhuiyiTechnology/t5-pegasus"
"YunwenTechnology/Unilm" -> "xv44586/ccf_2020_qa_match" ["e"=1]
"YunwenTechnology/Unilm" -> "CLUEbenchmark/CLUEPretrainedModels"
"YunwenTechnology/Unilm" -> "renmada/t5-pegasus-pytorch"
"YunwenTechnology/Unilm" -> "920232796/bert_seq2seq"
"wavewangyue/ner" -> "loujie0822/DeepIE"
"wavewangyue/ner" -> "lonePatient/BERT-NER-Pytorch"
"wavewangyue/ner" -> "z814081807/DeepNER"
"wavewangyue/ner" -> "DA-southampton/ner"
"wavewangyue/ner" -> "CLUEbenchmark/CLUENER2020"
"wavewangyue/ner" -> "LeeSureman/Flat-Lattice-Transformer"
"wavewangyue/ner" -> "luopeixiang/named_entity_recognition"
"wavewangyue/ner" -> "DSXiangLi/ChineseNER"
"wavewangyue/ner" -> "v-mipeng/LexiconAugmentedNER"
"wavewangyue/ner" -> "liuwei1206/LEBERT"
"wavewangyue/ner" -> "qiufengyuyi/sequence_tagging"
"wavewangyue/ner" -> "geektcp/UeWoW" ["e"=1]
"wavewangyue/ner" -> "mislav/contacts" ["e"=1]
"wavewangyue/ner" -> "jiesutd/LatticeLSTM"
"wavewangyue/ner" -> "zhensherlock/intellij-platform-git-stats-plugin" ["e"=1]
"liuhuanyong/EventKGNELL" -> "liuhuanyong/DescriptionKBExtraction"
"LeeSureman/Batch_Parallel_LatticeLSTM" -> "RowitZou/LGN"
"LeeSureman/Batch_Parallel_LatticeLSTM" -> "v-mipeng/LexiconAugmentedNER"
"LeeSureman/Batch_Parallel_LatticeLSTM" -> "Houlong66/lattice_lstm_with_pytorch"
"LeeSureman/Batch_Parallel_LatticeLSTM" -> "guitaowufeng/LR-CNN"
"LeeSureman/Batch_Parallel_LatticeLSTM" -> "bamtercelboo/LatticeLSTM"
"LeeSureman/Batch_Parallel_LatticeLSTM" -> "fastnlp/TENER"
"charlesXu86/char_featurizer" -> "howl-anderson/hanzi_char_featurizer"
"ThuYShao/BERT-PLI-IJCAI2020" -> "Thesharing/LFESM"
"ThuYShao/BERT-PLI-IJCAI2020" -> "ruc-wjyu/IOT-Match"
"ThuYShao/BERT-PLI-IJCAI2020" -> "Wenorm/BERT-PLI"
"thunlp/CLAIM" -> "thunlp/LegalPapers"
"thunlp/CLAIM" -> "thunlp/TopJudge"
"thunlp/CLAIM" -> "thunlp/QAJudge"
"thunlp/CLAIM" -> "thunlp/LegalPLMs"
"thunlp/CLAIM" -> "ruc-wjyu/IOT-Match"
"THUNLP-AIPoet/MixPoet" -> "THUNLP-AIPoet/WMPoetry"
"THUNLP-AIPoet/MixPoet" -> "THUNLP-AIPoet/StylisticPoetry"
"THUNLP-AIPoet/MixPoet" -> "THUNLP-AIPoet/PaperList"
"THUNLP-AIPoet/MixPoet" -> "THUNLP-AIPoet/BERT-CCPoem"
"THUNLP-AIPoet/MixPoet" -> "THUNLP-AIPoet/Datasets"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "HorieYuan/TransformerTextSummarization"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "yamonc/New-Pytorch-Chinese"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "qingkongzhiqian/GPT2-Summary"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "ztz818/Automatic-generation-of-text-summaries"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "yongzhuo/nlg-yongzhuo"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "liucongg/GPT2-NewsTitle"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "ZhuiyiTechnology/t5-pegasus"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "God-Fish-X/Extractable-automatic-Text"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization-Chinese"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "bojone/SPACES"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "SunnyGJing/t5-pegasus-chinese"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "rohithreddy024/Text-Summarizer-Pytorch" ["e"=1]
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "Valuebai/Text-Auto-Summarization"
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "fangpings/BERT-Transformer-for-Summarization" ["e"=1]
"LowinLi/Text-Summarizer-Pytorch-Chinese" -> "PolarisRisingWar/text_summarization_chinese"
"yongzhuo/Macropodus" -> "yongzhuo/nlg-yongzhuo"
"yongzhuo/Macropodus" -> "bojone/word-discovery"
"yongzhuo/Macropodus" -> "yongzhuo/Macadam"
"yongzhuo/Macropodus" -> "yongzhuo/nlp_xiaojiang"
"yongzhuo/Macropodus" -> "murray-z/text_analysis_tools"
"yongzhuo/Macropodus" -> "sunyilgdx/SIFRank_zh" ["e"=1]
"yongzhuo/Macropodus" -> "blmoistawinde/HarvestText"
"yongzhuo/Macropodus" -> "dongrixinyu/chinese_keyphrase_extractor"
"yongzhuo/Macropodus" -> "smoothnlp/SmoothNLP"
"yongzhuo/Macropodus" -> "ownthink/Jiagu"
"yongzhuo/Macropodus" -> "yongzhuo/Keras-TextClassification"
"yongzhuo/Macropodus" -> "ProHiryu/albert-chinese-ner"
"yongzhuo/Macropodus" -> "ZhuiyiTechnology/pretrained-models"
"yongzhuo/Macropodus" -> "SeanLee97/xmnlp"
"yongzhuo/Macropodus" -> "ArtistScript/FastTextRank"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "ZihanWangKi/CrossWeigh"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "juntaoy/biaffine-ner"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "allanj/ner_with_dependency"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "yhcc/OntoNotes-5.0-NER"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "Nealcly/BiLSTM-LAN"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "yuchenlin/OntoNotes-5.0-NER-BIO"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "juand-r/entity-recognition-datasets"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "INK-USC/TriggerNER"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "neulab/Text-Summarization-Papers" ["e"=1]
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "neulab/nn4nlp-concepts" ["e"=1]
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "yahshibu/nested-ner-tacl2020-transformers"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "ShannonAI/mrc-for-flat-nested-ner"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "allanj/pytorch_neural_crf"
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "cambridgeltl/MTL-Bioinformatics-2016" ["e"=1]
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" -> "ha-lins/MetaLearning4NLP-Papers" ["e"=1]
"DefuLi/Emotional-Analysis-of-Internet-News" -> "DefuLi/Emotional-Analysis-Transformers2.0-Bert"
"DefuLi/Emotional-Analysis-of-Internet-News" -> "DefuLi/Emotional-Analysis-Bert-As-Service"
"DefuLi/Emotional-Analysis-of-Internet-News" -> "yuexiashanren/emotion-analysis-3"
"DefuLi/Emotional-Analysis-of-Internet-News" -> "linhaow/TextClassification"
"DefuLi/Emotional-Analysis-of-Internet-News" -> "unclegem/Sentiment-analysis"
"DefuLi/Emotional-Analysis-of-Internet-News" -> "gekelly/JD-Comment_emotional-analysis"
"saurabhkulkarni77/DistillBERT" -> "xiongma/roberta-wwm-base-distill"
"JetRunner/BERT-of-Theseus" -> "qiufengyuyi/bert-of-theseus-tf"
"JetRunner/BERT-of-Theseus" -> "intersun/PKD-for-BERT-Model-Compression"
"JetRunner/BERT-of-Theseus" -> "autoliuweijie/FastBERT"
"JetRunner/BERT-of-Theseus" -> "airaria/TextBrewer"
"JetRunner/BERT-of-Theseus" -> "pmichel31415/are-16-heads-really-better-than-1"
"LiangsLi/ChineseHomophones" -> "WenRichard/DIAC2019-Adversarial-Attack-Share"
"Vincent131499/Multi_Label_Classifier_finetune" -> "lushishuai/BERT-ROBERTA-pytorch-multi-label-classification"
"Vincent131499/Multi_Label_Classifier_finetune" -> "hscspring/Multi-Label-Text-Classification-for-Chinese"
"Vincent131499/Multi_Label_Classifier_finetune" -> "Vincent131499/TextClassifier_Transformer"
"jidasheng/bi-lstm-crf" -> "goxdve/BiLSTM-CRF"
"jidasheng/bi-lstm-crf" -> "allanj/pytorch_neural_crf"
"jidasheng/bi-lstm-crf" -> "threelittlemonkeys/lstm-crf-pytorch"
"jidasheng/bi-lstm-crf" -> "ZubinGou/NER-BiLSTM-CRF-PyTorch"
"jidasheng/bi-lstm-crf" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"jidasheng/bi-lstm-crf" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "zzy99/epidemic-sentence-pair"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "CLUEbenchmark/CLUEPretrainedModels"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "WenRichard/DIAC2019-Adversarial-Attack-Share"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "liuhuanyong/SiameseSentenceSimilarity"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "ZhuiyiTechnology/simbert"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "zhaogaofeng611/TextMatch"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "yanqiangmiffy/sentence-similarity"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "cjymz886/sentence-similarity"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "jd-aig/nlp_baai"
"ShuaichiLi/Chinese-sentence-similarity-task" -> "JepsonWong/Text_Matching"
"liucongg/UnilmChatchitRobot" -> "YunwenTechnology/Unilm"
"liucongg/UnilmChatchitRobot" -> "YunwenTechnology/QueryGeneration"
"crux82/ganbert" -> "crux82/ganbert-pytorch"
"crux82/ganbert" -> "SALT-NLP/MixText"
"whgaara/tensorflow-faspell" -> "whgaara/pytorch-transformerXL-LongTextClassify"
"whgaara/tensorflow-faspell" -> "whgaara/pytorch-roberta"
"cliang1453/BOND" -> "amzn/amazon-weak-ner-needle"
"cliang1453/BOND" -> "dmis-lab/GeNER" ["e"=1]
"cliang1453/BOND" -> "NorskRegnesentral/weak-supervision-for-NER"
"cliang1453/BOND" -> "shangjingbo1226/AutoNER"
"cliang1453/BOND" -> "yumeng5/RoSTER"
"cliang1453/BOND" -> "v-mipeng/LexiconNER"
"cliang1453/BOND" -> "zwkatgithub/DSCAU"
"cliang1453/BOND" -> "kangISU/Conf-MPU-DS-NER"
"cliang1453/BOND" -> "juntaoy/biaffine-ner"
"cliang1453/BOND" -> "BatsResearch/wiser"
"freelawproject/reporters-db" -> "freelawproject/eyecite"
"freelawproject/reporters-db" -> "freelawproject/seal-rookery"
"freelawproject/reporters-db" -> "freelawproject/recap-chrome"
"freelawproject/reporters-db" -> "freelawproject/courts-db"
"freelawproject/reporters-db" -> "freelawproject/free.law"
"freelawproject/reporters-db" -> "freelawproject/juriscraper"
"freelawproject/reporters-db" -> "freelawproject/judge-pics"
"freelawproject/reporters-db" -> "adelevie/walverine"
"freelawproject/reporters-db" -> "freelawproject/doctor"
"bojone/dgcnn_for_reading_comprehension" -> "bojone/keras_radam"
"bojone/dgcnn_for_reading_comprehension" -> "natureLanguageQing/radam_dgcnn_for_reading_comprehension"
"sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check" -> "FDChongLi/TwoWaysToImproveCSC"
"sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check" -> "ACL2020SpellGCN/SpellGCN"
"sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check" -> "voidful/ChineseErrorDataset"
"sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check" -> "destwang/DCN"
"sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check" -> "destwang/CTC2021"
"fushengwuyu/chinese_spelling_correction" -> "whgaara/pytorch-soft-masked-bert"
"fushengwuyu/chinese_spelling_correction" -> "tongchangD/bert_for_corrector"
"fushengwuyu/chinese_spelling_correction" -> "gitabtion/BertBasedCorrectionModels"
"AI4Finance-Foundation/Quantifying-ESG-Alpha-using-Scholar-Big-Data-ICAIF-2020" -> "databricks-industry-solutions/esg-scoring"
"AI4Finance-Foundation/Quantifying-ESG-Alpha-using-Scholar-Big-Data-ICAIF-2020" -> "edgetrader/esg-nlp"
"dainlp/acl2020-transition-discontinuous-ner" -> "foxlf823/sodner"
"dainlp/acl2020-transition-discontinuous-ner" -> "berlino/disco_em19"
"dainlp/acl2020-transition-discontinuous-ner" -> "yhcc/BARTNER"
"chatopera/chatbot.catalog.customer-service" -> "lizhe2004/chatbot-list"
"chatopera/chatbot.catalog.customer-service" -> "ZhuiyiTechnology/pretrained-models"
"yumeng5/Spherical-Text-Embedding" -> "mickeysjm/SetExpan"
"yumeng5/Spherical-Text-Embedding" -> "yumeng5/JoSH"
"yumeng5/Spherical-Text-Embedding" -> "mickeysjm/HiExpan"
"yumeng5/Spherical-Text-Embedding" -> "yumeng5/WeSTClass"
"yumeng5/Spherical-Text-Embedding" -> "yuzhimanhua/HIMECat"
"yumeng5/Spherical-Text-Embedding" -> "mickeysjm/SynSetMine-pytorch"
"yumeng5/Spherical-Text-Embedding" -> "mickeysjm/TaxoExpan"
"yumeng5/Spherical-Text-Embedding" -> "yumeng5/WeSHClass"
"BitVoyage/FastBERT" -> "autoliuweijie/FastBERT"
"BitVoyage/FastBERT" -> "qiangsiwei/bert_distill"
"brightmart/multi-label_classification" -> "huanghuidmml/cail2019_track2"
"coughresearch/cough-classification" -> "coughresearch/Cough-data"
"coughresearch/cough-classification" -> "monk1337/Mixclu"
"coughresearch/Cough-data" -> "coughresearch/cough-classification"
"coughresearch/Cough-data" -> "coughresearch/cough-research-papers"
"coughresearch/Cough-data" -> "monk1337/Mixclu"
"kamalkraj/ALBERT-TF2.0" -> "kpe/bert-for-tf2"
"kamalkraj/ALBERT-TF2.0" -> "kamalkraj/BERT-NER-TF"
"hscspring/Multi-Label-Text-Classification-for-Chinese" -> "murray-z/Multi_Label_TextCNN"
"percent4/multi-label-classification-4-event-type" -> "percent4/keras_bert_multi_label_cls"
"saiwaiyanyu/bi-lstm-crf-ner-tf2.0" -> "xuxingya/tf2crf"
"DengBoCong/Algorithm" -> "DengBoCong/aided_driving_app"
"DengBoCong/Algorithm" -> "DengBoCong/WelcomePage"
"DengBoCong/Algorithm" -> "DengBoCong/prompt-tuning"
"zhanlaoban/CCF_BDCI_2019_datafountain350" -> "zhanlaoban/NLP_competitions"
"zhanlaoban/CCF_BDCI_2019_datafountain350" -> "zhanlaoban/NLP_PEMDC"
"zhanlaoban/CCF_BDCI_2019_datafountain350" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization-Chinese" -> "hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization"
"hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization-Chinese" -> "zingp/pointer-generator-pytorch"
"hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization-Chinese" -> "yamonc/New-Pytorch-Chinese"
"LieluoboAi/radish" -> "ericperfect/libtorch_tokenizer"
"LieluoboAi/radish" -> "dhpollack/huggingface_libtorch"
"LieluoboAi/radish" -> "ruediger/libbert"
"SVAIGBA/WMSeg" -> "SVAIGBA/TwASP"
"SVAIGBA/WMSeg" -> "tyistyler/Bert-Chinese-NER"
"SVAIGBA/WMSeg" -> "SVAIGBA/paper_list"
"SVAIGBA/WMSeg" -> "sinovation/ZEN"
"SVAIGBA/WMSeg" -> "cuhksz-nlp/McASP"
"SVAIGBA/WMSeg" -> "hankcs/multi-criteria-cws"
"SVAIGBA/TwASP" -> "SVAIGBA/WMSeg"
"wangle1218/deep_text_matching" -> "terrifyzhao/text_matching"
"wangle1218/deep_text_matching" -> "zhaogaofeng611/TextMatch"
"wangle1218/deep_text_matching" -> "ZhuiyiTechnology/simbert"
"wangle1218/deep_text_matching" -> "pengming617/text_matching"
"wangle1218/deep_text_matching" -> "alibaba-edu/simple-effective-text-matching-pytorch"
"wangle1218/deep_text_matching" -> "pengshuang/Text-Similarity"
"wangle1218/deep_text_matching" -> "YJiangcm/Chinese-sentence-pair-modeling"
"thunlp/jec-qa" -> "haoxizhong/pytorch-worker"
"Splinter0/CoughCNN" -> "coughresearch/cough-research-papers"
"ShannonAI/CorefQA" -> "mandarjoshi90/coref"
"ShannonAI/CorefQA" -> "yuvalkirstain/s2e-coref"
"ShannonAI/CorefQA" -> "vdobrovolskii/wl-coref"
"ShannonAI/CorefQA" -> "pitrack/incremental-coref"
"ShannonAI/CorefQA" -> "conll/reference-coreference-scorers"
"ShannonAI/CorefQA" -> "shtoshni/fast-coref"
"ShannonAI/CorefQA" -> "emorynlp/coref-hoi"
"ShannonAI/CorefQA" -> "lxucs/coref-hoi"
"coughresearch/cough-research-papers" -> "coughresearch/Cough-data"
"coughresearch/cough-research-papers" -> "coughresearch/cough-classification"
"coughresearch/cough-research-papers" -> "coughresearch/Cough-signal-processing"
"coughresearch/cough-research-papers" -> "monk1337/Mixclu"
"coughresearch/cough-research-papers" -> "Splinter0/CoughCNN"
"linhaow/TextClassification" -> "cxy229/BDCI2019-SENTIMENT-CLASSIFICATION"
"linhaow/TextClassification" -> "DefuLi/Emotional-Analysis-Transformers2.0-Bert"
"linhaow/TextClassification" -> "guoday/CCF-BDCI-Sentiment-Analysis-Baseline"
"linhaow/TextClassification" -> "zhanlaoban/CCF_BDCI_2019_datafountain350"
"linhaow/TextClassification" -> "zhanlaoban/Transformers_for_Text_Classification"
"linhaow/TextClassification" -> "DefuLi/Emotional-Analysis-of-Internet-News"
"linhaow/TextClassification" -> "zzy99/epidemic-sentence-pair"
"linhaow/TextClassification" -> "Makaixin/Correlation-between-requirements-and-achievements"
"linhaow/TextClassification" -> "zhanlaoban/NLP_competitions"
"linhaow/TextClassification" -> "finlay-liu/kaggle_public"
"ShenDezhou/lawa" -> "hecongqing/Legal-Charge-Prediction"
"ShenDezhou/lawa" -> "wangyizhen/lawdict"
"ckmarkoh/AcrosticPoem" -> "XingxingZhang/rnnpg"
"ckmarkoh/AcrosticPoem" -> "Inndy/sligen"
"ckmarkoh/AcrosticPoem" -> "fumin/ntm" ["e"=1]
"foxlf823/sodner" -> "dainlp/acl2020-transition-discontinuous-ner"
"zheng-yuwei/multi-label-classification" -> "littletiger0712/text-classification-mutli-label"
"hellonlp/classifier_multi_label" -> "hellonlp/classifier_multi_label_seq2seq_attention"
"hellonlp/classifier_multi_label" -> "hellonlp/classifier_multi_label_denses"
"hellonlp/classifier_multi_label" -> "lushishuai/BERT-ROBERTA-pytorch-multi-label-classification"
"hellonlp/classifier_multi_label" -> "hellonlp/classifier-multi-label"
"MarsRoger/albert_ner" -> "grallage/ALBERT-BiLSTM-CRF-NER"
"MarsRoger/albert_ner" -> "percent4/ALBERT_NER_KERAS"
"MarsRoger/albert_ner" -> "percent4/ALBERT_4_Time_Recognition"
"MarsRoger/albert_ner" -> "jiangnanboy/albert_lstm_crf_ner"
"CLUEbenchmark/CLGE" -> "YunwenTechnology/Unilm"
"CLUEbenchmark/CLGE" -> "yongzhuo/nlg-yongzhuo"
"CLUEbenchmark/CLGE" -> "bojone/SPACES"
"CLUEbenchmark/CLGE" -> "bojone/t5_in_bert4keras"
"CLUEbenchmark/CLGE" -> "qingkongzhiqian/GPT2-Summary"
"CLUEbenchmark/CLGE" -> "CLUEbenchmark/ELECTRA"
"yongzhuo/Macadam" -> "ProHiryu/albert-chinese-ner"
"yongzhuo/Macadam" -> "yongzhuo/Macropodus"
"yongzhuo/Macadam" -> "danan0755/Bert_Classifier"
"yongzhuo/Macadam" -> "zhaogaofeng611/TextMatch"
"yongzhuo/Macadam" -> "CLOVEXCWZ/NER_DEMO"
"intersun/PKD-for-BERT-Model-Compression" -> "qiangsiwei/bert_distill"
"intersun/PKD-for-BERT-Model-Compression" -> "JetRunner/BERT-of-Theseus"
"intersun/PKD-for-BERT-Model-Compression" -> "bzantium/pytorch-PKD-for-BERT-compression"
"intersun/PKD-for-BERT-Model-Compression" -> "intersun/CoDIR"
"graykode/ALBERT-Pytorch" -> "lonePatient/albert_pytorch"
"graykode/ALBERT-Pytorch" -> "dhlee347/pytorchic-bert" ["e"=1]
"ml-distribution/chinese-corpus" -> "nonamestreet/weixin_public_corpus"
"ml-distribution/chinese-corpus" -> "liwenzhu/corpusZh"
"ml-distribution/chinese-corpus" -> "xinydev/NovelConversationCorpus"
"pyunits/pyunit-address" -> "pyunits/pyunit-ner"
"pyunits/pyunit-address" -> "yihenglu/chinese-address-segment"
"thuiar/OKD-Reading-List" -> "thuiar/TEXTOIR"
"thuiar/OKD-Reading-List" -> "thuiar/DeepAligned-Clustering"
"thuiar/OKD-Reading-List" -> "thuiar/Adaptive-Decision-Boundary"
"thuiar/OKD-Reading-List" -> "thuiar/TEXTOIR-DEMO"
"thuiar/OKD-Reading-List" -> "thuiar/CDAC-plus"
"stanleylsx/entity_extractor_by_pointer" -> "stanleylsx/app_comments_spider"
"stanleylsx/entity_extractor_by_pointer" -> "stanleylsx/bert_nlu_joint"
"stanleylsx/entity_extractor_by_pointer" -> "stanleylsx/image_classification"
"stanleylsx/entity_extractor_by_pointer" -> "stanleylsx/entity_extractor_by_ner"
"stanleylsx/entity_extractor_by_pointer" -> "stanleylsx/entity_extractor"
"stanleylsx/entity_extractor_by_pointer" -> "stanleylsx/uie_torch"
"stanleylsx/entity_extractor_by_pointer" -> "xhw205/GPLinker_torch" ["e"=1]
"gaozhanfire/CCF-BDCI2019_Entity_Discovery" -> "xiong666/ccf_financial_negative"
"gaozhanfire/CCF-BDCI2019_Entity_Discovery" -> "417liangjunjun/financial_NER"
"gaozhanfire/CCF-BDCI2019_Entity_Discovery" -> "ksboy/lic2020-ee"
"xiong666/ccf_financial_negative" -> "gaozhanfire/CCF-BDCI2019_Entity_Discovery"
"xiong666/ccf_financial_negative" -> "Chevalier1024/CCF-BDCI-ABSA"
"xiong666/ccf_financial_negative" -> "rebornZH/2019-CCF-BDCI-NLP"
"jiangnanboy/albert_lstm_crf_ner" -> "MarsRoger/albert_ner"
"jiangnanboy/albert_lstm_crf_ner" -> "grallage/ALBERT-BiLSTM-CRF-NER"
"jiangnanboy/albert_lstm_crf_ner" -> "percent4/ALBERT_NER_KERAS"
"jiangnanboy/albert_lstm_crf_ner" -> "ProHiryu/albert-chinese-ner"
"jiangnanboy/albert_lstm_crf_ner" -> "jiangnanboy/text_grapher"
"jiangnanboy/albert_lstm_crf_ner" -> "percent4/ALBERT_4_Time_Recognition"
"jiangnanboy/albert_lstm_crf_ner" -> "jiangnanboy/albert_re"
"caishiqing/joint-mrc" -> "YingZiqiang/LES-MMRC-Summary"
"caishiqing/joint-mrc" -> "SunnyMarkLiu/les-military-mrc-rank7"
"caishiqing/joint-mrc" -> "hy-struggle/ccks_ner"
"CyberZHG/keras-gradient-accumulation" -> "CyberZHG/keras-adaptive-softmax"
"CyberZHG/keras-radam" -> "CyberZHG/keras-lookahead"
"CyberZHG/keras-radam" -> "titu1994/keras_rectified_adam"
"CyberZHG/keras-radam" -> "bojone/keras_lookahead"
"CyberZHG/keras-radam" -> "OverLordGoldDragon/keras-adamw"
"CyberZHG/keras-radam" -> "LiyuanLucasLiu/RAdam" ["e"=1]
"CyberZHG/keras-radam" -> "GLambard/AdamW_Keras"
"CyberZHG/keras-radam" -> "CyberZHG/keras-xlnet"
"CyberZHG/keras-radam" -> "CyberZHG/keras-gradient-accumulation"
"Earnings-Call-Dataset/MAEC-A-Multimodal-Aligned-Earnings-Conference-Call-Dataset-for-Financial-Risk-Prediction" -> "GeminiLn/EarningsCall_Dataset"
"Earnings-Call-Dataset/MAEC-A-Multimodal-Aligned-Earnings-Conference-Call-Dataset-for-Financial-Risk-Prediction" -> "RCJansonVTFL/SeekingAlphaWebScrape"
"Earnings-Call-Dataset/MAEC-A-Multimodal-Aligned-Earnings-Conference-Call-Dataset-for-Financial-Risk-Prediction" -> "midas-research/m3a-acl"
"Earnings-Call-Dataset/MAEC-A-Multimodal-Aligned-Earnings-Conference-Call-Dataset-for-Financial-Risk-Prediction" -> "nilijing/Earnings_Call_Analyzed_By_NLP"
"ontonotes/conll-formatted-ontonotes-5.0" -> "propbank/propbank-release" ["e"=1]
"ontonotes/conll-formatted-ontonotes-5.0" -> "yuchenlin/OntoNotes-5.0-NER-BIO"
"ontonotes/conll-formatted-ontonotes-5.0" -> "shayneobrien/coreference-resolution"
"ontonotes/conll-formatted-ontonotes-5.0" -> "yhcc/OntoNotes-5.0-NER"
"ontonotes/conll-formatted-ontonotes-5.0" -> "conll/reference-coreference-scorers"
"ontonotes/conll-formatted-ontonotes-5.0" -> "kentonl/e2e-coref"
"ontonotes/conll-formatted-ontonotes-5.0" -> "clarkkev/deep-coref"
"Law-AI/semantic-segmentation" -> "Law-AI/automatic-charge-identification"
"Law-AI/semantic-segmentation" -> "Law-AI/DELSumm"
"Law-AI/semantic-segmentation" -> "Law-AI/summarization"
"freelawproject/courts-db" -> "freelawproject/reporters-db"
"freelawproject/courts-db" -> "freelawproject/judge-pics"
"freelawproject/courts-db" -> "freelawproject/eyecite"
"freelawproject/courts-db" -> "anseljh/casebot"
"zingp/NLP" -> "zingp/pointer-generator-pytorch"
"zingp/NLP" -> "hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization-Chinese"
"zingp/NLP" -> "becxer/pointer-generator" ["e"=1]
"zingp/NLP" -> "997261095/point-generate"
"percent4/ALBERT_4_Time_Recognition" -> "MarsRoger/albert_ner"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "alibaba-edu/simple-effective-text-matching"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "pengshuang/Text-Similarity"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "zhaogaofeng611/TextMatch"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "pengming617/text_matching"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "BangLiu/ArticlePairMatching"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "coetaur0/ESIM"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "JepsonWong/Text_Matching"
"alibaba-edu/simple-effective-text-matching-pytorch" -> "wangle1218/deep_text_matching"
"imrdong/cged-crf" -> "voidful/ChineseErrorDataset"
"NorskRegnesentral/weak-supervision-for-NER" -> "BatsResearch/wiser"
"NorskRegnesentral/weak-supervision-for-NER" -> "sanmusunrise/ARNs"
"NorskRegnesentral/weak-supervision-for-NER" -> "cliang1453/BOND"
"hankcs/aho-corasick" -> "hankcs/AhoCorasickDoubleArrayTrie"
"hankcs/aho-corasick" -> "komiya-atsushi/darts-java"
"hankcs/aho-corasick" -> "robert-bor/aho-corasick"
"sildar/potara" -> "boudinfl/sume"
"sildar/potara" -> "UKPLab/acl2017-interactive_summarizer"
"sildar/potara" -> "LucasEstevam/CNNSummarizer"
"Moeinh77/Chatbot-with-TensorFlow-and-Keras" -> "Moeinh77/Kaggle-House-Prices-Advanced-Regression-Techniques"
"Moeinh77/Chatbot-with-TensorFlow-and-Keras" -> "Moeinh77/jump-start-machine-learning"
"wanglke/Soft-Masked-BERT" -> "whgaara/pytorch-soft-masked-bert"
"zingp/pointer-generator-pytorch" -> "hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization-Chinese"
"zingp/pointer-generator-pytorch" -> "zingp/NLP"
"zingp/pointer-generator-pytorch" -> "hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization"
"OpenCOVID19CoughCheck/CoughCheckApp" -> "coughresearch/Cough-data"
"OpenCOVID19CoughCheck/CoughCheckApp" -> "hernanmd/COVID-19-train-audio"
"OpenCOVID19CoughCheck/CoughCheckApp" -> "shresthagrawal/detect-now"
"jiacheng-ye/DocL-NER" -> "jiacheng-ye/UANet"
"freelawproject/doctor" -> "freelawproject/citation-regexes"
"zhongerqiandan/pretrained-unilm-Chinese" -> "kyang888/unilm"
"zhongerqiandan/pretrained-unilm-Chinese" -> "percent4/UniLM_Chinese_DEMO"
"zhongerqiandan/pretrained-unilm-Chinese" -> "BeHappyForMe/UniLM_summarization"
"Scagin/CCTC" -> "Scagin/Classical2Modern"
"Lisennlp/TinyBert" -> "yinmingjun/TinyBERT"
"Lisennlp/TinyBert" -> "qiangsiwei/bert_distill"
"Lisennlp/TinyBert" -> "HoyTta0/KnowledgeDistillation"
"Lisennlp/TinyBert" -> "huawei-noah/Pretrained-Language-Model"
"rebornZH/2019-CCF-BDCI-NLP" -> "Chevalier1024/CCF-BDCI-ABSA"
"rebornZH/2019-CCF-BDCI-NLP" -> "Makaixin/Correlation-between-requirements-and-achievements"
"rebornZH/2019-CCF-BDCI-NLP" -> "A-Rain/BDCI2019-Negative_Finance_Info_Judge"
"rebornZH/2019-CCF-BDCI-NLP" -> "xiong666/ccf_financial_negative"
"rebornZH/2019-CCF-BDCI-NLP" -> "gaozhanfire/CCF-BDCI2019_Entity_Discovery"
"rebornZH/2019-CCF-BDCI-NLP" -> "light8lee/2019-BDCI-FinancialEntityDiscovery" ["e"=1]
"yuanbit/FinBERT-QA" -> "yuanbit/FinBERT-QA-notebooks"
"hallochen/Adversarial-Attack" -> "WenRichard/DIAC2019-Adversarial-Attack-Share"
"FBI1314/textClassification" -> "TianWuYuJiangHenShou/Multi-label_Text_classification"
"CNMan/XDHYCD7th" -> "bamboo512/ModernChineseDict"
"CNMan/XDHYCD7th" -> "CNMan/HYDZD"
"CNMan/XDHYCD7th" -> "CNMan/XDHYDCD"
"CNMan/XDHYCD7th" -> "mapull/chinese-dictionary"
"CNMan/XDHYCD7th" -> "takushun-wu/WenJinMincho" ["e"=1]
"CNMan/XDHYDCD" -> "CNMan/HYDZD"
"Nealcly/BiLSTM-LAN" -> "DianboWork/Graph4CNER"
"Nealcly/BiLSTM-LAN" -> "CPF-NLPR/AT4ChineseNER"
"Nealcly/BiLSTM-LAN" -> "INK-USC/TriggerNER"
"Nealcly/BiLSTM-LAN" -> "fastnlp/TENER"
"Nealcly/BiLSTM-LAN" -> "v-mipeng/LexiconAugmentedNER"
"Nealcly/BiLSTM-LAN" -> "juntaoy/biaffine-ner"
"Nealcly/BiLSTM-LAN" -> "lingluodlut/Att-ChemdNER" ["e"=1]
"Nealcly/BiLSTM-LAN" -> "PhantomGrapes/MultiDigraphNER"
"Nealcly/BiLSTM-LAN" -> "allanj/ner_with_dependency"
"Nealcly/BiLSTM-LAN" -> "RowitZou/LGN"
"Nealcly/BiLSTM-LAN" -> "jiachenwestlake/Cross-Domain_NER"
"acphile/MCCWS" -> "cuhksz-nlp/McASP"
"zhanlaoban/NLP_competitions" -> "zhanlaoban/CCF_BDCI_2019_datafountain350"
"smartschat/cort" -> "gregdurrett/berkeley-entity" ["e"=1]
"smartschat/cort" -> "jkkummerfeld/berkeley-coreference-analyser"
"smartschat/cort" -> "clarkkev/deep-coref"
"smartschat/cort" -> "swiseman/nn_coref"
"JohnGiorgi/DeCLUTR" -> "yym6472/ConSERT"
"JohnGiorgi/DeCLUTR" -> "UCSD-AI4H/CERT"
"yuzhimanhua/MetaCat" -> "yuzhimanhua/HiGitClass"
"yuzhimanhua/MetaCat" -> "yuzhimanhua/HIMECat"
"SunnyMarkLiu/les-military-mrc-rank7" -> "caishiqing/joint-mrc"
"SunnyMarkLiu/les-military-mrc-rank7" -> "YingZiqiang/LES-MMRC-Summary"
"nltk/nltk_papers" -> "nltk/nltk_teach"
"yuzhimanhua/HiGitClass" -> "yuzhimanhua/MetaCat"
"yuzhimanhua/HiGitClass" -> "yuzhimanhua/HIMECat"
"yuzhimanhua/HiGitClass" -> "yuzhimanhua/MAPLE"
"yuzhimanhua/HiGitClass" -> "yuzhimanhua/FUTEX"
"1250658183/Chinese-Error-Checking" -> "mnhng/HeadFilt"
"prometheusXN/LADAN" -> "prometheusXN/D-LADAN"
"prometheusXN/LADAN" -> "thunlp/TopJudge"
"prometheusXN/LADAN" -> "thunlp/QAJudge"
"prometheusXN/LADAN" -> "PolarisRisingWar/pytorch_ljp"
"prometheusXN/LADAN" -> "mly-nlp/LJP-MSJudge"
"prometheusXN/LADAN" -> "Deriq-Qian-Dong/R-former"
"prometheusXN/LADAN" -> "WAPAY/EPM"
"prometheusXN/LADAN" -> "PolarisRisingWar/LJP_Collection"
"hertz-pj/BDCI2019_Financial_Entities_Baseline" -> "EliasCai/CCF-negative-entity"
"rjk-git/CCF_Negative_Financial_Information_and_Subject_Judgment" -> "GeneZC/BERTFinanceNeg"
"rjk-git/CCF_Negative_Financial_Information_and_Subject_Judgment" -> "EliasCai/CCF-negative-entity"
"morningmoni/HiLAP" -> "yumeng5/WeSHClass"
"morningmoni/HiLAP" -> "uhh-lt/BlurbGenreCollection-HMC"
"morningmoni/HiLAP" -> "ShimShim46/HFT-CNN"
"morningmoni/HiLAP" -> "Alibaba-NLP/HiAGM"
"morningmoni/HiLAP" -> "wzh9969/contrastive-htc"
"morningmoni/HiLAP" -> "RandolphVI/Hierarchical-Multi-Label-Text-Classification"
"morningmoni/HiLAP" -> "HKUST-KnowComp/DeepGraphCNNforTexts"
"morningmoni/HiLAP" -> "kk7nc/HDLTex"
"ZhuiyiTechnology/AutoIE" -> "allanj/ner_incomplete_annotation"
"laddie132/NLP-Interview" -> "yanqiangmiffy/NLP-Interview-Notes"
"laddie132/NLP-Interview" -> "Vincent131499/NLP-Algorithm-Interview"
"CLUEbenchmark/ELECTRA" -> "CLUEbenchmark/LightLM"
"CLUEbenchmark/ELECTRA" -> "CLUEbenchmark/DistilBert"
"CLUEbenchmark/ELECTRA" -> "brightmart/xlnet_zh"
"yinmingjun/TinyBERT" -> "Lisennlp/TinyBert"
"ufal/acl2019_nested_ner" -> "thecharm/boundary-aware-nested-ner"
"CIRCSE/LT4HALA" -> "frederick-wang/tongjiazi-resources"
"CIRCSE/LT4HALA" -> "Jihuai-wpy/bert-ancient-chinese"
"CIRCSE/LT4HALA" -> "jizijing/C-CLUE"
"CIRCSE/LT4HALA" -> "hsc748NLP/sikufenci"
"percent4/ALBERT_NER_KERAS" -> "MarsRoger/albert_ner"
"percent4/ALBERT_NER_KERAS" -> "jiangnanboy/albert_lstm_crf_ner"
"percent4/ALBERT_NER_KERAS" -> "liushaoweihua/keras-bert-ner"
"percent4/ALBERT_NER_KERAS" -> "TinkerMob/keras_albert_model"
"AidenHuen/FGN-NER" -> "AidenHuen/Chinese-Character-Feature-Resource"
"yahshibu/nested-ner-tacl2020-transformers" -> "thecharm/boundary-aware-nested-ner"
"yahshibu/nested-ner-tacl2020-transformers" -> "yahshibu/nested-ner-tacl2020"
"yahshibu/nested-ner-tacl2020-transformers" -> "meizhiju/layered-bilstm-crf"
"yahshibu/nested-ner-tacl2020-transformers" -> "cslydia/BiFlaG"
"yahshibu/nested-ner-tacl2020-transformers" -> "sanmusunrise/ARNs"
"yahshibu/nested-ner-tacl2020-transformers" -> "ufal/acl2019_nested_ner"
"yahshibu/nested-ner-tacl2020-transformers" -> "LorrinWWW/Pyramid"
"blcuicall/GEC-Reading-List" -> "blcuicall/YACLC"
"blcuicall/GEC-Reading-List" -> "blcuicall/SimpDefiner"
"blcuicall/GEC-Reading-List" -> "blcuicall/litmind-dictionary"
"SuffolkLITLab/docassemble-ALToolbox" -> "SuffolkLITLab/docassemble-ALWeaver"
"Vincent131499/TextClassifier_Transformer" -> "Vincent131499/Multi_Label_Classifier_finetune"
"KoichiYasuoka/UD-Kanbun" -> "UniversalDependencies/UD_Classical_Chinese-Kyoto"
"KoichiYasuoka/UD-Kanbun" -> "KoichiYasuoka/GuwenCOMBO"
"KoichiYasuoka/UD-Kanbun" -> "CIRCSE/LT4HALA"
"didi/athena" -> "didichuxing/athena"
"didi/athena" -> "LianjiaTech/athena"
"thecharm/boundary-aware-nested-ner" -> "sanmusunrise/ARNs"
"thecharm/boundary-aware-nested-ner" -> "yahshibu/nested-ner-tacl2020-transformers"
"thecharm/boundary-aware-nested-ner" -> "yahshibu/nested-ner-tacl2020"
"thecharm/boundary-aware-nested-ner" -> "meizhiju/layered-bilstm-crf"
"thecharm/boundary-aware-nested-ner" -> "fishjh2/merge_label"
"thecharm/boundary-aware-nested-ner" -> "cslydia/BiFlaG"
"thecharm/boundary-aware-nested-ner" -> "ufal/acl2019_nested_ner"
"thecharm/boundary-aware-nested-ner" -> "tricktreat/locate-and-label"
"ilastik/volumina" -> "ilastik/lazyflow"
"yitu-opensource/ConvBert" -> "alexa/bort"
"bojone/perturbed_masking" -> "LividWo/Perturbed-Masking"
"Moeinh77/Transformers-for-abstractive-summarization" -> "Moeinh77/jump-start-machine-learning"
"CyberZHG/keras-lookahead" -> "CyberZHG/keras-radam"
"CHIANGEL/Neural-Click-Model" -> "CHIANGEL/GraphCM"
"CLUEbenchmark/DistilBert" -> "CLUEbenchmark/ELECTRA"
"CLUEbenchmark/DistilBert" -> "saurabhkulkarni77/DistillBERT"
"yzhan238/CGExpan" -> "PxYu/entity-expansion"
"yumeng5/JoSH" -> "yumeng5/CatE"
"yuzhimanhua/MATCH" -> "yuzhimanhua/HIMECat"
"yuzhimanhua/MATCH" -> "yuzhimanhua/MICoL"
"yuzhimanhua/MATCH" -> "yuzhimanhua/HiGitClass"
"yuzhimanhua/MATCH" -> "yuzhimanhua/MetaCat"
"rashadulrakib/short-text-clustering-enhancement" -> "hmllmh/RSTC"
"rashadulrakib/short-text-clustering-enhancement" -> "hadifar/stc_clustering"
"xmxoxo/Tencent_ChineseEmbedding_Process" -> "xmxoxo/vector_server"
"pyunits/pyunit-ner" -> "pyunits/pyunit-address"
"lxucs/coref-hoi" -> "emorynlp/coref-hoi"
"lxucs/coref-hoi" -> "pitrack/incremental-coref"
"lxucs/coref-hoi" -> "shtoshni/long-doc-coref"
"lxucs/coref-hoi" -> "vdobrovolskii/wl-coref"
"ShannonAI/CorefQA" -> "HKUST-KnowComp/Pronoun-Coref"
"ShannonAI/CorefQA" -> "bkntr/coref-ee"
"ShannonAI/CorefQA" -> "HKUST-KnowComp/Pronoun-Coref-KG"
"xmxoxo/BERT-Vector" -> "mathCrazyy/text_classify"
"lxj5957/CLTS-Dataset" -> "lxj5957/CLTS-plus-Dataset"
"nltk/nltk.github.com" -> "nltk/nltk_data"
"freelawproject/seal-rookery" -> "freelawproject/judge-pics"
"BatsResearch/taglets" -> "BatsResearch/efsl"
"huanghuidmml/cail2019_track2" -> "NoneWait/cail2019"
"huanghuidmml/cail2019_track2" -> "padeoe/cail2019"
"huanghuidmml/cail2019_track2" -> "GuidoPaul/CAIL2019"
"huanghuidmml/cail2019_track2" -> "china-ai-law-challenge/CAIL2019"
"huanghuidmml/cail2019_track2" -> "brightmart/multi-label_classification"
"huanghuidmml/cail2019_track2" -> "circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension"
"huanghuidmml/cail2019_track2" -> "shelleyHLX/cail"
"huanghuidmml/cail2019_track2" -> "caldreaming/CAIL"
"huanghuidmml/cail2019_track2" -> "prometheusXN/LADAN"
"thuiar/CDAC-plus" -> "thuiar/DeepAligned-Clustering"
"thuiar/CDAC-plus" -> "thuiar/AWESOME-Dialogue"
"ShannonAI/mrc-for-flat-nested-ner" -> "ShannonAI/mrc-for-flat-nested-ner"
"jiangnanboy/movie_kg" -> "jiangnanboy/text_grapher"
"IBM/kbqa-relation-linking" -> "IBM/Open-KG-canonicalization"
"xieranmaya/china-city-area-zip-data" -> "grezbo/cn_zipcode"
"Makaixin/Correlation-between-requirements-and-achievements" -> "rebornZH/2019-CCF-BDCI-NLP"
"Makaixin/Correlation-between-requirements-and-achievements" -> "Chevalier1024/CCF-BDCI-ABSA"
"cslydia/BiFlaG" -> "yahshibu/nested-ner-tacl2020"
"cslydia/BiFlaG" -> "fishjh2/merge_label"
"cslydia/BiFlaG" -> "sanmusunrise/ARNs"
"china-ai-law-challenge/CAIL2020" -> "NoneWait/cail2019"
"china-ai-law-challenge/CAIL2020" -> "china-ai-law-challenge/CAIL2021"
"china-ai-law-challenge/CAIL2020" -> "circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension"
"china-ai-law-challenge/CAIL2020" -> "caldreaming/CAIL"
"china-ai-law-challenge/CAIL2020" -> "china-ai-law-challenge/CAIL2019"
"china-ai-law-challenge/CAIL2020" -> "Executedone/CAIL2021_LAJS"
"china-ai-law-challenge/CAIL2020" -> "padeoe/cail2019"
"china-ai-law-challenge/CAIL2020" -> "dalinvip/Awesome-Law-NLP-Research-Work"
"china-ai-law-challenge/CAIL2020" -> "thunlp/LegalPapers"
"china-ai-law-challenge/CAIL2020" -> "ShenDezhou/CAIL"
"china-ai-law-challenge/CAIL2020" -> "bojone/SPACES"
"bojone/Pattern-Exploiting-Training" -> "bojone/P-tuning"
"bojone/Pattern-Exploiting-Training" -> "sunyilgdx/NSP-BERT"
"bojone/Pattern-Exploiting-Training" -> "CLUEbenchmark/FewCLUE"
"daniellibin/nCoV-2019-sentence-similarity" -> "lsq357/rank6"
"daniellibin/nCoV-2019-sentence-similarity" -> "thunderboom/text_similarity"
"YingZiqiang/LES-MMRC-Summary" -> "caishiqing/joint-mrc"
"YingZiqiang/LES-MMRC-Summary" -> "SunnyMarkLiu/les-military-mrc-rank7"
"YingZiqiang/LES-MMRC-Summary" -> "SunnyMarkLiu/lic2019-dureader2.0-rank2" ["e"=1]
"YingZiqiang/LES-MMRC-Summary" -> "NoneWait/cail2019"
"YingZiqiang/LES-MMRC-Summary" -> "huminghao16/MTMSN" ["e"=1]
"stanfordmlgroup/selfsupervised-lungandheartsounds" -> "kaen2891/stethoscope-guided_supervised_contrastive_learning"
"thunlp/CorefBERT" -> "shtoshni/fast-coref"
"cslydia/Hire-NER" -> "jiacheng-ye/DocL-NER"
"CLUEbenchmark/LightLM" -> "CLUEbenchmark/ELECTRA"
"whgaara/pytorch-roberta" -> "whgaara/pytorch-transformerXL-LongTextClassify"
"whgaara/pytorch-roberta" -> "whgaara/tensorflow-faspell"
"zhuyuanxiang/NLTK-Python-CN" -> "panyang/AINLP-Resource"
"izisong/new-words-discovery" -> "NCXiaozui/New-Word-Detection"
"izisong/new-words-discovery" -> "Ushiao/wordiscovery"
"liushaoweihua/keras-bert-ner" -> "liushaoweihua/Keras-Bert-Kbqa"
"liushaoweihua/keras-bert-ner" -> "stephen-v/zh-NER-keras"
"liushaoweihua/keras-bert-ner" -> "percent4/ALBERT_NER_KERAS"
"Scagin/Classical2Modern" -> "Scagin/CCTC"
"WenRichard/DIAC2019-Adversarial-Attack-Share" -> "julielin123/DIAC2019-DQD-Based-on-Adversarial-Attack"
"WenRichard/DIAC2019-Adversarial-Attack-Share" -> "hallochen/Adversarial-Attack"
"WenRichard/DIAC2019-Adversarial-Attack-Share" -> "activemodest/DIAC"
"WenRichard/DIAC2019-Adversarial-Attack-Share" -> "LiangsLi/ChineseHomophones"
"ciarrocki/LibreLaw" -> "mscarey/AuthoritySpoke"
"kyang888/unilm" -> "zhongerqiandan/pretrained-unilm-Chinese"
"xiongma/roberta-wwm-base-distill" -> "saurabhkulkarni77/DistillBERT"
"boudinfl/sume" -> "sildar/potara"
"guoxw/wenshu-" -> "yangtaoxf/spider_lawyer_case_doc"
"bojone/keras_radam" -> "bojone/memm"
"officeanddragons/awesome-lawtech" -> "lacuna-technologies/clerkent"
"officeanddragons/awesome-lawtech" -> "DotDoug/TreatiseAI"
"mryuan0428/Title_Generator_CN" -> "yangwei-nlp/bert_seq2seq"
"mryuan0428/Title_Generator_CN" -> "percent4/UniLM_Chinese_DEMO"
"yahshibu/nested-ner-tacl2020" -> "cslydia/BiFlaG"
"allanj/neural-partialCRF" -> "sutd-statnlp/statnlp-neural"
"monk1337/Unbox" -> "monk1337/Mixclu"
"tyistyler/Bert-Chinese-NER" -> "tyistyler/Bert-Bi-LSTM-CRF"
"voidful/ChineseErrorDataset" -> "imrdong/cged-crf"
"SuperMap/address-matching" -> "qq1065507891/ChineseAddressNER"
"AlonEirew/cross-doc-event-coref" -> "AlonEirew/extract-wec"
"minqukanq/extract-video-keyframe" -> "minqukanq/transformer-pytorch"
"SVAIGBA/paper_list" -> "SVAIGBA/CDKGen"
"julielin123/DIAC2019-DQD-Based-on-Adversarial-Attack" -> "WenRichard/DIAC2019-Adversarial-Attack-Share"
"julielin123/DIAC2019-DQD-Based-on-Adversarial-Attack" -> "hallochen/Adversarial-Attack"
"tyistyler/Bert-Bi-LSTM-CRF" -> "tyistyler/Bert-Chinese-RE"
"tyistyler/Bert-Bi-LSTM-CRF" -> "tyistyler/Bert-Chinese-NER"
"Moeinh77/Image-Captioning-with-Beam-Search" -> "Moeinh77/Kaggle-House-Prices-Advanced-Regression-Techniques"
"NastaranBa/preprocessing-for-word-representation" -> "NastaranBa/ACE-for-Sarcasm-Detection"
"EliasCai/CCF-negative-entity" -> "GeneZC/BERTFinanceNeg"
"EliasCai/CCF-negative-entity" -> "rjk-git/CCF_Negative_Financial_Information_and_Subject_Judgment"
"accordproject/cicero-word-add-in" -> "accordproject/cicero-word-add-in-deprecated"
"Menyoupingxiaoguo/DDMessageCallback" -> "Menyoupingxiaoguo/Kafka"
"Menyoupingxiaoguo/Kafka" -> "Menyoupingxiaoguo/DDMessageCallback"
"Menyoupingxiaoguo/Kafka" -> "Menyoupingxiaoguo/AliyunSendMail"
"Menyoupingxiaoguo/Kafka" -> "Menyoupingxiaoguo/MQTT"
"Menyoupingxiaoguo/Kafka" -> "Menyoupingxiaoguo/AliyunRDS"
"1148270327/TextSummary" -> "CourteousWood/text-summarization"
"GeneZC/BERTFinanceNeg" -> "rjk-git/CCF_Negative_Financial_Information_and_Subject_Judgment"
"GeneZC/BERTFinanceNeg" -> "EliasCai/CCF-negative-entity"
"dayihengliu/CRQDA" -> "dicalab-scu/Research"
"NastaranBa/ACE-for-Sarcasm-Detection" -> "NastaranBa/preprocessing-for-word-representation"
"IBM/gnn-taxo-construction" -> "IBM/Open-KG-canonicalization"
"allenai/allennlp-language-modeling" -> "allenai/bettermap"
"XiaoMi/MiNLP" -> "ZhuiyiTechnology/pretrained-models"
"XiaoMi/MiNLP" -> "liuhuanyong/ChineseSemanticKB"
"XiaoMi/MiNLP" -> "ChineseGLUE/ChineseGLUE"
"XiaoMi/MiNLP" -> "TsinghuaAI/CPM-1-Generate"
"XiaoMi/MiNLP" -> "ymcui/Chinese-ELECTRA"
"XiaoMi/MiNLP" -> "fastnlp/fastHan"
"XiaoMi/MiNLP" -> "brightmart/albert_zh"
"XiaoMi/MiNLP" -> "airaria/TextBrewer"
"XiaoMi/MiNLP" -> "dbiir/UER-py"
"XiaoMi/MiNLP" -> "brightmart/roberta_zh"
"XiaoMi/MiNLP" -> "ymcui/Chinese-XLNet"
"XiaoMi/MiNLP" -> "BDBC-KG-NLP/QA-Survey-CN"
"XiaoMi/MiNLP" -> "panchunguang/ccks_baidu_entity_link"
"XiaoMi/MiNLP" -> "zhusleep/pytorch_chinese_lm_pretrain"
"XiaoMi/MiNLP" -> "YunwenTechnology/Unilm"
"PaddlePaddle/PaddleNLP" -> "ymcui/Chinese-BERT-wwm"
"PaddlePaddle/PaddleNLP" -> "PaddlePaddle/ERNIE"
"PaddlePaddle/PaddleNLP" -> "PaddlePaddle/Paddle" ["e"=1]
"PaddlePaddle/PaddleNLP" -> "ymcui/Chinese-LLaMA-Alpaca" ["e"=1]
"PaddlePaddle/PaddleNLP" -> "LianjiaTech/BELLE" ["e"=1]
"PaddlePaddle/PaddleNLP" -> "THUDM/ChatGLM2-6B" ["e"=1]
"PaddlePaddle/PaddleNLP" -> "THUDM/ChatGLM-6B" ["e"=1]
"PaddlePaddle/PaddleNLP" -> "Embedding/Chinese-Word-Vectors"
"PaddlePaddle/PaddleNLP" -> "chatchat-space/Langchain-Chatchat" ["e"=1]
"PaddlePaddle/PaddleNLP" -> "bojone/bert4keras"
"PaddlePaddle/PaddleNLP" -> "CLUEbenchmark/CLUE"
"PaddlePaddle/PaddleNLP" -> "brightmart/nlp_chinese_corpus"
"PaddlePaddle/PaddleNLP" -> "PaddlePaddle/PaddleHub" ["e"=1]
"PaddlePaddle/PaddleNLP" -> "CLUEbenchmark/CLUEDatasetSearch"
"PaddlePaddle/PaddleNLP" -> "shibing624/pycorrector"
"neelguha/legal-ml-datasets" -> "HazyResearch/legalbench"
"neelguha/legal-ml-datasets" -> "maastrichtlawtech/awesome-legal-nlp"
"neelguha/legal-ml-datasets" -> "Breakend/PileOfLaw"
"neelguha/legal-ml-datasets" -> "openlegaldata/awesome-legal-data"
"neelguha/legal-ml-datasets" -> "Liquid-Legal-Institute/Legal-Text-Analytics"
"neelguha/legal-ml-datasets" -> "coastalcph/lex-glue"
"neelguha/legal-ml-datasets" -> "TheAtticusProject/cuad"
"neelguha/legal-ml-datasets" -> "Law-AI/summarization"
"neelguha/legal-ml-datasets" -> "Liquid-Legal-Institute/Legal-LLMs-GPTs"
"neelguha/legal-ml-datasets" -> "reglab/casehold"
"neelguha/legal-ml-datasets" -> "Jeryi-Sun/LLM-and-Law"
"neelguha/legal-ml-datasets" -> "ICLRandD/Blackstone"
"neelguha/legal-ml-datasets" -> "harvard-lil/olaw"
"neelguha/legal-ml-datasets" -> "TracyWang95/legal-prompts-for-gpt" ["e"=1]
"neelguha/legal-ml-datasets" -> "open-compass/LawBench"
"yamonc/New-Pytorch-Chinese" -> "hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization"
"yamonc/New-Pytorch-Chinese" -> "PolarisRisingWar/text_summarization_chinese"
"yamonc/New-Pytorch-Chinese" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"bojone/SPACES" -> "ZhuiyiTechnology/t5-pegasus"
"bojone/SPACES" -> "yongzhuo/nlg-yongzhuo"
"bojone/SPACES" -> "Jeryi-Sun/SPACES-Pytorch"
"bojone/SPACES" -> "CLUEbenchmark/CLGE"
"bojone/SPACES" -> "renmada/t5-pegasus-pytorch"
"bojone/SPACES" -> "qingkongzhiqian/GPT2-Summary"
"bojone/SPACES" -> "ZhuiyiTechnology/WoBERT"
"bojone/SPACES" -> "ZhuiyiTechnology/pretrained-models"
"bojone/SPACES" -> "china-ai-law-challenge/CAIL2020"
"bojone/SPACES" -> "liucongg/GPT2-NewsTitle"
"bojone/SPACES" -> "YunwenTechnology/Unilm"
"bojone/SPACES" -> "bojone/t5_in_bert4keras"
"bojone/SPACES" -> "maszhongming/MatchSum" ["e"=1]
"bojone/SPACES" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"bojone/SPACES" -> "Valuebai/Text-Auto-Summarization"
"km1994/NLP-Interview-Notes" -> "km1994/nlp_paper_study"
"km1994/NLP-Interview-Notes" -> "songyingxin/NLPer-Interview"
"km1994/NLP-Interview-Notes" -> "DA-southampton/NLP_ability"
"km1994/NLP-Interview-Notes" -> "TingFree/NLPer-Arsenal"
"km1994/NLP-Interview-Notes" -> "km1994/LLMs_interview_notes" ["e"=1]
"km1994/NLP-Interview-Notes" -> "loujie0822/DeepIE"
"km1994/NLP-Interview-Notes" -> "zhpmatrix/nlp-competitions-list-review"
"km1994/NLP-Interview-Notes" -> "leerumor/nlp_tutorial"
"km1994/NLP-Interview-Notes" -> "km1994/LLMsNineStoryDemonTower" ["e"=1]
"km1994/NLP-Interview-Notes" -> "425776024/nlpcda"
"km1994/NLP-Interview-Notes" -> "lonePatient/BERT-NER-Pytorch"
"km1994/NLP-Interview-Notes" -> "bojone/bert4keras"
"km1994/NLP-Interview-Notes" -> "CLUEbenchmark/CLUE"
"km1994/NLP-Interview-Notes" -> "ymcui/Chinese-BERT-wwm"
"km1994/NLP-Interview-Notes" -> "CLUEbenchmark/CLUEDatasetSearch"
"DSXiangLi/ChineseNER" -> "yangjianxin1/LEBERT-NER-Chinese"
"DSXiangLi/ChineseNER" -> "v-mipeng/LexiconAugmentedNER"
"DSXiangLi/ChineseNER" -> "hemingkx/CLUENER2020"
"DSXiangLi/ChineseNER" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"DSXiangLi/ChineseNER" -> "CLOVEXCWZ/NER_DEMO"
"DSXiangLi/ChineseNER" -> "wavewangyue/ner"
"DSXiangLi/ChineseNER" -> "stanleylsx/entity_extractor_by_ner"
"DSXiangLi/ChineseNER" -> "taishan1994/awesome-chinese-ner"
"DSXiangLi/ChineseNER" -> "yumath/bertNER"
"DSXiangLi/ChineseNER" -> "LeeSureman/Flat-Lattice-Transformer"
"DSXiangLi/ChineseNER" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"DSXiangLi/ChineseNER" -> "lonePatient/BERT-NER-Pytorch"
"DSXiangLi/ChineseNER" -> "taishan1994/BERT_MRC_NER_chinese"
"DSXiangLi/ChineseNER" -> "liuwei1206/LEBERT"
"DSXiangLi/ChineseNER" -> "xhw205/GlobalPointer_torch" ["e"=1]
"princeton-nlp/SimCSE" -> "bojone/SimCSE"
"princeton-nlp/SimCSE" -> "CLUEbenchmark/CLUE"
"princeton-nlp/SimCSE" -> "UKPLab/sentence-transformers" ["e"=1]
"princeton-nlp/SimCSE" -> "yym6472/ConSERT"
"princeton-nlp/SimCSE" -> "thunlp/OpenPrompt" ["e"=1]
"princeton-nlp/SimCSE" -> "thunlp/PromptPapers" ["e"=1]
"princeton-nlp/SimCSE" -> "huawei-noah/Pretrained-Language-Model"
"princeton-nlp/SimCSE" -> "ymcui/Chinese-BERT-wwm"
"princeton-nlp/SimCSE" -> "dbiir/UER-py"
"princeton-nlp/SimCSE" -> "brightmart/roberta_zh"
"princeton-nlp/SimCSE" -> "bojone/bert4keras"
"princeton-nlp/SimCSE" -> "facebookresearch/DPR" ["e"=1]
"princeton-nlp/SimCSE" -> "lonePatient/BERT-NER-Pytorch"
"princeton-nlp/SimCSE" -> "brightmart/albert_zh"
"princeton-nlp/SimCSE" -> "airaria/TextBrewer"
"jhpyle/docassemble" -> "SuffolkLITLab/docassemble-AssemblyLine"
"jhpyle/docassemble" -> "LexPredict/lexpredict-legal-dictionary"
"jhpyle/docassemble" -> "LexPredict/lexpredict-lexnlp"
"jhpyle/docassemble" -> "ICLRandD/Blackstone"
"jhpyle/docassemble" -> "Liquid-Legal-Institute/Legal-Text-Analytics"
"jhpyle/docassemble" -> "SuffolkLITLab/docassemble-ALWeaver"
"jhpyle/docassemble" -> "GBLS/docassemble-MAEvictionDefense"
"jhpyle/docassemble" -> "Lexpedite/blawx"
"jhpyle/docassemble" -> "freelawproject/eyecite"
"jhpyle/docassemble" -> "LexPredict/lexpredict-contraxsuite"
"jhpyle/docassemble" -> "usgpo/uslm" ["e"=1]
"jhpyle/docassemble" -> "ttamg/deploy-docassemble"
"jhpyle/docassemble" -> "radiant-law/docassemble-docusign"
"jhpyle/docassemble" -> "maastrichtlawtech/graphdoc"
"jhpyle/docassemble" -> "medelman17/blackstone-api"
"fastnlp/CPT" -> "renmada/t5-pegasus-pytorch"
"fastnlp/CPT" -> "ZhuiyiTechnology/t5-pegasus"
"fastnlp/CPT" -> "thu-coai/EVA" ["e"=1]
"fastnlp/CPT" -> "HillZhang1999/MuCGEC"
"fastnlp/CPT" -> "YunwenTechnology/Unilm"
"fastnlp/CPT" -> "blcuicall/CCL2022-CLTC"
"fastnlp/CPT" -> "fastnlp/fastHan"
"fastnlp/CPT" -> "lemon234071/clean-dialog" ["e"=1]
"fastnlp/CPT" -> "SunnyGJing/t5-pegasus-chinese"
"fastnlp/CPT" -> "destwang/CTCResources"
"fastnlp/CPT" -> "liucongg/GPT2-NewsTitle"
"fastnlp/CPT" -> "xlxwalex/FCGEC"
"fastnlp/CPT" -> "thu-coai/CDial-GPT"
"fastnlp/CPT" -> "ZhuiyiTechnology/WoBERT"
"fastnlp/CPT" -> "LeeSureman/Flat-Lattice-Transformer"
"google-research/multilingual-t5" -> "google-research/text-to-text-transfer-transformer" ["e"=1]
"google-research/multilingual-t5" -> "bojone/t5_in_bert4keras"
"google-research/multilingual-t5" -> "ZhuiyiTechnology/t5-pegasus"
"google-research/multilingual-t5" -> "google-research/byt5"
"google-research/multilingual-t5" -> "timoschick/pet" ["e"=1]
"google-research/multilingual-t5" -> "google-research/electra"
"google-research/multilingual-t5" -> "google-research/t5x" ["e"=1]
"google-research/multilingual-t5" -> "facebookresearch/cc_net" ["e"=1]
"google-research/multilingual-t5" -> "alexa/bort"
"google-research/multilingual-t5" -> "facebookresearch/XLM" ["e"=1]
"google-research/multilingual-t5" -> "facebookresearch/LASER" ["e"=1]
"google-research/multilingual-t5" -> "google-research/xtreme" ["e"=1]
"google-research/multilingual-t5" -> "allenai/longformer"
"google-research/multilingual-t5" -> "ymcui/Chinese-ELECTRA"
"google-research/multilingual-t5" -> "google-research/language" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "coffee-and-fun/google-profanity-words" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "google-research/text-to-text-transfer-transformer" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "first20hours/google-10000-english" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "google/sentencepiece" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "dbiir/UER-py"
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "PhoebusSi/Alpaca-CoT" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "princeton-nlp/SimCSE"
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "zacanger/profane-words" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "huawei-noah/Pretrained-Language-Model"
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "google/BIG-bench" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "attardi/wikiextractor" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "LianjiaTech/BELLE" ["e"=1]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "brightmart/albert_zh"
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "brightmart/roberta_zh"
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" -> "allenai/RL4LMs" ["e"=1]
"observerss/textfilter" -> "fwwdn/sensitive-stop-words"
"observerss/textfilter" -> "toolgood/ToolGood.Words" ["e"=1]
"observerss/textfilter" -> "elulis/sensitive-words"
"observerss/textfilter" -> "cjh0613/tencent-sensitive-words"
"observerss/textfilter" -> "saffsd/langid.py" ["e"=1]
"observerss/textfilter" -> "fake-useragent/fake-useragent" ["e"=1]
"observerss/textfilter" -> "wainshine/Chinese-Names-Corpus"
"observerss/textfilter" -> "observerss/ngender"
"observerss/textfilter" -> "spetacular/bannedwords"
"observerss/textfilter" -> "fighting41love/cocoNLP"
"observerss/textfilter" -> "morenjiujiu/sensitive_content_filter"
"observerss/textfilter" -> "shiyanhui/Young" ["e"=1]
"observerss/textfilter" -> "fighting41love/Chinese_from_dongxiexidian"
"observerss/textfilter" -> "shibing624/pycorrector"
"observerss/textfilter" -> "codemayq/chinese-chatbot-corpus"
"hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing" -> "Ethan-yt/guwen-models"
"hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing" -> "hsc748NLP/code-for-digital-humanities-tutorial"
"hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing" -> "jizijing/C-CLUE"
"hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing" -> "CIRCSE/LT4HALA"
"hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing" -> "Ethan-yt/CCLUE"
"hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing" -> "hsc748NLP/sikufenci"
"hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing" -> "Jihuai-wpy/bert-ancient-chinese"
"hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing" -> "Ethan-yt/guwenbert"
"hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing" -> "KoichiYasuoka/UD-Kanbun"
"fwwdn/sensitive-stop-words" -> "cjh0613/tencent-sensitive-words"
"fwwdn/sensitive-stop-words" -> "observerss/textfilter"
"fwwdn/sensitive-stop-words" -> "qloog/sensitive_words"
"fwwdn/sensitive-stop-words" -> "57ing/Sensitive-word"
"fwwdn/sensitive-stop-words" -> "elulis/sensitive-words"
"fwwdn/sensitive-stop-words" -> "k5h9999/keywordfilter"
"fwwdn/sensitive-stop-words" -> "jkiss/sensitive-words"
"fwwdn/sensitive-stop-words" -> "toolgood/ToolGood.Words" ["e"=1]
"fwwdn/sensitive-stop-words" -> "andyzty/sensitivewd-filter"
"fwwdn/sensitive-stop-words" -> "importcjj/sensitive" ["e"=1]
"fwwdn/sensitive-stop-words" -> "houbb/sensitive-word" ["e"=1]
"fwwdn/sensitive-stop-words" -> "hailin0/sensitive-word-filter"
"fwwdn/sensitive-stop-words" -> "konsheng/Sensitive-lexicon"
"fwwdn/sensitive-stop-words" -> "morenjiujiu/sensitive_content_filter"
"fwwdn/sensitive-stop-words" -> "fanhua1994/DzFilter" ["e"=1]
"zhengyanzhao1997/NLP-model" -> "KwangKa/SIMCSE_unsup"
"zhengyanzhao1997/NLP-model" -> "bojone/SimCSE"
"zhengyanzhao1997/NLP-model" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"zhengyanzhao1997/NLP-model" -> "xinyi-code/SimCSE-Pytorch"
"zhengyanzhao1997/NLP-model" -> "pluto-junzeng/CNSD"
"zhengyanzhao1997/NLP-model" -> "yangjianxin1/SimCSE"
"zhengyanzhao1997/NLP-model" -> "muyuuuu/E-commerce-Search-Recall"
"zhengyanzhao1997/NLP-model" -> "shawroad/CoSENT_Pytorch"
"zhengyanzhao1997/NLP-model" -> "zhoujx4/NLP-Series-sentence-embeddings"
"zhengyanzhao1997/NLP-model" -> "autoliuweijie/BERT-whitening-pytorch"
"zhengyanzhao1997/NLP-model" -> "ZhuiyiTechnology/pretrained-models"
"zhengyanzhao1997/NLP-model" -> "shawroad/NLP_pytorch_project"
"zhengyanzhao1997/NLP-model" -> "bojone/BERT-whitening"
"google-research/byt5" -> "google-research/multilingual-t5"
"yangjianxin1/CPM" -> "TsinghuaAI/CPM-1-Generate"
"yangjianxin1/CPM" -> "yangjianxin1/GPT2-chitchat"
"yangjianxin1/CPM" -> "TsinghuaAI/CPM" ["e"=1]
"yangjianxin1/CPM" -> "liucongg/GPT2-NewsTitle"
"yangjianxin1/CPM" -> "thu-coai/CDial-GPT"
"yangjianxin1/CPM" -> "GaoPeng97/transformer-xl-chinese"
"yangjianxin1/CPM" -> "imcaspar/gpt2-ml"
"yangjianxin1/CPM" -> "thu-coai/EVA" ["e"=1]
"yangjianxin1/CPM" -> "TsinghuaAI/CPM-2-Pretrain" ["e"=1]
"yangjianxin1/CPM" -> "qingkongzhiqian/GPT2-Summary"
"yangjianxin1/CPM" -> "BAAI-WuDao/Chinese-Transformer-XL" ["e"=1]
"yangjianxin1/CPM" -> "Morizeyao/GPT2-Chinese"
"yangjianxin1/CPM" -> "OpenBMB/BMInf" ["e"=1]
"yangjianxin1/CPM" -> "deepdialog/CPM-LM-TF2"
"yangjianxin1/CPM" -> "yangjianxin1/CLIP-Chinese" ["e"=1]
"liucongg/NLPDataSet" -> "TingFree/NLPer-Arsenal"
"liucongg/NLPDataSet" -> "CLUEbenchmark/CLUE"
"liucongg/NLPDataSet" -> "CLUEbenchmark/CLUEDatasetSearch"
"liucongg/NLPDataSet" -> "zejunwang1/CSTS"
"liucongg/NLPDataSet" -> "loujie0822/DeepIE"
"liucongg/NLPDataSet" -> "lonePatient/BERT-NER-Pytorch"
"liucongg/NLPDataSet" -> "pluto-junzeng/CNSD"
"liucongg/NLPDataSet" -> "z814081807/DeepNER"
"liucongg/NLPDataSet" -> "taishan1994/awesome-chinese-ner"
"liucongg/NLPDataSet" -> "LeeSureman/Flat-Lattice-Transformer"
"liucongg/NLPDataSet" -> "universal-ie/UIE" ["e"=1]
"liucongg/NLPDataSet" -> "ZhuiyiTechnology/pretrained-models"
"liucongg/NLPDataSet" -> "luhua-rain/MRC_Competition_Dureader"
"liucongg/NLPDataSet" -> "clue-ai/PromptCLUE" ["e"=1]
"liucongg/NLPDataSet" -> "BDBC-KG-NLP/QA-Survey-CN"
"JunnYu/RoFormer_pytorch" -> "ZhuiyiTechnology/roformer"
"JunnYu/RoFormer_pytorch" -> "ZhuiyiTechnology/roformer-sim"
"JunnYu/RoFormer_pytorch" -> "ZhuiyiTechnology/simbert"
"JunnYu/RoFormer_pytorch" -> "dropreg/R-Drop"
"JunnYu/RoFormer_pytorch" -> "gaohongkui/GlobalPointer_pytorch" ["e"=1]
"JunnYu/RoFormer_pytorch" -> "renmada/t5-pegasus-pytorch"
"JunnYu/RoFormer_pytorch" -> "131250208/TPlinker-joint-extraction" ["e"=1]
"JunnYu/RoFormer_pytorch" -> "ShannonAI/mrc-for-flat-nested-ner"
"JunnYu/RoFormer_pytorch" -> "lonePatient/NeZha_Chinese_PyTorch" ["e"=1]
"JunnYu/RoFormer_pytorch" -> "shawroad/CoSENT_Pytorch"
"JunnYu/RoFormer_pytorch" -> "ZhuiyiTechnology/pretrained-models"
"JunnYu/RoFormer_pytorch" -> "universal-ie/UIE" ["e"=1]
"JunnYu/RoFormer_pytorch" -> "bojone/SimCSE"
"JunnYu/RoFormer_pytorch" -> "ZhuiyiTechnology/roformer-v2"
"JunnYu/RoFormer_pytorch" -> "zhengyanzhao1997/NLP-model"
"RUCAIBox/TextBox" -> "RUCAIBox/CRSLab" ["e"=1]
"RUCAIBox/TextBox" -> "xcfcode/Summarization-Papers" ["e"=1]
"RUCAIBox/TextBox" -> "fastnlp/CPT"
"RUCAIBox/TextBox" -> "aHuiWang/plot_demo" ["e"=1]
"RUCAIBox/TextBox" -> "allenai/natural-instructions" ["e"=1]
"RUCAIBox/TextBox" -> "OpenBioLink/ThoughtSource" ["e"=1]
"RUCAIBox/TextBox" -> "thu-coai/CDial-GPT"
"RUCAIBox/TextBox" -> "thu-coai/EVA" ["e"=1]
"RUCAIBox/TextBox" -> "bigscience-workshop/promptsource" ["e"=1]
"RUCAIBox/TextBox" -> "shibing624/textgen" ["e"=1]
"RUCAIBox/TextBox" -> "Maluuba/nlg-eval" ["e"=1]
"RUCAIBox/TextBox" -> "renmada/t5-pegasus-pytorch"
"RUCAIBox/TextBox" -> "YunwenTechnology/Unilm"
"RUCAIBox/TextBox" -> "XiangLi1999/PrefixTuning" ["e"=1]
"RUCAIBox/TextBox" -> "Shark-NLP/DiffuSeq" ["e"=1]
"Chunngai/gec-papers" -> "li-aolong/TemplateGEC"
"valuesimplex/FinBERT" -> "ProsusAI/finBERT" ["e"=1]
"valuesimplex/FinBERT" -> "yya518/FinBERT"
"valuesimplex/FinBERT" -> "smoothnlp/FinancialDatasets"
"valuesimplex/FinBERT" -> "MengLingchao/Chinese_financial_sentiment_dictionary" ["e"=1]
"valuesimplex/FinBERT" -> "supersymmetry-technologies/BBT-FinCUGE-Applications" ["e"=1]
"valuesimplex/FinBERT" -> "qiufengyuyi/sequence_tagging"
"valuesimplex/FinBERT" -> "loujie0822/DeepIE"
"valuesimplex/FinBERT" -> "WuHuRestaurant/xf_event_extraction2020Top1" ["e"=1]
"valuesimplex/FinBERT" -> "LeeSureman/Flat-Lattice-Transformer"
"valuesimplex/FinBERT" -> "z814081807/DeepNER"
"valuesimplex/FinBERT" -> "icoxfog417/awesome-financial-nlp"
"valuesimplex/FinBERT" -> "panchunguang/ccks_baidu_entity_link"
"valuesimplex/FinBERT" -> "Wentao-Xu/HIST" ["e"=1]
"valuesimplex/FinBERT" -> "lonePatient/BERT-NER-Pytorch"
"valuesimplex/FinBERT" -> "ymcui/Chinese-ELECTRA"
"LianjiaTech/athena" -> "didichuxing/athena"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "xinyi-code/SimCSE-Pytorch"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "KwangKa/SIMCSE_unsup"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "bojone/SimCSE"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "pluto-junzeng/CNSD"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "zhengyanzhao1997/NLP-model"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "Macielyoung/sentence_representation_matching"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "yangjianxin1/SimCSE"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "shawroad/Semantic-Textual-Similarity-Pytorch"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "zhoujx4/NLP-Series-sentence-embeddings"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "shawroad/CoSENT_Pytorch"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "zejunwang1/CSTS"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "jjljkjljk/SimCSE-Chinese"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "princeton-nlp/SimCSE"
"vdogmcgee/SimCSE-Chinese-Pytorch" -> "kongds/Prompt-BERT"
"leerumor/nlp_tutorial" -> "km1994/nlp_paper_study"
"leerumor/nlp_tutorial" -> "km1994/NLP-Interview-Notes"
"leerumor/nlp_tutorial" -> "TingFree/NLPer-Arsenal"
"leerumor/nlp_tutorial" -> "DA-southampton/NLP_ability"
"leerumor/nlp_tutorial" -> "leerumor/ai-study"
"leerumor/nlp_tutorial" -> "loujie0822/DeepIE"
"leerumor/nlp_tutorial" -> "DA-southampton/Tech_Aarticle"
"leerumor/nlp_tutorial" -> "649453932/Chinese-Text-Classification-Pytorch"
"leerumor/nlp_tutorial" -> "FudanNLP/nlp-beginner"
"leerumor/nlp_tutorial" -> "songyingxin/NLPer-Interview"
"leerumor/nlp_tutorial" -> "DengBoCong/nlp-paper"
"leerumor/nlp_tutorial" -> "zhpmatrix/nlp-competitions-list-review"
"leerumor/nlp_tutorial" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"leerumor/nlp_tutorial" -> "NLP-LOVE/Introduction-NLP"
"leerumor/nlp_tutorial" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"microsoft/RespireNet" -> "SJTU-YONGFU-RESEARCH-GRP/Lung-Sound-Classification-System-LungSys-I"
"microsoft/RespireNet" -> "ilyassmoummad/scl_icbhi2017"
"microsoft/RespireNet" -> "raymin0223/patch-mix_contrastive_learning"
"ZhuiyiTechnology/t5-pegasus" -> "renmada/t5-pegasus-pytorch"
"ZhuiyiTechnology/t5-pegasus" -> "SunnyGJing/t5-pegasus-chinese"
"ZhuiyiTechnology/t5-pegasus" -> "bojone/SPACES"
"ZhuiyiTechnology/t5-pegasus" -> "fastnlp/CPT"
"ZhuiyiTechnology/t5-pegasus" -> "bojone/t5_in_bert4keras"
"ZhuiyiTechnology/t5-pegasus" -> "liucongg/GPT2-NewsTitle"
"ZhuiyiTechnology/t5-pegasus" -> "ZhuiyiTechnology/roformer-sim"
"ZhuiyiTechnology/t5-pegasus" -> "ZhuiyiTechnology/simbert"
"ZhuiyiTechnology/t5-pegasus" -> "ZhuiyiTechnology/pretrained-models"
"ZhuiyiTechnology/t5-pegasus" -> "ZhuiyiTechnology/WoBERT"
"ZhuiyiTechnology/t5-pegasus" -> "qingkongzhiqian/GPT2-Summary"
"ZhuiyiTechnology/t5-pegasus" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"ZhuiyiTechnology/t5-pegasus" -> "YunwenTechnology/Unilm"
"ZhuiyiTechnology/t5-pegasus" -> "ymcui/Chinese-ELECTRA"
"ZhuiyiTechnology/t5-pegasus" -> "google-research/multilingual-t5"
"deepdialog/CPM-LM-TF2" -> "TsinghuaAI/CPM-1-Generate"
"deepdialog/CPM-LM-TF2" -> "jm12138/CPM-Generate-Pytorch" ["e"=1]
"deepdialog/CPM-LM-TF2" -> "bojone/CPM_LM_bert4keras"
"deepdialog/CPM-LM-TF2" -> "jm12138/CPM-Generate-Paddle" ["e"=1]
"deepdialog/CPM-LM-TF2" -> "TsinghuaAI/CPM-KG" ["e"=1]
"deepdialog/CPM-LM-TF2" -> "OpenBMB/BMInf" ["e"=1]
"deepdialog/CPM-LM-TF2" -> "TsinghuaAI/CPM-2-Pretrain" ["e"=1]
"deepdialog/CPM-LM-TF2" -> "bojone/t5_in_bert4keras"
"ShannonAI/ChineseBert" -> "liushulinle/PLOME"
"ShannonAI/ChineseBert" -> "liuwei1206/LEBERT"
"ShannonAI/ChineseBert" -> "DaDaMrX/ReaLiSe"
"ShannonAI/ChineseBert" -> "ACL2020SpellGCN/SpellGCN"
"ShannonAI/ChineseBert" -> "LeeSureman/Flat-Lattice-Transformer"
"ShannonAI/ChineseBert" -> "ShannonAI/glyce"
"ShannonAI/ChineseBert" -> "destwang/CTCResources"
"ShannonAI/ChineseBert" -> "wdimmy/Automatic-Corpus-Generation"
"ShannonAI/ChineseBert" -> "ZhuiyiTechnology/pretrained-models"
"ShannonAI/ChineseBert" -> "iqiyi/FASPell"
"ShannonAI/ChineseBert" -> "v-mipeng/LexiconAugmentedNER"
"ShannonAI/ChineseBert" -> "HillZhang1999/MuCGEC"
"ShannonAI/ChineseBert" -> "ljynlp/W2NER"
"ShannonAI/ChineseBert" -> "FDChongLi/TwoWaysToImproveCSC"
"ShannonAI/ChineseBert" -> "destwang/CTC2021"
"TsinghuaAI/CPM-1-Generate" -> "deepdialog/CPM-LM-TF2"
"TsinghuaAI/CPM-1-Generate" -> "yangjianxin1/CPM"
"TsinghuaAI/CPM-1-Generate" -> "imcaspar/gpt2-ml"
"TsinghuaAI/CPM-1-Generate" -> "thu-coai/CDial-GPT"
"TsinghuaAI/CPM-1-Generate" -> "Morizeyao/GPT2-Chinese"
"TsinghuaAI/CPM-1-Generate" -> "yangjianxin1/GPT2-chitchat"
"TsinghuaAI/CPM-1-Generate" -> "OpenBMB/BMInf" ["e"=1]
"TsinghuaAI/CPM-1-Generate" -> "CLUEbenchmark/CLUE"
"TsinghuaAI/CPM-1-Generate" -> "ymcui/Chinese-ELECTRA"
"TsinghuaAI/CPM-1-Generate" -> "dbiir/UER-py"
"TsinghuaAI/CPM-1-Generate" -> "huawei-noah/Pretrained-Language-Model"
"TsinghuaAI/CPM-1-Generate" -> "ChineseGLUE/ChineseGLUE"
"TsinghuaAI/CPM-1-Generate" -> "brightmart/albert_zh"
"TsinghuaAI/CPM-1-Generate" -> "CLUEbenchmark/CLUEPretrainedModels"
"TsinghuaAI/CPM-1-Generate" -> "ZhuiyiTechnology/t5-pegasus"
"alibaba/AliceMind" -> "OFA-Sys/OFA" ["e"=1]
"alibaba/AliceMind" -> "princeton-nlp/SimCSE"
"alibaba/AliceMind" -> "huawei-noah/Pretrained-Language-Model"
"alibaba/AliceMind" -> "dbiir/UER-py"
"alibaba/AliceMind" -> "dropreg/R-Drop"
"alibaba/AliceMind" -> "CLUEbenchmark/CLUE"
"alibaba/AliceMind" -> "yym6472/ConSERT"
"alibaba/AliceMind" -> "LeeSureman/Flat-Lattice-Transformer"
"alibaba/AliceMind" -> "TsinghuaAI/CPM-1-Generate"
"alibaba/AliceMind" -> "loujie0822/DeepIE"
"alibaba/AliceMind" -> "ymcui/Chinese-ELECTRA"
"alibaba/AliceMind" -> "thu-coai/CDial-GPT"
"alibaba/AliceMind" -> "brightmart/albert_zh"
"alibaba/AliceMind" -> "ymcui/Chinese-BERT-wwm"
"alibaba/AliceMind" -> "ZhuiyiTechnology/pretrained-models"
"NLPIR-team/NLPIR" -> "HIT-SCIR/ltp"
"NLPIR-team/NLPIR" -> "FudanNLP/fnlp"
"NLPIR-team/NLPIR" -> "HIT-SCIR/pyltp"
"NLPIR-team/NLPIR" -> "NLPchina/ansj_seg" ["e"=1]
"NLPIR-team/NLPIR" -> "thunlp/THULAC-Python"
"NLPIR-team/NLPIR" -> "isnowfy/snownlp"
"NLPIR-team/NLPIR" -> "tsroten/pynlpir"
"NLPIR-team/NLPIR" -> "lancopku/pkuseg-python"
"NLPIR-team/NLPIR" -> "crownpku/Awesome-Chinese-NLP"
"NLPIR-team/NLPIR" -> "thunlp/THULAC"
"NLPIR-team/NLPIR" -> "baidu/Familia"
"NLPIR-team/NLPIR" -> "Embedding/Chinese-Word-Vectors"
"NLPIR-team/NLPIR" -> "fxsjy/jieba"
"NLPIR-team/NLPIR" -> "brightmart/nlp_chinese_corpus"
"NLPIR-team/NLPIR" -> "letiantian/TextRank4ZH"
"hemingkx/CLUENER2020" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"hemingkx/CLUENER2020" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"hemingkx/CLUENER2020" -> "lemonhu/NER-BERT-pytorch"
"hemingkx/CLUENER2020" -> "DSXiangLi/ChineseNER"
"hemingkx/CLUENER2020" -> "lonePatient/BERT-NER-Pytorch"
"hemingkx/CLUENER2020" -> "CLUEbenchmark/CLUENER2020"
"hemingkx/CLUENER2020" -> "hemingkx/WordSeg"
"hemingkx/CLUENER2020" -> "taishan1994/BERT-BILSTM-CRF"
"hemingkx/CLUENER2020" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"hemingkx/CLUENER2020" -> "taishan1994/awesome-chinese-ner"
"hemingkx/CLUENER2020" -> "stanleylsx/entity_extractor_by_ner"
"hemingkx/CLUENER2020" -> "yumath/bertNER"
"hemingkx/CLUENER2020" -> "gaohongkui/GlobalPointer_pytorch" ["e"=1]
"hemingkx/CLUENER2020" -> "DA-southampton/ner"
"hemingkx/CLUENER2020" -> "z814081807/DeepNER"
"leerumor/ai-study" -> "leerumor/nlp_tutorial"
"leerumor/ai-study" -> "yanqiangmiffy/NLP-Interview-Notes"
"leerumor/ai-study" -> "Dustyposa/rasa_ch_faq" ["e"=1]
"leerumor/ai-study" -> "GYee/CV_interviews_Q-A" ["e"=1]
"leerumor/ai-study" -> "songyingxin/NLPer-Interview"
"leerumor/ai-study" -> "donnyyou/cv-interview" ["e"=1]
"leerumor/ai-study" -> "DiHiera/Algorithm_Interview_Notes-Chinese-master"
"leerumor/ai-study" -> "loujie0822/Pre-trained-Models"
"leerumor/ai-study" -> "espectre/Algorithms_Engineer_Interview" ["e"=1]
"leerumor/ai-study" -> "km1994/NLP-Interview-Notes"
"leerumor/ai-study" -> "yym6472/ConSERT"
"ZhuiyiTechnology/roformer-sim" -> "ZhuiyiTechnology/simbert"
"ZhuiyiTechnology/roformer-sim" -> "ZhuiyiTechnology/pretrained-models"
"ZhuiyiTechnology/roformer-sim" -> "JunnYu/RoFormer_pytorch"
"ZhuiyiTechnology/roformer-sim" -> "bojone/SimCSE"
"ZhuiyiTechnology/roformer-sim" -> "ZhuiyiTechnology/roformer-v2"
"ZhuiyiTechnology/roformer-sim" -> "bojone/BERT-whitening"
"ZhuiyiTechnology/roformer-sim" -> "ZhuiyiTechnology/t5-pegasus"
"ZhuiyiTechnology/roformer-sim" -> "zejunwang1/bert4vec"
"ZhuiyiTechnology/roformer-sim" -> "bojone/CoSENT"
"ZhuiyiTechnology/roformer-sim" -> "425776024/nlpcda"
"ZhuiyiTechnology/roformer-sim" -> "YunwenTechnology/Unilm"
"ZhuiyiTechnology/roformer-sim" -> "CLUEbenchmark/SimCLUE"
"ZhuiyiTechnology/roformer-sim" -> "ZhuiyiTechnology/roformer"
"ZhuiyiTechnology/roformer-sim" -> "bojone/Pattern-Exploiting-Training"
"ZhuiyiTechnology/roformer-sim" -> "shawroad/CoSENT_Pytorch"
"z814081807/DeepNER" -> "WuHuRestaurant/xf_event_extraction2020Top1" ["e"=1]
"z814081807/DeepNER" -> "loujie0822/DeepIE"
"z814081807/DeepNER" -> "lonePatient/BERT-NER-Pytorch"
"z814081807/DeepNER" -> "CLUEbenchmark/CLUENER2020"
"z814081807/DeepNER" -> "ShannonAI/mrc-for-flat-nested-ner"
"z814081807/DeepNER" -> "LeeSureman/Flat-Lattice-Transformer"
"z814081807/DeepNER" -> "panchunguang/ccks_baidu_entity_link"
"z814081807/DeepNER" -> "gaohongkui/GlobalPointer_pytorch" ["e"=1]
"z814081807/DeepNER" -> "qiufengyuyi/sequence_tagging"
"z814081807/DeepNER" -> "wavewangyue/ner"
"z814081807/DeepNER" -> "luopeixiang/named_entity_recognition"
"z814081807/DeepNER" -> "TingFree/NLPer-Arsenal"
"z814081807/DeepNER" -> "jiesutd/LatticeLSTM"
"z814081807/DeepNER" -> "xiaoqian19940510/Event-Extraction" ["e"=1]
"z814081807/DeepNER" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"bojone/P-tuning" -> "bojone/Pattern-Exploiting-Training"
"bojone/P-tuning" -> "THUDM/P-tuning" ["e"=1]
"hankcs/AhoCorasickDoubleArrayTrie" -> "robert-bor/aho-corasick"
"hankcs/AhoCorasickDoubleArrayTrie" -> "komiya-atsushi/darts-java"
"hankcs/AhoCorasickDoubleArrayTrie" -> "hankcs/aho-corasick"
"hankcs/AhoCorasickDoubleArrayTrie" -> "takawitter/trie4j"
"hankcs/AhoCorasickDoubleArrayTrie" -> "digitalstain/DoubleArrayTrie"
"hankcs/AhoCorasickDoubleArrayTrie" -> "NLPchina/nlp-lang" ["e"=1]
"hankcs/AhoCorasickDoubleArrayTrie" -> "WojciechMula/pyahocorasick"
"hankcs/AhoCorasickDoubleArrayTrie" -> "s-yata/darts-clone"
"hankcs/AhoCorasickDoubleArrayTrie" -> "tlwg/libdatrie"
"hankcs/AhoCorasickDoubleArrayTrie" -> "hankcs/Viterbi"
"hankcs/AhoCorasickDoubleArrayTrie" -> "NLPchina/ansj_seg" ["e"=1]
"hankcs/AhoCorasickDoubleArrayTrie" -> "RoaringBitmap/RoaringBitmap" ["e"=1]
"hankcs/AhoCorasickDoubleArrayTrie" -> "baidu/AnyQ"
"hankcs/AhoCorasickDoubleArrayTrie" -> "NLPchina/Word2VEC_java" ["e"=1]
"hankcs/AhoCorasickDoubleArrayTrie" -> "hiroshi-manabe/darts-clone-java"
"Liquid-Legal-Institute/Legal-Ontologies" -> "Liquid-Legal-Institute/Meta-Lex"
"Liquid-Legal-Institute/Legal-Ontologies" -> "oasis-open/legaldocml-akomantoso"
"Liquid-Legal-Institute/Legal-Ontologies" -> "Liquid-Legal-Institute/Legal-LLMs-GPTs"
"HIT-SCIR/plm-nlp-code" -> "km1994/nlp_paper_study"
"HIT-SCIR/plm-nlp-code" -> "TingFree/NLPer-Arsenal"
"HIT-SCIR/plm-nlp-code" -> "km1994/NLP-Interview-Notes"
"HIT-SCIR/plm-nlp-code" -> "leerumor/nlp_tutorial"
"HIT-SCIR/plm-nlp-code" -> "MLNLP-World/Top-AI-Conferences-Paper-with-Code"
"HIT-SCIR/plm-nlp-code" -> "DA-southampton/Read_Bert_Code"
"HIT-SCIR/plm-nlp-code" -> "universal-ie/UIE" ["e"=1]
"HIT-SCIR/plm-nlp-code" -> "FreedomIntelligence/Medical_NLP" ["e"=1]
"CLUEbenchmark/FewCLUE" -> "bojone/Pattern-Exploiting-Training"
"CLUEbenchmark/FewCLUE" -> "bojone/P-tuning"
"CLUEbenchmark/FewCLUE" -> "ZhuiyiTechnology/simbert"
"CLUEbenchmark/FewCLUE" -> "sunyilgdx/NSP-BERT"
"CLUEbenchmark/FewCLUE" -> "rrmenon10/ADAPET" ["e"=1]
"CLUEbenchmark/FewCLUE" -> "yym6472/ConSERT"
"CLUEbenchmark/FewCLUE" -> "ZhuiyiTechnology/pretrained-models"
"CLUEbenchmark/FewCLUE" -> "dropreg/R-Drop"
"CLUEbenchmark/FewCLUE" -> "AtmaHou/MetaDialog" ["e"=1]
"CLUEbenchmark/FewCLUE" -> "131250208/TPlinker-joint-extraction" ["e"=1]
"CLUEbenchmark/FewCLUE" -> "gaohongkui/GlobalPointer_pytorch" ["e"=1]
"CLUEbenchmark/FewCLUE" -> "bojone/SimCSE"
"CLUEbenchmark/FewCLUE" -> "bojone/BERT-whitening"
"CLUEbenchmark/FewCLUE" -> "loujie0822/Pre-trained-Models"
"CLUEbenchmark/FewCLUE" -> "ShannonAI/mrc-for-flat-nested-ner"
"Breakend/PileOfLaw" -> "coastalcph/lex-glue"
"Breakend/PileOfLaw" -> "openlegaldata/awesome-legal-data"
"Marilynmontu/ChineseNER-pytorch" -> "DeShuiYu/nlp_from_dsy"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "taishan1994/BERT-BILSTM-CRF"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "taishan1994/awesome-chinese-ner"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "Marilynmontu/ChineseNER-pytorch"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "taishan1994/pytorch_triple_extraction" ["e"=1]
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "hemingkx/CLUENER2020"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "CLOVEXCWZ/NER_DEMO"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "lonePatient/BERT-NER-Pytorch"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "DSXiangLi/ChineseNER"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "DA-southampton/ner"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "yumath/bertNER"
"taishan1994/pytorch_bert_bilstm_crf_ner" -> "luopeixiang/named_entity_recognition"
"huggingface/nn_pruning" -> "huggingface/block_movement_pruning"
"huggingface/nn_pruning" -> "WoosukKwon/retraining-free-pruning"
"huggingface/nn_pruning" -> "princeton-nlp/CoFiPruning"
"huggingface/nn_pruning" -> "JetRunner/BERT-of-Theseus"
"huggingface/nn_pruning" -> "yaozhewei/MLPruning"
"huggingface/nn_pruning" -> "LiyuanLucasLiu/Transformer-Clinic"
"huggingface/nn_pruning" -> "IntelLabs/Model-Compression-Research-Package"
"huggingface/nn_pruning" -> "microsoft/fastformers" ["e"=1]
"TheAtticusProject/cuad" -> "TheAtticusProject/maud"
"TheAtticusProject/cuad" -> "heiko-hotz/cuad-demo"
"TheAtticusProject/cuad" -> "ICLRandD/Blackstone"
"TheAtticusProject/cuad" -> "HazyResearch/legalbench"
"TheAtticusProject/cuad" -> "neelguha/legal-ml-datasets"
"TheAtticusProject/cuad" -> "LexPredict/lexpredict-lexnlp"
"TheAtticusProject/cuad" -> "coastalcph/lex-glue"
"TheAtticusProject/cuad" -> "reglab/casehold"
"TheAtticusProject/cuad" -> "soukron/maragi"
"TheAtticusProject/cuad" -> "thunlp/CLAIM"
"TheAtticusProject/cuad" -> "thunlp/LegalPapers"
"TheAtticusProject/cuad" -> "Liquid-Legal-Institute/Legal-Text-Analytics"
"TheAtticusProject/cuad" -> "hunter-meloche/REMO-langflow"
"TheAtticusProject/cuad" -> "jormeijer/HIAF"
"TheAtticusProject/cuad" -> "AurelienStebe/Gladdis"
"hannahawalsh/ESG_AI" -> "edgetrader/esg-nlp"
"hannahawalsh/ESG_AI" -> "databricks-industry-solutions/esg-scoring"
"hannahawalsh/ESG_AI" -> "mukut03/ESG-BERT"
"hannahawalsh/ESG_AI" -> "shweta-29/Companies_ESG_Scraper"
"hannahawalsh/ESG_AI" -> "adamFinastra/ESGAI"
"hannahawalsh/ESG_AI" -> "jihyeonseong/ESG-AI-investment-by-streamlit"
"hemingkx/WordSeg" -> "hemingkx/CLUENER2020"
"hemingkx/WordSeg" -> "bojone/perturbed_masking"
"hemingkx/WordSeg" -> "WhiteGive-Boy/CWS-Hmm_BiLSTM-CRF"
"hemingkx/WordSeg" -> "wzzzd/lm_ner"
"myx666/LeCaRD" -> "china-ai-law-challenge/CAIL2021"
"myx666/LeCaRD" -> "Executedone/CAIL2021_LAJS"
"myx666/LeCaRD" -> "THUIR/LeCaRDv2"
"myx666/LeCaRD" -> "thunlp/LegalPLMs"
"myx666/LeCaRD" -> "ThuYShao/BERT-PLI-IJCAI2020"
"myx666/LeCaRD" -> "CSHaitao/SAILER"
"myx666/LeCaRD" -> "thunlp/LEVEN"
"myx666/LeCaRD" -> "Wenorm/BERT-PLI"
"myx666/LeCaRD" -> "china-ai-law-challenge/CAIL2022"
"myx666/LeCaRD" -> "THUlawtech/MUSER"
"myx666/LeCaRD" -> "ruc-wjyu/IOT-Match"
"myx666/LeCaRD" -> "CSHaitao/THUIR-COLIEE2023"
"myx666/LeCaRD" -> "thunlp/CLAIM"
"myx666/LeCaRD" -> "XTUAI-LAW/LegalCaseKnowledgeGraph"
"thunlp/LegalPLMs" -> "myx666/LeCaRD"
"thunlp/LegalPLMs" -> "thunlp/CLAIM"
"thunlp/LegalPLMs" -> "thunlp/LEVEN"
"thunlp/LegalPLMs" -> "thunlp/QAJudge"
"thunlp/LegalPLMs" -> "china-ai-law-challenge/CAIL2022"
"thunlp/LegalPLMs" -> "china-ai-law-challenge/CAIL2021"
"thunlp/LegalPLMs" -> "thunlp/LegalPapers"
"thunlp/LegalPLMs" -> "ruc-wjyu/IOT-Match"
"thunlp/LegalPLMs" -> "prometheusXN/LADAN"
"thunlp/LegalPLMs" -> "ThuYShao/BERT-PLI-IJCAI2020"
"thunlp/LegalPLMs" -> "WAPAY/EPM"
"thunlp/LegalPLMs" -> "thunlp/TopJudge"
"thunlp/LegalPLMs" -> "thunlp/OpenCLaP"
"Ethan-yt/CCLUE" -> "Ethan-yt/guwen-models"
"Ethan-yt/CCLUE" -> "hsc748NLP/sikufenci"
"Ethan-yt/CCLUE" -> "frederick-wang/tongjiazi-resources"
"liuhuanyong/ChineseDiachronicCorpus" -> "liuhuanyong/CognitiveInference"
"liuhuanyong/ChineseDiachronicCorpus" -> "fangj/rmrb"
"liuhuanyong/ChineseDiachronicCorpus" -> "liuhuanyong/ChineseSemanticKB"
"liuhuanyong/ChineseDiachronicCorpus" -> "SimmerChan/corpus"
"liuhuanyong/ChineseDiachronicCorpus" -> "Alalalalaki/Guide2EconRA" ["e"=1]
"Moonshile/ChineseWordSegmentation" -> "sing1ee/dict_build"
"Moonshile/ChineseWordSegmentation" -> "zhanzecheng/Chinese_segment_augment"
"Moonshile/ChineseWordSegmentation" -> "yanghanxy/New-Word-Detection"
"Moonshile/ChineseWordSegmentation" -> "NCXiaozui/New-Word-Detection"
"Moonshile/ChineseWordSegmentation" -> "duanhongyi/genius"
"Moonshile/ChineseWordSegmentation" -> "hankcs/multi-criteria-cws"
"Moonshile/ChineseWordSegmentation" -> "izisong/new-words-discovery"
"Moonshile/ChineseWordSegmentation" -> "bojone/word-discovery"
"Moonshile/ChineseWordSegmentation" -> "wyh267/ChineseWordSegmentation"
"Moonshile/ChineseWordSegmentation" -> "hankcs/ID-CNN-CWS"
"Moonshile/ChineseWordSegmentation" -> "jannson/yaha"
"Moonshile/ChineseWordSegmentation" -> "GeorgeBourne/grid"
"Moonshile/ChineseWordSegmentation" -> "koth/kcws"
"Moonshile/ChineseWordSegmentation" -> "jcyk/greedyCWS"
"jasoncao11/nlp-notebook" -> "yongzhuo/nlg-yongzhuo"
"jasoncao11/nlp-notebook" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"jasoncao11/nlp-notebook" -> "murray-z/text_analysis_tools"
"jasoncao11/nlp-notebook" -> "zhangzhiqiangccm/NLP-project"
"jasoncao11/nlp-notebook" -> "HorieYuan/TransformerTextSummarization"
"jasoncao11/nlp-notebook" -> "920232796/bert_seq2seq"
"jasoncao11/nlp-notebook" -> "Ricardokevins/Kevinpro-NLP-demo" ["e"=1]
"jasoncao11/nlp-notebook" -> "qingkongzhiqian/GPT2-Summary"
"jasoncao11/nlp-notebook" -> "shibing624/pytextclassifier"
"jasoncao11/nlp-notebook" -> "liucongg/GPT2-NewsTitle"
"jasoncao11/nlp-notebook" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"jasoncao11/nlp-notebook" -> "DengBoCong/nlp-paper"
"jasoncao11/nlp-notebook" -> "Lizhen0628/text_classification"
"jasoncao11/nlp-notebook" -> "yamonc/New-Pytorch-Chinese"
"jasoncao11/nlp-notebook" -> "TingFree/NLPer-Arsenal"
"aj-naik/Text-Summarization" -> "rojagtap/transformer-abstractive-summarization"
"observerss/ngender" -> "wainshine/Chinese-Names-Corpus"
"observerss/ngender" -> "wainshine/Company-Names-Corpus"
"observerss/ngender" -> "kfcd/chaizi"
"observerss/ngender" -> "psychbruce/ChineseNames"
"observerss/ngender" -> "observerss/textfilter"
"observerss/ngender" -> "fighting41love/cocoNLP"
"observerss/ngender" -> "rainarch/SentiBridge"
"observerss/ngender" -> "ls0f/phone" ["e"=1]
"observerss/ngender" -> "liuhuanyong/MusicLyricChatbot" ["e"=1]
"observerss/ngender" -> "peiss/chinese-name-score" ["e"=1]
"observerss/ngender" -> "fighting41love/Chinese_from_dongxiexidian"
"observerss/ngender" -> "JakLiao/GoodGoodName" ["e"=1]
"ZhuiyiTechnology/roformer" -> "JunnYu/RoFormer_pytorch"
"ZhuiyiTechnology/roformer" -> "ZhuiyiTechnology/roformer-sim"
"ZhuiyiTechnology/roformer" -> "ZhuiyiTechnology/simbert"
"ZhuiyiTechnology/roformer" -> "ZhuiyiTechnology/WoBERT"
"ZhuiyiTechnology/roformer" -> "ZhuiyiTechnology/pretrained-models"
"ZhuiyiTechnology/roformer" -> "lucidrains/rotary-embedding-torch" ["e"=1]
"ZhuiyiTechnology/roformer" -> "ZhuiyiTechnology/roformer-v2"
"ZhuiyiTechnology/roformer" -> "bojone/rerope" ["e"=1]
"ZhuiyiTechnology/roformer" -> "bojone/BERT-whitening"
"ZhuiyiTechnology/roformer" -> "brightmart/roberta_zh"
"ZhuiyiTechnology/roformer" -> "nghuyong/ERNIE-Pytorch"
"ZhuiyiTechnology/roformer" -> "bojone/bert4keras"
"ZhuiyiTechnology/roformer" -> "ymcui/MacBERT"
"ZhuiyiTechnology/roformer" -> "131250208/TPlinker-joint-extraction" ["e"=1]
"ZhuiyiTechnology/roformer" -> "universal-ie/UIE" ["e"=1]
"DaDaMrX/ReaLiSe" -> "liushulinle/PLOME"
"DaDaMrX/ReaLiSe" -> "destwang/DCN"
"DaDaMrX/ReaLiSe" -> "FDChongLi/TwoWaysToImproveCSC"
"DaDaMrX/ReaLiSe" -> "destwang/CTCResources"
"DaDaMrX/ReaLiSe" -> "jiahaozhenbang/SCOPE"
"DaDaMrX/ReaLiSe" -> "ACL2020SpellGCN/SpellGCN"
"DaDaMrX/ReaLiSe" -> "destwang/CTC2021"
"DaDaMrX/ReaLiSe" -> "aopolin-lv/ECSpell"
"DaDaMrX/ReaLiSe" -> "wdimmy/Automatic-Corpus-Generation"
"DaDaMrX/ReaLiSe" -> "geekjuruo/LEAD"
"DaDaMrX/ReaLiSe" -> "nghuyong/Chinese-text-correction-papers"
"DaDaMrX/ReaLiSe" -> "nghuyong/cscd-ns"
"DaDaMrX/ReaLiSe" -> "liushulinle/CRASpell"
"DaDaMrX/ReaLiSe" -> "HillZhang1999/MuCGEC"
"DaDaMrX/ReaLiSe" -> "HillZhang1999/NaSGEC"
"liucongg/GPT2-NewsTitle" -> "qingkongzhiqian/GPT2-Summary"
"liucongg/GPT2-NewsTitle" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"liucongg/GPT2-NewsTitle" -> "ZhuiyiTechnology/t5-pegasus"
"liucongg/GPT2-NewsTitle" -> "YunwenTechnology/Unilm"
"liucongg/GPT2-NewsTitle" -> "bojone/SPACES"
"liucongg/GPT2-NewsTitle" -> "imcaspar/gpt2-ml"
"liucongg/GPT2-NewsTitle" -> "renmada/t5-pegasus-pytorch"
"liucongg/GPT2-NewsTitle" -> "920232796/bert_seq2seq"
"liucongg/GPT2-NewsTitle" -> "xcfcode/Summarization-Papers" ["e"=1]
"liucongg/GPT2-NewsTitle" -> "thu-coai/CDial-GPT"
"liucongg/GPT2-NewsTitle" -> "yangjianxin1/GPT2-chitchat"
"liucongg/GPT2-NewsTitle" -> "yongzhuo/nlg-yongzhuo"
"liucongg/GPT2-NewsTitle" -> "Morizeyao/GPT2-Chinese"
"liucongg/GPT2-NewsTitle" -> "CLUEbenchmark/CLUEDatasetSearch"
"liucongg/GPT2-NewsTitle" -> "z814081807/DeepNER"
"swiseman/nn_coref" -> "clarkkev/deep-coref"
"shibing624/nlp-tutorial" -> "shibing624/pytextclassifier"
"shibing624/nlp-tutorial" -> "PKU-TANGENT/nlp-tutorial" ["e"=1]
"shibing624/nlp-tutorial" -> "jasoncao11/nlp-notebook"
"shibing624/nlp-tutorial" -> "rsanshierli/EasyBert"
"amazon-science/tanl" -> "neulab/SpanNER"
"syuoni/eznlp" -> "yhcc/CNN_Nested_NER"
"syuoni/eznlp" -> "ljynlp/W2NER"
"syuoni/eznlp" -> "tricktreat/DiffusionNER"
"syuoni/eznlp" -> "suolyer/PyTorch_BERT_Biaffine_NER"
"syuoni/eznlp" -> "GanjinZero/Triaffine-nested-ner"
"xgeric/UCPhrase-exp" -> "yumeng5/WeSHClass"
"Nealcly/templateNER" -> "rtmaww/EntLM"
"Nealcly/templateNER" -> "psunlpgroup/CONTaiNER"
"Nealcly/templateNER" -> "chen700564/sdnet"
"Nealcly/templateNER" -> "tricktreat/PromptNER"
"amzn/amazon-weak-ner-needle" -> "cliang1453/BOND"
"DengBoCong/text-similarity" -> "DengBoCong/nlp-dialogue"
"DengBoCong/text-similarity" -> "zhoujx4/NLP-Series-sentence-embeddings"
"moon-hotel/BertWithPretrained" -> "moon-hotel/TransformerTranslation"
"moon-hotel/BertWithPretrained" -> "moon-hotel/DeepLearningWithMe"
"moon-hotel/BertWithPretrained" -> "moon-hotel/MachineLearningWithMe"
"moon-hotel/BertWithPretrained" -> "xinyi-code/Chinese-Text-Classification"
"moon-hotel/BertWithPretrained" -> "hemingkx/CLUENER2020"
"moon-hotel/BertWithPretrained" -> "TingFree/NLPer-Arsenal"
"moon-hotel/BertWithPretrained" -> "renmada/t5-pegasus-pytorch"
"moon-hotel/BertWithPretrained" -> "DA-southampton/Read_Bert_Code"
"moon-hotel/BertWithPretrained" -> "moon-hotel/TransformerClassification"
"moon-hotel/BertWithPretrained" -> "zhoujx4/NLP-Series-sentence-embeddings"
"moon-hotel/BertWithPretrained" -> "universal-ie/UIE" ["e"=1]
"moon-hotel/BertWithPretrained" -> "moon-hotel/TransformerCouplet"
"moon-hotel/BertWithPretrained" -> "bojone/SimCSE"
"moon-hotel/BertWithPretrained" -> "hellonlp/classifier-multi-label"
"moon-hotel/BertWithPretrained" -> "km1994/nlp_paper_study"
"liuwei1206/LEBERT" -> "yangjianxin1/LEBERT-NER-Chinese"
"liuwei1206/LEBERT" -> "LeeSureman/Flat-Lattice-Transformer"
"liuwei1206/LEBERT" -> "v-mipeng/LexiconAugmentedNER"
"liuwei1206/LEBERT" -> "ljynlp/W2NER"
"liuwei1206/LEBERT" -> "ShannonAI/ChineseBert"
"liuwei1206/LEBERT" -> "fastnlp/TENER"
"liuwei1206/LEBERT" -> "suolyer/PyTorch_BERT_SimpleLexicon_NER"
"liuwei1206/LEBERT" -> "yhcc/OntoNotes-5.0-NER"
"liuwei1206/LEBERT" -> "ShannonAI/mrc-for-flat-nested-ner"
"liuwei1206/LEBERT" -> "CoderMusou/MECT4CNER"
"liuwei1206/LEBERT" -> "gaohongkui/GlobalPointer_pytorch" ["e"=1]
"liuwei1206/LEBERT" -> "DianboWork/Graph4CNER"
"liuwei1206/LEBERT" -> "wavewangyue/ner"
"liuwei1206/LEBERT" -> "lonePatient/BERT-NER-Pytorch"
"china-ai-law-challenge/CAIL2021" -> "myx666/LeCaRD"
"china-ai-law-challenge/CAIL2021" -> "Executedone/CAIL2021_LAJS"
"china-ai-law-challenge/CAIL2021" -> "china-ai-law-challenge/CAIL2020"
"china-ai-law-challenge/CAIL2021" -> "china-ai-law-challenge/CAIL2022"
"china-ai-law-challenge/CAIL2021" -> "davidfan1224/CAIL2021_Multi-span_MRC"
"china-ai-law-challenge/CAIL2021" -> "thunlp/LegalPLMs"
"china-ai-law-challenge/CAIL2021" -> "padeoe/cail2019"
"china-ai-law-challenge/CAIL2021" -> "thunlp/LEVEN"
"Ethan-yt/guwenbert" -> "Ethan-yt/guwen-models"
"Ethan-yt/guwenbert" -> "jiaeyan/Jiayan"
"Ethan-yt/guwenbert" -> "Ethan-yt/CCLUE"
"Ethan-yt/guwenbert" -> "hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing"
"Ethan-yt/guwenbert" -> "NiuTrans/Classical-Modern"
"Ethan-yt/guwenbert" -> "garychowcmu/daizhigev20"
"Ethan-yt/guwenbert" -> "jizijing/C-CLUE"
"Ethan-yt/guwenbert" -> "ttzHome/AnchiBERT"
"Ethan-yt/guwenbert" -> "Jihuai-wpy/bert-ancient-chinese"
"Ethan-yt/guwenbert" -> "mahavivo/scripta-sinica"
"Ethan-yt/guwenbert" -> "cloudyskyy/Guwen-UNILM"
"Ethan-yt/guwenbert" -> "THUNLP-AIPoet/BERT-CCPoem"
"Ethan-yt/guwenbert" -> "KoichiYasuoka/UD-Kanbun"
"Ethan-yt/guwenbert" -> "BangBOOM/Classical-Chinese"
"Ethan-yt/guwenbert" -> "raynardj/yuan"
"shweta-29/Companies_ESG_Scraper" -> "austinjhunt/msci_esg"
"shweta-29/Companies_ESG_Scraper" -> "edgetrader/esg-nlp"
"bojone/BERT-whitening" -> "autoliuweijie/BERT-whitening-pytorch"
"bojone/BERT-whitening" -> "bohanli/BERT-flow"
"bojone/BERT-whitening" -> "bojone/SimCSE"
"bojone/BERT-whitening" -> "ZhuiyiTechnology/simbert"
"bojone/BERT-whitening" -> "bojone/CoSENT"
"bojone/BERT-whitening" -> "ZhuiyiTechnology/pretrained-models"
"bojone/BERT-whitening" -> "ZhuiyiTechnology/roformer-sim"
"bojone/BERT-whitening" -> "yym6472/ConSERT"
"bojone/BERT-whitening" -> "pluto-junzeng/CNSD"
"bojone/BERT-whitening" -> "zhengyanzhao1997/NLP-model"
"bojone/BERT-whitening" -> "dropreg/R-Drop"
"bojone/BERT-whitening" -> "princeton-nlp/SimCSE"
"bojone/BERT-whitening" -> "ymcui/Chinese-ELECTRA"
"bojone/BERT-whitening" -> "ZhuiyiTechnology/WoBERT"
"bojone/BERT-whitening" -> "CLUEbenchmark/FewCLUE"
"MuQiuJun-AI/bert4pytorch" -> "Tongjilibo/bert4torch" ["e"=1]
"MuQiuJun-AI/bert4pytorch" -> "zzy99/epidemic-sentence-pair"
"MuQiuJun-AI/bert4pytorch" -> "xiangking/ark-nlp" ["e"=1]
"MuQiuJun-AI/bert4pytorch" -> "920232796/bert_seq2seq"
"MuQiuJun-AI/bert4pytorch" -> "JunnYu/RoFormer_pytorch"
"MuQiuJun-AI/bert4pytorch" -> "Ricardokevins/Kevinpro-NLP-demo" ["e"=1]
"MuQiuJun-AI/bert4pytorch" -> "shawroad/Semantic-Textual-Similarity-Pytorch"
"MuQiuJun-AI/bert4pytorch" -> "shawroad/NLP_pytorch_project"
"Ugenteraan/Deep_Hierarchical_Classification" -> "ankitdhall/learning_embeddings"
"Ugenteraan/Deep_Hierarchical_Classification" -> "minqukanq/hierarchical-multi-label-text-classification"
"lixuanhng/NLP_related_projects" -> "BonnieHuangxin/Bert_sentence_similarity"
"todototry/AncientChinesePoemsDB" -> "jackeyGao/chinese-poetry"
"JasonWade001/chtxt" -> "weiyinfu/SiDaMingZhu"
"JasonWade001/chtxt" -> "xp44mm/hanchuancaolu"
"JasonWade001/chtxt" -> "mahavivo/core-books"
"JasonWade001/chtxt" -> "bgc2017/chtxt"
"thuiar/Adaptive-Decision-Boundary" -> "thuiar/DeepAligned-Clustering"
"thuiar/Adaptive-Decision-Boundary" -> "thuiar/OKD-Reading-List"
"thuiar/Adaptive-Decision-Boundary" -> "thuiar/TEXTOIR"
"thuiar/Adaptive-Decision-Boundary" -> "thuiar/AWESOME-Dialogue"
"thuiar/TEXTOIR" -> "thuiar/OKD-Reading-List"
"thuiar/TEXTOIR" -> "thuiar/TEXTOIR-DEMO"
"thuiar/TEXTOIR" -> "thuiar/Adaptive-Decision-Boundary"
"thuiar/TEXTOIR" -> "thuiar/DeepAligned-Clustering"
"thuiar/TEXTOIR" -> "fanolabs/NID_ACLARR2022"
"thuiar/TEXTOIR" -> "thuiar/MIntRec"
"thuiar/TEXTOIR" -> "thuiar/MIntRec2.0"
"thuiar/TEXTOIR" -> "thuiar/UMC"
"thuiar/TEXTOIR" -> "zhang-yu-wei/MTP-CLNN"
"dropreg/R-Drop" -> "bojone/r-drop"
"dropreg/R-Drop" -> "princeton-nlp/SimCSE"
"dropreg/R-Drop" -> "bojone/SimCSE"
"dropreg/R-Drop" -> "yym6472/ConSERT"
"dropreg/R-Drop" -> "JunnYu/RoFormer_pytorch"
"dropreg/R-Drop" -> "alibaba/AliceMind"
"dropreg/R-Drop" -> "bojone/BERT-whitening"
"dropreg/R-Drop" -> "huawei-noah/Pretrained-Language-Model"
"dropreg/R-Drop" -> "airaria/TextBrewer"
"dropreg/R-Drop" -> "CLUEbenchmark/FewCLUE"
"dropreg/R-Drop" -> "dbiir/UER-py"
"dropreg/R-Drop" -> "lonePatient/NeZha_Chinese_PyTorch" ["e"=1]
"dropreg/R-Drop" -> "ShannonAI/mrc-for-flat-nested-ner"
"dropreg/R-Drop" -> "CLUEbenchmark/SimCLUE"
"dropreg/R-Drop" -> "loujie0822/DeepIE"
"shibing624/pke_zh" -> "JackHCC/Chinese-Keyphrase-Extraction" ["e"=1]
"shibing624/pke_zh" -> "deepdialog/ZhKeyBERT"
"shibing624/pke_zh" -> "shibing624/pytextclassifier"
"IBM/kgi-slot-filling" -> "IBM/gnn-taxo-construction"
"IBM/kgi-slot-filling" -> "IBM/AITQA"
"thunlp/Few-NERD" -> "microsoft/vert-papers"
"thunlp/Few-NERD" -> "asappresearch/structshot"
"thunlp/Few-NERD" -> "juntaoy/biaffine-ner"
"thunlp/Few-NERD" -> "ShannonAI/mrc-for-flat-nested-ner"
"thunlp/Few-NERD" -> "psunlpgroup/CONTaiNER"
"thunlp/Few-NERD" -> "yhcc/OntoNotes-5.0-NER"
"thunlp/Few-NERD" -> "Nealcly/templateNER"
"thunlp/Few-NERD" -> "rtmaww/EntLM"
"thunlp/Few-NERD" -> "cliang1453/BOND"
"thunlp/Few-NERD" -> "LeePleased/NegSampling-NER"
"thunlp/Few-NERD" -> "AtmaHou/MetaDialog" ["e"=1]
"thunlp/Few-NERD" -> "Fritz449/ProtoNER"
"thunlp/Few-NERD" -> "zliucr/CrossNER" ["e"=1]
"thunlp/Few-NERD" -> "yhcc/BARTNER"
"thunlp/Few-NERD" -> "AtmaHou/FewShotTagging" ["e"=1]
"shelleyHLX/text-classification" -> "shelleyHLX/cail"
"shelleyHLX/text-classification" -> "humdingers/2020CAIL_LDLJ"
"asappresearch/structshot" -> "psunlpgroup/CONTaiNER"
"asappresearch/structshot" -> "AChen-qaq/ProML"
"asappresearch/structshot" -> "Fritz449/ProtoNER"
"lipiji/TtT" -> "AutoTemp/Shallow-Aggressive-Decoding"
"lipiji/TtT" -> "destwang/CTCResources"
"lipiji/TtT" -> "imrdong/cged-crf"
"lipiji/TtT" -> "FDChongLi/TwoWaysToImproveCSC"
"lipiji/TtT" -> "destwang/CTC2021"
"lipiji/TtT" -> "DaDaMrX/ReaLiSe"
"autoliuweijie/BERT-whitening-pytorch" -> "bojone/BERT-whitening"
"autoliuweijie/BERT-whitening-pytorch" -> "bojone/SimCSE"
"autoliuweijie/BERT-whitening-pytorch" -> "bohanli/BERT-flow"
"autoliuweijie/BERT-whitening-pytorch" -> "Jun-jie-Huang/WhiteningBERT"
"autoliuweijie/BERT-whitening-pytorch" -> "zhengyanzhao1997/NLP-model"
"autoliuweijie/BERT-whitening-pytorch" -> "ZhuiyiTechnology/simbert"
"autoliuweijie/BERT-whitening-pytorch" -> "shawroad/CoSENT_Pytorch"
"autoliuweijie/BERT-whitening-pytorch" -> "UKPLab/pytorch-bertflow"
"autoliuweijie/BERT-whitening-pytorch" -> "yym6472/ConSERT"
"autoliuweijie/BERT-whitening-pytorch" -> "nilboy/gaic_track3_pair_sim" ["e"=1]
"autoliuweijie/BERT-whitening-pytorch" -> "ZhuiyiTechnology/pretrained-models"
"autoliuweijie/BERT-whitening-pytorch" -> "KwangKa/SIMCSE_unsup"
"yuzhimanhua/MICoL" -> "yuzhimanhua/FUTEX"
"hy-struggle/ccks_ner" -> "caishiqing/joint-mrc"
"hy-struggle/ccks_ner" -> "hy-struggle/ccks-ee-subject" ["e"=1]
"amazon-science/sccl" -> "rashadulrakib/short-text-clustering-enhancement"
"amazon-science/sccl" -> "hadifar/stc_clustering"
"amazon-science/sccl" -> "Yunfan-Li/Contrastive-Clustering" ["e"=1]
"amazon-science/sccl" -> "yym6472/ConSERT"
"amazon-science/sccl" -> "bojone/SimCSE"
"amazon-science/sccl" -> "thuiar/DeepAligned-Clustering"
"amazon-science/sccl" -> "jacoxu/STC2"
"percent4/UniLM_Chinese_DEMO" -> "mryuan0428/Title_Generator_CN"
"bojone/SimCSE" -> "princeton-nlp/SimCSE"
"bojone/SimCSE" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"bojone/SimCSE" -> "ZhuiyiTechnology/simbert"
"bojone/SimCSE" -> "yym6472/ConSERT"
"bojone/SimCSE" -> "bojone/BERT-whitening"
"bojone/SimCSE" -> "zhengyanzhao1997/NLP-model"
"bojone/SimCSE" -> "ZhuiyiTechnology/roformer-sim"
"bojone/SimCSE" -> "ZhuiyiTechnology/pretrained-models"
"bojone/SimCSE" -> "autoliuweijie/BERT-whitening-pytorch"
"bojone/SimCSE" -> "KwangKa/SIMCSE_unsup"
"bojone/SimCSE" -> "bohanli/BERT-flow"
"bojone/SimCSE" -> "pluto-junzeng/CNSD"
"bojone/SimCSE" -> "zhoujx4/NLP-Series-sentence-embeddings"
"bojone/SimCSE" -> "xinyi-code/SimCSE-Pytorch"
"bojone/SimCSE" -> "dropreg/R-Drop"
"KwangKa/SIMCSE_unsup" -> "Macielyoung/sentence_representation_matching"
"KwangKa/SIMCSE_unsup" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"KwangKa/SIMCSE_unsup" -> "xinyi-code/SimCSE-Pytorch"
"KwangKa/SIMCSE_unsup" -> "zhengyanzhao1997/NLP-model"
"KwangKa/SIMCSE_unsup" -> "zhoujx4/NLP-Series-sentence-embeddings"
"KwangKa/SIMCSE_unsup" -> "renmada/sentence_bert_chinese"
"KwangKa/SIMCSE_unsup" -> "wakafengfan/simcse-pytorch"
"KwangKa/SIMCSE_unsup" -> "bojone/SimCSE"
"gitabtion/BertBasedCorrectionModels" -> "gitabtion/SoftMaskedBert-PyTorch"
"gitabtion/BertBasedCorrectionModels" -> "liushulinle/PLOME"
"gitabtion/BertBasedCorrectionModels" -> "destwang/CTCResources"
"gitabtion/BertBasedCorrectionModels" -> "wdimmy/Automatic-Corpus-Generation"
"gitabtion/BertBasedCorrectionModels" -> "whgaara/pytorch-soft-masked-bert"
"gitabtion/BertBasedCorrectionModels" -> "hiyoung123/SoftMaskedBert" ["e"=1]
"gitabtion/BertBasedCorrectionModels" -> "nghuyong/Chinese-text-correction-papers"
"gitabtion/BertBasedCorrectionModels" -> "FDChongLi/TwoWaysToImproveCSC"
"gitabtion/BertBasedCorrectionModels" -> "destwang/CTC2021"
"gitabtion/BertBasedCorrectionModels" -> "HillZhang1999/MuCGEC"
"gitabtion/BertBasedCorrectionModels" -> "fushengwuyu/chinese_spelling_correction"
"gitabtion/BertBasedCorrectionModels" -> "liushulinle/CRASpell"
"gitabtion/BertBasedCorrectionModels" -> "ACL2020SpellGCN/SpellGCN"
"gitabtion/BertBasedCorrectionModels" -> "DaDaMrX/ReaLiSe"
"gitabtion/BertBasedCorrectionModels" -> "gingasan/lemon"
"CoderMusou/MECT4CNER" -> "CoderMusou/NFLAT4CNER"
"CoderMusou/MECT4CNER" -> "cchen-reese/Boundary-Enhanced-NER"
"wzzzd/lm_ner" -> "qukequke/bert-crf-token_classification_ner"
"yym6472/ConSERT" -> "bojone/SimCSE"
"yym6472/ConSERT" -> "princeton-nlp/SimCSE"
"yym6472/ConSERT" -> "bohanli/BERT-flow"
"yym6472/ConSERT" -> "DataTerminatorX/Keyword-BERT"
"yym6472/ConSERT" -> "dropreg/R-Drop"
"yym6472/ConSERT" -> "amazon-science/sccl"
"yym6472/ConSERT" -> "ZhuiyiTechnology/simbert"
"yym6472/ConSERT" -> "bojone/BERT-whitening"
"yym6472/ConSERT" -> "princeton-nlp/LM-BFF" ["e"=1]
"yym6472/ConSERT" -> "JohnGiorgi/DeCLUTR"
"yym6472/ConSERT" -> "autoliuweijie/BERT-whitening-pytorch"
"yym6472/ConSERT" -> "CLUEbenchmark/FewCLUE"
"yym6472/ConSERT" -> "ZhuiyiTechnology/pretrained-models"
"yym6472/ConSERT" -> "zhoujx4/NLP-Series-sentence-embeddings"
"yym6472/ConSERT" -> "alibaba/AliceMind"
"ttzHome/AnchiBERT" -> "dayihengliu/a2m_chineseNMT"
"ttzHome/AnchiBERT" -> "raynardj/yuan"
"ttzHome/AnchiBERT" -> "Ethan-yt/CCLUE"
"takawitter/trie4j" -> "digitalstain/DoubleArrayTrie"
"SALT-NLP/LADA" -> "jiacheng-ye/UANet"
"liushulinle/PLOME" -> "DaDaMrX/ReaLiSe"
"liushulinle/PLOME" -> "destwang/CTCResources"
"liushulinle/PLOME" -> "liushulinle/CRASpell"
"liushulinle/PLOME" -> "FDChongLi/TwoWaysToImproveCSC"
"liushulinle/PLOME" -> "ACL2020SpellGCN/SpellGCN"
"liushulinle/PLOME" -> "gitabtion/BertBasedCorrectionModels"
"liushulinle/PLOME" -> "nghuyong/Chinese-text-correction-papers"
"liushulinle/PLOME" -> "destwang/DCN"
"liushulinle/PLOME" -> "wdimmy/Automatic-Corpus-Generation"
"liushulinle/PLOME" -> "destwang/CTC2021"
"liushulinle/PLOME" -> "jiahaozhenbang/SCOPE"
"liushulinle/PLOME" -> "ShannonAI/ChineseBert"
"liushulinle/PLOME" -> "lipiji/TtT"
"liushulinle/PLOME" -> "hiyoung123/SoftMaskedBert" ["e"=1]
"liushulinle/PLOME" -> "gingasan/lemon"
"destwang/DCN" -> "FDChongLi/TwoWaysToImproveCSC"
"destwang/DCN" -> "destwang/CTC2021"
"destwang/DCN" -> "jiahaozhenbang/SCOPE"
"destwang/DCN" -> "DaDaMrX/ReaLiSe"
"destwang/DCN" -> "destwang/CTCResources"
"destwang/CTCResources" -> "destwang/CTC2021"
"destwang/CTCResources" -> "DaDaMrX/ReaLiSe"
"destwang/CTCResources" -> "destwang/DCN"
"destwang/CTCResources" -> "liushulinle/PLOME"
"destwang/CTCResources" -> "nghuyong/Chinese-text-correction-papers"
"destwang/CTCResources" -> "HillZhang1999/MuCGEC"
"destwang/CTCResources" -> "wdimmy/Automatic-Corpus-Generation"
"destwang/CTCResources" -> "lipiji/TtT"
"destwang/CTCResources" -> "FDChongLi/TwoWaysToImproveCSC"
"destwang/CTCResources" -> "blcuicall/CCL2022-CLTC"
"destwang/CTCResources" -> "gitabtion/BertBasedCorrectionModels"
"destwang/CTCResources" -> "nghuyong/cscd-ns"
"destwang/CTCResources" -> "jiahaozhenbang/SCOPE"
"destwang/CTCResources" -> "ACL2020SpellGCN/SpellGCN"
"destwang/CTCResources" -> "HillZhang1999/NaSGEC"
"renmada/t5-pegasus-pytorch" -> "ZhuiyiTechnology/t5-pegasus"
"renmada/t5-pegasus-pytorch" -> "SunnyGJing/t5-pegasus-chinese"
"renmada/t5-pegasus-pytorch" -> "fastnlp/CPT"
"renmada/t5-pegasus-pytorch" -> "bojone/SPACES"
"renmada/t5-pegasus-pytorch" -> "liucongg/GPT2-NewsTitle"
"renmada/t5-pegasus-pytorch" -> "YunwenTechnology/Unilm"
"renmada/t5-pegasus-pytorch" -> "JunnYu/RoFormer_pytorch"
"renmada/t5-pegasus-pytorch" -> "gaohongkui/GlobalPointer_pytorch" ["e"=1]
"renmada/t5-pegasus-pytorch" -> "bojone/t5_in_bert4keras"
"gitabtion/SoftMaskedBert-PyTorch" -> "gitabtion/BertBasedCorrectionModels"
"gitabtion/SoftMaskedBert-PyTorch" -> "destwang/CTC2021"
"gitabtion/SoftMaskedBert-PyTorch" -> "liushulinle/CRASpell"
"gitabtion/SoftMaskedBert-PyTorch" -> "DaDaMrX/ReaLiSe"
"gitabtion/SoftMaskedBert-PyTorch" -> "whgaara/pytorch-soft-masked-bert"
"gitabtion/SoftMaskedBert-PyTorch" -> "wdimmy/Automatic-Corpus-Generation"
"gitabtion/SoftMaskedBert-PyTorch" -> "wangwang110/CSC"
"FDChongLi/TwoWaysToImproveCSC" -> "destwang/DCN"
"FDChongLi/TwoWaysToImproveCSC" -> "sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check"
"FDChongLi/TwoWaysToImproveCSC" -> "DaDaMrX/ReaLiSe"
"FDChongLi/TwoWaysToImproveCSC" -> "geekjuruo/LEAD"
"FDChongLi/TwoWaysToImproveCSC" -> "liushulinle/PLOME"
"FDChongLi/TwoWaysToImproveCSC" -> "mnhng/HeadFilt"
"FDChongLi/TwoWaysToImproveCSC" -> "yzhihao/MCSCSet"
"destwang/CTC2021" -> "destwang/CTCResources"
"destwang/CTC2021" -> "destwang/DCN"
"destwang/CTC2021" -> "DaDaMrX/ReaLiSe"
"destwang/CTC2021" -> "gitabtion/SoftMaskedBert-PyTorch"
"destwang/CTC2021" -> "sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check"
"destwang/CTC2021" -> "wdimmy/Automatic-Corpus-Generation"
"destwang/CTC2021" -> "liushulinle/PLOME"
"destwang/CTC2021" -> "FDChongLi/TwoWaysToImproveCSC"
"destwang/CTC2021" -> "HillZhang1999/CTC-Report"
"destwang/CTC2021" -> "lipiji/TtT"
"yhcc/BARTNER" -> "dainlp/acl2020-transition-discontinuous-ner"
"yhcc/BARTNER" -> "Akeepers/LEAR"
"yhcc/BARTNER" -> "foxlf823/sodner"
"yhcc/BARTNER" -> "juntaoy/biaffine-ner"
"yhcc/BARTNER" -> "ljynlp/W2NER"
"yhcc/BARTNER" -> "neulab/SpanNER"
"yhcc/BARTNER" -> "thunlp/PL-Marker" ["e"=1]
"yhcc/BARTNER" -> "fastnlp/TENER"
"yhcc/BARTNER" -> "ShannonAI/KNN-NER"
"JetRunner/MetaDistil" -> "bzantium/pytorch-PKD-for-BERT-compression"
"monk1337/Graph-Neural-networks-for-NLP" -> "monk1337/Unbox"
"monk1337/Graph-Neural-networks-for-NLP" -> "monk1337/Mixclu"
"Ethan-yt/guwen-models" -> "Ethan-yt/guwenbert"
"Ethan-yt/guwen-models" -> "Ethan-yt/CCLUE"
"Ethan-yt/guwen-models" -> "hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing"
"Ethan-yt/guwen-models" -> "jizijing/C-CLUE"
"Ethan-yt/guwen-models" -> "KoichiYasuoka/UD-Kanbun"
"Ethan-yt/guwen-models" -> "CIRCSE/LT4HALA"
"Ethan-yt/guwen-models" -> "Jihuai-wpy/bert-ancient-chinese"
"Ethan-yt/guwen-models" -> "jiaeyan/Jiayan"
"Ethan-yt/guwen-models" -> "BangBOOM/Classical-Chinese"
"Ethan-yt/guwen-models" -> "iris2hu/ancient_chinese_sense_annotation"
"Ethan-yt/guwen-models" -> "ttzHome/AnchiBERT"
"LeePleased/NegSampling-NER" -> "neulab/SpanNER"
"taishan1994/pytorch_bert_multi_classification" -> "murray-z/multi_label_classification"
"taishan1994/pytorch_bert_multi_classification" -> "taishan1994/pytorch_bert_event_extraction" ["e"=1]
"suolyer/PyTorch_BERT_Biaffine_NER" -> "juntaoy/biaffine-ner"
"suolyer/PyTorch_BERT_Biaffine_NER" -> "xueyouluo/Biaffine-BERT-NER"
"suolyer/PyTorch_BERT_Biaffine_NER" -> "tricktreat/locate-and-label"
"suolyer/PyTorch_BERT_Biaffine_NER" -> "syuoni/eznlp"
"zqtan1024/sequence-to-set" -> "tricktreat/locate-and-label"
"zqtan1024/sequence-to-set" -> "tricktreat/piqn"
"zqtan1024/sequence-to-set" -> "XiPotatonium/pnr"
"virufy/virufy-data" -> "virufy/virufy-covid"
"zhoujx4/NLP-Series-sentence-embeddings" -> "KwangKa/SIMCSE_unsup"
"zhoujx4/NLP-Series-sentence-embeddings" -> "pluto-junzeng/CNSD"
"zhoujx4/NLP-Series-sentence-embeddings" -> "xinyi-code/SimCSE-Pytorch"
"zhoujx4/NLP-Series-sentence-embeddings" -> "yangjianxin1/SimCSE"
"zhoujx4/NLP-Series-sentence-embeddings" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"zhoujx4/NLP-Series-sentence-embeddings" -> "Macielyoung/sentence_representation_matching"
"zhoujx4/NLP-Series-sentence-embeddings" -> "shawroad/CoSENT_Pytorch"
"zhoujx4/NLP-Series-sentence-embeddings" -> "taishan1994/sbert_text_similarity"
"zhoujx4/NLP-Series-sentence-embeddings" -> "renmada/sentence_bert_chinese"
"zhoujx4/NLP-Series-sentence-embeddings" -> "bojone/SimCSE"
"zhoujx4/NLP-Series-sentence-embeddings" -> "zhengyanzhao1997/NLP-model"
"aviclu/CDLM" -> "ariecattan/coref"
"aviclu/CDLM" -> "shanybar/event_entity_coref_ecb_plus"
"aviclu/CDLM" -> "AlonEirew/cross-doc-event-coref"
"aviclu/CDLM" -> "AlonEirew/extract-wec"
"DengBoCong/nlp-dialogue" -> "DengBoCong/Algorithm"
"DengBoCong/nlp-dialogue" -> "DengBoCong/aided_driving_app"
"DengBoCong/nlp-dialogue" -> "DengBoCong/WelcomePage"
"crux82/ganbert-pytorch" -> "crux82/ganbert"
"yuzhimanhua/MotifClass" -> "yuzhimanhua/FUTEX"
"shangjingbo1226/SegPhrase" -> "shangjingbo1226/AutoPhrase"
"shangjingbo1226/SegPhrase" -> "remenberl/SegPhrase-MultiLingual"
"shangjingbo1226/SegPhrase" -> "INK-USC/ClusType"
"shangjingbo1226/SegPhrase" -> "BangLiu/ConcepT"
"shangjingbo1226/SegPhrase" -> "anirudyd/topmine"
"shangjingbo1226/SegPhrase" -> "remenberl/Latent-Keyphrase-Inference"
"shangjingbo1226/SegPhrase" -> "kno10/WikipediaEntities"
"shangjingbo1226/SegPhrase" -> "LiyuanLucasLiu/LightNER"
"shangjingbo1226/SegPhrase" -> "mjiang89/MetaPAD"
"YJiangcm/Chinese-sentence-pair-modeling" -> "YJiangcm/BMC" ["e"=1]
"taku910/crfpp" -> "chokkan/crfsuite"
"taku910/crfpp" -> "Intel-bigdata/CRF-Spark" ["e"=1]
"taku910/crfpp" -> "Jekub/Wapiti"
"taku910/crfpp" -> "scrapinghub/python-crfsuite"
"taku910/crfpp" -> "guillaumegenthial/sequence_tagging"
"taku910/crfpp" -> "yandex/faster-rnnlm" ["e"=1]
"taku910/crfpp" -> "timvieira/crf"
"taku910/crfpp" -> "phychaos/pycrfpp"
"taku910/crfpp" -> "lzhang10/maxent"
"taku910/crfpp" -> "glample/tagger"
"taku910/crfpp" -> "moses-smt/giza-pp" ["e"=1]
"liuhuanyong/CommonSchemaKG" -> "liuhuanyong/DescriptionKBExtraction"
"freelawproject/eyecite" -> "freelawproject/reporters-db"
"freelawproject/eyecite" -> "mscarey/AuthoritySpoke"
"freelawproject/eyecite" -> "freelawproject/courts-db"
"freelawproject/eyecite" -> "freelawproject/juriscraper"
"freelawproject/eyecite" -> "freelawproject/citation-regexes"
"freelawproject/eyecite" -> "unitedstates/citation"
"freelawproject/eyecite" -> "freelawproject/doctor"
"freelawproject/eyecite" -> "LexPredict/lexpredict-legal-dictionary"
"freelawproject/eyecite" -> "freelawproject/courtlistener"
"yumeng5/LOTClass" -> "425776024/LOTClass"
"yumeng5/LOTClass" -> "dheeraj7596/ConWea"
"yumeng5/LOTClass" -> "ZihanWangKi/XClass"
"yumeng5/LOTClass" -> "yumeng5/CatE"
"yumeng5/LOTClass" -> "SALT-NLP/MixText"
"yumeng5/LOTClass" -> "yumeng5/WeSHClass"
"yumeng5/LOTClass" -> "yumeng5/WeSTClass"
"yumeng5/LOTClass" -> "yumeng5/RoSTER"
"thuiar/DeepAligned-Clustering" -> "thuiar/Adaptive-Decision-Boundary"
"thuiar/DeepAligned-Clustering" -> "thuiar/CDAC-plus"
"thuiar/DeepAligned-Clustering" -> "thuiar/OKD-Reading-List"
"thuiar/DeepAligned-Clustering" -> "fanolabs/NID_ACLARR2022"
"thuiar/DeepAligned-Clustering" -> "thuiar/TEXTOIR"
"thuiar/DeepAligned-Clustering" -> "parZival27/supervised-contrastive-learning-for-out-of-domain-detection"
"thuiar/DeepAligned-Clustering" -> "clinc/oos-eval" ["e"=1]
"moon-hotel/TransformerTranslation" -> "moon-hotel/BertWithPretrained"
"moon-hotel/TransformerTranslation" -> "moon-hotel/TransformerClassification"
"moon-hotel/TransformerTranslation" -> "moon-hotel/TransformerCouplet"
"moon-hotel/TransformerTranslation" -> "moon-hotel/DeepLearningWithMe"
"bohanli/BERT-flow" -> "bojone/BERT-whitening"
"bohanli/BERT-flow" -> "bojone/SimCSE"
"bohanli/BERT-flow" -> "yym6472/ConSERT"
"bohanli/BERT-flow" -> "autoliuweijie/BERT-whitening-pytorch"
"bohanli/BERT-flow" -> "autoliuweijie/FastBERT"
"bohanli/BERT-flow" -> "ZhuiyiTechnology/pretrained-models"
"bohanli/BERT-flow" -> "UKPLab/pytorch-bertflow"
"bohanli/BERT-flow" -> "ZhuiyiTechnology/simbert"
"bohanli/BERT-flow" -> "ZhuiyiTechnology/WoBERT"
"bohanli/BERT-flow" -> "LeeSureman/Flat-Lattice-Transformer"
"bohanli/BERT-flow" -> "airaria/TextBrewer"
"bohanli/BERT-flow" -> "DataTerminatorX/Keyword-BERT"
"bohanli/BERT-flow" -> "princeton-nlp/SimCSE"
"bohanli/BERT-flow" -> "ymcui/Chinese-ELECTRA"
"bohanli/BERT-flow" -> "bojone/CoSENT"
"risshun/Chinese_Laws" -> "chuan6/structured-law-document"
"risshun/Chinese_Laws" -> "FanhuaandLuomu/ParseLawDocuments"
"risshun/Chinese_Laws" -> "ShenDezhou/lawa"
"bojone/t5_in_bert4keras" -> "bojone/CPM_LM_bert4keras"
"bojone/t5_in_bert4keras" -> "ZhuiyiTechnology/t5-pegasus"
"bojone/t5_in_bert4keras" -> "CLUEbenchmark/CLGE"
"bojone/t5_in_bert4keras" -> "bojone/SPACES"
"bojone/t5_in_bert4keras" -> "google-research/multilingual-t5"
"whgaara/pytorch-soft-masked-bert" -> "wanglke/Soft-Masked-BERT"
"whgaara/pytorch-soft-masked-bert" -> "fushengwuyu/chinese_spelling_correction"
"whgaara/pytorch-soft-masked-bert" -> "whgaara/pytorch-roberta"
"whgaara/pytorch-soft-masked-bert" -> "gitabtion/BertBasedCorrectionModels"
"whgaara/pytorch-soft-masked-bert" -> "ACL2020SpellGCN/SpellGCN"
"whgaara/pytorch-soft-masked-bert" -> "sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check"
"whgaara/pytorch-soft-masked-bert" -> "gitabtion/SoftMaskedBert-PyTorch"
"whgaara/pytorch-soft-masked-bert" -> "liushulinle/CRASpell"
"whgaara/pytorch-soft-masked-bert" -> "hiyoung123/SoftMaskedBert" ["e"=1]
"freelawproject/x-ray" -> "freelawproject/recap-chrome"
"freelawproject/x-ray" -> "freelawproject/doctor"
"freelawproject/x-ray" -> "freelawproject/courts-db"
"iris2hu/ancient_chinese_sense_annotation" -> "GoThereGit/EvaHan"
"iris2hu/ancient_chinese_sense_annotation" -> "iris2hu/L2C-rater"
"troublemaker-r/Chinese_Coreference_Resolution" -> "vdobrovolskii/wl-coref"
"troublemaker-r/Chinese_Coreference_Resolution" -> "mandarjoshi90/coref"
"virufy/virufy-covid" -> "virufy/virufy-data"
"kwsy/FictionAnalysis" -> "yuanren88/python-"
"kwsy/FictionAnalysis" -> "xinydev/NovelConversationCorpus"
"kwsy/FictionAnalysis" -> "renjunxiang/Text_Generate"
"cdubiel08/Earnings-Calls-NLP" -> "nilijing/Earnings_Call_Analyzed_By_NLP"
"ericperfect/libtorch_tokenizer" -> "dhpollack/huggingface_libtorch"
"ericperfect/libtorch_tokenizer" -> "LeeJuly30/BERTCpp"
"freelawproject/judge-pics" -> "freelawproject/seal-rookery"
"jacoxu/StackOverflow" -> "jacoxu/STC2"
"pln-fing-udelar/pghumor" -> "Orekhov/SentenceBreaking"
"pln-fing-udelar/pghumor" -> "bryant1410/trsh"
"pln-fing-udelar/pghumor" -> "AniSkywalker/SarcasmDetection"
"JavaStudenttwo/BERT_MRC" -> "taishan1994/BERT_MRC_NER_chinese"
"RingBDStack/KPGNN" -> "RingBDStack/FinEvent"
"edgetrader/esg-nlp" -> "databricks-industry-solutions/esg-scoring"
"edgetrader/esg-nlp" -> "shweta-29/Companies_ESG_Scraper"
"edgetrader/esg-nlp" -> "hannahawalsh/ESG_AI"
"edgetrader/esg-nlp" -> "adamFinastra/ESGAI"
"edgetrader/esg-nlp" -> "nikwilms/ESG-Score-Prediction-from-Sustainability-Reports"
"nilijing/Earnings_Call_Analyzed_By_NLP" -> "RCJansonVTFL/SeekingAlphaWebScrape"
"freefuiiismyname/ddz-ai" -> "xmxoxo/vector_server"
"zhangzibin/char-rnn-chinese" -> "hit-computer/char-rnn-tf"
"adamFinastra/ESGAI" -> "jihyeonseong/ESG-AI-investment-by-streamlit"
"conll/reference-coreference-scorers" -> "kiankd/events"
"conll/reference-coreference-scorers" -> "bkntr/coref-ee"
"conll/reference-coreference-scorers" -> "shanybar/event_entity_coref_ecb_plus"
"conll/reference-coreference-scorers" -> "shayneobrien/coreference-resolution"
"SuffolkLITLab/docassemble-AssemblyLine" -> "SuffolkLITLab/docassemble-ALWeaver"
"SuffolkLITLab/docassemble-AssemblyLine" -> "SuffolkLITLab/docassemble-ALToolbox"
"austinjhunt/msci_esg" -> "shweta-29/Companies_ESG_Scraper"
"Law-AI/DELSumm" -> "Law-AI/automatic-charge-identification"
"emorynlp/coref-hoi" -> "lxucs/coref-hoi"
"emorynlp/coref-hoi" -> "ariecattan/coref"
"yuzhimanhua/HIMECat" -> "yuzhimanhua/HiGitClass"
"yuzhimanhua/HIMECat" -> "yuzhimanhua/MetaCat"
"yuzhimanhua/HIMECat" -> "yuzhimanhua/PENNER"
"yuzhimanhua/HIMECat" -> "yuzhimanhua/FUTEX"
"RCJansonVTFL/SeekingAlphaWebScrape" -> "nilijing/Earnings_Call_Analyzed_By_NLP"
"RCJansonVTFL/SeekingAlphaWebScrape" -> "hamid-vakilzadeh/SeekingAlpha-Scraper"
"BatsResearch/zsl-kg" -> "BatsResearch/taglets"
"BatsResearch/zsl-kg" -> "BatsResearch/alfred"
"BatsResearch/zsl-kg" -> "BatsResearch/ex2"
"BatsResearch/zsl-kg" -> "BatsResearch/csp"
"BatsResearch/zsl-kg" -> "BatsResearch/efsl"
"pitrack/incremental-coref" -> "shtoshni/long-doc-coref"
"teanalab/FieldedSDM" -> "laura-dietz/tutorial-kb4ir"
"teanalab/FieldedSDM" -> "iai-group/DBpedia-Entity"
"monk1337/Awesome-Question-Answering" -> "monk1337/Mixclu"
"monk1337/Awesome-Question-Answering" -> "openlifescience-ai/ai-deadlines"
"renmada/sentence_bert_chinese" -> "KwangKa/SIMCSE_unsup"
"xueyouluo/Biaffine-BERT-NER" -> "xueyouluo/biaffine-bert-relation-extract"
"fjklqq/Geocoding" -> "bitlap/geocoding"
"fjklqq/Geocoding" -> "liuzhibin-cn/address-semantic-search"
"fjklqq/Geocoding" -> "taishan1994/address_normalize"
"Happleasei/Chinese-Grammatical-error-diagnosis" -> "LorraineZhou/NLP-CGED"
"CHIANGEL/Research-Paper-Note" -> "CHIANGEL/GraphCM"
"lacuna-technologies/clerkent" -> "officeanddragons/awesome-lawtech"
"lacuna-technologies/clerkent" -> "DotDoug/TreatiseAI"
"thuiar/TEXTOIR-DEMO" -> "thuiar/TEXTOIR"
"ExplainableML/czsl" -> "BatsResearch/csp"
"ExplainableML/czsl" -> "haoosz/ade-czsl"
"ExplainableML/czsl" -> "Tushar-N/attributes-as-operators"
"ExplainableML/czsl" -> "wqshmzh/CANet-CZSL"
"ExplainableML/czsl" -> "XDUxyLi/SCEN-master"
"ExplainableML/czsl" -> "yeliudev/ConsNet" ["e"=1]
"ExplainableML/czsl" -> "bighuang624/Troika"
"ExplainableML/czsl" -> "zhaohengz/CAILA"
"jizijing/C-CLUE" -> "CIRCSE/LT4HALA"
"jizijing/C-CLUE" -> "Jihuai-wpy/bert-ancient-chinese"
"jizijing/C-CLUE" -> "Ethan-yt/guwen-models"
"jizijing/C-CLUE" -> "hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing"
"cehinson/ERRANT_ZH" -> "mnhng/HeadFilt"
"shtoshni/long-doc-coref" -> "pitrack/incremental-coref"
"tricktreat/locate-and-label" -> "zqtan1024/sequence-to-set"
"tricktreat/locate-and-label" -> "tricktreat/piqn"
"tricktreat/locate-and-label" -> "juntaoy/biaffine-ner"
"tricktreat/locate-and-label" -> "thecharm/boundary-aware-nested-ner"
"tricktreat/locate-and-label" -> "tricktreat/PromptNER"
"tricktreat/locate-and-label" -> "tricktreat/trimf"
"tricktreat/locate-and-label" -> "yhcc/CNN_Nested_NER"
"Law-AI/automatic-charge-identification" -> "Law-AI/DELSumm"
"CHIANGEL/GraphCM" -> "CHIANGEL/Research-Paper-Note"
"CHIANGEL/GraphCM" -> "CHIANGEL/Neural-Click-Model"
"medelman17/blackstone-api" -> "medelman17/socrates-api"
"stanleylsx/bert_nlu_joint" -> "stanleylsx/uie_torch"
"hellonlp/classifier_multi_label_denses" -> "hellonlp/classifier_multi_label_seq2seq_attention"
"alali3030/earnings_calls_NLP" -> "nilijing/Earnings_Call_Analyzed_By_NLP"
"JieyuZ2/TMN" -> "yueyu1030/STEAM"
"JieyuZ2/TMN" -> "sheryc/HEF"
"DM2-ND/GenTaxo" -> "sheryc/HEF"
"sheryc/HEF" -> "DM2-ND/GenTaxo"
"sheryc/HEF" -> "yueyu1030/STEAM"
"minqukanq/transformer-pytorch" -> "minqukanq/extract-video-keyframe"
"Deriq-Qian-Dong/LGRe" -> "anareta48/anareata48"
"Deriq-Qian-Dong/R-former" -> "Deriq-Qian-Dong/RLCF"
"Deriq-Qian-Dong/R-former" -> "CSQianDong/KERM"
"hellonlp/classifier_multi_label_seq2seq_attention" -> "hellonlp/classifier_multi_label_denses"
"yangjianxin1/LEBERT-NER-Chinese" -> "liuwei1206/LEBERT"
"yangjianxin1/LEBERT-NER-Chinese" -> "suolyer/PyTorch_BERT_SimpleLexicon_NER"
"yangjianxin1/LEBERT-NER-Chinese" -> "DSXiangLi/ChineseNER"
"yangjianxin1/LEBERT-NER-Chinese" -> "taishan1994/W2NER_predict"
"yangjianxin1/LEBERT-NER-Chinese" -> "ShannonAI/KNN-NER"
"yangjianxin1/LEBERT-NER-Chinese" -> "CoderMusou/NFLAT4CNER"
"yangjianxin1/LEBERT-NER-Chinese" -> "v-mipeng/LexiconAugmentedNER"
"NiuTrans/Classical-Modern" -> "jiaeyan/Jiayan"
"NiuTrans/Classical-Modern" -> "Ethan-yt/guwenbert"
"NiuTrans/Classical-Modern" -> "BangBOOM/Classical-Chinese"
"NiuTrans/Classical-Modern" -> "Ethan-yt/guwen-models"
"NiuTrans/Classical-Modern" -> "garychowcmu/daizhigev20"
"NiuTrans/Classical-Modern" -> "Scagin/CCTC"
"NiuTrans/Classical-Modern" -> "mahavivo/scripta-sinica"
"NiuTrans/Classical-Modern" -> "hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing"
"NiuTrans/Classical-Modern" -> "raynardj/yuan"
"NiuTrans/Classical-Modern" -> "Werneror/Poetry"
"NiuTrans/Classical-Modern" -> "cloudyskyy/Guwen-UNILM"
"NiuTrans/Classical-Modern" -> "Xunzi-LLM-of-Chinese-classics/XunziALLM"
"NiuTrans/Classical-Modern" -> "yxcs/poems-db"
"NiuTrans/Classical-Modern" -> "esbatmop/MNBVC" ["e"=1]
"NiuTrans/Classical-Modern" -> "caoxingyu/chinese-gushiwen"
"hsc748NLP/code-for-digital-humanities-tutorial" -> "hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing"
"hsc748NLP/code-for-digital-humanities-tutorial" -> "hsc748NLP/sikufenci"
"hsc748NLP/code-for-digital-humanities-tutorial" -> "jizijing/C-CLUE"
"hsc748NLP/code-for-digital-humanities-tutorial" -> "CIRCSE/LT4HALA"
"hsc748NLP/code-for-digital-humanities-tutorial" -> "Jihuai-wpy/bert-ancient-chinese"
"hsc748NLP/code-for-digital-humanities-tutorial" -> "Xunzi-LLM-of-Chinese-classics/XunziALLM"
"inspirehep/magpie" -> "RandolphVI/Multi-Label-Text-Classification"
"inspirehep/magpie" -> "lonePatient/Bert-Multi-Label-Text-Classification"
"inspirehep/magpie" -> "chenzhi1992/Multi-Label-Text-Classification"
"inspirehep/magpie" -> "may-/cnn-re-tf" ["e"=1]
"inspirehep/magpie" -> "jiegzhan/multi-class-text-classification-cnn" ["e"=1]
"inspirehep/magpie" -> "richliao/textClassifier" ["e"=1]
"inspirehep/magpie" -> "brightmart/sentiment_analysis_fine_grain"
"inspirehep/magpie" -> "Tencent/NeuralNLP-NeuralClassifier"
"inspirehep/magpie" -> "davidsbatista/text-classification"
"inspirehep/magpie" -> "brightmart/text_classification"
"inspirehep/magpie" -> "pangwong/pytorch-multi-label-classifier" ["e"=1]
"inspirehep/magpie" -> "jiegzhan/multi-class-text-classification-cnn-rnn" ["e"=1]
"inspirehep/magpie" -> "BartyzalRadek/Multi-label-Inception-net" ["e"=1]
"inspirehep/magpie" -> "dongxiexidian/Chinese"
"inspirehep/magpie" -> "2shou/TextGrocery"
"liuhuanyong/ChainKnowledgeGraph" -> "liuhuanyong/DomainWordsDict"
"liuhuanyong/ChainKnowledgeGraph" -> "heastup/Industrychain"
"liuhuanyong/ChainKnowledgeGraph" -> "M0025/KnowledgeGraphOfA-shareCompanys" ["e"=1]
"liuhuanyong/ChainKnowledgeGraph" -> "liuhuanyong/PersonGraphDataSet" ["e"=1]
"michaelliao/simple-match-engine" -> "michaelliao/simple-trading-engine"
"raynardj/yuan" -> "BangBOOM/Classical-Chinese"
"raynardj/yuan" -> "ttzHome/AnchiBERT"
"raynardj/yuan" -> "Ethan-yt/CCLUE"
"nltk/nltk_data" -> "explosion/spacy-models" ["e"=1]
"nltk/nltk_data" -> "nltk/nltk" ["e"=1]
"nltk/nltk_data" -> "zlsdu/Word-Embedding"
"nltk/nltk_data" -> "nltk/nltk_book"
"nltk/nltk_data" -> "Embedding/Chinese-Word-Vectors"
"nltk/nltk_data" -> "lonePatient/BERT-NER-Pytorch"
"nltk/nltk_data" -> "hankcs/pyhanlp"
"nltk/nltk_data" -> "CLUEbenchmark/CLUEDatasetSearch"
"nltk/nltk_data" -> "bojone/bert4keras"
"nltk/nltk_data" -> "ymcui/Chinese-BERT-wwm"
"nltk/nltk_data" -> "InsaneLife/ChineseNLPCorpus"
"nltk/nltk_data" -> "brightmart/nlp_chinese_corpus"
"nltk/nltk_data" -> "goto456/stopwords"
"nltk/nltk_data" -> "luopeixiang/named_entity_recognition"
"nltk/nltk_data" -> "terrifyzhao/bert-utils"
"jiesutd/YEDDA" -> "deepwel/Chinese-Annotator"
"jiesutd/YEDDA" -> "nlplab/brat"
"jiesutd/YEDDA" -> "jiesutd/LatticeLSTM"
"jiesutd/YEDDA" -> "synyi/poplar"
"jiesutd/YEDDA" -> "zjy-ucas/ChineseNER"
"jiesutd/YEDDA" -> "jiesutd/NCRFpp"
"jiesutd/YEDDA" -> "crownpku/Information-Extraction-Chinese"
"jiesutd/YEDDA" -> "FXLP/MarkTool"
"jiesutd/YEDDA" -> "macanv/BERT-BiLSTM-CRF-NER"
"jiesutd/YEDDA" -> "ProHiryu/bert-chinese-ner"
"jiesutd/YEDDA" -> "shiyybua/NER"
"jiesutd/YEDDA" -> "machinalis/iepy" ["e"=1]
"jiesutd/YEDDA" -> "thunlp/OpenNRE"
"jiesutd/YEDDA" -> "brightmart/albert_zh"
"jiesutd/YEDDA" -> "hltcoe/golden-horse"
"smilli/py-corenlp" -> "dasmith/stanford-corenlp-python"
"smilli/py-corenlp" -> "hhsecond/corenlp_pywrap"
"smilli/py-corenlp" -> "stanfordnlp/python-stanford-corenlp"
"smilli/py-corenlp" -> "smartschat/cort"
"smilli/py-corenlp" -> "Lynten/stanford-corenlp"
"smilli/py-corenlp" -> "brendano/stanford_corenlp_pywrapper"
"taozhijiang/chinese_correct_wsd" -> "PengheLiu/Cn_Speck_Checker"
"taozhijiang/chinese_correct_wsd" -> "beyondacm/Autochecker4Chinese"
"taozhijiang/chinese_correct_wsd" -> "apanly/proofreadv1"
"taozhijiang/chinese_correct_wsd" -> "BiLiangLtd/WordSimilarity"
"taozhijiang/chinese_correct_wsd" -> "ccheng16/correction"
"taozhijiang/chinese_correct_wsd" -> "fssqawj/SentenceSim" ["e"=1]
"taozhijiang/chinese_correct_wsd" -> "yaleimeng/Final_word_Similarity"
"pytries/datrie" -> "pytries/marisa-trie"
"pytries/datrie" -> "pytries/DAWG"
"pytries/datrie" -> "pytries/hat-trie"
"pytries/datrie" -> "google/pygtrie"
"pytries/datrie" -> "pytries/DAWG-Python"
"cjh0613/tencent-sensitive-words" -> "fwwdn/sensitive-stop-words"
"cjh0613/tencent-sensitive-words" -> "cjh0613/strict-sensitive-word"
"cjh0613/tencent-sensitive-words" -> "qloog/sensitive_words"
"cjh0613/tencent-sensitive-words" -> "57ing/Sensitive-word"
"cjh0613/tencent-sensitive-words" -> "bosnzt/wordscheck"
"cjh0613/tencent-sensitive-words" -> "observerss/textfilter"
"cjh0613/tencent-sensitive-words" -> "konsheng/Sensitive-lexicon"
"cjh0613/tencent-sensitive-words" -> "jkiss/sensitive-words"
"cjh0613/tencent-sensitive-words" -> "toolgood/ToolGood.Words" ["e"=1]
"cjh0613/tencent-sensitive-words" -> "k5h9999/keywordfilter"
"cjh0613/tencent-sensitive-words" -> "qxchuckle/vsc-cec-ide" ["e"=1]
"cjh0613/tencent-sensitive-words" -> "houbb/sensitive-word" ["e"=1]
"cjh0613/tencent-sensitive-words" -> "importcjj/sensitive" ["e"=1]
"cjh0613/tencent-sensitive-words" -> "chason777777/mgck"
"cjh0613/tencent-sensitive-words" -> "andyzty/sensitivewd-filter"
"SunnyGJing/t5-pegasus-chinese" -> "ZhuiyiTechnology/t5-pegasus"
"SunnyGJing/t5-pegasus-chinese" -> "renmada/t5-pegasus-pytorch"
"SunnyGJing/t5-pegasus-chinese" -> "qingkongzhiqian/GPT2-Summary"
"SunnyGJing/t5-pegasus-chinese" -> "Icelame-31/news_title_summary_generate"
"SunnyGJing/t5-pegasus-chinese" -> "LowinLi/Text-Summarizer-Pytorch-Chinese"
"SunnyGJing/t5-pegasus-chinese" -> "bojone/SPACES"
"SunnyGJing/t5-pegasus-chinese" -> "fastnlp/CPT"
"lansinuote/Huggingface_Toturials" -> "lansinuote/Huggingface_Task"
"lansinuote/Huggingface_Toturials" -> "zyds/transformers-code" ["e"=1]
"lansinuote/Huggingface_Toturials" -> "wangle1218/KBQA-for-Diagnosis" ["e"=1]
"lansinuote/Huggingface_Toturials" -> "leerumor/nlp_tutorial"
"lansinuote/Huggingface_Toturials" -> "lansinuote/NER_in_Chinese"
"lansinuote/Huggingface_Toturials" -> "moon-hotel/BertWithPretrained"
"lansinuote/Huggingface_Toturials" -> "lansinuote/Transformer_Example"
"lansinuote/Huggingface_Toturials" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"lansinuote/Huggingface_Toturials" -> "wmathor/nlp-tutorial"
"lansinuote/Huggingface_Toturials" -> "DA-southampton/Read_Bert_Code"
"lansinuote/Huggingface_Toturials" -> "liucongg/ChatGLM-Finetuning" ["e"=1]
"lansinuote/Huggingface_Toturials" -> "TingFree/NLPer-Arsenal"
"lansinuote/Huggingface_Toturials" -> "yuanzhoulvpi2017/zero_nlp" ["e"=1]
"lansinuote/Huggingface_Toturials" -> "datawhalechina/learn-nlp-with-transformers" ["e"=1]
"lansinuote/Huggingface_Toturials" -> "km1994/LLMsNineStoryDemonTower" ["e"=1]
"nghuyong/Chinese-text-correction-papers" -> "taishan1994/awesome-chinese-text-correction"
"nghuyong/Chinese-text-correction-papers" -> "destwang/CTCResources"
"nghuyong/Chinese-text-correction-papers" -> "HillZhang1999/MuCGEC"
"nghuyong/Chinese-text-correction-papers" -> "DaDaMrX/ReaLiSe"
"nghuyong/Chinese-text-correction-papers" -> "masr2000/CLG-CGEC"
"nghuyong/Chinese-text-correction-papers" -> "gingasan/lemon"
"nghuyong/Chinese-text-correction-papers" -> "liushulinle/PLOME"
"nghuyong/Chinese-text-correction-papers" -> "jiahaozhenbang/SCOPE"
"nghuyong/Chinese-text-correction-papers" -> "gitabtion/BertBasedCorrectionModels"
"nghuyong/Chinese-text-correction-papers" -> "wdimmy/Automatic-Corpus-Generation"
"nghuyong/Chinese-text-correction-papers" -> "liushulinle/CRASpell"
"nghuyong/Chinese-text-correction-papers" -> "Claude-Liu/ReLM"
"nghuyong/Chinese-text-correction-papers" -> "HillZhang1999/NaSGEC"
"nghuyong/Chinese-text-correction-papers" -> "xlxwalex/FCGEC"
"nghuyong/Chinese-text-correction-papers" -> "nghuyong/cscd-ns"
"RanKKI/LawRefBook" -> "LawRefBook/Laws"
"RanKKI/LawRefBook" -> "pengxiao-song/awesome-chinese-legal-resources"
"RanKKI/LawRefBook" -> "LiuHC0428/LAW-GPT"
"RanKKI/LawRefBook" -> "lvwzhen/law-cn-ai" ["e"=1]
"RanKKI/LawRefBook" -> "CSHaitao/LexiLaw"
"RanKKI/LawRefBook" -> "xloger/LawRefBookAndroid"
"RanKKI/LawRefBook" -> "ImCa0/just-laws" ["e"=1]
"RanKKI/LawRefBook" -> "AndrewZhe/lawyer-llama"
"RanKKI/LawRefBook" -> "pengxiao-song/LaWGPT"
"RanKKI/LawRefBook" -> "PKU-YuanGroup/ChatLaw" ["e"=1]
"RanKKI/LawRefBook" -> "liuhuanyong/CrimeKgAssitant"
"RanKKI/LawRefBook" -> "feeddd/feeds" ["e"=1]
"RanKKI/LawRefBook" -> "FudanDISC/DISC-LawLLM"
"RanKKI/LawRefBook" -> "liuhuanyong/LawCrimeMining"
"RanKKI/LawRefBook" -> "metowolf/vCards" ["e"=1]
"YeDeming/THUTag" -> "thunlp/THUTag"
"alibaba/EasyNLP" -> "alibaba/EasyCV" ["e"=1]
"alibaba/EasyNLP" -> "IDEA-CCNL/Fengshenbang-LM" ["e"=1]
"alibaba/EasyNLP" -> "alibaba/AliceMind"
"alibaba/EasyNLP" -> "princeton-nlp/SimCSE"
"alibaba/EasyNLP" -> "CLUEbenchmark/CLUE"
"alibaba/EasyNLP" -> "alibaba/EasyTransfer"
"alibaba/EasyNLP" -> "loujie0822/DeepIE"
"alibaba/EasyNLP" -> "dbiir/UER-py"
"alibaba/EasyNLP" -> "airaria/TextBrewer"
"alibaba/EasyNLP" -> "LianjiaTech/BELLE" ["e"=1]
"alibaba/EasyNLP" -> "TingFree/NLPer-Arsenal"
"alibaba/EasyNLP" -> "thunlp/OpenPrompt" ["e"=1]
"alibaba/EasyNLP" -> "425776024/nlpcda"
"alibaba/EasyNLP" -> "brightmart/roberta_zh"
"alibaba/EasyNLP" -> "ZhuiyiTechnology/pretrained-models"
"allenai/tango" -> "MaksymDel/allennlp-light"
"allenai/tango" -> "allenai/catwalk" ["e"=1]
"allenai/tango" -> "allenai/allennlp-models"
"kfcd/chaizi" -> "howl-anderson/hanzi_chaizi"
"kfcd/chaizi" -> "howl-anderson/hanzi_char_featurizer"
"kfcd/chaizi" -> "contr4l/SimilarCharacter"
"kfcd/chaizi" -> "cjkvi/cjkvi-ids" ["e"=1]
"kfcd/chaizi" -> "zhangyics/Chinese-abbreviation-dataset"
"kfcd/chaizi" -> "hanzi-chai/chai"
"kfcd/chaizi" -> "skishore/makemeahanzi" ["e"=1]
"kfcd/chaizi" -> "iqiyi/FASPell"
"kfcd/chaizi" -> "mozillazg/pinyin-data"
"kfcd/chaizi" -> "wainshine/Chinese-Names-Corpus"
"kfcd/chaizi" -> "ShannonAI/ChineseBert"
"kfcd/chaizi" -> "houbb/nlp-hanzi-similar"
"kfcd/chaizi" -> "ShannonAI/glyce"
"kfcd/chaizi" -> "guotong1988/chinese_dictionary"
"kfcd/chaizi" -> "mozillazg/phrase-pinyin-data"
"liuhuanyong/DomainWordsDict" -> "liuhuanyong/ChineseSemanticKB"
"liuhuanyong/DomainWordsDict" -> "liuhuanyong/ChainKnowledgeGraph"
"liuhuanyong/DomainWordsDict" -> "CLUEbenchmark/SimCLUE"
"liuhuanyong/DomainWordsDict" -> "sunyilgdx/SIFRank_zh" ["e"=1]
"liuhuanyong/DomainWordsDict" -> "425776024/nlpcda"
"liuhuanyong/DomainWordsDict" -> "CLUEbenchmark/KgCLUE" ["e"=1]
"liuhuanyong/DomainWordsDict" -> "mapull/chinese-dictionary"
"liuhuanyong/DomainWordsDict" -> "liuhuanyong/TextGrapher" ["e"=1]
"liuhuanyong/DomainWordsDict" -> "guotong1988/chinese_dictionary"
"liuhuanyong/DomainWordsDict" -> "YunwenTechnology/Unilm"
"liuhuanyong/DomainWordsDict" -> "contr4l/SimilarCharacter"
"liuhuanyong/DomainWordsDict" -> "HUSTAI/uie_pytorch" ["e"=1]
"liuhuanyong/DomainWordsDict" -> "liucongg/NLPDataSet"
"LawRefBook/Laws" -> "lvwzhen/law-cn-ai" ["e"=1]
"LawRefBook/Laws" -> "pengxiao-song/awesome-chinese-legal-resources"
"LawRefBook/Laws" -> "LiuHC0428/LAW-GPT"
"LawRefBook/Laws" -> "RanKKI/LawRefBook"
"LawRefBook/Laws" -> "CSHaitao/LexiLaw"
"LawRefBook/Laws" -> "AndrewZhe/lawyer-llama"
"LawRefBook/Laws" -> "pengxiao-song/LaWGPT"
"LawRefBook/Laws" -> "liuhuanyong/LawCrimeMining"
"LawRefBook/Laws" -> "liuhuanyong/CrimeKgAssitant"
"LawRefBook/Laws" -> "FudanDISC/DISC-LawLLM"
"LawRefBook/Laws" -> "PKU-YuanGroup/ChatLaw" ["e"=1]
"LawRefBook/Laws" -> "supabase-community/nextjs-openai-doc-search" ["e"=1]
"LawRefBook/Laws" -> "zhihaiLLM/wisdomInterrogatory"
"LawRefBook/Laws" -> "open-compass/LawBench"
"LawRefBook/Laws" -> "CSHaitao/Awesome-LegalAI-Resources"
"lansinuote/Transformer_Example" -> "lansinuote/NLP-Toturials"
"lansinuote/Transformer_Example" -> "lansinuote/Diffusion_From_Scratch"
"lansinuote/Transformer_Example" -> "lansinuote/Simple_Generative_in_PyTorch"
"cheng6076/SNLI-attention" -> "iassael/torch-bnlstm" ["e"=1]
"cheng6076/SNLI-attention" -> "junfenglx/reasoning_attention"
"cheng6076/SNLI-attention" -> "facebookarchive/torch-rnnlib" ["e"=1]
"cheng6076/SNLI-attention" -> "shuohangwang/SeqMatchSeq" ["e"=1]
"cheng6076/SNLI-attention" -> "shyamupa/snli-entailment"
"hltcoe/golden-horse" -> "jiesutd/LatticeLSTM"
"hltcoe/golden-horse" -> "v-mipeng/LexiconAugmentedNER"
"hltcoe/golden-horse" -> "CPF-NLPR/AT4ChineseNER"
"hltcoe/golden-horse" -> "zjy-ucas/ChineseNER"
"hltcoe/golden-horse" -> "LeeSureman/Flat-Lattice-Transformer"
"hltcoe/golden-horse" -> "lancopku/Chinese-Literature-NER-RE-Dataset" ["e"=1]
"hltcoe/golden-horse" -> "glample/tagger"
"hltcoe/golden-horse" -> "jiesutd/RichWordSegmentor"
"hltcoe/golden-horse" -> "ShannonAI/mrc-for-flat-nested-ner"
"hltcoe/golden-horse" -> "OYE93/Chinese-NLP-Corpus"
"hltcoe/golden-horse" -> "iesl/dilated-cnn-ner"
"hltcoe/golden-horse" -> "CLUEbenchmark/CLUENER2020"
"hltcoe/golden-horse" -> "crownpku/Information-Extraction-Chinese"
"hltcoe/golden-horse" -> "ProHiryu/bert-chinese-ner"
"hltcoe/golden-horse" -> "RowitZou/LGN"
"ljynlp/W2NER" -> "thunlp/PL-Marker" ["e"=1]
"ljynlp/W2NER" -> "liuwei1206/LEBERT"
"ljynlp/W2NER" -> "syuoni/eznlp"
"ljynlp/W2NER" -> "LeeSureman/Flat-Lattice-Transformer"
"ljynlp/W2NER" -> "yhcc/BARTNER"
"ljynlp/W2NER" -> "gaohongkui/GlobalPointer_pytorch" ["e"=1]
"ljynlp/W2NER" -> "ShannonAI/mrc-for-flat-nested-ner"
"ljynlp/W2NER" -> "taishan1994/awesome-chinese-ner"
"ljynlp/W2NER" -> "universal-ie/UIE" ["e"=1]
"ljynlp/W2NER" -> "princeton-nlp/PURE" ["e"=1]
"ljynlp/W2NER" -> "xhw205/Efficient-GlobalPointer-torch" ["e"=1]
"ljynlp/W2NER" -> "v-mipeng/LexiconAugmentedNER"
"ljynlp/W2NER" -> "lonePatient/BERT-NER-Pytorch"
"ljynlp/W2NER" -> "suolyer/PyTorch_BERT_Biaffine_NER"
"ljynlp/W2NER" -> "yangjianxin1/LEBERT-NER-Chinese"
"lining0806/TextMining" -> "lining0806/TextClassify2"
"lining0806/TextMining" -> "lining0806/TextFilter"
"lining0806/TextMining" -> "Jacen789/HotNewsAnalysis"
"lining0806/TextMining" -> "Roshanson/TextInfoExp"
"xlvchao/spartacus" -> "michaelliao/warpexchange"
"TianRanPig/chinese_ner" -> "yuanphoenix/Bert-BiLSTM-CRF"
"TianRanPig/chinese_ner" -> "jjljkjljk/BERT-NER-Chinese"
"muyuuuu/E-commerce-Search-Recall" -> "enze5088/WenTianSearch"
"muyuuuu/E-commerce-Search-Recall" -> "zwkkk/wentian-rank2"
"muyuuuu/E-commerce-Search-Recall" -> "bugensui/WenTianSearch"
"zwkkk/wentian-rank2" -> "muyuuuu/E-commerce-Search-Recall"
"Langboat/Mengzi" -> "Langboat/mengzi-zero-shot"
"Langboat/Mengzi" -> "shawroad/CoSENT_Pytorch"
"Langboat/Mengzi" -> "renmada/t5-pegasus-pytorch"
"Langboat/Mengzi" -> "yym6472/ConSERT"
"Langboat/Mengzi" -> "JunnYu/RoFormer_pytorch"
"Langboat/Mengzi" -> "YunwenTechnology/Unilm"
"Langboat/Mengzi" -> "fastnlp/CPT"
"Langboat/Mengzi" -> "clue-ai/PromptCLUE" ["e"=1]
"Langboat/Mengzi" -> "OpenBMB/CPM-Live" ["e"=1]
"Langboat/Mengzi" -> "CLUEbenchmark/CLUECorpus2020"
"zejunwang1/CSTS" -> "CLUEbenchmark/SimCLUE"
"zejunwang1/CSTS" -> "pluto-junzeng/CNSD"
"zejunwang1/CSTS" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"zejunwang1/CSTS" -> "bojone/SimCSE"
"zejunwang1/CSTS" -> "liucongg/NLPDataSet"
"zejunwang1/CSTS" -> "zhoujx4/NLP-Series-sentence-embeddings"
"zejunwang1/CSTS" -> "wangyuxinwhy/uniem" ["e"=1]
"zejunwang1/CSTS" -> "zhaogaofeng611/TextMatch"
"zejunwang1/CSTS" -> "ZhuiyiTechnology/simbert"
"zejunwang1/CSTS" -> "xinyi-code/SimCSE-Pytorch"
"taishan1994/awesome-chinese-ner" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"taishan1994/awesome-chinese-ner" -> "ljynlp/W2NER"
"taishan1994/awesome-chinese-ner" -> "taishan1994/BERT-BILSTM-CRF"
"taishan1994/awesome-chinese-ner" -> "quqxui/Awesome-LLM4IE-Papers" ["e"=1]
"taishan1994/awesome-chinese-ner" -> "cocacola-lab/ChatIE" ["e"=1]
"taishan1994/awesome-chinese-ner" -> "modelscope/AdaSeq" ["e"=1]
"taishan1994/awesome-chinese-ner" -> "taishan1994/pytorch_triple_extraction" ["e"=1]
"taishan1994/awesome-chinese-ner" -> "yangjianxin1/LEBERT-NER-Chinese"
"taishan1994/awesome-chinese-ner" -> "hemingkx/CLUENER2020"
"taishan1994/awesome-chinese-ner" -> "LeeSureman/Flat-Lattice-Transformer"
"taishan1994/awesome-chinese-ner" -> "lonePatient/BERT-NER-Pytorch"
"taishan1994/awesome-chinese-ner" -> "syuoni/eznlp"
"taishan1994/awesome-chinese-ner" -> "taishan1994/BERT-Relation-Extraction" ["e"=1]
"taishan1994/awesome-chinese-ner" -> "DSXiangLi/ChineseNER"
"taishan1994/awesome-chinese-ner" -> "ShuheWang1998/GPT-NER" ["e"=1]
"xueyouluo/ccks2021-track2-code" -> "wodejiafeiyu/ccks2021-track3-top1"
"xueyouluo/ccks2021-track2-code" -> "xueyouluo/Biaffine-BERT-NER"
"xueyouluo/ccks2021-track2-code" -> "leodotnet/neural-chinese-address-parsing"
"xueyouluo/ccks2021-track2-code" -> "qq1065507891/ChineseAddressNER"
"yaoxingcheng/TLM" -> "sunyilgdx/NSP-BERT"
"aopolin-lv/ECSpell" -> "geekjuruo/LEAD"
"aopolin-lv/ECSpell" -> "gingasan/lemon"
"aopolin-lv/ECSpell" -> "jiahaozhenbang/SCOPE"
"aopolin-lv/ECSpell" -> "nghuyong/cscd-ns"
"aopolin-lv/ECSpell" -> "liushulinle/CRASpell"
"aopolin-lv/ECSpell" -> "ruisun1/Mask-Predict-main"
"aopolin-lv/ECSpell" -> "yzhihao/MCSCSet"
"aopolin-lv/ECSpell" -> "DaDaMrX/ReaLiSe"
"pystruct/pystruct" -> "scrapinghub/python-crfsuite"
"pystruct/pystruct" -> "opengm/opengm"
"pystruct/pystruct" -> "larsmans/seqlearn"
"pystruct/pystruct" -> "pystruct/pyqpbo"
"pystruct/pystruct" -> "y0ast/Variational-Autoencoder" ["e"=1]
"pystruct/pystruct" -> "chokkan/crfsuite"
"wodejiafeiyu/ccks2021-track3-top1" -> "xueyouluo/ccks2021-track2-code"
"wodejiafeiyu/ccks2021-track3-top1" -> "leodotnet/neural-chinese-address-parsing"
"thunlp/LEVEN" -> "china-ai-law-challenge/CAIL2022"
"thunlp/LEVEN" -> "ruc-wjyu/IOT-Match"
"thunlp/LEVEN" -> "myx666/LeCaRD"
"thunlp/LEVEN" -> "thunlp/LegalPLMs"
"thunlp/LEVEN" -> "prometheusXN/LADAN"
"thunlp/LEVEN" -> "Executedone/CAIL2021_LAJS"
"bamboo512/ModernChineseDict" -> "CNMan/XDHYCD7th"
"bamboo512/ModernChineseDict" -> "VimWei/MdxSourceBuilder" ["e"=1]
"bamboo512/ModernChineseDict" -> "Litles/AutoMdxBuilder" ["e"=1]
"bamboo512/ModernChineseDict" -> "CNMan/XDHYDCD"
"opengm/opengm" -> "pystruct/pystruct"
"opengm/opengm" -> "pystruct/pyqpbo"
"opengm/opengm" -> "ukoethe/vigra"
"opengm/opengm" -> "aliosmanulusoy/Probabilistic-Volumetric-3D-Reconstruction"
"opengm/opengm" -> "dthuerck/mapmap_cpu"
"TeamHG-Memex/sklearn-crfsuite" -> "scrapinghub/python-crfsuite"
"TeamHG-Memex/sklearn-crfsuite" -> "chokkan/crfsuite"
"TeamHG-Memex/sklearn-crfsuite" -> "larsmans/seqlearn"
"TeamHG-Memex/sklearn-crfsuite" -> "timvieira/crf"
"voidism/DiffCSE" -> "Sense-GVT/SNCSE"
"voidism/DiffCSE" -> "perceptiveshawty/RankCSE"
"voidism/DiffCSE" -> "amzn/trans-encoder"
"Oreomeow/Law-Book" -> "xmmmmmovo/FaBao"
"Oreomeow/Law-Book" -> "hecongqing/Legal-Charge-Prediction"
"almondtools/stringsearchalgorithms" -> "almondtools/stringbench"
"houbb/nlp-hanzi-similar" -> "contr4l/SimilarCharacter"
"houbb/nlp-hanzi-similar" -> "houbb/word-checker"
"houbb/nlp-hanzi-similar" -> "houbb/segment"
"houbb/nlp-hanzi-similar" -> "qingyujean/ssc"
"houbb/nlp-hanzi-similar" -> "howl-anderson/hanzi_chaizi"
"houbb/nlp-hanzi-similar" -> "destwang/CTCResources"
"houbb/nlp-hanzi-similar" -> "houbb/pinyin"
"houbb/nlp-hanzi-similar" -> "howl-anderson/hanzi_char_featurizer"
"houbb/nlp-hanzi-similar" -> "kfcd/chaizi"
"houbb/nlp-hanzi-similar" -> "secsilm/zi-dataset"
"yongzhuo/Pytorch-NLU" -> "hellonlp/classifier-multi-label"
"yongzhuo/Pytorch-NLU" -> "hellonlp/classifier_multi_label"
"yongzhuo/Pytorch-NLU" -> "yongzhuo/Keras-TextClassification"
"yongzhuo/Pytorch-NLU" -> "percent4/keras_bert_multi_label_cls"
"yongzhuo/Pytorch-NLU" -> "neesetifa/bert_classification" ["e"=1]
"murray-z/multi_label_classification" -> "lushishuai/BERT-ROBERTA-pytorch-multi-label-classification"
"murray-z/multi_label_classification" -> "taishan1994/pytorch_bert_multi_classification"
"murray-z/multi_label_classification" -> "hellonlp/classifier-multi-label"
"murray-z/multi_label_classification" -> "percent4/keras_bert_multi_label_cls"
"shawroad/Semantic-Textual-Similarity-Pytorch" -> "shawroad/CoSENT_Pytorch"
"shawroad/Semantic-Textual-Similarity-Pytorch" -> "xinyi-code/SimCSE-Pytorch"
"shawroad/Semantic-Textual-Similarity-Pytorch" -> "bojone/CoSENT"
"shawroad/Semantic-Textual-Similarity-Pytorch" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"shawroad/Semantic-Textual-Similarity-Pytorch" -> "Macielyoung/sentence_representation_matching"
"shawroad/Semantic-Textual-Similarity-Pytorch" -> "zhoujx4/NLP-Series-sentence-embeddings"
"mapull/chinese-dictionary" -> "mozillazg/pinyin-data"
"mapull/chinese-dictionary" -> "mozillazg/phrase-pinyin-data"
"mapull/chinese-dictionary" -> "CNMan/XDHYCD7th"
"mapull/chinese-dictionary" -> "lxs602/Chinese-Mandarin-Dictionaries"
"mapull/chinese-dictionary" -> "yxcs/poems-db"
"mapull/chinese-dictionary" -> "kfcd/chaizi"
"mapull/chinese-dictionary" -> "pwxcoo/chinese-xinhua"
"mapull/chinese-dictionary" -> "chanind/hanzi-writer-data" ["e"=1]
"mapull/chinese-dictionary" -> "yihui/zdict.js"
"mapull/chinese-dictionary" -> "theajack/cnchar" ["e"=1]
"mapull/chinese-dictionary" -> "liuhuanyong/DomainWordsDict"
"mapull/chinese-dictionary" -> "caoxingyu/chinese-gushiwen"
"mapull/chinese-dictionary" -> "skishore/makemeahanzi" ["e"=1]
"mapull/chinese-dictionary" -> "secsilm/zi-dataset"
"mapull/chinese-dictionary" -> "dengxiuqi/ChineseLyrics" ["e"=1]
"blcuicall/YACLC" -> "blcuicall/GEC-Reading-List"
"blcuicall/YACLC" -> "blcuicall/SimpDefiner"
"blcuicall/YACLC" -> "blcuicall/litmind-dictionary"
"blcuicall/YACLC" -> "Jason3900/corenlp_client" ["e"=1]
"blcuicall/YACLC" -> "blcuicall/CCL2022-CLTC"
"blcuicall/YACLC" -> "blcuicall/cged_datasets"
"blcuicall/YACLC" -> "blcuicall/OMGEval"
"blcuicall/YACLC" -> "blcuicall/BLCU-HPC"
"kongds/Prompt-BERT" -> "kongds/scaling_sentemb"
"kongds/Prompt-BERT" -> "thunlp/KnowledgeablePromptTuning" ["e"=1]
"kongds/Prompt-BERT" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"kongds/Prompt-BERT" -> "Macielyoung/sentence_representation_matching"
"kongds/Prompt-BERT" -> "Sense-GVT/SNCSE"
"kongds/Prompt-BERT" -> "xinyi-code/SimCSE-Pytorch"
"kongds/Prompt-BERT" -> "princeton-nlp/SimCSE"
"kongds/Prompt-BERT" -> "sunyilgdx/NSP-BERT"
"kongds/Prompt-BERT" -> "YJiangcm/PromCSE"
"kongds/Prompt-BERT" -> "princeton-nlp/LM-BFF" ["e"=1]
"kongds/Prompt-BERT" -> "caskcsg/sentemb"
"kongds/Prompt-BERT" -> "voidism/DiffCSE"
"kongds/Prompt-BERT" -> "zhengyanzhao1997/NLP-model"
"coastalcph/lex-glue" -> "HazyResearch/legalbench"
"coastalcph/lex-glue" -> "Breakend/PileOfLaw"
"coastalcph/lex-glue" -> "openlegaldata/awesome-legal-data"
"coastalcph/lex-glue" -> "reglab/casehold"
"coastalcph/lex-glue" -> "coastalcph/zeroshot_lexglue"
"coastalcph/lex-glue" -> "maastrichtlawtech/awesome-legal-nlp"
"coastalcph/lex-glue" -> "mscarey/AuthoritySpoke"
"coastalcph/lex-glue" -> "Liquid-Legal-Institute/Legal-Ontologies"
"CLUEbenchmark/SimCLUE" -> "zejunwang1/CSTS"
"CLUEbenchmark/SimCLUE" -> "ZhuiyiTechnology/roformer-sim"
"CLUEbenchmark/SimCLUE" -> "bojone/CoSENT"
"CLUEbenchmark/SimCLUE" -> "ZhuiyiTechnology/simbert"
"CLUEbenchmark/SimCLUE" -> "bojone/SimCSE"
"CLUEbenchmark/SimCLUE" -> "shawroad/CoSENT_Pytorch"
"CLUEbenchmark/SimCLUE" -> "pluto-junzeng/CNSD"
"candlewill/Chinsese_word_vectors" -> "to-shimo/chinese-word2vec"
"HillZhang1999/MuCGEC" -> "HillZhang1999/NaSGEC"
"HillZhang1999/MuCGEC" -> "destwang/CTCResources"
"HillZhang1999/MuCGEC" -> "nghuyong/Chinese-text-correction-papers"
"HillZhang1999/MuCGEC" -> "HillZhang1999/SynGEC"
"HillZhang1999/MuCGEC" -> "DaDaMrX/ReaLiSe"
"HillZhang1999/MuCGEC" -> "blcuicall/CCL2022-CLTC"
"HillZhang1999/MuCGEC" -> "xlxwalex/FCGEC"
"HillZhang1999/MuCGEC" -> "gitabtion/BertBasedCorrectionModels"
"HillZhang1999/MuCGEC" -> "wdimmy/Automatic-Corpus-Generation"
"HillZhang1999/MuCGEC" -> "nghuyong/cscd-ns"
"HillZhang1999/MuCGEC" -> "taishan1994/awesome-chinese-text-correction"
"HillZhang1999/MuCGEC" -> "HillZhang1999/CTC-Report"
"HillZhang1999/MuCGEC" -> "liushulinle/PLOME"
"HillZhang1999/MuCGEC" -> "gingasan/lemon"
"HillZhang1999/MuCGEC" -> "destwang/CTC2021"
"bojone/CoSENT" -> "shawroad/CoSENT_Pytorch"
"bojone/CoSENT" -> "shawroad/Semantic-Textual-Similarity-Pytorch"
"bojone/CoSENT" -> "bojone/BERT-whitening"
"bojone/CoSENT" -> "ZhuiyiTechnology/roformer-sim"
"bojone/CoSENT" -> "xiangking/PyTorch_CoSENT"
"bojone/CoSENT" -> "pluto-junzeng/CNSD"
"bojone/CoSENT" -> "bojone/SimCSE"
"bojone/CoSENT" -> "ZhuiyiTechnology/simbert"
"bojone/CoSENT" -> "CLUEbenchmark/SimCLUE"
"bojone/CoSENT" -> "zhoujx4/NLP-Series-sentence-embeddings"
"bojone/CoSENT" -> "bojone/lic2020_baselines" ["e"=1]
"bojone/CoSENT" -> "bohanli/BERT-flow"
"bojone/CoSENT" -> "ZhuiyiTechnology/pretrained-models"
"entropy2333/awesome-multi-label-paper-list" -> "qianlima-lab/HiMatch"
"jkiss/sensitive-words" -> "fwwdn/sensitive-stop-words"
"jkiss/sensitive-words" -> "adlered/DangerousSpamWords"
"jkiss/sensitive-words" -> "cjh0613/tencent-sensitive-words"
"jkiss/sensitive-words" -> "cjh0613/strict-sensitive-word"
"zejunwang1/bert4vec" -> "ZhuiyiTechnology/roformer-sim"
"shawroad/CoSENT_Pytorch" -> "bojone/CoSENT"
"shawroad/CoSENT_Pytorch" -> "shawroad/Semantic-Textual-Similarity-Pytorch"
"shawroad/CoSENT_Pytorch" -> "xiangking/PyTorch_CoSENT"
"shawroad/CoSENT_Pytorch" -> "Macielyoung/sentence_representation_matching"
"shawroad/CoSENT_Pytorch" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"shawroad/CoSENT_Pytorch" -> "zhoujx4/NLP-Series-sentence-embeddings"
"shawroad/CoSENT_Pytorch" -> "zhengyanzhao1997/NLP-model"
"ZhuiyiTechnology/roformer-v2" -> "bojone/CLUE-bert4keras" ["e"=1]
"ZhuiyiTechnology/roformer-v2" -> "ZhuiyiTechnology/GAU-alpha"
"ZhuiyiTechnology/roformer-v2" -> "ZhuiyiTechnology/roformer-sim"
"Akeepers/LEAR" -> "yhcc/BARTNER"
"Akeepers/LEAR" -> "qiufengyuyi/lear_ner_extraction"
"minqukanq/hierarchical-multi-label-text-classification" -> "minqukanq/transformer-pytorch"
"minqukanq/hierarchical-multi-label-text-classification" -> "minqukanq/extract-video-keyframe"
"WoosukKwon/retraining-free-pruning" -> "CASIA-IVA-Lab/FLAP"
"WoosukKwon/retraining-free-pruning" -> "QingruZhang/PLATON"
"WoosukKwon/retraining-free-pruning" -> "kssteven418/LTP"
"WoosukKwon/retraining-free-pruning" -> "huggingface/nn_pruning"
"WoosukKwon/retraining-free-pruning" -> "friendshipkim/neuron-merging"
"WoosukKwon/retraining-free-pruning" -> "tianyic/only_train_once_personal_footprint" ["e"=1]
"WoosukKwon/retraining-free-pruning" -> "princeton-nlp/CoFiPruning"
"yumeng5/TopClus" -> "yumeng5/CatE"
"blcuicall/CCL2022-CLTC" -> "blcuicall/cged_datasets"
"blcuicall/CCL2022-CLTC" -> "xlxwalex/FCGEC"
"blcuicall/CCL2022-CLTC" -> "destwang/CTCResources"
"blcuicall/CCL2022-CLTC" -> "HillZhang1999/NaSGEC"
"blcuicall/CCL2022-CLTC" -> "blcuicall/YACLC"
"blcuicall/CCL2022-CLTC" -> "HillZhang1999/MuCGEC"
"blcuicall/CCL2022-CLTC" -> "DaDaMrX/ReaLiSe"
"blcuicall/CCL2022-CLTC" -> "zhaoyyoo/NLPCC2018_GEC"
"blcuicall/CCL2022-CLTC" -> "AI-confused/CCL2022_CGED-8_Top1_project"
"wzh9969/contrastive-htc" -> "qianlima-lab/HiMatch"
"wzh9969/contrastive-htc" -> "Alibaba-NLP/HiAGM"
"wzh9969/contrastive-htc" -> "kongds/HBGL"
"wzh9969/contrastive-htc" -> "wzh9969/HPT"
"wzh9969/contrastive-htc" -> "Rooooyy/HiTIN"
"wzh9969/contrastive-htc" -> "morningmoni/HiLAP"
"wzh9969/contrastive-htc" -> "1KE-JI/HierVerb"
"wzh9969/contrastive-htc" -> "kk7nc/HDLTex"
"wangwang110/CSC" -> "jiahaozhenbang/SCOPE"
"xuanyuan14/ARES" -> "xuanyuan14/THUIR_WSDM_Cup"
"xuanyuan14/ARES" -> "CSHaitao/THUIR-COLIEE2023"
"xuanyuan14/ARES" -> "oneal2000/Wikiformer"
"xuanyuan14/ARES" -> "CSHaitao/JTR"
"CSQianDong/KERM" -> "Deriq-Qian-Dong/RLCF"
"CSQianDong/KERM" -> "Deriq-Qian-Dong/R-former"
"CSQianDong/KERM" -> "Deriq-Qian-Dong/LGRe"
"jkkummerfeld/berkeley-coreference-analyser" -> "ns-moosavi/coval"
"qukequke/bert_classfication" -> "qukequke/bert-crf-token_classification_ner"
"tricktreat/piqn" -> "zqtan1024/sequence-to-set"
"tricktreat/piqn" -> "tricktreat/PromptNER"
"tricktreat/piqn" -> "tricktreat/locate-and-label"
"hasibi/EntityLinkingInQueries-ELQ" -> "hasibi/EntityLinkingInQueries-Methods"
"hasibi/TAGME-Reproducibility" -> "hasibi/EntityLinkingInQueries-ELQ"
"hasibi/TAGME-Reproducibility" -> "hasibi/EntityLinkingRetrieval-ELR"
"amzn/trans-encoder" -> "cambridgeltl/mirror-bert"
"Macielyoung/sentence_representation_matching" -> "xinyi-code/SimCSE-Pytorch"
"Macielyoung/sentence_representation_matching" -> "KwangKa/SIMCSE_unsup"
"Macielyoung/sentence_representation_matching" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"lunzima/profanities.txt" -> "bryan31/liteBanner"
"lunzima/profanities.txt" -> "nyzhhd/keyword"
"jjljkjljk/SimCSE-Chinese" -> "Macielyoung/sentence_representation_matching"
"jjljkjljk/SimCSE-Chinese" -> "xinyi-code/SimCSE-Pytorch"
"davidfan1224/CAIL2021_Multi-span_MRC" -> "humdingers/2020CAIL_LDLJ"
"YJiangcm/PromCSE" -> "YJiangcm/BMC" ["e"=1]
"YJiangcm/PromCSE" -> "YJiangcm/improved_DeepLOB" ["e"=1]
"YJiangcm/PromCSE" -> "Sense-GVT/SNCSE"
"YJiangcm/PromCSE" -> "amzn/trans-encoder"
"monk1337/Mixclu" -> "coughresearch/cough-classification"
"monk1337/Mixclu" -> "monk1337/Unbox"
"jamong/music-rnn" -> "Kyubyong/neural_tokenizer"
"GoThereGit/EvaHan" -> "iris2hu/ancient_chinese_sense_annotation"
"XingxingZhang/rnnpg" -> "ChaosPKU/Poetry"
"XingxingZhang/rnnpg" -> "DevinZ1993/Chinese-Poetry-Generation"
"XingxingZhang/rnnpg" -> "ckmarkoh/AcrosticPoem"
"XingxingZhang/rnnpg" -> "Disiok/poetry-seq2seq"
"XingxingZhang/rnnpg" -> "ckmarkoh/AcrosticPoem-RNNPG"
"XingxingZhang/rnnpg" -> "fumin/ntm" ["e"=1]
"PolarisRisingWar/text_summarization_chinese" -> "yamonc/New-Pytorch-Chinese"
"PolarisRisingWar/text_summarization_chinese" -> "bxianghui/summarizer"
"sunyilgdx/NSP-BERT" -> "bojone/Pattern-Exploiting-Training"
"sunyilgdx/NSP-BERT" -> "bojone/P-tuning"
"sunyilgdx/NSP-BERT" -> "zhoujx4/NLP-Series-sentence-embeddings"
"xinyi-code/SimCSE-Pytorch" -> "Macielyoung/sentence_representation_matching"
"xinyi-code/SimCSE-Pytorch" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"xinyi-code/SimCSE-Pytorch" -> "KwangKa/SIMCSE_unsup"
"xinyi-code/SimCSE-Pytorch" -> "yangjianxin1/SimCSE"
"xinyi-code/SimCSE-Pytorch" -> "zhengyanzhao1997/NLP-model"
"xinyi-code/SimCSE-Pytorch" -> "zhoujx4/NLP-Series-sentence-embeddings"
"xinyi-code/SimCSE-Pytorch" -> "shawroad/Semantic-Textual-Similarity-Pytorch"
"xinyi-code/SimCSE-Pytorch" -> "jjljkjljk/SimCSE-Chinese"
"xinyi-code/SimCSE-Pytorch" -> "pluto-junzeng/CNSD"
"xinyi-code/SimCSE-Pytorch" -> "caskcsg/sentemb"
"xinyi-code/SimCSE-Pytorch" -> "bojone/SimCSE"
"xinyi-code/SimCSE-Pytorch" -> "shawroad/CoSENT_Pytorch"
"yangjianxin1/SimCSE" -> "xinyi-code/SimCSE-Pytorch"
"yangjianxin1/SimCSE" -> "vdogmcgee/SimCSE-Chinese-Pytorch"
"yangjianxin1/SimCSE" -> "zhengyanzhao1997/NLP-model"
"yangjianxin1/SimCSE" -> "zhoujx4/NLP-Series-sentence-embeddings"
"yangjianxin1/SimCSE" -> "KwangKa/SIMCSE_unsup"
"yangjianxin1/SimCSE" -> "Macielyoung/sentence_representation_matching"
"yangjianxin1/SimCSE" -> "pluto-junzeng/CNSD"
"yangjianxin1/SimCSE" -> "bojone/SimCSE"
"Executedone/CAIL2021_LAJS" -> "myx666/LeCaRD"
"Executedone/CAIL2021_LAJS" -> "china-ai-law-challenge/CAIL2021"
"Executedone/CAIL2021_LAJS" -> "humdingers/2020CAIL_LDLJ"
"enze5088/WenTianSearch" -> "muyuuuu/E-commerce-Search-Recall"
"enze5088/WenTianSearch" -> "zwkkk/wentian-rank2"
"BatsResearch/csp" -> "haoosz/ade-czsl"
"BatsResearch/csp" -> "ExplainableML/czsl"
"BatsResearch/csp" -> "BatsResearch/ex2"
"BatsResearch/csp" -> "bighuang624/Troika"
"BatsResearch/csp" -> "Cogito2012/PLID"
"BatsResearch/csp" -> "BatsResearch/efsl"
"BatsResearch/csp" -> "BatsResearch/taglets"
"zhanghaok/BERT-MRC-NER" -> "taishan1994/BERT_MRC_NER_chinese"
"taishan1994/BERT_MRC_NER_chinese" -> "zhanghaok/BERT-MRC-NER"
"yuanzhoulvpi2017/quick_sentence_transformers" -> "taishan1994/sbert_text_similarity"
"WAPAY/EPM" -> "PolarisRisingWar/LJP_Collection"
"WAPAY/EPM" -> "PolarisRisingWar/pytorch_ljp"
"grezbo/cn_zipcode" -> "xieranmaya/china-city-area-zip-data"
"xueyouluo/speller-bert" -> "xueyouluo/Biaffine-BERT-NER"
"hsc748NLP/sikufenci" -> "CIRCSE/LT4HALA"
"hsc748NLP/sikufenci" -> "Ethan-yt/CCLUE"
"unitedstates/citation" -> "adelevie/walverine"
"unitedstates/citation" -> "unitedstates/uslaw.link"
"unitedstates/citation" -> "unitedstates/uscode"
"unitedstates/citation" -> "unitedstates/legisworks-historical-statutes"
"unitedstates/citation" -> "unitedstates/inspectors-general" ["e"=1]
"unitedstates/citation" -> "freelawproject/eyecite"
"unitedstates/citation" -> "18F/linkify-citations"
"unitedstates/uslaw.link" -> "unitedstates/citation"
"psunlpgroup/CONTaiNER" -> "asappresearch/structshot"
"psunlpgroup/CONTaiNER" -> "liyongqi2002/TadNER"
"psunlpgroup/CONTaiNER" -> "AChen-qaq/ProML"
"psunlpgroup/CONTaiNER" -> "rtmaww/EntLM"
"psunlpgroup/CONTaiNER" -> "Nealcly/templateNER"
"psunlpgroup/CONTaiNER" -> "tricktreat/PromptNER"
"psunlpgroup/CONTaiNER" -> "few-shot-NER-benchmark/BaselineCode"
"liushulinle/CRASpell" -> "geekjuruo/LEAD"
"liushulinle/CRASpell" -> "aopolin-lv/ECSpell"
"liushulinle/CRASpell" -> "jiahaozhenbang/SCOPE"
"liushulinle/CRASpell" -> "liushulinle/PLOME"
"liushulinle/CRASpell" -> "benbijituo/SpellBERT"
"liushulinle/CRASpell" -> "ruisun1/Mask-Predict-main"
"liushulinle/CRASpell" -> "DaDaMrX/ReaLiSe"
"liushulinle/CRASpell" -> "Xuanfang1121/CRASpell_pytorch"
"rtmaww/EntLM" -> "Nealcly/templateNER"
"rtmaww/EntLM" -> "psunlpgroup/CONTaiNER"
"rtmaww/EntLM" -> "liyongqi2002/TadNER"
"rtmaww/EntLM" -> "zjunlp/KnowPrompt" ["e"=1]
"DA-southampton/TRM_tutorial" -> "DA-southampton/Read_Bert_Code"
"RingBDStack/FinEvent" -> "RingBDStack/KPGNN"
"ruc-wjyu/IOT-Match" -> "ThuYShao/BERT-PLI-IJCAI2020"
"yumeng5/RoSTER" -> "zwkatgithub/DSCAU"
"yinwenpeng/Answer_Selection" -> "yinwenpeng/Attentive_Convolution"
"yinwenpeng/Answer_Selection" -> "hanxiao/tf-attentive-conv"
"yinwenpeng/Answer_Selection" -> "galsang/ABCNN"
"IBM/Open-KG-canonicalization" -> "IBM/kbqa-relation-linking"
"IBM/Open-KG-canonicalization" -> "IBM/gnn-taxo-construction"
"qianlima-lab/HiMatch" -> "wzh9969/contrastive-htc"
"qianlima-lab/HiMatch" -> "kongds/HBGL"
"qianlima-lab/HiMatch" -> "RingBDStack/HTCInfoMax"
"qianlima-lab/HiMatch" -> "1KE-JI/HierVerb"
"qianlima-lab/HiMatch" -> "Rooooyy/HiTIN"
"qianlima-lab/HiMatch" -> "Alibaba-NLP/HiAGM"
"kongds/HBGL" -> "qianlima-lab/HiMatch"
"databricks-industry-solutions/esg-scoring" -> "edgetrader/esg-nlp"
"databricks-industry-solutions/esg-scoring" -> "jihyeonseong/ESG-AI-investment-by-streamlit"
"databricks-industry-solutions/esg-scoring" -> "AI4Finance-Foundation/Quantifying-ESG-Alpha-using-Scholar-Big-Data-ICAIF-2020"
"databricks-industry-solutions/esg-scoring" -> "LucS12/ESG-Score-Integration"
"databricks-industry-solutions/esg-scoring" -> "hannahawalsh/ESG_AI"
"databricks-industry-solutions/esg-scoring" -> "adamFinastra/ESGAI"
"vdobrovolskii/wl-coref" -> "lxucs/coref-hoi"
"vdobrovolskii/wl-coref" -> "shtoshni/fast-coref"
"vdobrovolskii/wl-coref" -> "troublemaker-r/Chinese_Coreference_Resolution"
"vdobrovolskii/wl-coref" -> "pitrack/incremental-coref"
"vdobrovolskii/wl-coref" -> "yuvalkirstain/s2e-coref"
"vdobrovolskii/wl-coref" -> "ShannonAI/CorefQA"
"vdobrovolskii/wl-coref" -> "emorynlp/coref-hoi"
"vdobrovolskii/wl-coref" -> "shtoshni/long-doc-coref"
"vdobrovolskii/wl-coref" -> "mandarjoshi90/coref"
"shushanxingzhe/transformers_ner" -> "rikeda71/TorchCRF"
"blcuicall/cged_datasets" -> "blcuicall/CCL2022-CLTC"
"michaelliao/simple-trading-engine" -> "michaelliao/simple-match-engine"
"FudanNLP/CWS_LSTM" -> "FudanNLP/CWS_GatedRNN"
"ZhuiyiTechnology/GAU-alpha" -> "ZhuiyiTechnology/roformer-v2"
"almondtools/stringbench" -> "almondtools/stringsearchalgorithms"
"FudanNLP/CWS_GatedRNN" -> "FudanNLP/CWS_LSTM"
"blcuicall/SimpDefiner" -> "blcuicall/litmind-dictionary"
"blcuicall/SimpDefiner" -> "blcuicall/BLCU-HPC"
"XiPotatonium/pnr" -> "XiPotatonium/chatbot-webui"
"mozillazg/pinyin-data" -> "mozillazg/phrase-pinyin-data"
"mozillazg/pinyin-data" -> "mozillazg/go-pinyin" ["e"=1]
"mozillazg/pinyin-data" -> "mozillazg/python-pinyin"
"mozillazg/pinyin-data" -> "letiantian/ChineseTone"
"mozillazg/pinyin-data" -> "mapull/chinese-dictionary"
"mozillazg/pinyin-data" -> "kfcd/chaizi"
"mozillazg/pinyin-data" -> "kakaobrain/g2pm" ["e"=1]
"mozillazg/pinyin-data" -> "speechio/chinese_text_normalization" ["e"=1]
"mozillazg/pinyin-data" -> "hjzin/PolyphoneDisambiguation"
"mozillazg/pinyin-data" -> "letiantian/Pinyin2Hanzi"
"mozillazg/pinyin-data" -> "mozillazg/rust-pinyin" ["e"=1]
"mozillazg/pinyin-data" -> "thunlp/THUOCL"
"mozillazg/pinyin-data" -> "hotoo/pinyin" ["e"=1]
"mozillazg/pinyin-data" -> "wainshine/Chinese-Names-Corpus"
"mozillazg/pinyin-data" -> "GitYCC/g2pW" ["e"=1]
"glample/tagger" -> "clab/stack-lstm-ner"
"glample/tagger" -> "chilynn/sequence-labeling"
"glample/tagger" -> "guillaumegenthial/sequence_tagging"
"glample/tagger" -> "Franck-Dernoncourt/NeuroNER"
"glample/tagger" -> "monikkinom/ner-lstm"
"glample/tagger" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"glample/tagger" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"glample/tagger" -> "zjy-ucas/ChineseNER"
"glample/tagger" -> "Hironsan/anago"
"glample/tagger" -> "rockingdingo/deepnlp"
"glample/tagger" -> "thunlp/NRE" ["e"=1]
"glample/tagger" -> "jiesutd/NCRFpp"
"glample/tagger" -> "ZhixiuYe/NER-pytorch"
"glample/tagger" -> "hltcoe/golden-horse"
"glample/tagger" -> "LopezGG/NN_NER_tensorFlow"
"shyamupa/snli-entailment" -> "junfenglx/reasoning_attention"
"shyamupa/snli-entailment" -> "codekansas/keras-language-modeling" ["e"=1]
"shyamupa/snli-entailment" -> "vsitzmann/snli-attention-tensorflow"
"shyamupa/snli-entailment" -> "Smerity/keras_snli"
"shyamupa/snli-entailment" -> "cheng6076/SNLI-attention"
"pytries/marisa-trie" -> "s-yata/marisa-trie"
"pytries/marisa-trie" -> "pytries/DAWG"
"pytries/marisa-trie" -> "pytries/datrie"
"pytries/marisa-trie" -> "google/pygtrie"
"pytries/marisa-trie" -> "pytries/DAWG-Python"
"pytries/marisa-trie" -> "WojciechMula/pyahocorasick"
"pytries/marisa-trie" -> "wharris/esmre"
"Jihuai-wpy/bert-ancient-chinese" -> "CIRCSE/LT4HALA"
"Jihuai-wpy/bert-ancient-chinese" -> "jizijing/C-CLUE"
"dongxiexidian/Chinese" -> "HIT-SCIR/pyltp"
"dongxiexidian/Chinese" -> "rainarch/SentiBridge"
"dongxiexidian/Chinese" -> "rockingdingo/deepnlp"
"dongxiexidian/Chinese" -> "koth/kcws"
"dongxiexidian/Chinese" -> "to-shimo/chinese-word2vec"
"dongxiexidian/Chinese" -> "baidu/Familia"
"dongxiexidian/Chinese" -> "crownpku/Small-Chinese-Corpus"
"dongxiexidian/Chinese" -> "sing1ee/dict_build"
"dongxiexidian/Chinese" -> "NTMC-Community/MatchZoo"
"dongxiexidian/Chinese" -> "baidu/AnyQ"
"dongxiexidian/Chinese" -> "nonamestreet/weixin_public_corpus"
"dongxiexidian/Chinese" -> "candlewill/Dialog_Corpus" ["e"=1]
"dongxiexidian/Chinese" -> "Moonshile/ChineseWordSegmentation"
"dongxiexidian/Chinese" -> "Shuang0420/knowledge_graph_demo" ["e"=1]
"dongxiexidian/Chinese" -> "chatopera/insuranceqa-corpus-zh" ["e"=1]
"harpribot/nlp-metrics" -> "vikasnar/Bleu"
"michaelliao/warpexchange" -> "xlvchao/spartacus"
"michaelliao/warpexchange" -> "michaelliao/simple-match-engine"
"michaelliao/warpexchange" -> "michaelliao/summer-framework"
"michaelliao/warpexchange" -> "gitbitex/gitbitex-new" ["e"=1]
"michaelliao/warpexchange" -> "michaelliao/itranswarp"
"bosnzt/wordscheck" -> "cjh0613/tencent-sensitive-words"
"bosnzt/wordscheck" -> "konsheng/Sensitive-lexicon"
"bosnzt/wordscheck" -> "cjh0613/strict-sensitive-word"
"bosnzt/wordscheck" -> "houbb/sensitive-word" ["e"=1]
"JackHCC/Chinese-Text-Classification-PyTorch" -> "illiterate/BertClassifier"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "rsanshierli/EasyBert"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "hellonlp/classifier-multi-label"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "yifanhunter/NLP_textClassifier"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "yongzhuo/Keras-TextClassification"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "649453932/Bert-Chinese-Text-Classification-Pytorch"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "xinyi-code/Chinese-Text-Classification"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "649453932/Chinese-Text-Classification-Pytorch"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "kingglory/Bert_TextCNN_Chinese_classification_Pytorch"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "xiaoqian19940510/text-classification-surveys" ["e"=1]
"JackHCC/Chinese-Text-Classification-PyTorch" -> "shibing624/pytextclassifier"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "BeiCunNan/Sentiment_Analysis_Imdb"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "hscspring/Multi-Label-Text-Classification-for-Chinese"
"JackHCC/Chinese-Text-Classification-PyTorch" -> "mzc421/nlp"
"s-yata/marisa-trie" -> "pytries/marisa-trie"
"s-yata/marisa-trie" -> "s-yata/darts-clone"
"s-yata/marisa-trie" -> "kampersanda/xcdat"
"s-yata/marisa-trie" -> "Tessil/hat-trie" ["e"=1]
"s-yata/marisa-trie" -> "pytries/DAWG"
"s-yata/marisa-trie" -> "dcjones/hat-trie"
"s-yata/marisa-trie" -> "kampersanda/poplar-trie"
"s-yata/marisa-trie" -> "xxsds/sdsl-lite" ["e"=1]
"s-yata/marisa-trie" -> "pytries/datrie"
"s-yata/marisa-trie" -> "simongog/sdsl-lite" ["e"=1]
"s-yata/marisa-trie" -> "kampersanda/fast_succinct_trie"
"s-yata/marisa-trie" -> "armon/libart" ["e"=1]
"s-yata/marisa-trie" -> "efficient/SuRF" ["e"=1]
"HillZhang1999/SynGEC" -> "HillZhang1999/NaSGEC"
"HillZhang1999/SynGEC" -> "HillZhang1999/MuCGEC"
"HillZhang1999/SynGEC" -> "li-aolong/TemplateGEC"
"aditya1503/Siamese-LSTM" -> "jx00109/siamese-lstm-for-sentence-similarity"
"aditya1503/Siamese-LSTM" -> "likejazz/Siamese-LSTM"
"aditya1503/Siamese-LSTM" -> "castorini/MP-CNN-Torch"
"aditya1503/Siamese-LSTM" -> "dhwajraj/deep-siamese-text-similarity"
"aditya1503/Siamese-LSTM" -> "THTBSE/siamese-lstm-network"
"aditya1503/Siamese-LSTM" -> "jwieting/iclr2016" ["e"=1]
"aditya1503/Siamese-LSTM" -> "lampts/my_dl_solutions"
"aditya1503/Siamese-LSTM" -> "nelson-liu/paraphrase-id-tensorflow"
"qloog/sensitive_words" -> "k5h9999/keywordfilter"
"qloog/sensitive_words" -> "andyzty/sensitivewd-filter"
"qloog/sensitive_words" -> "morenjiujiu/sensitive_content_filter"
"qloog/sensitive_words" -> "fwwdn/sensitive-stop-words"
"qloog/sensitive_words" -> "cjh0613/tencent-sensitive-words"
"qloog/sensitive_words" -> "57ing/Sensitive-word"
"letiantian/ChineseTone" -> "letiantian/Pinyin2Hanzi"
"letiantian/ChineseTone" -> "hjzin/PolyphoneDisambiguation"
"letiantian/ChineseTone" -> "mozillazg/pinyin-data"
"letiantian/ChineseTone" -> "mozillazg/phrase-pinyin-data"
"thunlp/THULAC" -> "thunlp/THULAC-Python"
"thunlp/THULAC" -> "HIT-SCIR/ltp"
"thunlp/THULAC" -> "NLPIR-team/NLPIR"
"thunlp/THULAC" -> "yanyiwu/cppjieba"
"thunlp/THULAC" -> "HIT-SCIR/pyltp"
"thunlp/THULAC" -> "thunlp/THULAC-Java" ["e"=1]
"thunlp/THULAC" -> "tsroten/pynlpir"
"thunlp/THULAC" -> "koth/kcws"
"thunlp/THULAC" -> "FudanNLP/fnlp"
"thunlp/THULAC" -> "taku910/crfpp"
"thunlp/THULAC" -> "Lynten/stanford-corenlp"
"thunlp/THULAC" -> "JustFollowUs/Natural-Language-Processing"
"thunlp/THULAC" -> "lancopku/pkuseg-python"
"thunlp/THULAC" -> "thunlp/THUCTC" ["e"=1]
"thunlp/THULAC" -> "sing1ee/dict_build"
"skydark/nstools" -> "yichen0831/opencc-python" ["e"=1]
"skydark/nstools" -> "csdz/nstools"
"skydark/nstools" -> "HIT-SCIR/pyltp"
"skydark/nstools" -> "ProHiryu/bert-chinese-ner"
"skydark/nstools" -> "rainarch/SentiBridge"
"skydark/nstools" -> "CLUEbenchmark/CLUEPretrainedModels"
"skydark/nstools" -> "baidu/information-extraction" ["e"=1]
"skydark/nstools" -> "smoothnlp/SmoothNLP"
"skydark/nstools" -> "ChineseGLUE/ChineseGLUE"
"skydark/nstools" -> "ZhuiyiTechnology/pretrained-models"
"skydark/nstools" -> "panyang/Wikipedia_Word2vec" ["e"=1]
"skydark/nstools" -> "baidu/Familia"
"skydark/nstools" -> "contr4l/SimilarCharacter"
"skydark/nstools" -> "gumblex/zhconv"
"skydark/nstools" -> "kfcd/chaizi"
"thunlp/THULAC-Python" -> "thunlp/THULAC"
"thunlp/THULAC-Python" -> "HIT-SCIR/pyltp"
"thunlp/THULAC-Python" -> "lancopku/pkuseg-python"
"thunlp/THULAC-Python" -> "HIT-SCIR/ltp"
"thunlp/THULAC-Python" -> "isnowfy/snownlp"
"thunlp/THULAC-Python" -> "tsroten/pynlpir"
"thunlp/THULAC-Python" -> "NLPIR-team/NLPIR"
"thunlp/THULAC-Python" -> "hankcs/pyhanlp"
"thunlp/THULAC-Python" -> "rockyzhengwu/FoolNLTK"
"thunlp/THULAC-Python" -> "FudanNLP/fnlp"
"thunlp/THULAC-Python" -> "baidu/Familia"
"thunlp/THULAC-Python" -> "crownpku/Awesome-Chinese-NLP"
"thunlp/THULAC-Python" -> "Embedding/Chinese-Word-Vectors"
"thunlp/THULAC-Python" -> "baidu/lac"
"thunlp/THULAC-Python" -> "koth/kcws"
"PolarisRisingWar/pytorch_ljp" -> "PolarisRisingWar/LJP_Collection"
"dwiel/tensorflow_hmm" -> "MarvinBertin/HiddenMarkovModel_TensorFlow"
"clab/stack-lstm-ner" -> "glample/tagger"
"clab/stack-lstm-ner" -> "abhyudaynj/LSTM-CRF-models"
"clab/stack-lstm-ner" -> "monikkinom/ner-lstm"
"clab/stack-lstm-ner" -> "clab/lstm-parser" ["e"=1]
"clab/stack-lstm-ner" -> "chilynn/sequence-labeling"
"clab/stack-lstm-ner" -> "liu-nlper/NER-LSTM-CRF"
"clab/stack-lstm-ner" -> "wlin12/wang2vec" ["e"=1]
"clab/stack-lstm-ner" -> "XuezheMax/LasagneNLP"
"clab/stack-lstm-ner" -> "Franck-Dernoncourt/NeuroNER"
"clab/stack-lstm-ner" -> "guillaumegenthial/sequence_tagging"
"clab/stack-lstm-ner" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"tlwg/libdatrie" -> "s-yata/darts-clone"
"tlwg/libdatrie" -> "tlwg/libthai"
"SJTU-YONGFU-RESEARCH-GRP/SPRSound" -> "SJTU-YONGFU-RESEARCH-GRP/Lung-Sound-Classification-System-LungSys-I"
"SJTU-YONGFU-RESEARCH-GRP/SPRSound" -> "kaen2891/stethoscope-guided_supervised_contrastive_learning"
"hit-computer/char-rnn" -> "hit-computer/char-rnn-tf"
"china-ai-law-challenge/CAIL2022" -> "thunlp/LEVEN"
"china-ai-law-challenge/CAIL2022" -> "ruc-wjyu/IOT-Match"
"china-ai-law-challenge/CAIL2022" -> "myx666/LeCaRD"
"china-ai-law-challenge/CAIL2022" -> "china-ai-law-challenge/CAIL2021"
"china-ai-law-challenge/CAIL2022" -> "thunlp/LegalPLMs"
"china-ai-law-challenge/CAIL2022" -> "Executedone/CAIL2021_LAJS"
"CoderMusou/NFLAT4CNER" -> "CoderMusou/MECT4CNER"
"tuzhaopeng/NMT-Coverage" -> "tuzhaopeng/NMT"
"tuzhaopeng/NMT-Coverage" -> "sebastien-j/LV_groundhog"
"lansinuote/NER_in_Chinese" -> "jjljkjljk/BERT-NER-Chinese"
"MarvinBertin/HiddenMarkovModel_TensorFlow" -> "dwiel/tensorflow_hmm"
"MarvinBertin/HiddenMarkovModel_TensorFlow" -> "aehuynh/hidden-markov-model"
"tlwg/libthai" -> "tlwg/swath"
"vikasnar/Bleu" -> "harpribot/nlp-metrics"
"vikasnar/Bleu" -> "jiaqianghuai/tf-lstm-crf-batch"
"michaelliao/shici" -> "caoxingyu/chinese-gushiwen"
"michaelliao/shici" -> "nslogx/weapp-poem"
"michaelliao/shici" -> "Werneror/Poetry"
"michaelliao/shici" -> "wsy555/wangsy.github.io"
"michaelliao/shici" -> "michaelliao/itranswarp"
"michaelliao/shici" -> "DragonFlyXD/poetryclub-backend"
"michaelliao/shici" -> "chinese-poetry/poetry-calendar"
"BeiCunNan/Sentiment_Analysis_Imdb" -> "Aaronzijingcai/MP-TFWA"
"BeiCunNan/Sentiment_Analysis_Imdb" -> "BeiCunNan/Image_Classfiation_Coil20"
"nonamestreet/weixin_public_corpus" -> "ml-distribution/chinese-corpus"
"nonamestreet/weixin_public_corpus" -> "chatopera/insuranceqa-corpus-zh" ["e"=1]
"nonamestreet/weixin_public_corpus" -> "shijiebei2009/CEC-Corpus" ["e"=1]
"nonamestreet/weixin_public_corpus" -> "wonderfulsuccess/chinese_abstractive_corpus"
"nonamestreet/weixin_public_corpus" -> "zhangyics/Chinese-abbreviation-dataset"
"nonamestreet/weixin_public_corpus" -> "liwenzhu/corpusZh"
"nonamestreet/weixin_public_corpus" -> "liuhuanyong/ChineseNLPCorpus"
"nonamestreet/weixin_public_corpus" -> "guotong1988/chinese_dictionary"
"nonamestreet/weixin_public_corpus" -> "taozhijiang/chinese_correct_wsd"
"nonamestreet/weixin_public_corpus" -> "howl-anderson/tools_for_corpus_of_people_daily"
"nonamestreet/weixin_public_corpus" -> "candlewill/Dialog_Corpus" ["e"=1]
"nonamestreet/weixin_public_corpus" -> "wainshine/Company-Names-Corpus"
"nonamestreet/weixin_public_corpus" -> "kfcd/chaizi"
"nonamestreet/weixin_public_corpus" -> "MarkWuNLP/MultiTurnResponseSelection" ["e"=1]
"nonamestreet/weixin_public_corpus" -> "thunlp/THUOCL"
"spetacular/bannedwords" -> "yankewei/laravel-sensitive"
"spetacular/bannedwords" -> "FireLustre/php-dfa-sensitive" ["e"=1]
"spetacular/bannedwords" -> "nowgoo/dict" ["e"=1]
"thuiar/MIntRec" -> "thuiar/MIntRec2.0"
"thuiar/MIntRec" -> "thuiar/TCL-MAP"
"thuiar/MIntRec" -> "thuiar/UMC"
"thunlp/THUTag" -> "YeDeming/THUTag"
"thunlp/THUTag" -> "thunlp/THUCTC" ["e"=1]
"thunlp/THUTag" -> "ankitp94/relationship-extraction"
"thunlp/THUTag" -> "PKULCWM/PKUSUMSUM"
"thunlp/THUTag" -> "chqiwang/convseg"
"thunlp/THUTag" -> "Orekhov/SentenceBreaking"
"thunlp/THUTag" -> "hasibi/EntityLinkingRetrieval-ELR"
"thunlp/THUTag" -> "ymym3412/position-rank" ["e"=1]
"thunlp/THUTag" -> "thunlp/THUCKE"
"HazyResearch/legalbench" -> "neelguha/legal-ml-datasets"
"HazyResearch/legalbench" -> "coastalcph/lex-glue"
"HazyResearch/legalbench" -> "open-compass/LawBench"
"HazyResearch/legalbench" -> "maastrichtlawtech/awesome-legal-nlp"
"HazyResearch/legalbench" -> "reglab/casehold"
"HazyResearch/legalbench" -> "freelawproject/eyecite"
"HazyResearch/legalbench" -> "Liquid-Legal-Institute/Legal-Text-Analytics"
"HazyResearch/legalbench" -> "openlegaldata/awesome-legal-data"
"HazyResearch/legalbench" -> "TheAtticusProject/cuad"
"HazyResearch/legalbench" -> "Jeryi-Sun/LLM-and-Law"
"HazyResearch/legalbench" -> "Liquid-Legal-Institute/Legal-Ontologies"
"HazyResearch/legalbench" -> "Breakend/PileOfLaw"
"HazyResearch/legalbench" -> "harveyai/biglaw-bench"
"HazyResearch/legalbench" -> "JoelNiklaus/LEXTREME"
"HazyResearch/legalbench" -> "TracyWang95/legal-prompts-for-gpt" ["e"=1]
"maastrichtlawtech/gdsr" -> "maastrichtlawtech/VendorLink"
"wzh9969/HPT" -> "1KE-JI/HierVerb"
"wzh9969/HPT" -> "wzh9969/contrastive-htc"
"wzh9969/HPT" -> "qianlima-lab/HiMatch"
"wzh9969/HPT" -> "Yifan-Song793/InfoCL" ["e"=1]
"wzh9969/HPT" -> "liuyeah/K-HTC"
"Doragd/Awesome-Sentence-Embedding" -> "caskcsg/sentemb"
"Doragd/Awesome-Sentence-Embedding" -> "voidism/DiffCSE"
"Doragd/Awesome-Sentence-Embedding" -> "RUCAIBox/DenseRetrieval" ["e"=1]
"Doragd/Awesome-Sentence-Embedding" -> "perceptiveshawty/RankCSE"
"Doragd/Awesome-Sentence-Embedding" -> "zhoujx4/NLP-Series-sentence-embeddings"
"Doragd/Awesome-Sentence-Embedding" -> "amzn/trans-encoder"
"Doragd/Awesome-Sentence-Embedding" -> "kongds/Prompt-BERT"
"letiantian/Pinyin2Hanzi" -> "letiantian/ChineseTone"
"letiantian/Pinyin2Hanzi" -> "LiuRoy/Pinyin_Demo"
"letiantian/Pinyin2Hanzi" -> "crownpku/Somiao-Pinyin"
"letiantian/Pinyin2Hanzi" -> "liuhuanyong/Pinyin2Chinese"
"letiantian/Pinyin2Hanzi" -> "mozillazg/python-pinyin"
"letiantian/Pinyin2Hanzi" -> "taiqing/pinyin2hanzi"
"letiantian/Pinyin2Hanzi" -> "OrangeX4/simple-pinyin"
"letiantian/Pinyin2Hanzi" -> "mozillazg/pinyin-data"
"letiantian/Pinyin2Hanzi" -> "whatbeg/GodTian_Pinyin"
"letiantian/Pinyin2Hanzi" -> "ZhuiyiTechnology/simbert"
"letiantian/Pinyin2Hanzi" -> "sunpinyin/sunpinyin" ["e"=1]
"letiantian/Pinyin2Hanzi" -> "Kyubyong/neural_chinese_transliterator"
"letiantian/Pinyin2Hanzi" -> "bojone/word-discovery"
"letiantian/Pinyin2Hanzi" -> "audier/DeepSpeechRecognition" ["e"=1]
"letiantian/Pinyin2Hanzi" -> "ZhuiyiTechnology/pretrained-models"
"PengheLiu/Cn_Speck_Checker" -> "apanly/proofreadv1"
"PengheLiu/Cn_Speck_Checker" -> "taozhijiang/chinese_correct_wsd"
"PengheLiu/Cn_Speck_Checker" -> "beyondacm/Autochecker4Chinese"
"to-shimo/chinese-word2vec" -> "candlewill/Chinsese_word_vectors"
"to-shimo/chinese-word2vec" -> "aceimnorstuvwxz/dgk_lost_conv" ["e"=1]
"to-shimo/chinese-word2vec" -> "YingZhuY/GloVe_Chinese_word_embedding"
"to-shimo/chinese-word2vec" -> "indiejoseph/cnn-text-classification-tf-chinese" ["e"=1]
"to-shimo/chinese-word2vec" -> "crownpku/Small-Chinese-Corpus"
"hamid-vakilzadeh/SeekingAlpha-Scraper" -> "RCJansonVTFL/SeekingAlphaWebScrape"
"jiahaozhenbang/SCOPE" -> "geekjuruo/LEAD"
"jiahaozhenbang/SCOPE" -> "nghuyong/cscd-ns"
"jiahaozhenbang/SCOPE" -> "aopolin-lv/ECSpell"
"jiahaozhenbang/SCOPE" -> "destwang/DCN"
"masr2000/CLG-CGEC" -> "xlxwalex/FCGEC"
"masr2000/CLG-CGEC" -> "masr2000/NaCGEC"
"masr2000/CLG-CGEC" -> "HillZhang1999/NaSGEC"
"nghuyong/cscd-ns" -> "jiahaozhenbang/SCOPE"
"nghuyong/cscd-ns" -> "aopolin-lv/ECSpell"
"nghuyong/cscd-ns" -> "gingasan/lemon"
"nghuyong/cscd-ns" -> "HillZhang1999/NaSGEC"
"nghuyong/cscd-ns" -> "geekjuruo/LEAD"
"nghuyong/cscd-ns" -> "THUKElab/CLEME" ["e"=1]
"nghuyong/cscd-ns" -> "xlxwalex/FCGEC"
"taishan1994/awesome-chinese-text-correction" -> "nghuyong/Chinese-text-correction-papers"
"taishan1994/awesome-chinese-text-correction" -> "jiahaozhenbang/SCOPE"
"taishan1994/awesome-chinese-text-correction" -> "masr2000/CLG-CGEC"
"taishan1994/awesome-chinese-text-correction" -> "HillZhang1999/NaSGEC"
"geekjuruo/LEAD" -> "jiahaozhenbang/SCOPE"
"geekjuruo/LEAD" -> "aopolin-lv/ECSpell"
"michaelliao/openweixin" -> "michaelliao/warpdb"
"Forest-art/DFSP" -> "quhongyu/ClusPro"
"Forest-art/DFSP" -> "bighuang624/Troika"
"OrangeX4/simple-pinyin" -> "xUhEngwAng/pinyin"
"LiuRoy/Pinyin_Demo" -> "letiantian/Pinyin2Hanzi"
"LiuRoy/Pinyin_Demo" -> "crownpku/Somiao-Pinyin"
"LiuRoy/Pinyin_Demo" -> "NagiNikaido/pinyin4IAI"
"LiuRoy/Pinyin_Demo" -> "WiInputMethod/VE"
"LiuRoy/Pinyin_Demo" -> "iseesaw/Pinyin2ChineseChars"
"hailin0/sensitive-word-filter" -> "andyzty/sensitivewd-filter"
"hailin0/sensitive-word-filter" -> "elulis/sensitive-words"
"hailin0/sensitive-word-filter" -> "fanhua1994/DzFilter" ["e"=1]
"hailin0/sensitive-word-filter" -> "k5h9999/keywordfilter"
"pytries/DAWG" -> "pytries/DAWG-Python"
"pytries/DAWG" -> "pytries/marisa-trie"
"pytries/DAWG" -> "pytries/hat-trie"
"pytries/DAWG" -> "pytries/datrie"
"fanolabs/NID_ACLARR2022" -> "zhang-yu-wei/MTP-CLNN"
"fanolabs/NID_ACLARR2022" -> "thuiar/DeepAligned-Clustering"
"lansinuote/Huggingface_Task" -> "lansinuote/NLP-Toturials"
"xlxwalex/FCGEC" -> "masr2000/CLG-CGEC"
"xlxwalex/FCGEC" -> "HillZhang1999/NaSGEC"
"xlxwalex/FCGEC" -> "nghuyong/cscd-ns"
"xlxwalex/FCGEC" -> "blcuicall/CCL2022-CLTC"
"xlxwalex/FCGEC" -> "blcuicall/cged_datasets"
"xlxwalex/FCGEC" -> "FreedomIntelligence/GrammarGPT"
"xlxwalex/FCGEC" -> "xlxwalex/HyCxG"
"xlxwalex/FCGEC" -> "taishan1994/awesome-chinese-text-correction"
"xlxwalex/FCGEC" -> "li-aolong/TemplateGEC"
"xlxwalex/FCGEC" -> "jiahaozhenbang/SCOPE"
"xlxwalex/FCGEC" -> "DaDaMrX/ReaLiSe"
"zhezhaoa/cluster-driven" -> "zhezhaoa/neural_BOW_toolkit"
"Liquid-Legal-Institute/Legal-LLMs-GPTs" -> "Liquid-Legal-Institute/Meta-Lex"
"yhcc/CNN_Nested_NER" -> "syuoni/eznlp"
"yhcc/CNN_Nested_NER" -> "AONE-NLP/DiFiNet"
"yhcc/CNN_Nested_NER" -> "tricktreat/locate-and-label"
"yhcc/CNN_Nested_NER" -> "JunnYu/jy_ner"
"yhcc/CNN_Nested_NER" -> "tricktreat/piqn"
"zkwi/textSummary" -> "CourteousWood/text-summarization"
"zkwi/textSummary" -> "zpppy/seq2seq-chinese-textsum"
"zkwi/textSummary" -> "Valuebai/Text-Auto-Summarization"
"zkwi/textSummary" -> "baoguangsheng/ctx-rewriter-for-summ" ["e"=1]
"zkwi/textSummary" -> "iFLYOS-OPEN/SDK-Android" ["e"=1]
"zkwi/textSummary" -> "ArtistScript/FastTextRank"
"soukron/maragi" -> "jormeijer/HIAF"
"unitedstates/uscode" -> "unitedstates/reports" ["e"=1]
"unitedstates/uscode" -> "unitedstates/citation"
"yuzhimanhua/MAPLE" -> "yuzhimanhua/FUTEX"
"yuzhimanhua/MAPLE" -> "yuzhimanhua/MotifClass"
"tlwg/swath" -> "tlwg/thpronun"
"tlwg/swath" -> "tlwg/libthai"
"Langboat/mengzi-zero-shot" -> "Langboat/Mengzi"
"accordproject/apap" -> "accordproject/template-engine"
"microsoft/binder" -> "liyongqi2002/TadNER"
"BatsResearch/alfred" -> "BatsResearch/labelmodels"
"BatsResearch/alfred" -> "BatsResearch/trove"
"BatsResearch/alfred" -> "BatsResearch/planetarium"
"BatsResearch/alfred" -> "BatsResearch/fudd"
"BatsResearch/alfred" -> "BatsResearch/ex2"
"vered1986/HypeNET" -> "vered1986/LexNET"
"vered1986/HypeNET" -> "nguyenkh/HyperVec"
"lixsh6/Tencent_wsdm_cup2023" -> "xuanyuan14/THUIR_WSDM_Cup"
"AI-confused/CCL2022_CGED-8_Top1_project" -> "AI-confused/Sequence-to-Action"
"freelawproject/free.law" -> "freelawproject/seal-rookery"
"ilyassmoummad/scl_icbhi2017" -> "raymin0223/patch-mix_contrastive_learning"
"ilyassmoummad/scl_icbhi2017" -> "kaen2891/adversarial_fine-tuning_using_generated_respiratory_sound"
"ilyassmoummad/scl_icbhi2017" -> "stanfordmlgroup/selfsupervised-lungandheartsounds"
"aehuynh/hidden-markov-model" -> "dkyang/UMDHMM-python"
"chaoming0625/WaiMaiOpinionMiner" -> "chaoming0625/FineGrainedOpinionMining"
"chaoming0625/WaiMaiOpinionMiner" -> "foamliu/Sentiment-Analysis"
"chaoming0625/WaiMaiOpinionMiner" -> "kaimenluo/CustomerReviewSummarizeSystem"
"openlifescience-ai/ai-deadlines" -> "monk1337/Mixclu"
"michaelliao/warpdb" -> "michaelliao/openweixin"
"junfenglx/reasoning_attention" -> "vsitzmann/snli-attention-tensorflow"
"remenberl/Latent-Keyphrase-Inference" -> "shangjingbo1226/PL2M"
"AI-confused/Sequence-to-Action" -> "AI-confused/CCL2022_CGED-8_Top1_project"
"fxsjy/jieba" -> "hankcs/HanLP"
"fxsjy/jieba" -> "Embedding/Chinese-Word-Vectors"
"fxsjy/jieba" -> "google-research/bert" ["e"=1]
"fxsjy/jieba" -> "isnowfy/snownlp"
"fxsjy/jieba" -> "fighting41love/funNLP" ["e"=1]
"fxsjy/jieba" -> "exacity/deeplearningbook-chinese" ["e"=1]
"fxsjy/jieba" -> "ymcui/Chinese-BERT-wwm"
"fxsjy/jieba" -> "littlecodersh/ItChat" ["e"=1]
"fxsjy/jieba" -> "lancopku/pkuseg-python"
"fxsjy/jieba" -> "brightmart/nlp_chinese_corpus"
"fxsjy/jieba" -> "facebookresearch/fastText" ["e"=1]
"fxsjy/jieba" -> "crownpku/Awesome-Chinese-NLP"
"fxsjy/jieba" -> "chinese-poetry/chinese-poetry" ["e"=1]
"fxsjy/jieba" -> "imhuay/Algorithm_Interview_Notes-Chinese" ["e"=1]
"fxsjy/jieba" -> "pyecharts/pyecharts" ["e"=1]
"CSHaitao/LexiLaw" -> "AndrewZhe/lawyer-llama"
"CSHaitao/LexiLaw" -> "LiuHC0428/LAW-GPT"
"CSHaitao/LexiLaw" -> "FudanDISC/DISC-LawLLM"
"CSHaitao/LexiLaw" -> "pengxiao-song/awesome-chinese-legal-resources"
"CSHaitao/LexiLaw" -> "CSHaitao/Awesome-LegalAI-Resources"
"CSHaitao/LexiLaw" -> "irlab-sdu/fuzi.mingcha"
"CSHaitao/LexiLaw" -> "zhihaiLLM/wisdomInterrogatory"
"CSHaitao/LexiLaw" -> "LawRefBook/Laws"
"CSHaitao/LexiLaw" -> "pengxiao-song/LaWGPT"
"CSHaitao/LexiLaw" -> "siat-nlp/HanFei"
"CSHaitao/LexiLaw" -> "open-compass/LawBench"
"CSHaitao/LexiLaw" -> "CSHaitao/SAILER"
"CSHaitao/LexiLaw" -> "PKU-YuanGroup/ChatLaw" ["e"=1]
"CSHaitao/LexiLaw" -> "liuhuanyong/CrimeKgAssitant"
"CSHaitao/LexiLaw" -> "myx666/LeCaRD"
"CSQianDong/III-Retriever" -> "Deriq-Qian-Dong/RLCF"
"CSQianDong/III-Retriever" -> "CSQianDong/KERM"
"CSQianDong/III-Retriever" -> "Deriq-Qian-Dong/R-former"
"FudanDISC/DISC-LawLLM" -> "CSHaitao/LexiLaw"
"FudanDISC/DISC-LawLLM" -> "pengxiao-song/awesome-chinese-legal-resources"
"FudanDISC/DISC-LawLLM" -> "AndrewZhe/lawyer-llama"
"FudanDISC/DISC-LawLLM" -> "open-compass/LawBench"
"FudanDISC/DISC-LawLLM" -> "zhihaiLLM/wisdomInterrogatory"
"FudanDISC/DISC-LawLLM" -> "irlab-sdu/fuzi.mingcha"
"FudanDISC/DISC-LawLLM" -> "LiuHC0428/LAW-GPT"
"FudanDISC/DISC-LawLLM" -> "FudanDISC/DISC-FinLLM" ["e"=1]
"FudanDISC/DISC-LawLLM" -> "CSHaitao/Awesome-LegalAI-Resources"
"FudanDISC/DISC-LawLLM" -> "FudanDISC/DISC-MedLLM" ["e"=1]
"FudanDISC/DISC-LawLLM" -> "siat-nlp/HanFei"
"FudanDISC/DISC-LawLLM" -> "LawRefBook/Laws"
"FudanDISC/DISC-LawLLM" -> "Dai-shen/LAiW"
"FudanDISC/DISC-LawLLM" -> "Jeryi-Sun/LLM-and-Law"
"FudanDISC/DISC-LawLLM" -> "X-D-Lab/Sunsimiao" ["e"=1]
"LingDong-/ci-ren" -> "imagetellerD/chinese-poem-generator"
"monikkinom/ner-lstm" -> "Franck-Dernoncourt/NeuroNER"
"monikkinom/ner-lstm" -> "clab/stack-lstm-ner"
"monikkinom/ner-lstm" -> "glample/tagger"
"monikkinom/ner-lstm" -> "guillaumegenthial/sequence_tagging"
"monikkinom/ner-lstm" -> "chilynn/sequence-labeling"
"monikkinom/ner-lstm" -> "LopezGG/NN_NER_tensorFlow"
"monikkinom/ner-lstm" -> "dhwajraj/NER-RNN" ["e"=1]
"monikkinom/ner-lstm" -> "HadoopIt/rnn-nlu" ["e"=1]
"monikkinom/ner-lstm" -> "divamgupta/lstm-gender-predictor"
"monikkinom/ner-lstm" -> "rockingdingo/deepnlp"
"monikkinom/ner-lstm" -> "hltcoe/golden-horse"
"monikkinom/ner-lstm" -> "liu-nlper/NER-LSTM-CRF"
"monikkinom/ner-lstm" -> "Hironsan/anago"
"monikkinom/ner-lstm" -> "kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs"
"monikkinom/ner-lstm" -> "ZhixiuYe/NER-pytorch"
"Smerity/keras_snli" -> "naayaaa/SNLI-Keras"
"Smerity/keras_snli" -> "shyamupa/snli-entailment"
"Smerity/keras_snli" -> "shuohangwang/SeqMatchSeq" ["e"=1]
"Smerity/keras_snli" -> "cheng6076/SNLI-attention"
"Smerity/keras_snli" -> "lmjohns3/downhill"
"lansinuote/Diffusion_Training_Examples" -> "lansinuote/Diffusion_From_Scratch"
"lansinuote/Diffusion_Training_Examples" -> "lansinuote/Stable_Diffusion_fine_tuning"
"lansinuote/Diffusion_Training_Examples" -> "lansinuote/Simple_Generative_in_PyTorch"
"vsitzmann/snli-attention-tensorflow" -> "SourKream/NLP-Project"
"mozillazg/phrase-pinyin-data" -> "mozillazg/pinyin-data"
"mozillazg/phrase-pinyin-data" -> "kakaobrain/g2pm" ["e"=1]
"mozillazg/phrase-pinyin-data" -> "speechio/chinese_text_normalization" ["e"=1]
"mozillazg/phrase-pinyin-data" -> "speechio/BigCiDian" ["e"=1]
"mozillazg/phrase-pinyin-data" -> "mozillazg/pypinyin-dict"
"mozillazg/phrase-pinyin-data" -> "letiantian/ChineseTone"
"mozillazg/phrase-pinyin-data" -> "aishell-foundation/DaCiDian" ["e"=1]
"mozillazg/phrase-pinyin-data" -> "mapull/chinese-dictionary"
"mozillazg/phrase-pinyin-data" -> "Kyubyong/g2pC" ["e"=1]
"mozillazg/phrase-pinyin-data" -> "mozillazg/python-pinyin"
"mozillazg/phrase-pinyin-data" -> "kfcd/chaizi"
"mozillazg/phrase-pinyin-data" -> "mozillazg/pypinyin-g2pW" ["e"=1]
"mozillazg/phrase-pinyin-data" -> "hjzin/PolyphoneDisambiguation"
"chilynn/sequence-labeling" -> "glample/tagger"
"chilynn/sequence-labeling" -> "liu-nlper/NER-LSTM-CRF"
"chilynn/sequence-labeling" -> "rockingdingo/deepnlp"
"chilynn/sequence-labeling" -> "clab/stack-lstm-ner"
"chilynn/sequence-labeling" -> "rguthrie3/BiLSTM-CRF"
"chilynn/sequence-labeling" -> "LopezGG/NN_NER_tensorFlow"
"chilynn/sequence-labeling" -> "abhyudaynj/LSTM-CRF-models"
"chilynn/sequence-labeling" -> "koth/kcws"
"chilynn/sequence-labeling" -> "manubharghav-zz/NER"
"chilynn/sequence-labeling" -> "monikkinom/ner-lstm"
"chilynn/sequence-labeling" -> "HadoopIt/rnn-nlu" ["e"=1]
"chilynn/sequence-labeling" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"chilynn/sequence-labeling" -> "jiaqianghuai/tf-lstm-crf-batch"
"chilynn/sequence-labeling" -> "white127/QA-deep-learning" ["e"=1]
"irlab-sdu/fuzi.mingcha" -> "siat-nlp/HanFei"
"irlab-sdu/fuzi.mingcha" -> "open-compass/LawBench"
"irlab-sdu/fuzi.mingcha" -> "zhihaiLLM/wisdomInterrogatory"
"irlab-sdu/fuzi.mingcha" -> "davidpig/lychee_law"
"irlab-sdu/fuzi.mingcha" -> "CSHaitao/LexiLaw"
"irlab-sdu/fuzi.mingcha" -> "FudanDISC/DISC-LawLLM"
"irlab-sdu/fuzi.mingcha" -> "pengxiao-song/awesome-chinese-legal-resources"
"irlab-sdu/fuzi.mingcha" -> "myx666/LeCaRD"
"irlab-sdu/fuzi.mingcha" -> "AndrewZhe/lawyer-llama"
"irlab-sdu/fuzi.mingcha" -> "LiuHC0428/LAW-GPT"
"irlab-sdu/fuzi.mingcha" -> "CSHaitao/Awesome-LegalAI-Resources"
"irlab-sdu/fuzi.mingcha" -> "Dai-shen/LAiW"
"irlab-sdu/fuzi.mingcha" -> "CSHaitao/SAILER"
"irlab-sdu/fuzi.mingcha" -> "ZixinxinWang/Legal-Eagle-InternLM"
"irlab-sdu/fuzi.mingcha" -> "dengwentao99/SLJA"
"open-compass/LawBench" -> "CSHaitao/Awesome-LegalAI-Resources"
"open-compass/LawBench" -> "FudanDISC/DISC-LawLLM"
"open-compass/LawBench" -> "irlab-sdu/fuzi.mingcha"
"open-compass/LawBench" -> "siat-nlp/HanFei"
"open-compass/LawBench" -> "pengxiao-song/awesome-chinese-legal-resources"
"open-compass/LawBench" -> "Dai-shen/LAiW"
"open-compass/LawBench" -> "HazyResearch/legalbench"
"open-compass/LawBench" -> "AndrewZhe/lawyer-llama"
"open-compass/LawBench" -> "zhihaiLLM/wisdomInterrogatory"
"open-compass/LawBench" -> "CSHaitao/LexEval"
"open-compass/LawBench" -> "CSHaitao/SAILER"
"open-compass/LawBench" -> "CSHaitao/LexiLaw"
"open-compass/LawBench" -> "Jeryi-Sun/LLM-and-Law"
"open-compass/LawBench" -> "THUIR/LeCaRDv2"
"open-compass/LawBench" -> "thunlp/LegalPLMs"
"crownpku/Small-Chinese-Corpus" -> "ymcui/Chinese-Cloze-RC" ["e"=1]
"crownpku/Small-Chinese-Corpus" -> "zhangyics/Chinese-abbreviation-dataset"
"crownpku/Small-Chinese-Corpus" -> "rainarch/SentiBridge"
"crownpku/Small-Chinese-Corpus" -> "ml-distribution/chinese-corpus"
"crownpku/Small-Chinese-Corpus" -> "liwenzhu/corpusZh"
"crownpku/Small-Chinese-Corpus" -> "crownpku/Information-Extraction-Chinese"
"crownpku/Small-Chinese-Corpus" -> "z17176/Chinese_conversation_sentiment"
"crownpku/Small-Chinese-Corpus" -> "chatopera/insuranceqa-corpus-zh" ["e"=1]
"crownpku/Small-Chinese-Corpus" -> "shijiebei2009/CEC-Corpus" ["e"=1]
"crownpku/Small-Chinese-Corpus" -> "candlewill/Dialog_Corpus" ["e"=1]
"crownpku/Small-Chinese-Corpus" -> "to-shimo/chinese-word2vec"
"crownpku/Small-Chinese-Corpus" -> "zjy-ucas/ChineseNER"
"crownpku/Small-Chinese-Corpus" -> "aceimnorstuvwxz/dgk_lost_conv" ["e"=1]
"crownpku/Small-Chinese-Corpus" -> "hltcoe/golden-horse"
"crownpku/Small-Chinese-Corpus" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"Jeryi-Sun/LLM-and-Law" -> "CSHaitao/Awesome-LegalAI-Resources"
"Jeryi-Sun/LLM-and-Law" -> "prometheusXN/LADAN"
"Jeryi-Sun/LLM-and-Law" -> "ruc-wjyu/IOT-Match"
"Jeryi-Sun/LLM-and-Law" -> "myx666/LeCaRD"
"Jeryi-Sun/LLM-and-Law" -> "maastrichtlawtech/awesome-legal-nlp"
"Jeryi-Sun/LLM-and-Law" -> "thunlp/LegalPLMs"
"Jeryi-Sun/LLM-and-Law" -> "open-compass/LawBench"
"Jeryi-Sun/LLM-and-Law" -> "THUIR/LeCaRDv2"
"Jeryi-Sun/LLM-and-Law" -> "dengwentao99/SLJA"
"Jeryi-Sun/LLM-and-Law" -> "thunlp/LEVEN"
"Jeryi-Sun/LLM-and-Law" -> "FudanDISC/DISC-LawLLM"
"LiuHC0428/LAW-GPT" -> "AndrewZhe/lawyer-llama"
"LiuHC0428/LAW-GPT" -> "CSHaitao/LexiLaw"
"LiuHC0428/LAW-GPT" -> "pengxiao-song/awesome-chinese-legal-resources"
"LiuHC0428/LAW-GPT" -> "FudanDISC/DISC-LawLLM"
"LiuHC0428/LAW-GPT" -> "liuhuanyong/CrimeKgAssitant"
"LiuHC0428/LAW-GPT" -> "LawRefBook/Laws"
"LiuHC0428/LAW-GPT" -> "pengxiao-song/LaWGPT"
"LiuHC0428/LAW-GPT" -> "zhihaiLLM/wisdomInterrogatory"
"LiuHC0428/LAW-GPT" -> "siat-nlp/HanFei"
"LiuHC0428/LAW-GPT" -> "PKU-YuanGroup/ChatLaw" ["e"=1]
"LiuHC0428/LAW-GPT" -> "irlab-sdu/fuzi.mingcha"
"LiuHC0428/LAW-GPT" -> "CSHaitao/Awesome-LegalAI-Resources"
"LiuHC0428/LAW-GPT" -> "RanKKI/LawRefBook"
"LiuHC0428/LAW-GPT" -> "open-compass/LawBench"
"LiuHC0428/LAW-GPT" -> "MediaBrain-SJTU/MING" ["e"=1]
"OpenLLMAI/OpenLLMWiki" -> "catqaq/OpenTextClassification"
"OpenLLMAI/OpenLLMWiki" -> "sunzeyeah/RLHF" ["e"=1]
"li-aolong/TemplateGEC" -> "HillZhang1999/RobustGEC"
"karthikncode/DeepRL-InformationExtraction" -> "XuezheMax/LasagneNLP"
"karthikncode/DeepRL-InformationExtraction" -> "jxwuyi/AtNRE" ["e"=1]
"karthikncode/DeepRL-InformationExtraction" -> "patverga/torch-relation-extraction"
"pengxiao-song/LaWGPT" -> "pengxiao-song/awesome-chinese-legal-resources"
"pengxiao-song/LaWGPT" -> "PKU-YuanGroup/ChatLaw" ["e"=1]
"pengxiao-song/LaWGPT" -> "LiuHC0428/LAW-GPT"
"pengxiao-song/LaWGPT" -> "AndrewZhe/lawyer-llama"
"pengxiao-song/LaWGPT" -> "lvwzhen/law-cn-ai" ["e"=1]
"pengxiao-song/LaWGPT" -> "CSHaitao/LexiLaw"
"pengxiao-song/LaWGPT" -> "SCIR-HI/Huatuo-Llama-Med-Chinese" ["e"=1]
"pengxiao-song/LaWGPT" -> "ymcui/Chinese-LLaMA-Alpaca" ["e"=1]
"pengxiao-song/LaWGPT" -> "LawRefBook/Laws"
"pengxiao-song/LaWGPT" -> "LianjiaTech/BELLE" ["e"=1]
"pengxiao-song/LaWGPT" -> "baichuan-inc/Baichuan-7B" ["e"=1]
"pengxiao-song/LaWGPT" -> "wenda-LLM/wenda" ["e"=1]
"pengxiao-song/LaWGPT" -> "hiyouga/ChatGLM-Efficient-Tuning" ["e"=1]
"pengxiao-song/LaWGPT" -> "OpenMOSS/MOSS" ["e"=1]
"pengxiao-song/LaWGPT" -> "shibing624/MedicalGPT" ["e"=1]
"jormeijer/HIAF" -> "AurelienStebe/Gladdis"
"jormeijer/HIAF" -> "soukron/maragi"
"liuzhibin-cn/address-semantic-search" -> "bitlap/geocoding"
"liuzhibin-cn/address-semantic-search" -> "curryli/AddressCompare"
"liuzhibin-cn/address-semantic-search" -> "yihenglu/chinese-address-segment"
"liuzhibin-cn/address-semantic-search" -> "fjklqq/Geocoding"
"liuzhibin-cn/address-semantic-search" -> "leodotnet/neural-chinese-address-parsing"
"liuzhibin-cn/address-semantic-search" -> "tidalmelon/addrseg"
"martynsmith/node-irc" -> "alexyoung/ircd.js"
"martynsmith/node-irc" -> "gf3/IRC-js"
"martynsmith/node-irc" -> "slate/slate-irc" ["e"=1]
"martynsmith/node-irc" -> "Throne3d/node-irc"
"martynsmith/node-irc" -> "KokoIRC/koko"
"martynsmith/node-irc" -> "glowing-bear/glowing-bear" ["e"=1]
"martynsmith/node-irc" -> "kiwiirc/irc-framework" ["e"=1]
"martynsmith/node-irc" -> "ChienDevIT/papirus-icon-theme"
"martynsmith/node-irc" -> "ChienDevIT/micrometer"
"martynsmith/node-irc" -> "substack/node-ssh"
"martynsmith/node-irc" -> "cinchrb/cinch"
"martynsmith/node-irc" -> "hookio/hook.io" ["e"=1]
"martynsmith/node-irc" -> "ChienDevIT/socket.io-client-cpp"
"martynsmith/node-irc" -> "thenables/composition"
"martynsmith/node-irc" -> "gf3/Jerk"
"Nuggt-dev/Nuggt" -> "yencarnacion/yt-sum"
"Nuggt-dev/Nuggt" -> "hunter-meloche/REMO-langflow"
"cinchrb/cinch" -> "RISCfuture/autumn"
"cinchrb/cinch" -> "DAddYE/foreverb" ["e"=1]
"cinchrb/cinch" -> "vangberg/isaac"
"cinchrb/cinch" -> "Quintus/cinch-plugins"
"cinchrb/cinch" -> "evanphx/gx" ["e"=1]
"cinchrb/cinch" -> "sbp/phenny" ["e"=1]
"cinchrb/cinch" -> "leejarvis/slop" ["e"=1]
"cinchrb/cinch" -> "ruby-rbot/rbot"
"FreedomIntelligence/GrammarGPT" -> "xlxwalex/FCGEC"
"FreedomIntelligence/GrammarGPT" -> "masr2000/NaCGEC"
"FreedomIntelligence/GrammarGPT" -> "taishan1994/awesome-chinese-text-correction"
"FreedomIntelligence/GrammarGPT" -> "masr2000/CLG-CGEC"
"FreedomIntelligence/GrammarGPT" -> "HillZhang1999/NaSGEC"
"FreedomIntelligence/GrammarGPT" -> "gingasan/lemon"
"FreedomIntelligence/GrammarGPT" -> "nghuyong/Chinese-text-correction-papers"
"FreedomIntelligence/GrammarGPT" -> "zhaoyyoo/NLPCC2018_GEC"
"FreedomIntelligence/GrammarGPT" -> "HillZhang1999/MuCGEC"
"linpingta/lianjia-eroom-analysis" -> "linpingta/chinese-poem-generator"
"synyi/poplar" -> "deepwel/Chinese-Annotator"
"synyi/poplar" -> "jiesutd/YEDDA"
"synyi/poplar" -> "FXLP/MarkTool"
"synyi/poplar" -> "nlplab/brat"
"synyi/poplar" -> "guogene/nlp_ann"
"synyi/poplar" -> "baidu/information-extraction" ["e"=1]
"zhihaiLLM/wisdomInterrogatory" -> "FudanDISC/DISC-LawLLM"
"zhihaiLLM/wisdomInterrogatory" -> "pengxiao-song/awesome-chinese-legal-resources"
"zhihaiLLM/wisdomInterrogatory" -> "irlab-sdu/fuzi.mingcha"
"zhihaiLLM/wisdomInterrogatory" -> "AndrewZhe/lawyer-llama"
"zhihaiLLM/wisdomInterrogatory" -> "siat-nlp/HanFei"
"zhihaiLLM/wisdomInterrogatory" -> "CSHaitao/LexiLaw"
"zhihaiLLM/wisdomInterrogatory" -> "CSHaitao/Awesome-LegalAI-Resources"
"zhihaiLLM/wisdomInterrogatory" -> "open-compass/LawBench"
"zhihaiLLM/wisdomInterrogatory" -> "LiuHC0428/LAW-GPT"
"zhihaiLLM/wisdomInterrogatory" -> "myx666/LeCaRD"
"zhihaiLLM/wisdomInterrogatory" -> "thunlp/LEVEN"
"zhihaiLLM/wisdomInterrogatory" -> "Dai-shen/LAiW"
"zhihaiLLM/wisdomInterrogatory" -> "CSHaitao/SAILER"
"zhihaiLLM/wisdomInterrogatory" -> "liuhuanyong/LawCrimeMining"
"zhihaiLLM/wisdomInterrogatory" -> "davidpig/lychee_law"
"pengxiao-song/awesome-chinese-legal-resources" -> "AndrewZhe/lawyer-llama"
"pengxiao-song/awesome-chinese-legal-resources" -> "LiuHC0428/LAW-GPT"
"pengxiao-song/awesome-chinese-legal-resources" -> "LawRefBook/Laws"
"pengxiao-song/awesome-chinese-legal-resources" -> "CSHaitao/LexiLaw"
"pengxiao-song/awesome-chinese-legal-resources" -> "FudanDISC/DISC-LawLLM"
"pengxiao-song/awesome-chinese-legal-resources" -> "pengxiao-song/LaWGPT"
"pengxiao-song/awesome-chinese-legal-resources" -> "open-compass/LawBench"
"pengxiao-song/awesome-chinese-legal-resources" -> "liuhuanyong/LawCrimeMining"
"pengxiao-song/awesome-chinese-legal-resources" -> "zhihaiLLM/wisdomInterrogatory"
"pengxiao-song/awesome-chinese-legal-resources" -> "CSHaitao/Awesome-LegalAI-Resources"
"pengxiao-song/awesome-chinese-legal-resources" -> "liuhuanyong/CrimeKgAssitant"
"pengxiao-song/awesome-chinese-legal-resources" -> "irlab-sdu/fuzi.mingcha"
"pengxiao-song/awesome-chinese-legal-resources" -> "myx666/LeCaRD"
"pengxiao-song/awesome-chinese-legal-resources" -> "siat-nlp/HanFei"
"pengxiao-song/awesome-chinese-legal-resources" -> "Dai-shen/LAiW"
"nyzhhd/keyword" -> "lunzima/profanities.txt"
"lansinuote/Diffusion_From_Scratch" -> "lansinuote/Diffusion_Training_Examples"
"lansinuote/Diffusion_From_Scratch" -> "lansinuote/Simple_Generative_in_PyTorch"
"lansinuote/Diffusion_From_Scratch" -> "lansinuote/Transformer_Example"
"taishan1994/BERT-BILSTM-CRF" -> "taishan1994/pytorch_bert_bilstm_crf_ner"
"taishan1994/BERT-BILSTM-CRF" -> "taishan1994/BERT-Relation-Extraction" ["e"=1]
"taishan1994/BERT-BILSTM-CRF" -> "taishan1994/chinese_information_extraction" ["e"=1]
"taishan1994/BERT-BILSTM-CRF" -> "taishan1994/awesome-chinese-ner"
"taishan1994/BERT-BILSTM-CRF" -> "hemingkx/CLUENER2020"
"taishan1994/BERT-BILSTM-CRF" -> "duguiming111/NER-BERT-BiLSTM-CRF-"
"taishan1994/BERT-BILSTM-CRF" -> "taishan1994/pytorch_triple_extraction" ["e"=1]
"taishan1994/BERT-BILSTM-CRF" -> "hertz-pj/BERT-BiLSTM-CRF-NER-pytorch"
"taishan1994/BERT-BILSTM-CRF" -> "cooscao/Bert-BiLSTM-CRF-pytorch"
"taishan1994/BERT-BILSTM-CRF" -> "CLOVEXCWZ/NER_DEMO"
"taishan1994/BERT-BILSTM-CRF" -> "chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch"
"taishan1994/BERT-BILSTM-CRF" -> "yumath/bertNER"
"taishan1994/BERT-BILSTM-CRF" -> "wzzzd/lm_ner"
"taishan1994/BERT-BILSTM-CRF" -> "stanleylsx/entity_extractor_by_ner"
"taishan1994/BERT-BILSTM-CRF" -> "TianRanPig/chinese_ner"
"rainarch/SentiBridge" -> "zeitiempo/ECSD"
"rainarch/SentiBridge" -> "z17176/Chinese_conversation_sentiment"
"rainarch/SentiBridge" -> "zhangyics/Chinese-abbreviation-dataset"
"rainarch/SentiBridge" -> "chenghuige/wenzheng"
"rainarch/SentiBridge" -> "pengshuang/AI-Comp"
"rainarch/SentiBridge" -> "cnschema/cnSchema" ["e"=1]
"rainarch/SentiBridge" -> "crownpku/Small-Chinese-Corpus"
"rainarch/SentiBridge" -> "baidu/Senta"
"rainarch/SentiBridge" -> "chatopera/insuranceqa-corpus-zh" ["e"=1]
"rainarch/SentiBridge" -> "thunlp/OpenCLaP"
"rainarch/SentiBridge" -> "guotong1988/chinese_dictionary"
"rainarch/SentiBridge" -> "brightmart/bert_language_understanding"
"rainarch/SentiBridge" -> "aceimnorstuvwxz/dgk_lost_conv" ["e"=1]
"rainarch/SentiBridge" -> "AIChallenger/AI_Challenger_2018"
"rainarch/SentiBridge" -> "BigHeartC/Al_challenger_2018_sentiment_analysis"
"michaelliao/jerrymouse" -> "michaelliao/summer-framework"
"tricktreat/PromptNER" -> "tricktreat/DiffusionNER"
"tricktreat/PromptNER" -> "tricktreat/piqn"
"tricktreat/PromptNER" -> "chen700564/metaner-icl"
"tricktreat/PromptNER" -> "tricktreat/locate-and-label"
"stanleylsx/llms_tool" -> "stanleylsx/uie_torch"
"stanleylsx/llms_tool" -> "stanleylsx/entity_extractor_by_pointer"
"stanleylsx/llms_tool" -> "stanleylsx/text_embedding"
"stanleylsx/llms_tool" -> "stanleylsx/nlu_torch"
"stanleylsx/llms_tool" -> "stanleylsx/bert_nlu_joint"
"stanleylsx/llms_tool" -> "Mxoder/LLM-from-scratch"
"siat-nlp/HanFei" -> "davidpig/lychee_law"
"siat-nlp/HanFei" -> "irlab-sdu/fuzi.mingcha"
"siat-nlp/HanFei" -> "CSHaitao/Awesome-LegalAI-Resources"
"siat-nlp/HanFei" -> "open-compass/LawBench"
"siat-nlp/HanFei" -> "CSHaitao/SAILER"
"siat-nlp/HanFei" -> "zhihaiLLM/wisdomInterrogatory"
"siat-nlp/HanFei" -> "CSHaitao/LexEval"
"siat-nlp/HanFei" -> "Dai-shen/LAiW"
"CSHaitao/ChatGLM_mutli_gpu_tuning" -> "CSHaitao/THUIR-COLIEE2023"
"CSHaitao/ChatGLM_mutli_gpu_tuning" -> "CSHaitao/SAILER"
"CSHaitao/ChatGLM_mutli_gpu_tuning" -> "xuanyuan14/ARES"
"CSHaitao/ChatGLM_mutli_gpu_tuning" -> "CSHaitao/JTR"
"CSHaitao/ChatGLM_mutli_gpu_tuning" -> "Suffoquer-fang/LuXun-GPT"
"CSHaitao/ChatGLM_mutli_gpu_tuning" -> "THUlawtech/LegalAttack"
"AndrewZhe/lawyer-llama" -> "LiuHC0428/LAW-GPT"
"AndrewZhe/lawyer-llama" -> "CSHaitao/LexiLaw"
"AndrewZhe/lawyer-llama" -> "pengxiao-song/awesome-chinese-legal-resources"
"AndrewZhe/lawyer-llama" -> "FudanDISC/DISC-LawLLM"
"AndrewZhe/lawyer-llama" -> "zhihaiLLM/wisdomInterrogatory"
"AndrewZhe/lawyer-llama" -> "open-compass/LawBench"
"AndrewZhe/lawyer-llama" -> "pengxiao-song/LaWGPT"
"AndrewZhe/lawyer-llama" -> "siat-nlp/HanFei"
"AndrewZhe/lawyer-llama" -> "LawRefBook/Laws"
"AndrewZhe/lawyer-llama" -> "irlab-sdu/fuzi.mingcha"
"AndrewZhe/lawyer-llama" -> "CSHaitao/Awesome-LegalAI-Resources"
"AndrewZhe/lawyer-llama" -> "PKU-YuanGroup/ChatLaw" ["e"=1]
"AndrewZhe/lawyer-llama" -> "liuhuanyong/CrimeKgAssitant"
"AndrewZhe/lawyer-llama" -> "liuhuanyong/LawCrimeMining"
"AndrewZhe/lawyer-llama" -> "NJU-LegalAI/Legal-ChatGLM"
"CSHaitao/Awesome-LegalAI-Resources" -> "open-compass/LawBench"
"CSHaitao/Awesome-LegalAI-Resources" -> "siat-nlp/HanFei"
"CSHaitao/Awesome-LegalAI-Resources" -> "CSHaitao/LexiLaw"
"CSHaitao/Awesome-LegalAI-Resources" -> "pengxiao-song/awesome-chinese-legal-resources"
"CSHaitao/Awesome-LegalAI-Resources" -> "CSHaitao/LexEval"
"CSHaitao/Awesome-LegalAI-Resources" -> "zhihaiLLM/wisdomInterrogatory"
"CSHaitao/Awesome-LegalAI-Resources" -> "THUIR/LeCaRDv2"
"CSHaitao/Awesome-LegalAI-Resources" -> "Dai-shen/LAiW"
"CSHaitao/Awesome-LegalAI-Resources" -> "myx666/LeCaRD"
"CSHaitao/Awesome-LegalAI-Resources" -> "CSHaitao/SAILER"
"CSHaitao/Awesome-LegalAI-Resources" -> "AndrewZhe/lawyer-llama"
"CSHaitao/Awesome-LegalAI-Resources" -> "Jeryi-Sun/LLM-and-Law"
"CSHaitao/Awesome-LegalAI-Resources" -> "FudanDISC/DISC-LawLLM"
"CSHaitao/Awesome-LegalAI-Resources" -> "thunlp/LEVEN"
"CSHaitao/Awesome-LegalAI-Resources" -> "irlab-sdu/fuzi.mingcha"
"cambridgeltl/BioNLP-2016" -> "yahshibu/nested-ner-tacl2020"
"cambridgeltl/BioNLP-2016" -> "lsy3/clinical-notes-diagnosis-dl-nlp"
"abhyudaynj/LSTM-CRF-models" -> "clab/stack-lstm-ner"
"abhyudaynj/LSTM-CRF-models" -> "LopezGG/NN_NER_tensorFlow"
"abhyudaynj/LSTM-CRF-models" -> "cmusjtuliuyuan/SequenceTagging"
"abhyudaynj/LSTM-CRF-models" -> "jiaqianghuai/tf-lstm-crf-batch"
"abhyudaynj/LSTM-CRF-models" -> "XuezheMax/LasagneNLP"
"langflow-ai/langflow_examples" -> "langflow-ai/langflow-embedded-chat"
"langflow-ai/langflow_examples" -> "hunter-meloche/REMO-langflow"
"langflow-ai/langflow_examples" -> "langflow-ai/langflow-helm-charts"
"langflow-ai/langflow_examples" -> "langflow-ai/langflow-extras"
"langflow-ai/langflow_examples" -> "techwithtim/Langflow-RAG-Tutorial"
"langflow-ai/langflow_examples" -> "menloparklab/langflow-railway-deployment"
"langflow-ai/langflow_examples" -> "yaitec/langflow-streamlit"
"langflow-ai/langflow_examples" -> "misbahsy/InsightExpress"
"komiya-atsushi/darts-java" -> "digitalstain/DoubleArrayTrie"
"komiya-atsushi/darts-java" -> "hankcs/AhoCorasickDoubleArrayTrie"
"komiya-atsushi/darts-java" -> "hankcs/aho-corasick"
"komiya-atsushi/darts-java" -> "dingyaguang117/DoubleArrayTrie"
"komiya-atsushi/darts-java" -> "ansjsun/tree_split"
"python-cachier/cachier" -> "hynek/svcs" ["e"=1]
"python-cachier/cachier" -> "shaypal5/s3bp"
"python-cachier/cachier" -> "hynek/stamina" ["e"=1]
"tricktreat/DiffusionNER" -> "tricktreat/PromptNER"
"tricktreat/DiffusionNER" -> "tricktreat/piqn"
"tricktreat/DiffusionNER" -> "syuoni/eznlp"
"tricktreat/DiffusionNER" -> "zqtan1024/sequence-to-set"
"MultiPath/CopyNet" -> "mjc92/CopyNet"
"MultiPath/CopyNet" -> "memray/seq2seq-keyphrase" ["e"=1]
"MultiPath/CopyNet" -> "lspvic/CopyNet"
"MultiPath/CopyNet" -> "tuzhaopeng/NMT-Coverage"
"michaelliao/summer-framework" -> "michaelliao/jerrymouse"
"michaelliao/summer-framework" -> "michaelliao/warpexchange"
"michaelliao/summer-framework" -> "JasirVoriya/dark-one"
"ankitp94/relationship-extraction" -> "Orekhov/SentenceBreaking"
"Orekhov/SentenceBreaking" -> "ankitp94/relationship-extraction"
"BatsResearch/menghini-neurips23-code" -> "BatsResearch/ex2"
"BatsResearch/menghini-neurips23-code" -> "BatsResearch/fudd"
"CSHaitao/SAILER" -> "CSHaitao/THUIR-COLIEE2023"
"CSHaitao/SAILER" -> "CSHaitao/JTR"
"CSHaitao/SAILER" -> "THUIR/LeCaRDv2"
"CSHaitao/SAILER" -> "xuanyuan14/ARES"
"CSHaitao/SAILER" -> "myx666/LeCaRD"
"CSHaitao/SAILER" -> "jingtaozhan/IntelligenceTest"
"Claude-Liu/ReLM" -> "gingasan/lemon"
"blcuicall/taoli" -> "blcuicall/yacsc"
"blcuicall/taoli" -> "blcuicall/mcts"
"blcuicall/taoli" -> "blcuicall/YACLC"
"blcuicall/taoli" -> "blcuicall/OMGEval"
"blcuicall/taoli" -> "blcuicall/blcuthesis"
"blcuicall/taoli" -> "blcuicall/GEC-Reading-List"
"blcuicall/taoli" -> "ECNU-ICALK/EduChat" ["e"=1]
"erickrf/multiffn-nli" -> "harvardnlp/decomp-attn"
"erickrf/multiffn-nli" -> "lukecq1231/nli"
"erickrf/multiffn-nli" -> "junfenglx/reasoning_attention"
"erickrf/multiffn-nli" -> "DeNeutoy/Decomposable_Attn"
"yencarnacion/yt-sum" -> "jormeijer/HIAF"
"FudanNLP/NLPCC-WordSeg-Weibo" -> "FudanNLP/adversarial-multi-criteria-learning-for-CWS"
"FudanNLP/NLPCC-WordSeg-Weibo" -> "zhouh/WCC-Segmentation"
"ckmarkoh/deepSeg" -> "ckmarkoh/AcrosticPoem-RNNPG"
"ShuleHao/Chinese_text_summarization_based_on_GPT" -> "bxianghui/summarizer"
"gingasan/lemon" -> "Claude-Liu/ReLM"
"gingasan/lemon" -> "aopolin-lv/ECSpell"
"gingasan/lemon" -> "nghuyong/cscd-ns"
"gingasan/lemon" -> "yzhihao/MCSCSet"
"gingasan/lemon" -> "geekjuruo/LEAD"
"gingasan/lemon" -> "HillZhang1999/NaSGEC"
"gingasan/lemon" -> "jiahaozhenbang/SCOPE"
"PolarisRisingWar/LJP_Collection" -> "PolarisRisingWar/pytorch_ljp"
"PolarisRisingWar/LJP_Collection" -> "prometheusXN/D-LADAN"
"PolarisRisingWar/LJP_Collection" -> "WAPAY/EPM"
"PolarisRisingWar/LJP_Collection" -> "prometheusXN/LADAN"
"masr2000/NaCGEC" -> "masr2000/CLG-CGEC"
"CSHaitao/JTR" -> "CSHaitao/THUIR-COLIEE2023"
"CSHaitao/JTR" -> "xuanyuan14/ARES"
"CSHaitao/JTR" -> "xuanyuan14/THUIR_WSDM_Cup"
"CSHaitao/THUIR-COLIEE2023" -> "CSHaitao/JTR"
"CSHaitao/THUIR-COLIEE2023" -> "xuanyuan14/ARES"
"CSHaitao/THUIR-COLIEE2023" -> "CSHaitao/SAILER"
"CSHaitao/THUIR-COLIEE2023" -> "xuanyuan14/THUIR_WSDM_Cup"
"hasibi/EntityLinkingRetrieval-ELR" -> "hasibi/TAGME-Reproducibility"
"hasibi/EntityLinkingRetrieval-ELR" -> "hasibi/EntityLinkingInQueries-ELQ"
"hasibi/EntityLinkingRetrieval-ELR" -> "ankitp94/relationship-extraction"
"hasibi/EntityLinkingRetrieval-ELR" -> "Orekhov/SentenceBreaking"
"clarkkev/deep-coref" -> "swiseman/nn_coref"
"clarkkev/deep-coref" -> "kentonl/e2e-coref"
"clarkkev/deep-coref" -> "shayneobrien/coreference-resolution"
"clarkkev/deep-coref" -> "mandarjoshi90/coref"
"clarkkev/deep-coref" -> "smartschat/cort"
"clarkkev/deep-coref" -> "bkntr/coref-ee"
"clarkkev/deep-coref" -> "google-research-datasets/gap-coreference"
"clarkkev/deep-coref" -> "ontonotes/conll-formatted-ontonotes-5.0"
"clarkkev/deep-coref" -> "gregdurrett/berkeley-entity" ["e"=1]
"clarkkev/deep-coref" -> "huggingface/neuralcoref" ["e"=1]
"langflow-ai/langflow-embedded-chat" -> "langflow-ai/langflow-helm-charts"
"langflow-ai/langflow-embedded-chat" -> "langflow-ai/langflow_examples"
"langflow-ai/langflow-embedded-chat" -> "langflow-ai/langflow-extras"
"kongds/scaling_sentemb" -> "ZBWpro/PretCoTandKE"
"Rooooyy/HiTIN" -> "qianlima-lab/HiMatch"
"prnake/CialloCorpus" -> "yanshanjing/ChineseDiachronicCorpus"
"andyzty/sensitivewd-filter" -> "elulis/sensitive-words"
"andyzty/sensitivewd-filter" -> "k5h9999/keywordfilter"
"andyzty/sensitivewd-filter" -> "fanhua1994/DzFilter" ["e"=1]
"andyzty/sensitivewd-filter" -> "hailin0/sensitive-word-filter"
"andyzty/sensitivewd-filter" -> "qloog/sensitive_words"
"zhezhaoa/neural_BOW_toolkit" -> "zhezhaoa/cluster-driven"
"1KE-JI/HierVerb" -> "qianlima-lab/HiMatch"
"blcuicall/blcuthesis" -> "blcuicall/yacsc"
"hunter-meloche/REMO-langflow" -> "AZURE-ARC-0/atomv0-fullsample"
"hunter-meloche/REMO-langflow" -> "AurelienStebe/Gladdis"
"hunter-meloche/REMO-langflow" -> "soukron/maragi"
"hunter-meloche/REMO-langflow" -> "menloparklab/langflow-railway-deployment"
"hunter-meloche/REMO-langflow" -> "daveshap/REMO_Framework" ["e"=1]
"hunter-meloche/REMO-langflow" -> "jormeijer/HIAF"
"Dai-shen/LAiW" -> "open-compass/LawBench"
"Dai-shen/LAiW" -> "CSHaitao/LexEval"
"accordproject/template-playground" -> "accordproject/template-engine"
"stanleylsx/uie_torch" -> "stanleylsx/text_embedding"
"stanleylsx/uie_torch" -> "stanleylsx/bert_nlu_joint"
"AurelienStebe/Gladdis" -> "jormeijer/HIAF"
"AurelienStebe/Gladdis" -> "soukron/maragi"
"jcyk/CWS" -> "jcyk/greedyCWS"
"jcyk/CWS" -> "SUTDNLP/NNTransitionSegmentor"
"jcyk/CWS" -> "fudannlp16/CWS_Dict"
"jcyk/CWS" -> "MeteorYee/LSTM-CNN-CWS"
"bighuang624/Troika" -> "quhongyu/ClusPro"
"bighuang624/Troika" -> "Forest-art/DFSP"
"langflow-ai/langflow-extras" -> "ai-bites/simple-rag-app"
"raymin0223/patch-mix_contrastive_learning" -> "ilyassmoummad/scl_icbhi2017"
"raymin0223/patch-mix_contrastive_learning" -> "kaen2891/adversarial_fine-tuning_using_generated_respiratory_sound"
"raymin0223/patch-mix_contrastive_learning" -> "kaen2891/stethoscope-guided_supervised_contrastive_learning"
"raymin0223/patch-mix_contrastive_learning" -> "stanfordmlgroup/selfsupervised-lungandheartsounds"
"tuzhaopeng/NMT" -> "tuzhaopeng/NMT-Coverage"
"Suffoquer-fang/LuXun-GPT" -> "CSHaitao/THUIR-COLIEE2023"
"Suffoquer-fang/LuXun-GPT" -> "chuzhumin98/PRE"
"Suffoquer-fang/LuXun-GPT" -> "xuanyuan14/ARES"
"Suffoquer-fang/LuXun-GPT" -> "Xiaoyu-SZ/LLMasEvaluator"
"liyongqi2002/TadNER" -> "Alibaba-NLP/MANNER"
"HillZhang1999/NaSGEC" -> "masr2000/CLG-CGEC"
"HillZhang1999/NaSGEC" -> "xlxwalex/FCGEC"
"HillZhang1999/NaSGEC" -> "HillZhang1999/MuCGEC"
"HillZhang1999/NaSGEC" -> "nghuyong/cscd-ns"
"HillZhang1999/NaSGEC" -> "gingasan/lemon"
"HillZhang1999/NaSGEC" -> "jiahaozhenbang/SCOPE"
"HillZhang1999/NaSGEC" -> "masr2000/NaCGEC"
"HillZhang1999/NaSGEC" -> "HillZhang1999/SynGEC"
"HillZhang1999/NaSGEC" -> "HillZhang1999/RobustGEC"
"blcuicall/mcts" -> "blcuicall/blcuthesis"
"yuzhimanhua/FUTEX" -> "yuzhimanhua/MotifClass"
"BatsResearch/fudd" -> "BatsResearch/ex2"
"vered1986/LexNET" -> "vered1986/HypeNET"
"THUIR/LeCaRDv2" -> "CSHaitao/THUIR-COLIEE2023"
"THUIR/LeCaRDv2" -> "CSHaitao/SAILER"
"THUIR/LeCaRDv2" -> "myx666/LeCaRD"
"haoosz/ade-czsl" -> "wqshmzh/CANet-CZSL"
"haoosz/ade-czsl" -> "BatsResearch/csp"
"haoosz/ade-czsl" -> "Cogito2012/PLID"
"chaoming0625/FineGrainedOpinionMining" -> "chaoming0625/WaiMaiOpinionMiner"
"davidpig/lychee_law" -> "siat-nlp/HanFei"
"davidpig/lychee_law" -> "sml2h3/wenshu"
"tlaanemaa/langflow-docker" -> "langflow-ai/langflow-extras"
"RUCAIBox/Erya" -> "frederick-wang/tongjiazi-resources"
"XiPotatonium/chatbot-webui" -> "XiPotatonium/pnr"
"kaen2891/stethoscope-guided_supervised_contrastive_learning" -> "stanfordmlgroup/selfsupervised-lungandheartsounds"
"blcuicall/yacsc" -> "blcuicall/blcuthesis"
"blcuicall/yacsc" -> "blcuicall/OMGEval"
"TechWithRay/demystify_flowise_langflow" -> "ai-bites/simple-rag-app"
"ogabrielluiz/langflow-railway" -> "menloparklab/langflow-railway-deployment"
"ogabrielluiz/langflow-railway" -> "ogabrielluiz/langflow.pinokio"
"menloparklab/langflow-railway-deployment" -> "ogabrielluiz/langflow-railway"
"ogabrielluiz/langflow.pinokio" -> "ogabrielluiz/langflow-railway"
"Iivre/kiana" -> "Ling97/Blog2"
"shaypal5/s3bp" -> "shaypal5/lazyimport"
"maastrichtlawtech/VendorLink" -> "maastrichtlawtech/gdsr"
"wainshine/Chinese-Names-Corpus" -> "wainshine/Company-Names-Corpus"
"wainshine/Chinese-Names-Corpus" -> "brightmart/nlp_chinese_corpus"
"wainshine/Chinese-Names-Corpus" -> "crownpku/Awesome-Chinese-NLP"
"wainshine/Chinese-Names-Corpus" -> "pwxcoo/chinese-xinhua"
"wainshine/Chinese-Names-Corpus" -> "Embedding/Chinese-Word-Vectors"
"wainshine/Chinese-Names-Corpus" -> "codemayq/chinese-chatbot-corpus"
"wainshine/Chinese-Names-Corpus" -> "chatopera/Synonyms"
"wainshine/Chinese-Names-Corpus" -> "mozillazg/python-pinyin"
"wainshine/Chinese-Names-Corpus" -> "SophonPlus/ChineseNlpCorpus"
"wainshine/Chinese-Names-Corpus" -> "brightmart/albert_zh"
"wainshine/Chinese-Names-Corpus" -> "macanv/BERT-BiLSTM-CRF-NER"
"wainshine/Chinese-Names-Corpus" -> "ymcui/Chinese-BERT-wwm"
"wainshine/Chinese-Names-Corpus" -> "candlewill/Dialog_Corpus" ["e"=1]
"wainshine/Chinese-Names-Corpus" -> "holynova/gushi_namer" ["e"=1]
"wainshine/Chinese-Names-Corpus" -> "InsaneLife/ChineseNLPCorpus"
"Kyubyong/word_prediction" -> "chqiwang/convseg"
"Kyubyong/word_prediction" -> "Steven-Hewitt/Entailment-with-Tensorflow"
"Kyubyong/word_prediction" -> "ankitp94/relationship-extraction"
"Kyubyong/word_prediction" -> "Kyubyong/neural_chinese_transliterator"
"Kyubyong/word_prediction" -> "PKULCWM/PKUSUMSUM"
"Kyubyong/word_prediction" -> "Orekhov/SentenceBreaking"
"Kyubyong/word_prediction" -> "dice-group/AGDISTIS" ["e"=1]
"BYVoid/OpenCC" -> "fxsjy/jieba"
"BYVoid/OpenCC" -> "mozillazg/python-pinyin"
"BYVoid/OpenCC" -> "rime/librime" ["e"=1]
"BYVoid/OpenCC" -> "brightmart/nlp_chinese_corpus"
"BYVoid/OpenCC" -> "rime/home" ["e"=1]
"BYVoid/OpenCC" -> "yichen0831/opencc-python" ["e"=1]
"BYVoid/OpenCC" -> "Embedding/Chinese-Word-Vectors"
"BYVoid/OpenCC" -> "adobe-fonts/source-han-serif" ["e"=1]
"BYVoid/OpenCC" -> "HIT-SCIR/ltp"
"BYVoid/OpenCC" -> "be5invis/Sarasa-Gothic" ["e"=1]
"BYVoid/OpenCC" -> "studyzy/imewlconverter" ["e"=1]
"BYVoid/OpenCC" -> "ymcui/Chinese-BERT-wwm"
"BYVoid/OpenCC" -> "adobe-fonts/source-han-sans" ["e"=1]
"BYVoid/OpenCC" -> "osfans/trime" ["e"=1]
"BYVoid/OpenCC" -> "crownpku/Awesome-Chinese-NLP"
"Xunzi-LLM-of-Chinese-classics/XunziALLM" -> "hsc748NLP/code-for-digital-humanities-tutorial"
"Xunzi-LLM-of-Chinese-classics/XunziALLM" -> "hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing"
"Xunzi-LLM-of-Chinese-classics/XunziALLM" -> "jizijing/C-CLUE"
"Xunzi-LLM-of-Chinese-classics/XunziALLM" -> "Jihuai-wpy/bert-ancient-chinese"
"Xunzi-LLM-of-Chinese-classics/XunziALLM" -> "GoThereGit/EvaHan"
"Xunzi-LLM-of-Chinese-classics/XunziALLM" -> "Ethan-yt/guwen-models"
"Xunzi-LLM-of-Chinese-classics/XunziALLM" -> "isen-zhang/ACLUE"
"Xunzi-LLM-of-Chinese-classics/XunziALLM" -> "jiaeyan/Jiayan"
"Xunzi-LLM-of-Chinese-classics/XunziALLM" -> "PeterH0323/ancient-chat-llm"
"Xunzi-LLM-of-Chinese-classics/XunziALLM" -> "ttzHome/AnchiBERT"
"koth/kcws" -> "rockingdingo/deepnlp"
"koth/kcws" -> "zjy-ucas/ChineseNER"
"koth/kcws" -> "crownpku/Information-Extraction-Chinese"
"koth/kcws" -> "chilynn/sequence-labeling"
"koth/kcws" -> "baidu/Familia"
"koth/kcws" -> "glample/tagger"
"koth/kcws" -> "rockyzhengwu/FoolNLTK"
"koth/kcws" -> "memect/kg-beijing" ["e"=1]
"koth/kcws" -> "tobegit3hub/tensorflow_template_application" ["e"=1]
"koth/kcws" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"koth/kcws" -> "HIT-SCIR/ltp"
"koth/kcws" -> "guillaumegenthial/sequence_tagging"
"koth/kcws" -> "NLPchina/ansj_seg" ["e"=1]
"koth/kcws" -> "deepwel/Chinese-Annotator"
"koth/kcws" -> "HIT-SCIR/pyltp"
"HillZhang1999/RobustGEC" -> "yzhangcs/ctc-copy"
"HillZhang1999/RobustGEC" -> "Jacob-Zhou/gecdi"
"HillZhang1999/RobustGEC" -> "li-aolong/TemplateGEC"
"JustFollowUs/Natural-Language-Processing" -> "JustFollowUs/Machine-Learning" ["e"=1]
"JustFollowUs/Natural-Language-Processing" -> "JustFollowUs/Reinforcement-Learning"
"JustFollowUs/Natural-Language-Processing" -> "JustFollowUs/Deep-Learning"
"JustFollowUs/Natural-Language-Processing" -> "HIT-SCIR/pyltp"
"JustFollowUs/Natural-Language-Processing" -> "FudanNLP/fnlp"
"JustFollowUs/Natural-Language-Processing" -> "memect/hao"
"JustFollowUs/Natural-Language-Processing" -> "Kyubyong/nlp_tasks" ["e"=1]
"JustFollowUs/Natural-Language-Processing" -> "rockingdingo/deepnlp"
"JustFollowUs/Natural-Language-Processing" -> "crownpku/Awesome-Chinese-NLP"
"JustFollowUs/Natural-Language-Processing" -> "memect/kg-beijing" ["e"=1]
"JustFollowUs/Natural-Language-Processing" -> "zibuyu/research_tao"
"JustFollowUs/Natural-Language-Processing" -> "dapurv5/awesome-question-answering" ["e"=1]
"JustFollowUs/Natural-Language-Processing" -> "zhpmatrix/nlp-competitions-list-review"
"JustFollowUs/Natural-Language-Processing" -> "thunlp/THULAC"
"JustFollowUs/Natural-Language-Processing" -> "candlewill/Dialog_Corpus" ["e"=1]
"shangjingbo1226/AutoPhrase" -> "shangjingbo1226/SegPhrase"
"shangjingbo1226/AutoPhrase" -> "shangjingbo1226/AutoNER"
"shangjingbo1226/AutoPhrase" -> "luozhouyang/AutoPhraseX" ["e"=1]
"shangjingbo1226/AutoPhrase" -> "boudinfl/pke" ["e"=1]
"shangjingbo1226/AutoPhrase" -> "anirudyd/topmine"
"shangjingbo1226/AutoPhrase" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"shangjingbo1226/AutoPhrase" -> "jiesutd/LatticeLSTM"
"shangjingbo1226/AutoPhrase" -> "loujie0822/DeepIE"
"shangjingbo1226/AutoPhrase" -> "crownpku/Information-Extraction-Chinese"
"shangjingbo1226/AutoPhrase" -> "BangLiu/ConcepT"
"shangjingbo1226/AutoPhrase" -> "jiesutd/NCRFpp"
"shangjingbo1226/AutoPhrase" -> "thunlp/OpenNRE"
"shangjingbo1226/AutoPhrase" -> "NTMC-Community/MatchZoo"
"shangjingbo1226/AutoPhrase" -> "LeeSureman/Flat-Lattice-Transformer"
"shangjingbo1226/AutoPhrase" -> "panchunguang/ccks_baidu_entity_link"
"LL4J/Filter4J" -> "namaemonaishi/AIAClient"
"techwithtim/Langflow-RAG-Tutorial" -> "leonvanzyl/langflow-tutorial-2024"
"michaelliao/springcloud" -> "michaelliao/openweixin"
"z17176/Chinese_conversation_sentiment" -> "rainarch/SentiBridge"
"elulis/sensitive-words" -> "andyzty/sensitivewd-filter"
"elulis/sensitive-words" -> "fanhua1994/DzFilter" ["e"=1]
"elulis/sensitive-words" -> "hailin0/sensitive-word-filter"
"elulis/sensitive-words" -> "k5h9999/keywordfilter"
"elulis/sensitive-words" -> "fwwdn/sensitive-stop-words"
"elulis/sensitive-words" -> "observerss/textfilter"
"elulis/sensitive-words" -> "toolgood/ToolGood.Words" ["e"=1]
"elulis/sensitive-words" -> "qloog/sensitive_words"
"gaohuang/SnapshotEnsemble" -> "titu1994/Snapshot-Ensembles"
"gaohuang/SnapshotEnsemble" -> "moskomule/pytorch.snapshot.ensembles"
"ningshixian/LSTM_Attention" -> "gentaiscool/lstm-attention"
"ningshixian/LSTM_Attention" -> "Choco31415/Attention_Network_With_Keras"
"ningshixian/LSTM_Attention" -> "negar-rostamzadeh/LSTM-Attention"
"ningshixian/LSTM_Attention" -> "philipperemy/keras-attention"
"ningshixian/LSTM_Attention" -> "CyberZHG/keras-self-attention"
"ningshixian/LSTM_Attention" -> "foamliu/Self-Attention-Keras"
"ningshixian/LSTM_Attention" -> "datalogue/keras-attention"
"ningshixian/LSTM_Attention" -> "shunyaoshih/TPA-LSTM" ["e"=1]
"ningshixian/LSTM_Attention" -> "bubbliiiing/Keras-Attention" ["e"=1]
"ningshixian/LSTM_Attention" -> "thushv89/attention_keras"
"ningshixian/LSTM_Attention" -> "PatientEz/CNN-BiLSTM-Attention-Time-Series-Prediction_Keras" ["e"=1]
"ningshixian/LSTM_Attention" -> "u784799i/biLSTM_attn" ["e"=1]
"ningshixian/LSTM_Attention" -> "PatientEz/keras-attention-mechanism" ["e"=1]
"konsheng/Sensitive-lexicon" -> "bosnzt/wordscheck"
"konsheng/Sensitive-lexicon" -> "cjh0613/tencent-sensitive-words"
"konsheng/Sensitive-lexicon" -> "thu-coai/COLDataset" ["e"=1]
"konsheng/Sensitive-lexicon" -> "cjh0613/strict-sensitive-word"
"konsheng/Sensitive-lexicon" -> "fwwdn/sensitive-stop-words"
"konsheng/Sensitive-lexicon" -> "LL4J/Filter4J"
"konsheng/Sensitive-lexicon" -> "thu-coai/Safety-Prompts" ["e"=1]
"konsheng/Sensitive-lexicon" -> "whitzard-ai/jade-db" ["e"=1]
"konsheng/Sensitive-lexicon" -> "Go0p/emmmm"
"konsheng/Sensitive-lexicon" -> "SunLinJie/Text_Review"
"konsheng/Sensitive-lexicon" -> "jkiss/sensitive-words"
"anirudyd/topmine" -> "latorrefabian/topmine"
"anirudyd/topmine" -> "remenberl/SegPhrase-MultiLingual"
"JustFollowUs/Computer-Security" -> "JustFollowUs/Computer-Graphics"
"dhwajraj/deep-siamese-text-similarity" -> "amansrivastava17/lstm-siamese-text-similarity"
"dhwajraj/deep-siamese-text-similarity" -> "aditya1503/Siamese-LSTM"
"dhwajraj/deep-siamese-text-similarity" -> "NTMC-Community/MatchZoo"
"dhwajraj/deep-siamese-text-similarity" -> "THTBSE/siamese-lstm-network"
"dhwajraj/deep-siamese-text-similarity" -> "likejazz/Siamese-LSTM"
"dhwajraj/deep-siamese-text-similarity" -> "ATEC2018/deep-siamese-text-similarity"
"dhwajraj/deep-siamese-text-similarity" -> "zhiguowang/BiMPM"
"dhwajraj/deep-siamese-text-similarity" -> "brmson/dataset-sts" ["e"=1]
"dhwajraj/deep-siamese-text-similarity" -> "jx00109/siamese-lstm-for-sentence-similarity"
"dhwajraj/deep-siamese-text-similarity" -> "tlatkowski/multihead-siamese-nets"
"dhwajraj/deep-siamese-text-similarity" -> "allenai/bilm-tf" ["e"=1]
"dhwajraj/deep-siamese-text-similarity" -> "localminimum/QANet" ["e"=1]
"dhwajraj/deep-siamese-text-similarity" -> "pengshuang/Text-Similarity"
"dhwajraj/deep-siamese-text-similarity" -> "HouJP/kaggle-quora-question-pairs"
"dhwajraj/deep-siamese-text-similarity" -> "nelson-liu/paraphrase-id-tensorflow"
"kampersanda/xcdat" -> "kampersanda/fast_succinct_trie"
"rockingdingo/deepnlp" -> "koth/kcws"
"rockingdingo/deepnlp" -> "zjy-ucas/ChineseNER"
"rockingdingo/deepnlp" -> "glample/tagger"
"rockingdingo/deepnlp" -> "chilynn/sequence-labeling"
"rockingdingo/deepnlp" -> "HIT-SCIR/pyltp"
"rockingdingo/deepnlp" -> "crownpku/Information-Extraction-Chinese"
"rockingdingo/deepnlp" -> "deepwel/Chinese-Annotator"
"rockingdingo/deepnlp" -> "guillaumegenthial/sequence_tagging"
"rockingdingo/deepnlp" -> "liu-nlper/NER-LSTM-CRF"
"rockingdingo/deepnlp" -> "abisee/pointer-generator" ["e"=1]
"rockingdingo/deepnlp" -> "crownpku/Awesome-Chinese-NLP"
"rockingdingo/deepnlp" -> "NTMC-Community/MatchZoo"
"rockingdingo/deepnlp" -> "allenai/bilm-tf" ["e"=1]
"rockingdingo/deepnlp" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"rockingdingo/deepnlp" -> "brightmart/text_classification"
"JustFollowUs/Reinforcement-Learning" -> "JustFollowUs/Deep-Learning"
"JustFollowUs/Reinforcement-Learning" -> "JustFollowUs/Computer-Graphics"
"JustFollowUs/Reinforcement-Learning" -> "JustFollowUs/Computer-Vision"
"JustFollowUs/Reinforcement-Learning" -> "JustFollowUs/Natural-Language-Processing"
"JustFollowUs/Reinforcement-Learning" -> "JustFollowUs/Probabilistic-graphical-models"
"keras-team/keras-contrib" -> "CyberZHG/keras-bert"
"keras-team/keras-contrib" -> "stephen-v/zh-NER-keras"
"keras-team/keras-contrib" -> "philipperemy/keras-attention"
"keras-team/keras-contrib" -> "raghakot/keras-vis" ["e"=1]
"keras-team/keras-contrib" -> "aurora95/Keras-FCN" ["e"=1]
"keras-team/keras-contrib" -> "farizrahman4u/seq2seq" ["e"=1]
"keras-team/keras-contrib" -> "keras-team/keras-applications" ["e"=1]
"keras-team/keras-contrib" -> "fchollet/keras-resources" ["e"=1]
"keras-team/keras-contrib" -> "tdeboissiere/DeepLearningImplementations" ["e"=1]
"keras-team/keras-contrib" -> "farizrahman4u/recurrentshop" ["e"=1]
"keras-team/keras-contrib" -> "bstriner/keras-adversarial" ["e"=1]
"keras-team/keras-contrib" -> "Separius/BERT-keras"
"keras-team/keras-contrib" -> "eriklindernoren/Keras-GAN" ["e"=1]
"keras-team/keras-contrib" -> "yhenon/keras-frcnn" ["e"=1]
"keras-team/keras-contrib" -> "bckenstler/CLR"
"harvard-lil/olaw" -> "TiltonLAW/LegalWRITER"
"FanhuaandLuomu/pkulaw_spider" -> "FanhuaandLuomu/ParseLawDocuments"
"FanhuaandLuomu/pkulaw_spider" -> "FanhuaandLuomu/QQSpider" ["e"=1]
"FanhuaandLuomu/pkulaw_spider" -> "rickyxume/Law_Mining"
"jacoxu/STC2" -> "hadifar/stc_clustering"
"jacoxu/STC2" -> "jacoxu/StackOverflow"
"jacoxu/STC2" -> "rashadulrakib/short-text-clustering-enhancement"
"jacoxu/STC2" -> "zqhZY/short_text_cnn_cluster"
"thuiar/TCL-MAP" -> "thuiar/MIntRec2.0"
"thuiar/TCL-MAP" -> "thuiar/MIntRec"
"thuiar/MIntRec2.0" -> "thuiar/MIntRec"
"thuiar/MIntRec2.0" -> "thuiar/TCL-MAP"
"thuiar/MIntRec2.0" -> "MC-EIU/MC-EIU"
"thuiar/MIntRec2.0" -> "thuiar/UMC"
"titu1994/Snapshot-Ensembles" -> "gaohuang/SnapshotEnsemble"
"titu1994/Snapshot-Ensembles" -> "arthurdouillard/keras-snapshot_ensembles"
"titu1994/Snapshot-Ensembles" -> "moskomule/pytorch.snapshot.ensembles"
"titu1994/Snapshot-Ensembles" -> "emrul/Learning-Rate"
"titu1994/Snapshot-Ensembles" -> "kristpapadopoulos/keras-stochastic-weight-averaging"
"titu1994/Snapshot-Ensembles" -> "surmenok/keras_lr_finder"
"titu1994/Snapshot-Ensembles" -> "bckenstler/CLR"
"PKULCWM/PKUSUMSUM" -> "Steven-Hewitt/Entailment-with-Tensorflow"
"PKULCWM/PKUSUMSUM" -> "Orekhov/SentenceBreaking"
"PKULCWM/PKUSUMSUM" -> "hasibi/EntityLinkingRetrieval-ELR"
"PKULCWM/PKUSUMSUM" -> "ankitp94/relationship-extraction"
"PKULCWM/PKUSUMSUM" -> "chqiwang/convseg"
"PKULCWM/PKUSUMSUM" -> "Kyubyong/word_prediction"
"PKULCWM/PKUSUMSUM" -> "thunlp/THUTag"
"PKULCWM/PKUSUMSUM" -> "pln-fing-udelar/pghumor"
"PKULCWM/PKUSUMSUM" -> "sildar/potara"
"CASIA-IVA-Lab/FLAP" -> "LinkAnonymous/BESA"
"hu-po/o" -> "yencarnacion/yt-sum"
"surajr/SarcasmDetection" -> "SanjayKhatwani/Sarcasm_Detection_using_Tensorflow"
"JustFollowUs/CS_MUST" -> "JustFollowUs/Computer-Science-and-Technology"
"leido/char-rnn-cn" -> "hit-computer/char-rnn-tf"
"leido/char-rnn-cn" -> "hit-computer/char-rnn"
"leido/char-rnn-cn" -> "wandouduoduo/SunRnn"
"leido/char-rnn-cn" -> "zhangzibin/char-rnn-chinese"
"Kyubyong/neural_chinese_transliterator" -> "crownpku/Somiao-Pinyin"
"Kyubyong/neural_chinese_transliterator" -> "taiqing/pinyin2hanzi"
"Kyubyong/neural_chinese_transliterator" -> "Kyubyong/word_prediction"
"Kyubyong/neural_chinese_transliterator" -> "Steven-Hewitt/Entailment-with-Tensorflow"
"Kyubyong/neural_chinese_transliterator" -> "ankitp94/relationship-extraction"
"Kyubyong/neural_chinese_transliterator" -> "chqiwang/convseg"
"Kyubyong/neural_chinese_transliterator" -> "Orekhov/SentenceBreaking"
"Kyubyong/neural_chinese_transliterator" -> "Kyubyong/neural_tokenizer"
"hit-computer/char-rnn-tf" -> "hit-computer/char-rnn"
"hit-computer/char-rnn-tf" -> "hit-computer/SC-LSTM"
"hit-computer/char-rnn-tf" -> "leido/char-rnn-cn"
"hit-computer/char-rnn-tf" -> "zhangzibin/char-rnn-chinese"
"LopezGG/Sequence-Labelling" -> "LopezGG/NN_NER_tensorFlow"
"JustFollowUs/Computer-Graphics" -> "JustFollowUs/Deep-Learning"
"JustFollowUs/Computer-Graphics" -> "JustFollowUs/Human-Computer-Interaction"
"JustFollowUs/Computer-Graphics" -> "JustFollowUs/Computer-Science-and-Technology"
"JustFollowUs/Deep-Learning" -> "JustFollowUs/Reinforcement-Learning"
"JustFollowUs/Deep-Learning" -> "JustFollowUs/Computer-Graphics"
"JustFollowUs/Deep-Learning" -> "JustFollowUs/Computer-Vision"
"JustFollowUs/Computer-Vision" -> "JustFollowUs/Deep-Learning"
"JustFollowUs/Human-Computer-Interaction" -> "JustFollowUs/Computer-Science-and-Technology"
"yzhangcs/ctc-copy" -> "HillZhang1999/RobustGEC"
"ashengtx/CilinSimilarity" -> "BiLiangLtd/WordSimilarity"
"ashengtx/CilinSimilarity" -> "yaleimeng/Final_word_Similarity"
"Jacob-Zhou/gecdi" -> "HillZhang1999/RobustGEC"
"Jacob-Zhou/gecdi" -> "yzhangcs/ctc-copy"
"stanleylsx/nlu_torch" -> "stanleylsx/text_embedding"
"vered1986/UnsupervisedHypernymy" -> "iesl/Distributional-Inclusion-Vector-Embedding"
"vered1986/UnsupervisedHypernymy" -> "facebookresearch/hypernymysuite"
"vered1986/UnsupervisedHypernymy" -> "nguyenkh/HyperVec"
"linpingta/chinese-poem-generator" -> "imagetellerD/chinese-poem-generator"
"harvardnlp/decomp-attn" -> "libowen2121/SNLI-decomposable-attention"
"harvardnlp/decomp-attn" -> "erickrf/multiffn-nli"
"harvardnlp/decomp-attn" -> "HsiaoYetGun/Decomposable-Attention"
"harvardnlp/decomp-attn" -> "DeNeutoy/Decomposable_Attn"
"blcuicall/OMGEval" -> "blcuicall/yacsc"
"blcuicall/OMGEval" -> "blcuicall/SimpDefiner"
"blcuicall/OMGEval" -> "blcuicall/BLCU-HPC"
"kaen2891/adversarial_fine-tuning_using_generated_respiratory_sound" -> "kaen2891/stethoscope-guided_supervised_contrastive_learning"
"dthuerck/mapmap_cpu" -> "nmoehrle/rayint"
"louisbrulenaudet/docutron" -> "DotDoug/TreatiseAI"
"whatbeg/GodTian_Pinyin" -> "brucewen05/CSE_481_NLP"
"mmichelsonIF/hearst_patterns_python" -> "facebookresearch/hypernymysuite"
"mmichelsonIF/hearst_patterns_python" -> "vered1986/UnsupervisedHypernymy"
"mmichelsonIF/hearst_patterns_python" -> "nlpub/hyperstar"
"stanleylsx/text_embedding" -> "stanleylsx/nlu_torch"
"imagetellerD/chinese-poem-generator" -> "linpingta/chinese-poem-generator"
"oneal2000/STARD" -> "THUlawtech/LegalAttack"
"BatsResearch/ex2" -> "BatsResearch/fudd"
"FudanNLP/nlp-beginner" -> "Alic-yuan/nlp-beginner-finish" ["e"=1]
"FudanNLP/nlp-beginner" -> "graykode/nlp-tutorial" ["e"=1]
"FudanNLP/nlp-beginner" -> "zibuyu/research_tao"
"FudanNLP/nlp-beginner" -> "nndl/nndl.github.io" ["e"=1]
"FudanNLP/nlp-beginner" -> "DA-southampton/NLP_ability"
"FudanNLP/nlp-beginner" -> "ymcui/Chinese-BERT-wwm"
"FudanNLP/nlp-beginner" -> "km1994/nlp_paper_study"
"FudanNLP/nlp-beginner" -> "Embedding/Chinese-Word-Vectors"
"FudanNLP/nlp-beginner" -> "NLP-LOVE/ML-NLP" ["e"=1]
"FudanNLP/nlp-beginner" -> "zhpmatrix/nlp-competitions-list-review"
"FudanNLP/nlp-beginner" -> "crownpku/Awesome-Chinese-NLP"
"FudanNLP/nlp-beginner" -> "fastnlp/fastNLP"
"FudanNLP/nlp-beginner" -> "songyingxin/NLPer-Interview"
"FudanNLP/nlp-beginner" -> "brightmart/nlp_chinese_corpus"
"FudanNLP/nlp-beginner" -> "yandexdataschool/nlp_course" ["e"=1]
"thunlp/OpenNRE" -> "crownpku/Information-Extraction-Chinese"
"thunlp/OpenNRE" -> "thunlp/NREPapers" ["e"=1]
"thunlp/OpenNRE" -> "thunlp/NRE" ["e"=1]
"thunlp/OpenNRE" -> "macanv/BERT-BiLSTM-CRF-NER"
"thunlp/OpenNRE" -> "loujie0822/DeepIE"
"thunlp/OpenNRE" -> "thunlp/OpenKE" ["e"=1]
"thunlp/OpenNRE" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"thunlp/OpenNRE" -> "qq547276542/Agriculture_KnowledgeGraph" ["e"=1]
"thunlp/OpenNRE" -> "ymcui/Chinese-BERT-wwm"
"thunlp/OpenNRE" -> "brightmart/albert_zh"
"thunlp/OpenNRE" -> "ShomyLiu/pytorch-relation-extraction" ["e"=1]
"thunlp/OpenNRE" -> "zjy-ucas/ChineseNER"
"thunlp/OpenNRE" -> "Embedding/Chinese-Word-Vectors"
"thunlp/OpenNRE" -> "zjunlp/DeepKE" ["e"=1]
"thunlp/OpenNRE" -> "roomylee/awesome-relation-extraction" ["e"=1]
"guillaumegenthial/sequence_tagging" -> "guillaumegenthial/tf_ner"
"guillaumegenthial/sequence_tagging" -> "zjy-ucas/ChineseNER"
"guillaumegenthial/sequence_tagging" -> "Determined22/zh-NER-TF"
"guillaumegenthial/sequence_tagging" -> "glample/tagger"
"guillaumegenthial/sequence_tagging" -> "Franck-Dernoncourt/NeuroNER"
"guillaumegenthial/sequence_tagging" -> "crownpku/Information-Extraction-Chinese"
"guillaumegenthial/sequence_tagging" -> "Hironsan/anago"
"guillaumegenthial/sequence_tagging" -> "macanv/BERT-BiLSTM-CRF-NER"
"guillaumegenthial/sequence_tagging" -> "shiyybua/NER"
"guillaumegenthial/sequence_tagging" -> "jiesutd/LatticeLSTM"
"guillaumegenthial/sequence_tagging" -> "kyzhouhzau/BERT-NER"
"guillaumegenthial/sequence_tagging" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"guillaumegenthial/sequence_tagging" -> "jiesutd/NCRFpp"
"guillaumegenthial/sequence_tagging" -> "thunlp/OpenNRE"
"guillaumegenthial/sequence_tagging" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"lukecq1231/nli" -> "coetaur0/ESIM"
"lukecq1231/nli" -> "nyu-mll/multiNLI"
"lukecq1231/nli" -> "YichenGong/Densely-Interactive-Inference-Network"
"lukecq1231/nli" -> "erickrf/multiffn-nli"
"lukecq1231/nli" -> "HsiaoYetGun/ESIM"
"lukecq1231/nli" -> "easonnie/multiNLI_encoder"
"lukecq1231/nli" -> "pengshuang/Text-Similarity"
"lukecq1231/nli" -> "lukecq1231/kim"
"lukecq1231/nli" -> "zhiguowang/BiMPM"
"lukecq1231/nli" -> "lanwuwei/SPM_toolkit"
"lukecq1231/nli" -> "dallascard/TreeLSTM"
"lukecq1231/nli" -> "harvardnlp/decomp-attn"
"lukecq1231/nli" -> "taoshen58/DiSAN" ["e"=1]
"lukecq1231/nli" -> "Smerity/keras_snli"
"lukecq1231/nli" -> "EternalFeather/ESIM"
"bradleypallen/keras-quora-question-pairs" -> "abhishekkrthakur/is_that_a_duplicate_quora_question"
"bradleypallen/keras-quora-question-pairs" -> "nelson-liu/paraphrase-id-tensorflow"
"bradleypallen/keras-quora-question-pairs" -> "HouJP/kaggle-quora-question-pairs"
"bradleypallen/keras-quora-question-pairs" -> "erogol/QuoraDQBaseline"
"bradleypallen/keras-quora-question-pairs" -> "qqgeogor/kaggle-quora-solution-8th"
"bradleypallen/keras-quora-question-pairs" -> "Wrosinski/Kaggle-Quora"
"bradleypallen/keras-quora-question-pairs" -> "YuriyGuts/kaggle-quora-question-pairs"
"bradleypallen/keras-quora-question-pairs" -> "zhiguowang/BiMPM"
"bradleypallen/keras-quora-question-pairs" -> "qqgeogor/kaggle_quora_benchmark"
"bradleypallen/keras-quora-question-pairs" -> "aerdem4/kaggle-quora-dup"
"bradleypallen/keras-quora-question-pairs" -> "allenai/deep_qa" ["e"=1]
"bradleypallen/keras-quora-question-pairs" -> "sjvasquez/quora-duplicate-questions"
"bradleypallen/keras-quora-question-pairs" -> "ijinmao/BiMPM_keras"
"bradleypallen/keras-quora-question-pairs" -> "dysdsyd/kaggle-question-pairs-quora"
"lucasjinreal/tensorflow_poems" -> "lucasjinreal/tensorflow_novelist"
"lucasjinreal/tensorflow_poems" -> "hzy46/Char-RNN-TensorFlow"
"lucasjinreal/tensorflow_poems" -> "hjptriplebee/Chinese_poem_generator"
"lucasjinreal/tensorflow_poems" -> "NELSONZHAO/zhihu"
"lucasjinreal/tensorflow_poems" -> "lcdevelop/ChatBotCourse" ["e"=1]
"lucasjinreal/tensorflow_poems" -> "lucasjinreal/weibo_terminater" ["e"=1]
"lucasjinreal/tensorflow_poems" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"lucasjinreal/tensorflow_poems" -> "sherjilozair/char-rnn-tensorflow" ["e"=1]
"lucasjinreal/tensorflow_poems" -> "luyishisi/shisi.eth-in-web3" ["e"=1]
"lucasjinreal/tensorflow_poems" -> "Roshanson/TextInfoExp"
"lucasjinreal/tensorflow_poems" -> "google/seq2seq" ["e"=1]
"lucasjinreal/tensorflow_poems" -> "candlewill/Dialog_Corpus" ["e"=1]
"lucasjinreal/tensorflow_poems" -> "brightmart/text_classification"
"lucasjinreal/tensorflow_poems" -> "Embedding/Chinese-Word-Vectors"
"lucasjinreal/tensorflow_poems" -> "crownpku/Awesome-Chinese-NLP"
"bckenstler/CLR" -> "surmenok/keras_lr_finder"
"bckenstler/CLR" -> "titu1994/keras-one-cycle"
"bckenstler/CLR" -> "titu1994/Snapshot-Ensembles"
"bckenstler/CLR" -> "stratospark/keras-multiprocess-image-data-generator" ["e"=1]
"bckenstler/CLR" -> "keras-team/keras-contrib"
"bckenstler/CLR" -> "maxpumperla/hyperas" ["e"=1]
"bckenstler/CLR" -> "raghakot/keras-vis" ["e"=1]
"bckenstler/CLR" -> "titu1994/keras-squeeze-excite-network" ["e"=1]
"bckenstler/CLR" -> "qubvel/efficientnet" ["e"=1]
"bckenstler/CLR" -> "flyyufelix/cnn_finetune" ["e"=1]
"bckenstler/CLR" -> "philipperemy/keras-attention"
"bckenstler/CLR" -> "rcmalli/keras-mobilenet" ["e"=1]
"bckenstler/CLR" -> "keplr-io/quiver" ["e"=1]
"bckenstler/CLR" -> "qubvel/segmentation_models" ["e"=1]
"bckenstler/CLR" -> "XifengGuo/CapsNet-Keras" ["e"=1]
"YuriyGuts/kaggle-quora-question-pairs" -> "Wrosinski/Kaggle-Quora"
"YuriyGuts/kaggle-quora-question-pairs" -> "zhaoyu18/quora_question_pairs"
"YuriyGuts/kaggle-quora-question-pairs" -> "aerdem4/kaggle-quora-dup"
"YuriyGuts/kaggle-quora-question-pairs" -> "howardyclo/Kaggle-Quora-Question-Pairs"
"YuriyGuts/kaggle-quora-question-pairs" -> "bradleypallen/keras-quora-question-pairs"
"Jekub/Wapiti" -> "adsva/python-wapiti"
"Jekub/Wapiti" -> "chokkan/crfsuite"
"shibing624/pytextclassifier" -> "shibing624/similarities" ["e"=1]
"shibing624/pytextclassifier" -> "shibing624/pke_zh"
"shibing624/pytextclassifier" -> "shibing624/nlp-tutorial"
"shibing624/pytextclassifier" -> "HuiResearch/epidemicTextMatch" ["e"=1]
"shibing624/pytextclassifier" -> "jasoncao11/nlp-notebook"
"shibing624/pytextclassifier" -> "rsanshierli/EasyBert"
"shibing624/pytextclassifier" -> "catqaq/OpenTextClassification"
"shibing624/pytextclassifier" -> "hellonlp/classifier-multi-label"
"shibing624/pytextclassifier" -> "JackHCC/Chinese-Text-Classification-PyTorch"
"shibing624/pytextclassifier" -> "murray-z/text_analysis_tools"
"zjy-ucas/ChineseNER" -> "crownpku/Information-Extraction-Chinese"
"zjy-ucas/ChineseNER" -> "Determined22/zh-NER-TF"
"zjy-ucas/ChineseNER" -> "macanv/BERT-BiLSTM-CRF-NER"
"zjy-ucas/ChineseNER" -> "jiesutd/LatticeLSTM"
"zjy-ucas/ChineseNER" -> "shiyybua/NER"
"zjy-ucas/ChineseNER" -> "guillaumegenthial/sequence_tagging"
"zjy-ucas/ChineseNER" -> "kyzhouhzau/BERT-NER"
"zjy-ucas/ChineseNER" -> "buppt/ChineseNER"
"zjy-ucas/ChineseNER" -> "ProHiryu/bert-chinese-ner"
"zjy-ucas/ChineseNER" -> "thunlp/OpenNRE"
"zjy-ucas/ChineseNER" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"zjy-ucas/ChineseNER" -> "yumath/bertNER"
"zjy-ucas/ChineseNER" -> "FuYanzhe2/Name-Entity-Recognition"
"zjy-ucas/ChineseNER" -> "luopeixiang/named_entity_recognition"
"zjy-ucas/ChineseNER" -> "brightmart/albert_zh"
"Roshanson/TextInfoExp" -> "crownpku/Information-Extraction-Chinese"
"Roshanson/TextInfoExp" -> "AimeeLee77/keyword_extraction"
"Roshanson/TextInfoExp" -> "chaoming0625/SentimentPolarityAnalysis" ["e"=1]
"Roshanson/TextInfoExp" -> "crownpku/Awesome-Chinese-NLP"
"Roshanson/TextInfoExp" -> "zjy-ucas/ChineseNER"
"Roshanson/TextInfoExp" -> "ownthink/Jiagu"
"Roshanson/TextInfoExp" -> "letiantian/TextRank4ZH"
"Roshanson/TextInfoExp" -> "yongzhuo/nlp_xiaojiang"
"Roshanson/TextInfoExp" -> "terrifyzhao/bert-utils"
"Roshanson/TextInfoExp" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"Roshanson/TextInfoExp" -> "thunlp/OpenNRE"
"Roshanson/TextInfoExp" -> "HIT-SCIR/pyltp"
"Roshanson/TextInfoExp" -> "deepwel/Chinese-Annotator"
"Roshanson/TextInfoExp" -> "qq547276542/Agriculture_KnowledgeGraph" ["e"=1]
"Roshanson/TextInfoExp" -> "buppt/ChineseNRE" ["e"=1]
"hellohaptik/chatbot_ner" -> "hellohaptik/spello"
"hellohaptik/chatbot_ner" -> "viraja1/mitm_postman"
"hellohaptik/chatbot_ner" -> "hellohaptik/multi-task-NLP"
"yongyehuang/Tensorflow-Tutorial" -> "rockingdingo/deepnlp"
"yongyehuang/Tensorflow-Tutorial" -> "chilynn/sequence-labeling"
"yongyehuang/Tensorflow-Tutorial" -> "yongyehuang/zhihu-text-classification"
"yongyehuang/Tensorflow-Tutorial" -> "hzy46/Char-RNN-TensorFlow"
"yongyehuang/Tensorflow-Tutorial" -> "guillaumegenthial/sequence_tagging"
"yongyehuang/Tensorflow-Tutorial" -> "NELSONZHAO/zhihu"
"yongyehuang/Tensorflow-Tutorial" -> "YouChouNoBB/ijcai-18-top2-single-mole-solution" ["e"=1]
"yongyehuang/Tensorflow-Tutorial" -> "shiyybua/NER"
"yongyehuang/Tensorflow-Tutorial" -> "koth/kcws"
"yongyehuang/Tensorflow-Tutorial" -> "kevin369ml/My-TensorFlow-tutorials" ["e"=1]
"yongyehuang/Tensorflow-Tutorial" -> "ycjuan/kaggle-2014-criteo" ["e"=1]
"yongyehuang/Tensorflow-Tutorial" -> "zjy-ucas/ChineseNER"
"yongyehuang/Tensorflow-Tutorial" -> "kratzert/finetune_alexnet_with_tensorflow" ["e"=1]
"yongyehuang/Tensorflow-Tutorial" -> "qiaoguan/deep-ctr-prediction" ["e"=1]
"yongyehuang/Tensorflow-Tutorial" -> "hankcs/CS224n"
"nelson-liu/paraphrase-id-tensorflow" -> "bradleypallen/keras-quora-question-pairs"
"nelson-liu/paraphrase-id-tensorflow" -> "zhiguowang/BiMPM"
"nelson-liu/paraphrase-id-tensorflow" -> "allenai/deep_qa" ["e"=1]
"nelson-liu/paraphrase-id-tensorflow" -> "wasiahmad/paraphrase_identification" ["e"=1]
"nelson-liu/paraphrase-id-tensorflow" -> "lanwuwei/SPM_toolkit"
"nelson-liu/paraphrase-id-tensorflow" -> "Wrosinski/Kaggle-Quora"
"nelson-liu/paraphrase-id-tensorflow" -> "qqgeogor/kaggle-quora-solution-8th"
"nelson-liu/paraphrase-id-tensorflow" -> "abhishekkrthakur/is_that_a_duplicate_quora_question"
"nelson-liu/paraphrase-id-tensorflow" -> "qqgeogor/kaggle_quora_benchmark"
"nelson-liu/paraphrase-id-tensorflow" -> "ijinmao/BiMPM_keras"
"nelson-liu/paraphrase-id-tensorflow" -> "iamaaditya/neural-paraphrase-generation" ["e"=1]
"nelson-liu/paraphrase-id-tensorflow" -> "YichenGong/Densely-Interactive-Inference-Network"
"nelson-liu/paraphrase-id-tensorflow" -> "erogol/QuoraDQBaseline"
"nelson-liu/paraphrase-id-tensorflow" -> "HouJP/kaggle-quora-question-pairs"
"nelson-liu/paraphrase-id-tensorflow" -> "aditya1503/Siamese-LSTM"
"HouJP/kaggle-quora-question-pairs" -> "qqgeogor/kaggle-quora-solution-8th"
"HouJP/kaggle-quora-question-pairs" -> "bradleypallen/keras-quora-question-pairs"
"HouJP/kaggle-quora-question-pairs" -> "zhaoyu18/quora_question_pairs"
"HouJP/kaggle-quora-question-pairs" -> "zhiguowang/BiMPM"
"HouJP/kaggle-quora-question-pairs" -> "YuriyGuts/kaggle-quora-question-pairs"
"HouJP/kaggle-quora-question-pairs" -> "NTMC-Community/MatchZoo"
"HouJP/kaggle-quora-question-pairs" -> "abhishekkrthakur/is_that_a_duplicate_quora_question"
"HouJP/kaggle-quora-question-pairs" -> "Wrosinski/Kaggle-Quora"
"HouJP/kaggle-quora-question-pairs" -> "lanwuwei/SPM_toolkit"
"HouJP/kaggle-quora-question-pairs" -> "SpongebBob/Quora-Kaggle"
"HouJP/kaggle-quora-question-pairs" -> "chenyuntc/PyTorchText"
"HouJP/kaggle-quora-question-pairs" -> "plantsgo/ijcai-2018" ["e"=1]
"HouJP/kaggle-quora-question-pairs" -> "aerdem4/kaggle-quora-dup"
"HouJP/kaggle-quora-question-pairs" -> "LittletreeZou/Question-Pairs-Matching"
"HouJP/kaggle-quora-question-pairs" -> "brightmart/nlu_sim"
"DevinZ1993/Chinese-Poetry-Generation" -> "Disiok/poetry-seq2seq"
"DevinZ1993/Chinese-Poetry-Generation" -> "XingxingZhang/rnnpg"
"DevinZ1993/Chinese-Poetry-Generation" -> "ChaosPKU/Poetry"
"DevinZ1993/Chinese-Poetry-Generation" -> "hjptriplebee/Chinese_poem_generator"
"DevinZ1993/Chinese-Poetry-Generation" -> "xue2han/AncientChinesePoemRNN"
"DevinZ1993/Chinese-Poetry-Generation" -> "justdark/pytorch-poetry-gen"
"DevinZ1993/Chinese-Poetry-Generation" -> "wzyonggege/RNN_poetry_generator"
"DevinZ1993/Chinese-Poetry-Generation" -> "Clover27/ancient-Chinese-poem-generator"
"DevinZ1993/Chinese-Poetry-Generation" -> "XiaoyuanYi/WMPoetry"
"mjiang89/MetaPAD" -> "qili5/TruePIE"
"zhedongzheng/tensorflow-nlp" -> "rockingdingo/deepnlp"
"zhedongzheng/tensorflow-nlp" -> "mesolitica/NLP-Models-Tensorflow"
"zhedongzheng/tensorflow-nlp" -> "NTMC-Community/MatchZoo"
"zhedongzheng/tensorflow-nlp" -> "wagamamaz/tensorflow-tutorial" ["e"=1]
"zhedongzheng/tensorflow-nlp" -> "yaserkl/RLSeq2Seq" ["e"=1]
"zhedongzheng/tensorflow-nlp" -> "brightmart/bert_language_understanding"
"zhedongzheng/tensorflow-nlp" -> "brightmart/text_classification"
"zhedongzheng/tensorflow-nlp" -> "Jiakui/awesome-bert"
"zhedongzheng/tensorflow-nlp" -> "Roshanson/TextInfoExp"
"zhedongzheng/tensorflow-nlp" -> "tensorflow/nmt" ["e"=1]
"zhedongzheng/tensorflow-nlp" -> "shuaihuaiyi/QA" ["e"=1]
"zhedongzheng/tensorflow-nlp" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"zhedongzheng/tensorflow-nlp" -> "baidu/Familia"
"zhedongzheng/tensorflow-nlp" -> "crownpku/Awesome-Chinese-NLP"
"zhedongzheng/tensorflow-nlp" -> "nfmcclure/tensorflow_cookbook" ["e"=1]
"galsang/ABCNN" -> "yinwenpeng/Answer_Selection"
"galsang/ABCNN" -> "ChenglongChen/tensorflow-DSMM" ["e"=1]
"galsang/ABCNN" -> "yinwenpeng/Attentive_Convolution"
"galsang/ABCNN" -> "pl8787/MatchPyramid-TensorFlow"
"galsang/ABCNN" -> "zhiguowang/BiMPM"
"galsang/ABCNN" -> "Magic-Bubble/Zhihu"
"galsang/ABCNN" -> "phdowling/abcnn-keras"
"galsang/ABCNN" -> "flrngel/Self-Attentive-tensorflow" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "AimeeLee77/keyword_extraction"
"AimeeLee77/wiki_zh_word2vec" -> "AimeeLee77/senti_analysis" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "zake7749/word2vec-tutorial" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "liuwenqiang1202/wiki-word2vec"
"AimeeLee77/wiki_zh_word2vec" -> "cjymz886/text-cnn" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "pengming617/bert_classification" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "FanhuaandLuomu/BiLstm_CNN_CRF_CWS"
"AimeeLee77/wiki_zh_word2vec" -> "Deermini/word2vec-tensorflow" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "brightmart/nlp_chinese_corpus"
"AimeeLee77/wiki_zh_word2vec" -> "liuhuanyong/ChineseEmbedding"
"AimeeLee77/wiki_zh_word2vec" -> "lpty/nlp_base"
"AimeeLee77/wiki_zh_word2vec" -> "cjymz886/text_rnn_attention" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "Roshanson/TextInfoExp"
"AimeeLee77/wiki_zh_word2vec" -> "SeoSangwoo/Attention-Based-BiLSTM-relation-extraction" ["e"=1]
"AimeeLee77/wiki_zh_word2vec" -> "ProHiryu/bert-chinese-ner"
"kimiyoung/transfer" -> "OSU-slatelab/seq_tagger"
"Steven-Hewitt/Entailment-with-Tensorflow" -> "Orekhov/SentenceBreaking"
"Steven-Hewitt/Entailment-with-Tensorflow" -> "ankitp94/relationship-extraction"
"castorini/castor" -> "castorini/NCE-CNN-Torch"
"castorini/castor" -> "castorini/MP-CNN-Torch"
"iesl/dilated-cnn-ner" -> "hankcs/ID-CNN-CWS"
"iesl/dilated-cnn-ner" -> "CPF-NLPR/AT4ChineseNER"
"iesl/dilated-cnn-ner" -> "rainarch/DSNER"
"iesl/dilated-cnn-ner" -> "strubell/LISA" ["e"=1]
"iesl/dilated-cnn-ner" -> "LopezGG/NN_NER_tensorFlow"
"Franck-Dernoncourt/NeuroNER" -> "glample/tagger"
"Franck-Dernoncourt/NeuroNER" -> "guillaumegenthial/sequence_tagging"
"Franck-Dernoncourt/NeuroNER" -> "monikkinom/ner-lstm"
"Franck-Dernoncourt/NeuroNER" -> "Hironsan/anago"
"Franck-Dernoncourt/NeuroNER" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"Franck-Dernoncourt/NeuroNER" -> "zjy-ucas/ChineseNER"
"Franck-Dernoncourt/NeuroNER" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"Franck-Dernoncourt/NeuroNER" -> "guillaumegenthial/tf_ner"
"Franck-Dernoncourt/NeuroNER" -> "kyzhouhzau/BERT-NER"
"Franck-Dernoncourt/NeuroNER" -> "clab/stack-lstm-ner"
"Franck-Dernoncourt/NeuroNER" -> "jiesutd/NCRFpp"
"Franck-Dernoncourt/NeuroNER" -> "huggingface/neuralcoref" ["e"=1]
"Franck-Dernoncourt/NeuroNER" -> "allenai/bilm-tf" ["e"=1]
"Franck-Dernoncourt/NeuroNER" -> "google/sling" ["e"=1]
"Franck-Dernoncourt/NeuroNER" -> "rockingdingo/deepnlp"
"jiesutd/RichWordSegmentor" -> "jiesutd/SubwordEncoding-CWS"
"jiesutd/RichWordSegmentor" -> "fudannlp16/CWS_Dict"
"jiesutd/RichWordSegmentor" -> "jcyk/CWS"
"jiesutd/RichWordSegmentor" -> "SUTDNLP/LibN3L" ["e"=1]
"jiesutd/RichWordSegmentor" -> "jcyk/greedyCWS"
"jiesutd/RichWordSegmentor" -> "SUTDNLP/NNTransitionSegmentor"
"heshenghuan/LSTM-CRF" -> "LopezGG/NN_NER_tensorFlow"
"heshenghuan/LSTM-CRF" -> "liu-nlper/NER-LSTM-CRF"
"panhaiqi/AncientPoetry" -> "yxcs/poems-db"
"Tixierae/deep_learning_NLP" -> "strongio/keras-elmo"
"Tixierae/deep_learning_NLP" -> "richliao/textClassifier" ["e"=1]
"Tixierae/deep_learning_NLP" -> "BrambleXu/nlp-beginner-guide-keras"
"harvard-lil/capstone" -> "harvard-lil/cap-examples"
"harvard-lil/capstone" -> "freelawproject/reporters-db"
"harvard-lil/capstone" -> "adelevie/walverine"
"harvard-lil/capstone" -> "freelawproject/courtlistener"
"Clover27/ancient-Chinese-poem-generator" -> "justdark/pytorch-poetry-gen"
"justdark/pytorch-poetry-gen" -> "Clover27/ancient-Chinese-poem-generator"
"justdark/pytorch-poetry-gen" -> "jackeyGao/chinese-poetry"
"justdark/pytorch-poetry-gen" -> "DevinZ1993/Chinese-Poetry-Generation"
"chqiwang/convseg" -> "ankitp94/relationship-extraction"
"chqiwang/convseg" -> "Kyubyong/word_prediction"
"chqiwang/convseg" -> "Steven-Hewitt/Entailment-with-Tensorflow"
"chqiwang/convseg" -> "Orekhov/SentenceBreaking"
"chqiwang/convseg" -> "PKULCWM/PKUSUMSUM"
"xinydev/NovelConversationCorpus" -> "kwsy/FictionAnalysis"
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "bradleypallen/keras-quora-question-pairs"
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "erogol/QuoraDQBaseline"
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "HouJP/kaggle-quora-question-pairs"
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "qqgeogor/kaggle-quora-solution-8th"
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "Wrosinski/Kaggle-Quora"
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "qqgeogor/kaggle_quora_benchmark"
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "aerdem4/kaggle-quora-dup"
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "nelson-liu/paraphrase-id-tensorflow"
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "zhiguowang/BiMPM"
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "sjvasquez/quora-duplicate-questions"
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "ChenglongChen/kaggle-HomeDepot" ["e"=1]
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "kaz-Anova/StackNet" ["e"=1]
"abhishekkrthakur/is_that_a_duplicate_quora_question" -> "ChenglongChen/kaggle-CrowdFlower" ["e"=1]
"zhiguowang/BiMPM" -> "YichenGong/Densely-Interactive-Inference-Network"
"zhiguowang/BiMPM" -> "nelson-liu/paraphrase-id-tensorflow"
"zhiguowang/BiMPM" -> "erickrf/multiffn-nli"
"zhiguowang/BiMPM" -> "shuohangwang/SeqMatchSeq" ["e"=1]
"zhiguowang/BiMPM" -> "lanwuwei/SPM_toolkit"
"zhiguowang/BiMPM" -> "ijinmao/BiMPM_keras"
"zhiguowang/BiMPM" -> "HouJP/kaggle-quora-question-pairs"
"zhiguowang/BiMPM" -> "galsang/BIMPM-pytorch"
"zhiguowang/BiMPM" -> "bradleypallen/keras-quora-question-pairs"
"zhiguowang/BiMPM" -> "galsang/ABCNN"
"zhiguowang/BiMPM" -> "localminimum/QANet" ["e"=1]
"zhiguowang/BiMPM" -> "taoshen58/DiSAN" ["e"=1]
"zhiguowang/BiMPM" -> "lukecq1231/nli"
"zhiguowang/BiMPM" -> "mcrisc/lexdecomp" ["e"=1]
"zhiguowang/BiMPM" -> "allenai/bi-att-flow" ["e"=1]
"nyu-mll/multiNLI" -> "lukecq1231/nli"
"nyu-mll/multiNLI" -> "YichenGong/Densely-Interactive-Inference-Network"
"nyu-mll/multiNLI" -> "erickrf/multiffn-nli"
"nyu-mll/multiNLI" -> "easonnie/multiNLI_encoder"
"nyu-mll/multiNLI" -> "tommccoy1/hans" ["e"=1]
"nyu-mll/multiNLI" -> "lukecq1231/kim"
"nyu-mll/multiNLI" -> "coetaur0/ESIM"
"nyu-mll/multiNLI" -> "OanaMariaCamburu/e-SNLI" ["e"=1]
"lucasjinreal/tensorflow_novelist" -> "0prrr/Chinese-novel-generation"
"lucasjinreal/tensorflow_novelist" -> "lucasjinreal/tensorflow_poems"
"lucasjinreal/tensorflow_novelist" -> "kwsy/FictionAnalysis"
"lucasjinreal/tensorflow_novelist" -> "lucasjinreal/Spider12306" ["e"=1]
"lucasjinreal/tensorflow_novelist" -> "xinydev/NovelConversationCorpus"
"lucasjinreal/tensorflow_novelist" -> "renjunxiang/Text_Generate"
"lc222/MPCNN-sentence-similarity-tensorflow" -> "Chevalier1024/MPCNN"
"lc222/MPCNN-sentence-similarity-tensorflow" -> "Irvinglove/TF_Sentence_Similarity_CNN"
"lc222/MPCNN-sentence-similarity-tensorflow" -> "Irvinglove/MP-CNN-Tensorflow-sentence-similarity"
"Irvinglove/MP-CNN-Tensorflow-sentence-similarity" -> "Irvinglove/TF_Sentence_Similarity_CNN"
"animalize/QuanTangshi" -> "okcy1016/poem-onthefly"
"animalize/QuanTangshi" -> "Clover27/ancient-Chinese-poem-generator"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "guitaowufeng/TPANN"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "FudanNLP/fudan_mtl_reviews"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "yanshao9798/tagger"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "jcyk/CWS"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "FudanNLP/NLPCC-WordSeg-Weibo"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "jcyk/greedyCWS"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "FudanNLP/CWS_LSTM"
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" -> "fudannlp16/CWS_Dict"
"FudanNLP/nlpcc2017_news_headline_categorization" -> "yangzhiye/NLPCC2017-task3"
"FudanNLP/nlpcc2017_news_headline_categorization" -> "FudanNLP/adversarial-multi-criteria-learning-for-CWS"
"sjvasquez/quora-duplicate-questions" -> "Wrosinski/Kaggle-Quora"
"qqgeogor/kaggle_quora_benchmark" -> "MLWave/RGF-sklearn" ["e"=1]
"qqgeogor/kaggle_quora_benchmark" -> "erogol/QuoraDQBaseline"
"FanhuaandLuomu/ParseLawDocuments" -> "FanhuaandLuomu/pkulaw_spider"
"FanhuaandLuomu/ParseLawDocuments" -> "renjunxiang/Competition_CAIL"
"FanhuaandLuomu/ParseLawDocuments" -> "ShenDezhou/lawa"
"FanhuaandLuomu/ParseLawDocuments" -> "FanhuaandLuomu/BiLstm_CNN_CRF_CWS"
"FanhuaandLuomu/ParseLawDocuments" -> "risshun/Chinese_Laws"
"FanhuaandLuomu/ParseLawDocuments" -> "zhang17173/Event-Extraction" ["e"=1]
"FanhuaandLuomu/ParseLawDocuments" -> "xmmmmmovo/FaBao"
"FanhuaandLuomu/ParseLawDocuments" -> "hecongqing/Legal-Charge-Prediction"
"FanhuaandLuomu/ParseLawDocuments" -> "padeoe/cail2019"
"FanhuaandLuomu/ParseLawDocuments" -> "GuidoPaul/CAIL2019"
"FanhuaandLuomu/ParseLawDocuments" -> "thunlp/CAIL"
"FanhuaandLuomu/ParseLawDocuments" -> "jingyihiter/mycail"
"FanhuaandLuomu/ParseLawDocuments" -> "Ironsub/quick"
"FanhuaandLuomu/ParseLawDocuments" -> "liuhuanyong/LawCrimeMining"
"jcyk/greedyCWS" -> "jcyk/CWS"
"jcyk/greedyCWS" -> "SUTDNLP/NNTransitionSegmentor"
"jcyk/greedyCWS" -> "zhouh/WCC-Segmentation"
"jcyk/greedyCWS" -> "hankcs/sub-character-cws"
"jcyk/greedyCWS" -> "fudannlp16/CWS_Dict"
"RandolphVI/Text-Pairs-Relation-Classification" -> "desh2608/crnn-relation-classification" ["e"=1]
"RandolphVI/Text-Pairs-Relation-Classification" -> "lc222/MPCNN-sentence-similarity-tensorflow"
"erogol/QuoraDQBaseline" -> "qqgeogor/kaggle_quora_benchmark"
"thuiar/UMC" -> "thuiar/MMIA"
"shibing624/text-feature" -> "skydar/Text-Eigenvalue"
"PeiJieSun/NESCL" -> "Deriq-Qian-Dong/RLCF"
"supercoderhawk/DNN_CWS" -> "JayYip/cws-tensorflow"
"yangzhiye/NLPCC2017-task3" -> "yangzhiye/Papers-For-Text-Summarization"
"kaen2891/bts" -> "kaen2891/stethoscope-guided_supervised_contrastive_learning"
"freelawproject/recap-chrome" -> "freelawproject/seal-rookery"
"freelawproject/recap-chrome" -> "freelawproject/reporters-db"
"SanjayKhatwani/Sarcasm_Detection_using_Tensorflow" -> "surajr/SarcasmDetection"
"leonvanzyl/langflow-tutorial-2024" -> "ai-bites/simple-rag-app"
"yanshao9798/tagger" -> "FudanNLP/adversarial-multi-criteria-learning-for-CWS"
"UKPLab/acl2017-interactive_summarizer" -> "UKPLab/emnlp2018-april"
"Irvinglove/TF_Sentence_Similarity_CNN" -> "Irvinglove/MP-CNN-Tensorflow-sentence-similarity"
"Irvinglove/TF_Sentence_Similarity_CNN" -> "Chevalier1024/MPCNN"
"Irvinglove/TF_Sentence_Similarity_CNN" -> "lc222/MPCNN-sentence-similarity-tensorflow"
"BatsResearch/planetarium" -> "BatsResearch/trove"
"BatsResearch/planetarium" -> "BatsResearch/alfred"
"BatsResearch/planetarium" -> "BatsResearch/cross-lingual-detox"
"langflow-ai/langflow-helm-charts" -> "langflow-ai/langflow-embedded-chat"
"shangjingbo1226/ESim" -> "LiyuanLucasLiu/Fast-Furious-Paper"
"shangjingbo1226/ESim" -> "ysyushi/prep"
"hzy46/Char-RNN-TensorFlow" -> "NELSONZHAO/zhihu"
"hzy46/Char-RNN-TensorFlow" -> "lucasjinreal/tensorflow_poems"
"hzy46/Char-RNN-TensorFlow" -> "sherjilozair/char-rnn-tensorflow" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "yongyehuang/Tensorflow-Tutorial"
"hzy46/Char-RNN-TensorFlow" -> "rockingdingo/deepnlp"
"hzy46/Char-RNN-TensorFlow" -> "qhduan/Seq2Seq_Chatbot_QA" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "Socialbird-AILab/BERT-Classification-Tutorial"
"hzy46/Char-RNN-TensorFlow" -> "qhduan/just_another_seq2seq" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "hzy46/fast-neural-style-tensorflow" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "Kyubyong/transformer" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "guillaumegenthial/sequence_tagging"
"hzy46/Char-RNN-TensorFlow" -> "LantaoYu/SeqGAN" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "ChenglongChen/tensorflow-DSMM" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "google/seq2seq" ["e"=1]
"hzy46/Char-RNN-TensorFlow" -> "NLPScott/bert-Chinese-classification-task"
"crownpku/Awesome-Chinese-NLP" -> "brightmart/nlp_chinese_corpus"
"crownpku/Awesome-Chinese-NLP" -> "Embedding/Chinese-Word-Vectors"
"crownpku/Awesome-Chinese-NLP" -> "SophonPlus/ChineseNlpCorpus"
"crownpku/Awesome-Chinese-NLP" -> "ymcui/Chinese-BERT-wwm"
"crownpku/Awesome-Chinese-NLP" -> "brightmart/text_classification"
"crownpku/Awesome-Chinese-NLP" -> "crownpku/Information-Extraction-Chinese"
"crownpku/Awesome-Chinese-NLP" -> "InsaneLife/ChineseNLPCorpus"
"crownpku/Awesome-Chinese-NLP" -> "brightmart/albert_zh"
"crownpku/Awesome-Chinese-NLP" -> "lancopku/pkuseg-python"
"crownpku/Awesome-Chinese-NLP" -> "macanv/BERT-BiLSTM-CRF-NER"
"crownpku/Awesome-Chinese-NLP" -> "HIT-SCIR/ltp"
"crownpku/Awesome-Chinese-NLP" -> "jina-ai/clip-as-service" ["e"=1]
"crownpku/Awesome-Chinese-NLP" -> "zhpmatrix/nlp-competitions-list-review"
"crownpku/Awesome-Chinese-NLP" -> "chatopera/Synonyms"
"crownpku/Awesome-Chinese-NLP" -> "PaddlePaddle/ERNIE"
"brightmart/text_classification" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"brightmart/text_classification" -> "Embedding/Chinese-Word-Vectors"
"brightmart/text_classification" -> "brightmart/nlp_chinese_corpus"
"brightmart/text_classification" -> "gaussic/text-classification-cnn-rnn"
"brightmart/text_classification" -> "ymcui/Chinese-BERT-wwm"
"brightmart/text_classification" -> "jina-ai/clip-as-service" ["e"=1]
"brightmart/text_classification" -> "crownpku/Awesome-Chinese-NLP"
"brightmart/text_classification" -> "brightmart/albert_zh"
"brightmart/text_classification" -> "NTMC-Community/MatchZoo"
"brightmart/text_classification" -> "zihangdai/xlnet" ["e"=1]
"brightmart/text_classification" -> "macanv/BERT-BiLSTM-CRF-NER"
"brightmart/text_classification" -> "649453932/Chinese-Text-Classification-Pytorch"
"brightmart/text_classification" -> "allenai/allennlp" ["e"=1]
"brightmart/text_classification" -> "facebookresearch/fastText" ["e"=1]
"brightmart/text_classification" -> "sebastianruder/NLP-progress" ["e"=1]
"Hironsan/anago" -> "guillaumegenthial/sequence_tagging"
"Hironsan/anago" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"Hironsan/anago" -> "Franck-Dernoncourt/NeuroNER"
"Hironsan/anago" -> "guillaumegenthial/tf_ner"
"Hironsan/anago" -> "UKPLab/emnlp2017-bilstm-cnn-crf"
"Hironsan/anago" -> "glample/tagger"
"Hironsan/anago" -> "allenai/bilm-tf" ["e"=1]
"Hironsan/anago" -> "jiesutd/NCRFpp"
"Hironsan/anago" -> "UKPLab/elmo-bilstm-cnn-crf"
"Hironsan/anago" -> "zjy-ucas/ChineseNER"
"Hironsan/anago" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"Hironsan/anago" -> "crownpku/Information-Extraction-Chinese"
"Hironsan/anago" -> "Hironsan/awesome-embedding-models" ["e"=1]
"Hironsan/anago" -> "kyzhouhzau/BERT-NER"
"Hironsan/anago" -> "jiesutd/LatticeLSTM"
"liu-nlper/NER-LSTM-CRF" -> "liu-nlper/SLTK"
"liu-nlper/NER-LSTM-CRF" -> "chilynn/sequence-labeling"
"liu-nlper/NER-LSTM-CRF" -> "LopezGG/NN_NER_tensorFlow"
"liu-nlper/NER-LSTM-CRF" -> "guillaumegenthial/sequence_tagging"
"liu-nlper/NER-LSTM-CRF" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"liu-nlper/NER-LSTM-CRF" -> "shiyybua/NER"
"liu-nlper/NER-LSTM-CRF" -> "heshenghuan/LSTM-CRF"
"liu-nlper/NER-LSTM-CRF" -> "zjy-ucas/ChineseNER"
"liu-nlper/NER-LSTM-CRF" -> "clab/stack-lstm-ner"
"liu-nlper/NER-LSTM-CRF" -> "rockingdingo/deepnlp"
"liu-nlper/NER-LSTM-CRF" -> "fierceX/NER_BiLSTM_CRF_Chinese"
"liu-nlper/NER-LSTM-CRF" -> "thunlp/NRE" ["e"=1]
"liu-nlper/NER-LSTM-CRF" -> "liu-nlper/DocumentClassification" ["e"=1]
"liu-nlper/NER-LSTM-CRF" -> "ZhixiuYe/NER-pytorch"
"liu-nlper/NER-LSTM-CRF" -> "lancopku/Chinese-Literature-NER-RE-Dataset" ["e"=1]
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "UKPLab/elmo-bilstm-cnn-crf"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "LiyuanLucasLiu/LM-LSTM-CRF"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "jiesutd/NCRFpp"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "Hironsan/anago"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "guillaumegenthial/sequence_tagging"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "glample/tagger"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "allenai/bilm-tf" ["e"=1]
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "Franck-Dernoncourt/NeuroNER"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "guillaumegenthial/tf_ner"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "zjy-ucas/ChineseNER"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "chilynn/sequence-labeling"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "kyzhouhzau/BERT-NER"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "XuezheMax/NeuroNLP2" ["e"=1]
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "liu-nlper/SLTK"
"UKPLab/emnlp2017-bilstm-cnn-crf" -> "achernodub/targer"
"baidu/Familia" -> "baidu/AnyQ"
"baidu/Familia" -> "NTMC-Community/MatchZoo"
"baidu/Familia" -> "brightmart/text_classification"
"baidu/Familia" -> "baidu/lac"
"baidu/Familia" -> "crownpku/Awesome-Chinese-NLP"
"baidu/Familia" -> "HIT-SCIR/ltp"
"baidu/Familia" -> "chatopera/Synonyms"
"baidu/Familia" -> "Embedding/Chinese-Word-Vectors"
"baidu/Familia" -> "PaddlePaddle/ERNIE"
"baidu/Familia" -> "koth/kcws"
"baidu/Familia" -> "brightmart/albert_zh"
"baidu/Familia" -> "microsoft/LightLDA" ["e"=1]
"baidu/Familia" -> "cemoody/lda2vec" ["e"=1]
"baidu/Familia" -> "HIT-SCIR/pyltp"
"baidu/Familia" -> "baidu/Senta"
"philipperemy/keras-attention" -> "datalogue/keras-attention"
"philipperemy/keras-attention" -> "farizrahman4u/seq2seq" ["e"=1]
"philipperemy/keras-attention" -> "CyberZHG/keras-self-attention"
"philipperemy/keras-attention" -> "bojone/attention"
"philipperemy/keras-attention" -> "lsdefine/attention-is-all-you-need-keras"
"philipperemy/keras-attention" -> "richliao/textClassifier" ["e"=1]
"philipperemy/keras-attention" -> "thushv89/attention_keras"
"philipperemy/keras-attention" -> "philipperemy/keras-tcn" ["e"=1]
"philipperemy/keras-attention" -> "philipperemy/keract"
"philipperemy/keras-attention" -> "ningshixian/LSTM_Attention"
"philipperemy/keras-attention" -> "keras-team/keras-contrib"
"philipperemy/keras-attention" -> "CyberZHG/keras-bert"
"philipperemy/keras-attention" -> "Separius/BERT-keras"
"philipperemy/keras-attention" -> "codekansas/keras-language-modeling" ["e"=1]
"philipperemy/keras-attention" -> "fchollet/keras-resources" ["e"=1]
"philipperemy/keract" -> "raghakot/keras-vis" ["e"=1]
"philipperemy/keract" -> "philipperemy/keras-attention"
"philipperemy/keract" -> "sicara/tf-explain" ["e"=1]
"philipperemy/keract" -> "keisen/tf-keras-vis" ["e"=1]
"philipperemy/keract" -> "maxpumperla/hyperas" ["e"=1]
"philipperemy/keract" -> "datalogue/keras-attention"
"philipperemy/keract" -> "philipperemy/keras-tcn" ["e"=1]
"philipperemy/keract" -> "autonomio/talos" ["e"=1]
"philipperemy/keract" -> "keras-team/keras-tuner" ["e"=1]
"philipperemy/keract" -> "keras-team/keras-contrib"
"philipperemy/keract" -> "keplr-io/quiver" ["e"=1]
"philipperemy/keract" -> "CyberZHG/keras-self-attention"
"philipperemy/keract" -> "XifengGuo/CapsNet-Keras" ["e"=1]
"philipperemy/keract" -> "bckenstler/CLR"
"philipperemy/keract" -> "bstriner/keras-adversarial" ["e"=1]
"Lynten/stanford-corenlp" -> "stanfordnlp/python-stanford-corenlp"
"Lynten/stanford-corenlp" -> "HIT-SCIR/pyltp"
"Lynten/stanford-corenlp" -> "hankcs/pyhanlp"
"Lynten/stanford-corenlp" -> "smilli/py-corenlp"
"Lynten/stanford-corenlp" -> "abisee/pointer-generator" ["e"=1]
"Lynten/stanford-corenlp" -> "thunlp/THULAC-Python"
"Lynten/stanford-corenlp" -> "pltrdy/rouge" ["e"=1]
"Lynten/stanford-corenlp" -> "huggingface/neuralcoref" ["e"=1]
"Lynten/stanford-corenlp" -> "stanfordnlp/stanza" ["e"=1]
"Lynten/stanford-corenlp" -> "kentonl/e2e-coref"
"Lynten/stanford-corenlp" -> "ChenRocks/fast_abs_rl" ["e"=1]
"Lynten/stanford-corenlp" -> "HIT-SCIR/ltp"
"Lynten/stanford-corenlp" -> "stanfordnlp/CoreNLP" ["e"=1]
"Lynten/stanford-corenlp" -> "allenai/bilm-tf" ["e"=1]
"Lynten/stanford-corenlp" -> "dasguptar/treelstm.pytorch" ["e"=1]
"stanfordnlp/python-stanford-corenlp" -> "Lynten/stanford-corenlp"
"stanfordnlp/python-stanford-corenlp" -> "smilli/py-corenlp"
"stanfordnlp/python-stanford-corenlp" -> "sina-al/pynlp"
"stanfordnlp/python-stanford-corenlp" -> "stanfordnlp/stanza-old"
"stanfordnlp/python-stanford-corenlp" -> "kentonl/e2e-coref"
"stanfordnlp/python-stanford-corenlp" -> "clarkkev/deep-coref"
"stanfordnlp/python-stanford-corenlp" -> "allenai/acl2018-semantic-parsing-tutorial" ["e"=1]
"stanfordnlp/python-stanford-corenlp" -> "davidsbatista/Annotated-Semantic-Relationships-Datasets" ["e"=1]
"stanfordnlp/python-stanford-corenlp" -> "vitutorial/VITutorial" ["e"=1]
"stanfordnlp/python-stanford-corenlp" -> "danqi/rc-cnn-dailymail" ["e"=1]
"stanfordnlp/python-stanford-corenlp" -> "stanfordnlp/treelstm" ["e"=1]
"vxl/vxl" -> "aliosmanulusoy/Probabilistic-Volumetric-3D-Reconstruction"
"datalogue/keras-attention" -> "philipperemy/keras-attention"
"datalogue/keras-attention" -> "lsdefine/attention-is-all-you-need-keras"
"datalogue/keras-attention" -> "ilivans/tf-rnn-attention" ["e"=1]
"datalogue/keras-attention" -> "thushv89/attention_keras"
"datalogue/keras-attention" -> "farizrahman4u/seq2seq" ["e"=1]
"datalogue/keras-attention" -> "CyberZHG/keras-self-attention"
"datalogue/keras-attention" -> "richliao/textClassifier" ["e"=1]
"datalogue/keras-attention" -> "ningshixian/LSTM_Attention"
"datalogue/keras-attention" -> "Choco31415/Attention_Network_With_Keras"
"datalogue/keras-attention" -> "farizrahman4u/recurrentshop" ["e"=1]
"datalogue/keras-attention" -> "kpot/keras-transformer"
"datalogue/keras-attention" -> "codekansas/keras-language-modeling" ["e"=1]
"datalogue/keras-attention" -> "lvapeab/nmt-keras" ["e"=1]
"datalogue/keras-attention" -> "Separius/BERT-keras"
"datalogue/keras-attention" -> "ematvey/tensorflow-seq2seq-tutorials" ["e"=1]
"NTMC-Community/MatchZoo" -> "NTMC-Community/awesome-neural-models-for-semantic-match"
"NTMC-Community/MatchZoo" -> "baidu/AnyQ"
"NTMC-Community/MatchZoo" -> "brightmart/text_classification"
"NTMC-Community/MatchZoo" -> "brightmart/albert_zh"
"NTMC-Community/MatchZoo" -> "NTMC-Community/MatchZoo-py"
"NTMC-Community/MatchZoo" -> "baidu/Familia"
"NTMC-Community/MatchZoo" -> "ymcui/Chinese-BERT-wwm"
"NTMC-Community/MatchZoo" -> "Embedding/Chinese-Word-Vectors"
"NTMC-Community/MatchZoo" -> "zihangdai/xlnet" ["e"=1]
"NTMC-Community/MatchZoo" -> "ChineseGLUE/ChineseGLUE"
"NTMC-Community/MatchZoo" -> "bojone/bert4keras"
"NTMC-Community/MatchZoo" -> "brightmart/roberta_zh"
"NTMC-Community/MatchZoo" -> "brightmart/nlp_chinese_corpus"
"NTMC-Community/MatchZoo" -> "PaddlePaddle/ERNIE"
"NTMC-Community/MatchZoo" -> "CLUEbenchmark/CLUE"
"Disiok/poetry-seq2seq" -> "DevinZ1993/Chinese-Poetry-Generation"
"Disiok/poetry-seq2seq" -> "XingxingZhang/rnnpg"
"Disiok/poetry-seq2seq" -> "XiaoyuanYi/WMPoetry"
"Disiok/poetry-seq2seq" -> "ChaosPKU/Poetry"
"Disiok/poetry-seq2seq" -> "THUNLP-AIPoet/StylisticPoetry"
"crownpku/Information-Extraction-Chinese" -> "zjy-ucas/ChineseNER"
"crownpku/Information-Extraction-Chinese" -> "thunlp/OpenNRE"
"crownpku/Information-Extraction-Chinese" -> "yuanxiaosc/Entity-Relation-Extraction" ["e"=1]
"crownpku/Information-Extraction-Chinese" -> "macanv/BERT-BiLSTM-CRF-NER"
"crownpku/Information-Extraction-Chinese" -> "Determined22/zh-NER-TF"
"crownpku/Information-Extraction-Chinese" -> "buppt/ChineseNRE" ["e"=1]
"crownpku/Information-Extraction-Chinese" -> "guillaumegenthial/sequence_tagging"
"crownpku/Information-Extraction-Chinese" -> "crownpku/Awesome-Chinese-NLP"
"crownpku/Information-Extraction-Chinese" -> "jiesutd/LatticeLSTM"
"crownpku/Information-Extraction-Chinese" -> "buppt/ChineseNER"
"crownpku/Information-Extraction-Chinese" -> "luopeixiang/named_entity_recognition"
"crownpku/Information-Extraction-Chinese" -> "ProHiryu/bert-chinese-ner"
"crownpku/Information-Extraction-Chinese" -> "loujie0822/DeepIE"
"crownpku/Information-Extraction-Chinese" -> "brightmart/albert_zh"
"crownpku/Information-Extraction-Chinese" -> "Roshanson/TextInfoExp"
"NELSONZHAO/zhihu" -> "brightmart/text_classification"
"NELSONZHAO/zhihu" -> "princewen/tensorflow_practice" ["e"=1]
"NELSONZHAO/zhihu" -> "hzy46/Char-RNN-TensorFlow"
"NELSONZHAO/zhihu" -> "shenweichen/DeepCTR" ["e"=1]
"NELSONZHAO/zhihu" -> "ChenglongChen/tensorflow-DeepFM" ["e"=1]
"NELSONZHAO/zhihu" -> "Kyubyong/transformer" ["e"=1]
"NELSONZHAO/zhihu" -> "dennybritz/cnn-text-classification-tf" ["e"=1]
"NELSONZHAO/zhihu" -> "Embedding/Chinese-Word-Vectors"
"NELSONZHAO/zhihu" -> "wzhe06/Ad-papers" ["e"=1]
"NELSONZHAO/zhihu" -> "tensorflow/nmt" ["e"=1]
"NELSONZHAO/zhihu" -> "crownpku/Awesome-Chinese-NLP"
"NELSONZHAO/zhihu" -> "shenweichen/DeepMatch" ["e"=1]
"NELSONZHAO/zhihu" -> "brightmart/albert_zh"
"NELSONZHAO/zhihu" -> "macanv/BERT-BiLSTM-CRF-NER"
"NELSONZHAO/zhihu" -> "wzhe06/Reco-papers" ["e"=1]
"DragonFlyXD/poetryclub-frontend" -> "DragonFlyXD/poetryclub-backend"
"hankcs/CS224n" -> "stanfordnlp/cs224n-winter17-notes" ["e"=1]
"hankcs/CS224n" -> "learning511/cs224n-learning-camp"
"hankcs/CS224n" -> "maxim5/cs224n-2017-winter"
"hankcs/CS224n" -> "ZacBi/CS224n-2019-solutions"
"hankcs/CS224n" -> "zhanlaoban/CS224N-Stanford-Winter-2019"
"hankcs/CS224n" -> "nishithbsk/tensorflow_tutorials"
"hankcs/CS224n" -> "yasiemir/cs224n"
"hankcs/CS224n" -> "allenai/bi-att-flow" ["e"=1]
"hankcs/CS224n" -> "bogatyy/cs224d" ["e"=1]
"hankcs/CS224n" -> "Observerspy/CS224n"
"hankcs/CS224n" -> "zjy-ucas/ChineseNER"
"hankcs/CS224n" -> "guoday/Tencent2018_Lookalike_Rank7th" ["e"=1]
"hankcs/CS224n" -> "chenghuige/wenzheng"
"hankcs/CS224n" -> "brightmart/bert_language_understanding"
"hankcs/CS224n" -> "baidu/DuReader" ["e"=1]
"qqgeogor/kaggle-quora-solution-8th" -> "Wrosinski/Kaggle-Quora"
"qqgeogor/kaggle-quora-solution-8th" -> "aerdem4/kaggle-quora-dup"
"qqgeogor/kaggle-quora-solution-8th" -> "plantsgo/Rental-Listing-Inquiries" ["e"=1]
"qqgeogor/kaggle-quora-solution-8th" -> "HouJP/kaggle-quora-question-pairs"
"qqgeogor/kaggle-quora-solution-8th" -> "sjvasquez/quora-duplicate-questions"
"qqgeogor/kaggle-quora-solution-8th" -> "qqgeogor/kaggle_quora_benchmark"
"qqgeogor/kaggle-quora-solution-8th" -> "bradleypallen/keras-quora-question-pairs"
"qqgeogor/kaggle-quora-solution-8th" -> "tnmichael309/kaggle-avito-demand-challenge"
"qqgeogor/kaggle-quora-solution-8th" -> "Codefeater/Kaggle_Reuse_Code" ["e"=1]
"qqgeogor/kaggle-quora-solution-8th" -> "YuriyGuts/kaggle-quora-question-pairs"
"qqgeogor/kaggle-quora-solution-8th" -> "thinline72/toxic" ["e"=1]
"qqgeogor/kaggle-quora-solution-8th" -> "qqgeogor/fm_pypy"
"zhezhaoa/ngram2vec" -> "Leonard-Xu/CWE" ["e"=1]
"zhezhaoa/ngram2vec" -> "Embedding/Chinese-Word-Vectors"
"zhezhaoa/ngram2vec" -> "allenai/bilm-tf" ["e"=1]
"zhezhaoa/ngram2vec" -> "zhezhaoa/neural_BOW_toolkit"
"zhezhaoa/ngram2vec" -> "dbiir/UER-py"
"zhezhaoa/ngram2vec" -> "svn2github/word2vec" ["e"=1]
"zhezhaoa/ngram2vec" -> "NTMC-Community/MatchZoo"
"zhezhaoa/ngram2vec" -> "HIT-SCIR/pyltp"
"zhezhaoa/ngram2vec" -> "HIT-SCIR/ELMoForManyLangs" ["e"=1]
"zhezhaoa/ngram2vec" -> "PrincetonML/SIF" ["e"=1]
"zhezhaoa/ngram2vec" -> "liuhuanyong/ChineseEmbedding"
"zhezhaoa/ngram2vec" -> "dalinvip/cw2vec" ["e"=1]
"zhezhaoa/ngram2vec" -> "zjy-ucas/ChineseNER"
"zhezhaoa/ngram2vec" -> "yaleimeng/Final_word_Similarity"
"zhezhaoa/ngram2vec" -> "rockingdingo/deepnlp"
"THTBSE/siamese-lstm-network" -> "jx00109/siamese-lstm-for-sentence-similarity"
"pl8787/MatchPyramid-TensorFlow" -> "ChenglongChen/tensorflow-DSMM" ["e"=1]
"pl8787/MatchPyramid-TensorFlow" -> "pl8787/textnet-release"
"pl8787/MatchPyramid-TensorFlow" -> "faneshion/DRMM"
"pl8787/MatchPyramid-TensorFlow" -> "galsang/ABCNN"
"hjptriplebee/Chinese_poem_generator" -> "norybaby/poet"
"hjptriplebee/Chinese_poem_generator" -> "DevinZ1993/Chinese-Poetry-Generation"
"hjptriplebee/Chinese_poem_generator" -> "youyuge34/Poems_generator_Keras"
"hjptriplebee/Chinese_poem_generator" -> "LandyGuo/WritePoems"
"hjptriplebee/Chinese_poem_generator" -> "lucasjinreal/tensorflow_poems"
"hjptriplebee/Chinese_poem_generator" -> "Disiok/poetry-seq2seq"
"hjptriplebee/Chinese_poem_generator" -> "xue2han/AncientChinesePoemRNN"
"hjptriplebee/Chinese_poem_generator" -> "wandouduoduo/SunRnn"
"hjptriplebee/Chinese_poem_generator" -> "wzyonggege/RNN_poetry_generator"
"hjptriplebee/Chinese_poem_generator" -> "helanfeiyun/RNN-peoms"
"hjptriplebee/Chinese_poem_generator" -> "liuhuanyong/PoemMining"
"hjptriplebee/Chinese_poem_generator" -> "linpingta/chinese-poem-generator"
"hjptriplebee/Chinese_poem_generator" -> "stardut/Text-Generate-RNN"
"hjptriplebee/Chinese_poem_generator" -> "Clover27/ancient-Chinese-poem-generator"
"hjptriplebee/Chinese_poem_generator" -> "imagetellerD/chinese-poem-generator"
"kentonl/e2e-coref" -> "mandarjoshi90/coref"
"kentonl/e2e-coref" -> "shayneobrien/coreference-resolution"
"kentonl/e2e-coref" -> "clarkkev/deep-coref"
"kentonl/e2e-coref" -> "bkntr/coref-ee"
"kentonl/e2e-coref" -> "google-research-datasets/gap-coreference"
"kentonl/e2e-coref" -> "facebookresearch/SpanBERT"
"kentonl/e2e-coref" -> "huggingface/neuralcoref" ["e"=1]
"kentonl/e2e-coref" -> "swiseman/nn_coref"
"kentonl/e2e-coref" -> "ShannonAI/CorefQA"
"kentonl/e2e-coref" -> "ontonotes/conll-formatted-ontonotes-5.0"
"kentonl/e2e-coref" -> "conll/reference-coreference-scorers"
"kentonl/e2e-coref" -> "lxucs/coref-hoi"
"kentonl/e2e-coref" -> "tcxdgit/e2e-coref-old"
"kentonl/e2e-coref" -> "dwadden/dygiepp" ["e"=1]
"ne7ermore/torch-light" -> "ne7ermore/deeping-flow"
"ne7ermore/torch-light" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"ne7ermore/torch-light" -> "MarkWuNLP/MultiTurnResponseSelection" ["e"=1]
"ne7ermore/torch-light" -> "jiesutd/NCRFpp"
"ne7ermore/torch-light" -> "dalinvip/pytorch_NER_BiLSTM_CNN_CRF"
"ne7ermore/torch-light" -> "galsang/BIMPM-pytorch"
"zpppy/seq2seq-chinese-textsum" -> "sys1874/chinese-textsum"
"zpppy/seq2seq-chinese-textsum" -> "PeaceWish/seq2seq_textsum"
"zpppy/seq2seq-chinese-textsum" -> "surmenok/TextSum" ["e"=1]
"zpppy/seq2seq-chinese-textsum" -> "CourteousWood/text-summarization"
"0prrr/Chinese-novel-generation" -> "lucasjinreal/tensorflow_novelist"
"xwzhong/papernote" -> "lanwuwei/SPM_toolkit"
"xwzhong/papernote" -> "MarkWuNLP/MultiTurnResponseSelection" ["e"=1]
"shawntan/python-crf" -> "applenob/simple_crf"
"easonnie/multiNLI_encoder" -> "jihunchoi/shortcut-stacked-encoder-pytorch"
"DragonFlyXD/poetryclub-backend" -> "DragonFlyXD/poetryclub-frontend"
"eliorc/Medium" -> "likejazz/Siamese-LSTM"
"eliorc/Medium" -> "aerdem4/kaggle-quora-dup"
"eliorc/Medium" -> "nelson-liu/paraphrase-id-tensorflow"
"eliorc/Medium" -> "HouJP/kaggle-quora-question-pairs"
"eliorc/Medium" -> "hyperlane-xyz/hyperlane-explorer" ["e"=1]
"digitalstain/DoubleArrayTrie" -> "komiya-atsushi/darts-java"
"digitalstain/DoubleArrayTrie" -> "takawitter/trie4j"
"zqhZY/semanaly" -> "WenDesi/sentenceSimilarity"
"LopezGG/NN_NER_tensorFlow" -> "LopezGG/Sequence-Labelling"
"LopezGG/NN_NER_tensorFlow" -> "heshenghuan/LSTM-CRF"
"LopezGG/NN_NER_tensorFlow" -> "XuezheMax/LasagneNLP"
"LopezGG/NN_NER_tensorFlow" -> "liu-nlper/NER-LSTM-CRF"
"LopezGG/NN_NER_tensorFlow" -> "abhyudaynj/LSTM-CRF-models"
"aerdem4/kaggle-quora-dup" -> "qqgeogor/kaggle-quora-solution-8th"
"aerdem4/kaggle-quora-dup" -> "YuriyGuts/kaggle-quora-question-pairs"
"aerdem4/kaggle-quora-dup" -> "Wrosinski/Kaggle-Quora"
"aerdem4/kaggle-quora-dup" -> "howardyclo/Kaggle-Quora-Question-Pairs"
"aerdem4/kaggle-quora-dup" -> "zhaoyu18/quora_question_pairs"
"aerdem4/kaggle-quora-dup" -> "yuhsinliu1993/Quora_QuestionPairs_DL"
"aerdem4/kaggle-quora-dup" -> "aerdem4/mercari-price-suggestion"
"LexPredict/lexpredict-legal-dictionary" -> "LexPredict/lexpredict-contraxsuite"
"LexPredict/lexpredict-legal-dictionary" -> "LexPredict/lexpredict-contraxsuite-deploy"
"LexPredict/lexpredict-legal-dictionary" -> "LexPredict/lexpredict-contraxsuite-samples"
"LexPredict/lexpredict-legal-dictionary" -> "mscarey/AuthoritySpoke"
"LexPredict/lexpredict-legal-dictionary" -> "LexPredict/lexpredict-lexnlp"
"LexPredict/lexpredict-legal-dictionary" -> "openlegaldata/legal-reference-extraction"
"LexPredict/lexpredict-legal-dictionary" -> "openlegaldata/awesome-legal-data"
"LexPredict/lexpredict-contraxsuite" -> "LexPredict/lexpredict-legal-dictionary"
"LexPredict/lexpredict-contraxsuite" -> "LexPredict/lexpredict-contraxsuite-samples"
"LexPredict/lexpredict-contraxsuite" -> "LexPredict/lexpredict-lexnlp"
"LexPredict/lexpredict-contraxsuite" -> "LexPredict/lexpredict-contraxsuite-deploy"
"AniSkywalker/SarcasmDetection" -> "MirunaPislar/Sarcasm-Detection"
"AniSkywalker/SarcasmDetection" -> "pln-fing-udelar/pghumor"
"AniSkywalker/SarcasmDetection" -> "declare-lab/CASCADE"
"AniSkywalker/SarcasmDetection" -> "surajr/SarcasmDetection"
"AniSkywalker/SarcasmDetection" -> "NastaranBa/ACE-for-Sarcasm-Detection"
"AniSkywalker/SarcasmDetection" -> "NLPrinceton/SARC"
"AniSkywalker/SarcasmDetection" -> "SanjayKhatwani/Sarcasm_Detection_using_Tensorflow"
"AniSkywalker/SarcasmDetection" -> "Orekhov/SentenceBreaking"
"AniSkywalker/SarcasmDetection" -> "zhangmeishan/SarcasmDetection"
"PengboLiu/Doc2Vec-Document-Similarity" -> "phychaos/TextSimilar"
"PengboLiu/Doc2Vec-Document-Similarity" -> "cjymz886/sentence-similarity"
"PengboLiu/Doc2Vec-Document-Similarity" -> "jarvisqi/machine_learning"
"PengboLiu/Doc2Vec-Document-Similarity" -> "lybroman/Chinese-sentiment-analysis-with-Doc2Vec"
"PengboLiu/Doc2Vec-Document-Similarity" -> "BonnieHuangxin/Bert_sentence_similarity"
"pl8787/textnet-release" -> "pl8787/textnet-model"
"pl8787/textnet-release" -> "faneshion/HiNT" ["e"=1]
"franticnerd/taxogen" -> "mickeysjm/HiExpan"
"franticnerd/taxogen" -> "morningmoni/TaxoRL"
"Wrosinski/Kaggle-Quora" -> "dysdsyd/kaggle-question-pairs-quora"
"Wrosinski/Kaggle-Quora" -> "YuriyGuts/kaggle-quora-question-pairs"
"Wrosinski/Kaggle-Quora" -> "qqgeogor/kaggle-quora-solution-8th"
"Wrosinski/Kaggle-Quora" -> "sjvasquez/quora-duplicate-questions"
"Wrosinski/Kaggle-Quora" -> "zhaoyu18/quora_question_pairs"
"Wrosinski/Kaggle-Quora" -> "aerdem4/kaggle-quora-dup"
"Magic-Bubble/Zhihu" -> "yongyehuang/zhihu-text-classification"
"Magic-Bubble/Zhihu" -> "chenyuntc/PyTorchText"
"Magic-Bubble/Zhihu" -> "coderSkyChen/zhihu_kanshan_cup_2017"
"Magic-Bubble/Zhihu" -> "hecongqing/2018-daguan-competition"
"Magic-Bubble/Zhihu" -> "ShawnyXiao/2018-DC-DataGrand-TextIntelProcess"
"Magic-Bubble/Zhihu" -> "moneyDboat/data_grand"
"Magic-Bubble/Zhihu" -> "chenghuige/wenzheng"
"Magic-Bubble/Zhihu" -> "galsang/ABCNN"
"Magic-Bubble/Zhihu" -> "HouJP/kaggle-quora-question-pairs"
"wzyonggege/RNN_poetry_generator" -> "stardut/Text-Generate-RNN"
"wzyonggege/RNN_poetry_generator" -> "DevinZ1993/Chinese-Poetry-Generation"
"harveyaot/DianJing" -> "QuantumLiu/Neural-Headline-Generator-CN"
"harveyaot/DianJing" -> "bojone/seq2seq"
"mickeysjm/SetExpan" -> "PxYu/entity-expansion"
"mickeysjm/SetExpan" -> "mickeysjm/HiExpan"
"mickeysjm/SetExpan" -> "mickeysjm/SetRank"
"mickeysjm/SetExpan" -> "mickeysjm/SynSetMine-pytorch"
"libowen2121/SNLI-decomposable-attention" -> "harvardnlp/decomp-attn"
"libowen2121/SNLI-decomposable-attention" -> "shuuki4/decomposable_attention"
"naayaaa/SNLI-Keras" -> "cullengao/lsnm" ["e"=1]
"naayaaa/SNLI-Keras" -> "congyh/wechat-platform-SDK" ["e"=1]
"iai-group/DBpedia-Entity" -> "teanalab/FieldedSDM"
"iai-group/DBpedia-Entity" -> "hasibi/TAGME-Reproducibility"
"iai-group/DBpedia-Entity" -> "hasibi/EntityLinkingInQueries-ELQ"
"jx00109/siamese-lstm-for-sentence-similarity" -> "THTBSE/siamese-lstm-network"
"jx00109/siamese-lstm-for-sentence-similarity" -> "aditya1503/Siamese-LSTM"
"jx00109/siamese-lstm-for-sentence-similarity" -> "lc222/MPCNN-sentence-similarity-tensorflow"
"ijinmao/BiMPM_keras" -> "martbert/decomp_attn_keras"
"xueyouluo/my_seq2seq" -> "YinpeiDai/Seq2Seq-Models"
"BatsResearch/trove" -> "BatsResearch/alfred"
"GentleZhu/ReMine" -> "LiyuanLucasLiu/Fast-Furious-Paper"
"zhouh/WCC-Segmentation" -> "SUTDNLP/NNTransitionSegmentor"
"LexPredict/lexpredict-contraxsuite-deploy" -> "LexPredict/lexpredict-contraxsuite-samples"
"LexPredict/lexpredict-contraxsuite-samples" -> "LexPredict/lexpredict-contraxsuite-deploy"
"BrikerMan/Kashgari" ["l"="53.52,27.287"]
"CyberZHG/keras-bert" ["l"="53.597,27.241"]
"macanv/BERT-BiLSTM-CRF-NER" ["l"="53.448,27.311"]
"bojone/bert4keras" ["l"="53.428,27.201"]
"brightmart/albert_zh" ["l"="53.393,27.247"]
"crownpku/Information-Extraction-Chinese" ["l"="53.452,27.386"]
"brightmart/roberta_zh" ["l"="53.414,27.216"]
"ymcui/Chinese-BERT-wwm" ["l"="53.357,27.223"]
"bojone/bert_in_keras" ["l"="53.642,27.251"]
"yuanxiaosc/Entity-Relation-Extraction" ["l"="55.602,26.608"]
"Jiakui/awesome-bert" ["l"="53.517,27.232"]
"yongzhuo/Keras-TextClassification" ["l"="53.557,27.211"]
"CLUEbenchmark/CLUE" ["l"="53.381,27.209"]
"ProHiryu/bert-chinese-ner" ["l"="53.543,27.353"]
"ChineseGLUE/ChineseGLUE" ["l"="53.442,27.238"]
"brightmart/text_classification" ["l"="53.422,27.308"]
"stardut/Text-Generate-RNN" ["l"="53.534,27.748"]
"zpeng1989/RNN_learning_text_code" ["l"="53.525,27.709"]
"wzyonggege/RNN_poetry_generator" ["l"="53.549,27.855"]
"wandouduoduo/SunRnn" ["l"="53.534,27.692"]
"renjunxiang/Text_Generate" ["l"="53.478,27.632"]
"hankcs/pyhanlp" ["l"="53.244,27.289"]
"HIT-SCIR/ltp" ["l"="53.225,27.327"]
"Embedding/Chinese-Word-Vectors" ["l"="53.279,27.27"]
"hankcs/HanLP" ["l"="53.04,27.189"]
"ownthink/Jiagu" ["l"="53.363,27.303"]
"HIT-SCIR/pyltp" ["l"="53.275,27.392"]
"brightmart/nlp_chinese_corpus" ["l"="53.296,27.242"]
"lancopku/pkuseg-python" ["l"="53.204,27.305"]
"crownpku/Awesome-Chinese-NLP" ["l"="53.315,27.301"]
"NLP-LOVE/Introduction-NLP" ["l"="53.445,27.124"]
"blmoistawinde/HarvestText" ["l"="53.336,27.27"]
"chatopera/Synonyms" ["l"="53.278,27.324"]
"nghuyong/ERNIE-Pytorch" ["l"="53.427,27.265"]
"lonePatient/albert_pytorch" ["l"="53.461,27.201"]
"airaria/TextBrewer" ["l"="53.41,27.175"]
"PaddlePaddle/ERNIE" ["l"="53.328,27.242"]
"thunlp/ERNIE" ["l"="53.397,27.266"]
"loujie0822/DeepIE" ["l"="53.496,27.24"]
"dbiir/UER-py" ["l"="53.376,27.187"]
"ymcui/Chinese-XLNet" ["l"="53.456,27.231"]
"ShannonAI/mrc-for-flat-nested-ner" ["l"="53.568,27.353"]
"CLUEbenchmark/CLUEPretrainedModels" ["l"="53.431,27.223"]
"LeeSureman/Flat-Lattice-Transformer" ["l"="53.554,27.322"]
"lonePatient/BERT-NER-Pytorch" ["l"="53.547,27.274"]
"thunlp/OpenCLaP" ["l"="53.18,27.539"]
"649453932/Chinese-Text-Classification-Pytorch" ["l"="53.464,27.18"]
"649453932/Bert-Chinese-Text-Classification-Pytorch" ["l"="53.532,27.17"]
"CLUEbenchmark/CLUEDatasetSearch" ["l"="53.391,27.17"]
"DA-southampton/NLP_ability" ["l"="53.492,27.077"]
"km1994/nlp_paper_study" ["l"="53.515,27.092"]
"InsaneLife/ChineseNLPCorpus" ["l"="53.364,27.246"]
"goto456/stopwords" ["l"="53.228,27.228"]
"SophonPlus/ChineseNlpCorpus" ["l"="53.302,27.214"]
"fxsjy/jieba" ["l"="53.075,27.279"]
"yanqiangmiffy/NLP-Interview-Notes" ["l"="53.588,27.037"]
"laddie132/NLP-Interview" ["l"="53.629,26.968"]
"songyingxin/NLPer-Interview" ["l"="53.532,27.107"]
"Vincent131499/NLP-Algorithm-Interview" ["l"="53.632,26.954"]
"km1994/NLP-Interview-Notes" ["l"="53.498,27.11"]
"z814081807/DeepNER" ["l"="53.568,27.252"]
"kamalkraj/Named-Entity-Recognition-with-Bidirectional-LSTM-CNNs" ["l"="53.598,27.542"]
"mxhofer/Named-Entity-Recognition-BidirectionalLSTM-CNN-CoNLL" ["l"="53.627,27.615"]
"UKPLab/emnlp2017-bilstm-cnn-crf" ["l"="53.559,27.508"]
"UKPLab/elmo-bilstm-cnn-crf" ["l"="53.766,27.484"]
"scofield7419/Hierarchical-BiLSTM-CNN" ["l"="53.615,27.64"]
"kamalkraj/BERT-NER" ["l"="53.578,27.411"]
"kyzhouhzau/BERT-NER" ["l"="53.567,27.388"]
"Hironsan/anago" ["l"="53.547,27.491"]
"guillaumegenthial/sequence_tagging" ["l"="53.493,27.466"]
"dalinvip/pytorch_NER_BiLSTM_CNN_CRF" ["l"="53.611,27.499"]
"guillaumegenthial/tf_ner" ["l"="53.533,27.452"]
"monikkinom/ner-lstm" ["l"="53.515,27.548"]
"juand-r/entity-recognition-datasets" ["l"="53.591,27.503"]
"iesl/dilated-cnn-ner" ["l"="53.583,27.597"]
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" ["l"="53.654,27.568"]
"meizhiju/layered-bilstm-crf" ["l"="53.736,27.682"]
"zjy-ucas/ChineseNER" ["l"="53.491,27.398"]
"FuYanzhe2/Name-Entity-Recognition" ["l"="53.567,27.363"]
"jiesutd/NCRFpp" ["l"="53.517,27.467"]
"jiesutd/LatticeLSTM" ["l"="53.536,27.383"]
"ProHiryu/albert-chinese-ner" ["l"="53.617,27.305"]
"yumath/bertNER" ["l"="53.624,27.342"]
"xuanzebi/BERT-CH-NER" ["l"="53.594,27.349"]
"ai-forever/ner-bert" ["l"="53.61,27.442"]
"Kyubyong/bert_ner" ["l"="53.663,27.457"]
"lemonhu/NER-BERT-pytorch" ["l"="53.631,27.398"]
"ZhixiuYe/NER-pytorch" ["l"="53.57,27.496"]
"JayYip/m3tl" ["l"="53.591,27.31"]
"brightmart/bert_language_understanding" ["l"="53.553,27.339"]
"Determined22/zh-NER-TF" ["l"="53.461,27.363"]
"jina-ai/clip-as-service" ["l"="53.014,25.778"]
"thunlp/OpenNRE" ["l"="53.43,27.363"]
"luopeixiang/named_entity_recognition" ["l"="53.522,27.322"]
"yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification" ["l"="53.654,27.323"]
"sz128/slot_filling_and_intent_detection_of_SLU" ["l"="56.672,29.255"]
"MiuLab/SlotGated-SLU" ["l"="56.682,29.271"]
"zhpmatrix/bert-sequence-tagging" ["l"="53.669,27.28"]
"NLPScott/bert-Chinese-classification-task" ["l"="53.568,27.285"]
"sliderSun/pynlp" ["l"="53.76,27.364"]
"MahmoudWahdan/dialog-nlu" ["l"="53.797,27.378"]
"monologg/JointBERT" ["l"="56.699,29.25"]
"CLUEbenchmark/CLUENER2020" ["l"="53.543,27.31"]
"chakki-works/seqeval" ["l"="53.561,27.439"]
"chenxiaoyouyou/Bert-BiLSTM-CRF-pytorch" ["l"="53.61,27.359"]
"Louis-udm/NER-BERT-CRF" ["l"="53.751,27.54"]
"weizhepei/BERT-NER" ["l"="53.747,27.484"]
"CLOVEXCWZ/NER_DEMO" ["l"="53.672,27.338"]
"hertz-pj/BERT-BiLSTM-CRF-NER-pytorch" ["l"="53.644,27.339"]
"duguiming111/NER-BERT-BiLSTM-CRF-" ["l"="53.69,27.337"]
"taishan1994/pytorch_bert_bilstm_crf_ner" ["l"="53.663,27.303"]
"yanwii/ChinsesNER-pytorch" ["l"="53.607,27.378"]
"stanleylsx/entity_extractor_by_ner" ["l"="53.726,27.318"]
"buppt/ChineseNER" ["l"="53.516,27.382"]
"shiyybua/NER" ["l"="53.506,27.416"]
"qq547276542/Agriculture_KnowledgeGraph" ["l"="55.359,27.152"]
"chinese-poetry/huajianji" ["l"="53.31,28.028"]
"chinese-poetry/poetry-calendar" ["l"="53.313,28.078"]
"chinese-poetry/weapp-calendar" ["l"="-4.61,-35.917"]
"snowtraces/poetry-source" ["l"="53.316,28.011"]
"yxcs/poems-db" ["l"="53.347,27.983"]
"caoxingyu/chinese-gushiwen" ["l"="53.333,28.026"]
"nslogx/weapp-poem" ["l"="53.31,28.048"]
"chinese-poetry/chinese-poetry-npm" ["l"="53.352,28.007"]
"buppt/ChineseNRE" ["l"="55.595,26.627"]
"letiantian/TextRank4ZH" ["l"="53.288,27.293"]
"dongrixinyu/JioNLP" ["l"="53.359,27.271"]
"425776024/nlpcda" ["l"="53.447,27.216"]
"liuhuanyong/TextGrapher" ["l"="55.407,27.194"]
"liuhuanyong/EventTriplesExtraction" ["l"="54.209,28.909"]
"SeanLee97/xmnlp" ["l"="53.383,27.289"]
"NLPIR-team/NLPIR" ["l"="53.177,27.35"]
"FudanNLP/fnlp" ["l"="53.24,27.377"]
"baidu/lac" ["l"="53.257,27.306"]
"isnowfy/snownlp" ["l"="53.169,27.311"]
"aespresso/a_journey_into_math_of_ml" ["l"="53.478,27.159"]
"google-research/bert" ["l"="53.095,25.874"]
"zhpmatrix/nlp-competitions-list-review" ["l"="53.491,27.178"]
"DarLiner/Algorithm_Interview_Notes-Chinese" ["l"="50.585,28.174"]
"NLP-LOVE/ML-NLP" ["l"="50.867,28.201"]
"TingFree/NLPer-Arsenal" ["l"="53.539,27.125"]
"FudanNLP/nlp-beginner" ["l"="53.458,27.081"]
"DA-southampton/Tech_Aarticle" ["l"="53.498,27.13"]
"thunlp/THUOCL" ["l"="53.354,27.437"]
"GanjinZero/awesome_Chinese_medical_NLP" ["l"="55.465,27.358"]
"fighting41love/Chinese_from_dongxiexidian" ["l"="53.284,27.42"]
"guotong1988/chinese_dictionary" ["l"="53.424,27.435"]
"sing1ee/dict_build" ["l"="53.371,27.481"]
"ling0322/webdict" ["l"="53.313,27.543"]
"nonamestreet/weixin_public_corpus" ["l"="53.431,27.466"]
"scienceasdf/medical-books" ["l"="55.509,27.437"]
"GanjinZero/ChineseEHRBert" ["l"="55.522,27.365"]
"liuhuanyong/ChineseSemanticKB" ["l"="53.461,27.345"]
"wainshine/Chinese-Names-Corpus" ["l"="53.245,27.35"]
"alibaba-research/ChineseBLUE" ["l"="55.496,27.381"]
"wainshine/Company-Names-Corpus" ["l"="53.391,27.366"]
"liuhuanyong/ComplexEventExtraction" ["l"="54.195,28.888"]
"yixiu00001/LSTM-CRF-medical" ["l"="55.519,27.315"]
"geekinglcq/CDCS" ["l"="53.447,27.287"]
"Smilexuhc/Data-Competition-TopSolution" ["l"="50.603,28.086"]
"EliotAndres/kaggle-past-solutions" ["l"="57.498,24.076"]
"NTMC-Community/MatchZoo" ["l"="53.367,27.337"]
"guoday/Tencent2019_Preliminary_Rank1st" ["l"="57.823,22.663"]
"datawhalechina/competition-baseline" ["l"="50.779,27.961"]
"zslomo/2019-Autumn-recruitment-experience" ["l"="50.537,28.174"]
"nzc/dnn_ctr" ["l"="58.086,23.358"]
"baidu/Senta" ["l"="53.305,27.324"]
"baidu/AnyQ" ["l"="53.337,27.313"]
"baidu/Familia" ["l"="53.309,27.373"]
"songyouwei/ABSA-PyTorch" ["l"="54.111,28.178"]
"chaoming0625/SentimentPolarityAnalysis" ["l"="50.048,22.086"]
"rainarch/SentiBridge" ["l"="53.449,27.445"]
"mozillazg/python-pinyin" ["l"="53.163,27.377"]
"mozillazg/pinyin-data" ["l"="53.204,27.493"]
"hotoo/pinyin" ["l"="-4.073,-33.25"]
"shibing624/pycorrector" ["l"="53.312,27.275"]
"wenet-e2e/wenet" ["l"="35.55,2.34"]
"BYVoid/OpenCC" ["l"="53.128,27.338"]
"MontrealCorpusTools/Montreal-Forced-Aligner" ["l"="37.253,2.37"]
"Morizeyao/GPT2-Chinese" ["l"="53.251,27.165"]
"yangjianxin1/GPT2-chitchat" ["l"="53.296,27.144"]
"imcaspar/gpt2-ml" ["l"="53.328,27.202"]
"thu-coai/CDial-GPT" ["l"="53.33,27.134"]
"codemayq/chinese-chatbot-corpus" ["l"="53.242,27.201"]
"TsinghuaAI/CPM-1-Generate" ["l"="53.313,27.122"]
"doccano/doccano" ["l"="53.187,27.265"]
"flairNLP/flair" ["l"="52.897,25.764"]
"HumanSignal/label-studio" ["l"="50.437,29.502"]
"allenai/allennlp" ["l"="53.002,25.738"]
"UKPLab/sentence-transformers" ["l"="52.909,25.852"]
"sebastianruder/NLP-progress" ["l"="52.992,25.819"]
"nlplab/brat" ["l"="53.435,27.41"]
"deepwel/Chinese-Annotator" ["l"="53.397,27.384"]
"snorkel-team/snorkel" ["l"="52.691,25.708"]
"PaddlePaddle/PaddleNLP" ["l"="53.157,27.17"]
"pwxcoo/chinese-xinhua" ["l"="53.164,27.495"]
"chinese-poetry/chinese-poetry" ["l"="-4.611,17.661"]
"zhaoolee/ChineseBQB" ["l"="-4.882,17.695"]
"modood/Administrative-divisions-of-China" ["l"="-3.682,-33.317"]
"skywind3000/ECDICT" ["l"="-5.176,16.914"]
"mapull/chinese-dictionary" ["l"="53.285,27.657"]
"phobal/ivideo" ["l"="-4.793,17.908"]
"thunlp/WantWords" ["l"="-48.77,12.605"]
"zhaoolee/ChromeAppHeroes" ["l"="-4.652,17.607"]
"BiLiangLtd/WordSimilarity" ["l"="53.516,27.405"]
"yaleimeng/Final_word_Similarity" ["l"="53.471,27.384"]
"ashengtx/CilinSimilarity" ["l"="53.526,27.422"]
"taozhijiang/chinese_correct_wsd" ["l"="53.546,27.47"]
"tigerchen52/synonym_detection" ["l"="53.672,27.436"]
"Keson96/SynoCN" ["l"="53.542,27.434"]
"thunlp/OpenHowNet" ["l"="53.483,27.329"]
"sunyilgdx/SIFRank_zh" ["l"="52.48,25.866"]
"liuhuanyong/SentenceSimilarity" ["l"="53.397,27.406"]
"yongzhuo/nlp_xiaojiang" ["l"="53.475,27.256"]
"LiyuanLucasLiu/LM-LSTM-CRF" ["l"="53.54,27.517"]
"HIT-SCIR/ELMoForManyLangs" ["l"="53.078,25.591"]
"allenai/bilm-tf" ["l"="53.105,25.598"]
"jiesutd/YEDDA" ["l"="53.471,27.408"]
"glample/tagger" ["l"="53.486,27.525"]
"chenghuige/wenzheng" ["l"="53.658,27.367"]
"BigHeartC/Al_challenger_2018_sentiment_analysis" ["l"="53.717,27.361"]
"xueyouluo/fsauor2018" ["l"="53.703,27.366"]
"pengshuang/AI-Comp" ["l"="53.696,27.378"]
"AIChallenger/AI_Challenger_2018" ["l"="53.637,27.378"]
"yilifzf/BDCI_Car_2018" ["l"="53.713,27.337"]
"brightmart/sentiment_analysis_fine_grain" ["l"="53.648,27.306"]
"panyang/fastText-for-AI-Challenger-Sentiment-Analysis" ["l"="53.722,27.387"]
"foamliu/Sentiment-Analysis" ["l"="53.76,27.387"]
"hecongqing/2018-daguan-competition" ["l"="53.739,27.369"]
"ShawnyXiao/2018-DC-DataGrand-TextIntelProcess" ["l"="53.756,27.342"]
"HKUST-KnowComp/R-Net" ["l"="54.695,26.506"]
"Magic-Bubble/Zhihu" ["l"="53.594,27.388"]
"ziweipolaris/atec2018-nlp" ["l"="53.267,27.444"]
"wxue004cs/GCAE" ["l"="54.201,28.186"]
"nlpjoe/daguan-classify-2018" ["l"="53.775,27.352"]
"guillaumegenthial/tf_metrics" ["l"="53.544,27.549"]
"Franck-Dernoncourt/NeuroNER" ["l"="53.508,27.51"]
"jiangxinyang227/textClassifier" ["l"="53.566,27.235"]
"jiangxinyang227/NLP-Project" ["l"="53.641,27.203"]
"jiangxinyang227/bert-for-task" ["l"="53.678,27.221"]
"terrifyzhao/bert-utils" ["l"="53.472,27.286"]
"msgi/nlp-journey" ["l"="53.505,27.207"]
"huawei-noah/Pretrained-Language-Model" ["l"="53.362,27.15"]
"ymcui/Chinese-ELECTRA" ["l"="53.394,27.19"]
"ZhuiyiTechnology/pretrained-models" ["l"="53.417,27.189"]
"princeton-nlp/SimCSE" ["l"="53.339,27.107"]
"davidsbatista/NER-datasets" ["l"="6.367,-20.105"]
"roomylee/awesome-relation-extraction" ["l"="55.694,26.67"]
"thunlp/Few-NERD" ["l"="53.719,27.573"]
"makcedward/nlpaug" ["l"="52.729,25.717"]
"shangjingbo1226/AutoNER" ["l"="53.578,27.547"]
"davidsbatista/Annotated-Semantic-Relationships-Datasets" ["l"="55.721,26.671"]
"FXLP/MarkTool" ["l"="53.512,27.354"]
"inception-project/inception" ["l"="52.26,25.303"]
"machinalis/iepy" ["l"="44.767,27.797"]
"synyi/poplar" ["l"="53.455,27.429"]
"garychowcmu/daizhigev20" ["l"="53.352,28.11"]
"Ethan-yt/guwenbert" ["l"="53.401,28.123"]
"jiaeyan/Jiayan" ["l"="53.37,28.118"]
"NiuTrans/Classical-Modern" ["l"="53.357,28.07"]
"mahavivo/scripta-sinica" ["l"="53.379,28.105"]
"Ethan-yt/guwen-models" ["l"="53.37,28.14"]
"BangBOOM/Classical-Chinese" ["l"="53.354,28.13"]
"hsc748NLP/SikuBERT-for-digital-humanities-and-classical-Chinese-information-processing" ["l"="53.386,28.145"]
"Werneror/Poetry" ["l"="53.32,27.987"]
"Xunzi-LLM-of-Chinese-classics/XunziALLM" ["l"="53.357,28.163"]
"rime-aca/corpus" ["l"="53.413,28.143"]
"JiangYanting/Pre-modern_Chinese_corpus_dataset" ["l"="53.386,28.131"]
"Ethan-yt/CCLUE" ["l"="53.366,28.151"]
"xiaopangxia/TCM-Ancient-Books" ["l"="55.471,27.461"]
"jizijing/C-CLUE" ["l"="53.379,28.152"]
"hsc748NLP/code-for-digital-humanities-tutorial" ["l"="53.373,28.17"]
"manderous/TextClassification-MeiTuan-FeatureExtraction-Classifier" ["l"="54.15,27.05"]
"shibing624/text-feature" ["l"="54.213,27.047"]
"gekelly/JD-Comment_emotional-analysis" ["l"="54.028,27.067"]
"duoergun0729/nlp" ["l"="53.417,27.148"]
"graykode/nlp-tutorial" ["l"="52.911,25.8"]
"Roshanson/TextInfoExp" ["l"="53.398,27.314"]
"Alic-yuan/nlp-beginner-finish" ["l"="-55.185,-14.3"]
"leerumor/nlp_tutorial" ["l"="53.533,27.068"]
"DengBoCong/nlp-paper" ["l"="53.506,27.049"]
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" ["l"="53.468,27.102"]
"candlewill/Dialog_Corpus" ["l"="55.756,28.339"]
"zhaoyingjun/chatbot" ["l"="55.749,28.302"]
"lcdevelop/ChatBotCourse" ["l"="55.783,28.31"]
"zibuyu/research_tao" ["l"="53.465,27.144"]
"songyingxin/TextClassification" ["l"="53.618,27.115"]
"thunlp/PLMpapers" ["l"="53.319,27.158"]
"didi/ChineseNLP" ["l"="53.407,27.202"]
"thunlp/NREPapers" ["l"="55.677,26.659"]
"fastnlp/fastNLP" ["l"="53.414,27.235"]
"iqiyi/FASPell" ["l"="53.604,27.407"]
"kpu/kenlm" ["l"="35.58,2.371"]
"LianjiaTech/BELLE" ["l"="39.054,-2.075"]
"bojone/keras_lookahead" ["l"="54.226,27.01"]
"CyberZHG/keras-lookahead" ["l"="54.17,27.029"]
"CyberZHG/keras-radam" ["l"="54.12,27.047"]
"bojone/keras_lazyoptimizer" ["l"="54.26,27.01"]
"bojone/keras_radam" ["l"="54.333,26.956"]
"titu1994/keras-adabound" ["l"="54.272,26.987"]
"titu1994/keras_rectified_adam" ["l"="54.194,27.026"]
"DQinYuan/chinese_province_city_area_mapper" ["l"="53.293,27.449"]
"shibing624/addressparser" ["l"="53.301,27.633"]
"Vonng/adcode" ["l"="53.241,27.52"]
"bitlap/geocoding" ["l"="53.282,27.718"]
"fighting41love/cocoNLP" ["l"="53.335,27.366"]
"GeneralNewsExtractor/GeneralNewsExtractor" ["l"="48.469,23.341"]
"liuzhibin-cn/address-semantic-search" ["l"="53.295,27.729"]
"yu4u/mixup-generator" ["l"="54.23,26.947"]
"yu4u/cutout-random-erasing" ["l"="54.257,26.918"]
"hongyi-zhang/mixup" ["l"="51.211,30.245"]
"unsky/mixup" ["l"="54.284,26.908"]
"surmenok/keras_lr_finder" ["l"="54.172,26.987"]
"titu1994/keras-one-cycle" ["l"="54.196,26.989"]
"zhaoyu18/quora_question_pairs" ["l"="53.035,27.471"]
"YuriyGuts/kaggle-quora-question-pairs" ["l"="53.034,27.488"]
"Wrosinski/Kaggle-Quora" ["l"="53.043,27.498"]
"aerdem4/kaggle-quora-dup" ["l"="53.021,27.496"]
"chenyuntc/PyTorchText" ["l"="53.483,27.369"]
"yongyehuang/zhihu-text-classification" ["l"="53.627,27.356"]
"HouJP/kaggle-quora-question-pairs" ["l"="53.173,27.456"]
"ChenglongChen/tensorflow-DeepFM" ["l"="58.092,23.387"]
"richliao/textClassifier" ["l"="53.381,28.809"]
"YouChouNoBB/ijcai-18-top2-single-mole-solution" ["l"="57.791,22.678"]
"Shawn1993/cnn-text-classification-pytorch" ["l"="53.379,28.704"]
"thunlp/THULAC-Python" ["l"="53.216,27.366"]
"smoothnlp/FinancialDatasets" ["l"="53.583,27.182"]
"smoothnlp/SmoothNLP" ["l"="53.468,27.305"]
"valuesimplex/FinBERT" ["l"="53.632,27.155"]
"icoxfog417/awesome-financial-nlp" ["l"="53.722,27.048"]
"A-Rain/BDCI2019-Negative_Finance_Info_Judge" ["l"="53.714,27.097"]
"supersymmetry-technologies/BBT-FinCUGE-Applications" ["l"="39.218,-1.959"]
"quincyliang/nlp-data-augmentation" ["l"="53.583,27.145"]
"Coldog2333/Financial-NLP" ["l"="-52.465,14.345"]
"FudanDISC/DISC-FinLLM" ["l"="39.188,-1.925"]
"wwwxmu/Dataset-of-financial-news-sentiment-classification" ["l"="53.658,27.103"]
"xiong666/ccf_financial_negative" ["l"="53.729,27.091"]
"startprogress/China_stock_announcement" ["l"="49.931,24.256"]
"lyeoni/nlp-tutorial" ["l"="53.563,27.155"]
"delip/PyTorchNLPBook" ["l"="52.919,25.732"]
"mesolitica/NLP-Models-Tensorflow" ["l"="53.525,27.257"]
"changwookjun/nlp-paper" ["l"="53.519,27.125"]
"kk7nc/Text_Classification" ["l"="53.611,27.203"]
"DanAnastasyev/DeepNLP-Course" ["l"="-44.328,26.077"]
"spro/practical-pytorch" ["l"="53.121,25.666"]
"Separius/awesome-sentence-embedding" ["l"="52.986,25.562"]
"THUNLP-MT/MT-Reading-List" ["l"="53.786,24.715"]
"sloria/TextBlob" ["l"="52.86,25.882"]
"sheepzh/poetry" ["l"="-61.045,15.442"]
"javayhu/poetry" ["l"="53.376,28.013"]
"Kooooooma/chinese-poetry-mysql" ["l"="53.357,28.031"]
"wb14123/couplet-dataset" ["l"="53.388,27.659"]
"michaelliao/shici" ["l"="53.282,28.12"]
"wangjiezju1988/aichpoem" ["l"="53.211,28.112"]
"holynova/gushi_namer" ["l"="55.089,29.105"]
"thunlp/SE-WRL" ["l"="52.96,24.966"]
"thunlp/SCPapers" ["l"="52.953,24.92"]
"liuhuanyong/ChineseEmbedding" ["l"="53.483,27.349"]
"thunlp/SE-WRL-SAT" ["l"="52.97,24.938"]
"thunlp/Chinese_NRE" ["l"="55.633,26.642"]
"lancopku/Chinese-Literature-NER-RE-Dataset" ["l"="55.64,26.626"]
"CLUEbenchmark/CLUECorpus2020" ["l"="53.37,27.165"]
"v-mipeng/LexiconAugmentedNER" ["l"="53.617,27.42"]
"sinovation/ZEN" ["l"="53.458,27.329"]
"zihangdai/xlnet" ["l"="53.051,25.718"]
"autoliuweijie/K-BERT" ["l"="53.413,27.251"]
"namisan/mt-dnn" ["l"="53.308,27.184"]
"kimiyoung/transformer-xl" ["l"="53.149,25.692"]
"Choco31415/Attention_Network_With_Keras" ["l"="53.938,27.218"]
"foamliu/Self-Attention-Keras" ["l"="53.957,27.242"]
"ningshixian/LSTM_Attention" ["l"="53.937,27.235"]
"datalogue/keras-attention" ["l"="53.9,27.227"]
"uhauha2929/examples" ["l"="53.465,28.707"]
"philipperemy/keras-attention" ["l"="53.873,27.221"]
"tomohideshibata/BERT-related-papers" ["l"="53.272,27.134"]
"google-research/electra" ["l"="53.282,27.163"]
"huggingface/awesome-papers" ["l"="52.839,25.675"]
"facebookresearch/XLM" ["l"="53.036,25.657"]
"dair-ai/nlp_paper_summaries" ["l"="52.755,25.743"]
"nyu-mll/jiant" ["l"="52.948,25.537"]
"danqi/acl2020-openqa-tutorial" ["l"="54.495,25.53"]
"zlsdu/Word-Embedding" ["l"="53.458,27.27"]
"zhaogaofeng611/TextMatch" ["l"="53.387,27.303"]
"WenRichard/KBQA-BERT" ["l"="55.422,27.211"]
"terrifyzhao/text_matching" ["l"="53.354,27.327"]
"YingZhuY/GloVe_Chinese_word_embedding" ["l"="53.36,27.469"]
"bojone/lic2020_baselines" ["l"="54.283,28.909"]
"xmxoxo/BERT-train2deploy" ["l"="53.506,27.309"]
"coetaur0/ESIM" ["l"="53.194,27.398"]
"lukecq1231/nli" ["l"="53.054,27.441"]
"pengshuang/Text-Similarity" ["l"="53.267,27.368"]
"pengming617/text_matching" ["l"="53.318,27.354"]
"HsiaoYetGun/ESIM" ["l"="53.102,27.413"]
"nyu-mll/multiNLI" ["l"="53.07,27.436"]
"alibaba-edu/simple-effective-text-matching-pytorch" ["l"="53.293,27.387"]
"alibaba/esim-response-selection" ["l"="53.275,27.347"]
"lanwuwei/SPM_toolkit" ["l"="53.081,27.454"]
"cooelf/SemBERT" ["l"="54.9,26.485"]
"YichenGong/Densely-Interactive-Inference-Network" ["l"="53.054,27.46"]
"NTMC-Community/MatchZoo-py" ["l"="53.292,27.347"]
"BangLiu/ArticlePairMatching" ["l"="53.272,27.462"]
"fastnlp/fitlog" ["l"="53.398,27.103"]
"NVIDIA/runx" ["l"="50.653,30.172"]
"fastnlp/fastHan" ["l"="53.458,27.251"]
"wandb/wandb" ["l"="-1.719,3.303"]
"yuchenlin/rebiber" ["l"="-3.863,23.517"]
"bighuang624/AI-research-tools" ["l"="-4.035,23.517"]
"lucasjinreal/alfred" ["l"="50.621,30.198"]
"txsun1997/LMaaS-Papers" ["l"="36.778,-2.536"]
"MLNLP-World/Paper-Writing-Tips" ["l"="-3.951,23.526"]
"xmmmmmovo/FaBao" ["l"="53.102,27.764"]
"hecongqing/Legal-Charge-Prediction" ["l"="53.096,27.781"]
"LexPredict/lexpredict-lexnlp" ["l"="52.721,27.878"]
"ICLRandD/Blackstone" ["l"="52.742,27.867"]
"LexPredict/lexpredict-legal-dictionary" ["l"="52.704,27.914"]
"LexPredict/lexpredict-contraxsuite" ["l"="52.701,27.931"]
"Liquid-Legal-Institute/Legal-Text-Analytics" ["l"="52.745,27.888"]
"freelawproject/eyecite" ["l"="52.664,27.893"]
"maastrichtlawtech/awesome-legal-nlp" ["l"="52.797,27.848"]
"LexPredict/openedgar" ["l"="-9.454,12.732"]
"TheAtticusProject/cuad" ["l"="52.722,27.852"]
"thunlp/LegalPapers" ["l"="52.97,27.709"]
"coastalcph/lex-glue" ["l"="52.755,27.876"]
"freelawproject/juriscraper" ["l"="52.622,27.874"]
"HazyResearch/legalbench" ["l"="52.776,27.865"]
"freelawproject/courtlistener" ["l"="52.653,27.876"]
"Law-AI/summarization" ["l"="52.684,27.911"]
"neelguha/legal-ml-datasets" ["l"="52.766,27.853"]
"chinese-poetry/chinese-poetry-zhCN" ["l"="53.405,28.002"]
"woodylan/chinese-poetry-to-mysql-tool" ["l"="53.332,28.061"]
"yishui01/chinese-poetry-Mysql-Elastic" ["l"="53.367,28.05"]
"hxgdzyuyi/tang_poetry" ["l"="53.391,28.047"]
"hippieZhou/chinese-poetry-db" ["l"="53.386,28.067"]
"brightmart/xlnet_zh" ["l"="53.489,27.028"]
"budzianowski/PyTorch-Beam-Search-Decoding" ["l"="54.666,27.207"]
"312shan/Pytorch-seq2seq-Beam-Search" ["l"="54.685,27.175"]
"jojonki/BeamSearch" ["l"="54.711,27.194"]
"ottokart/beam_search" ["l"="54.691,27.194"]
"mjc92/CopyNet" ["l"="54.562,27.248"]
"jarobyte91/pytorch_beam_search" ["l"="54.701,27.214"]
"songyingxin/Bert-TextClassification" ["l"="53.601,27.184"]
"Anfany/Machine-Learning-for-Beginner-by-Python3" ["l"="53.747,27.078"]
"sujeek/chinese_nlp" ["l"="53.668,27.125"]
"hczheng/Rong360" ["l"="57.885,22.698"]
"PaddlePaddle/models" ["l"="50.038,29.609"]
"gaussic/text-classification-cnn-rnn" ["l"="53.271,27.231"]
"dennybritz/cnn-text-classification-tf" ["l"="53.153,25.633"]
"cjymz886/text-cnn" ["l"="50.09,22.208"]
"catqaq/OpenTextClassification" ["l"="53.705,26.825"]
"catqaq/NLP-Notes" ["l"="53.716,26.799"]
"OpenLLMAI/OpenLLMWiki" ["l"="53.727,26.775"]
"lonePatient/Bert-Multi-Label-Text-Classification" ["l"="53.666,27.193"]
"yaleimeng/TextClassify_with_BERT" ["l"="53.644,27.119"]
"zhanlaoban/Transformers_for_Text_Classification" ["l"="53.668,27.149"]
"zhanlaoban/EDA_NLP_for_Chinese" ["l"="53.472,27.213"]
"guoday/CCF-BDCI-Sentiment-Analysis-Baseline" ["l"="53.662,27.211"]
"Socialbird-AILab/BERT-Classification-Tutorial" ["l"="53.62,27.27"]
"renxingkai/BERT_Chinese_Classification" ["l"="50.042,22.195"]
"PrashantRanjan09/Elmo-Tutorial" ["l"="53.859,27.442"]
"PrashantRanjan09/WordEmbeddings-Elmo-Fasttext-Word2Vec" ["l"="53.843,27.45"]
"strongio/keras-elmo" ["l"="53.855,27.381"]
"JHart96/keras_elmo_embedding_layer" ["l"="53.896,27.412"]
"google-research-datasets/gap-coreference" ["l"="53.238,27.645"]
"kentonl/e2e-coref" ["l"="53.252,27.601"]
"mandarjoshi90/coref" ["l"="53.272,27.636"]
"shayneobrien/coreference-resolution" ["l"="53.262,27.626"]
"clarkkev/deep-coref" ["l"="53.23,27.627"]
"sattree/gap" ["l"="53.197,27.686"]
"ShannonAI/CorefQA" ["l"="53.238,27.679"]
"bkntr/coref-ee" ["l"="53.244,27.659"]
"ThoughtRiver/lmdb-embeddings" ["l"="53.972,27.49"]
"kermitt2/delft" ["l"="53.896,27.465"]
"china-ai-law-challenge/CAIL2019" ["l"="53.081,27.65"]
"GuidoPaul/CAIL2019" ["l"="53.104,27.632"]
"dalinvip/Awesome-Law-NLP-Research-Work" ["l"="53.061,27.657"]
"thunlp/CAIL" ["l"="53.065,27.676"]
"padeoe/cail2019" ["l"="53.087,27.633"]
"thunlp/TopJudge" ["l"="53.023,27.684"]
"liuhuanyong/CrimeKgAssitant" ["l"="53.026,27.75"]
"thunlp/attribute_charge" ["l"="53.035,27.674"]
"thunlp/LegalPLMs" ["l"="52.986,27.707"]
"evilbear/emr-ner" ["l"="53.69,27.657"]
"JNhua/Chinese_NER_with_Attention" ["l"="53.699,27.677"]
"ZhixiuYe/HSCRF-pytorch" ["l"="53.584,27.525"]
"XuezheMax/NeuroNLP2" ["l"="52.958,25.172"]
"liu-nlper/NER-LSTM-CRF" ["l"="53.509,27.529"]
"threelittlemonkeys/lstm-crf-pytorch" ["l"="53.617,27.529"]
"liu-nlper/SLTK" ["l"="53.581,27.48"]
"dasmith/stanford-corenlp-python" ["l"="52.914,27.578"]
"smilli/py-corenlp" ["l"="53.021,27.561"]
"Wordseer/stanford-corenlp-python" ["l"="52.857,27.586"]
"brendano/stanford_corenlp_pywrapper" ["l"="52.936,27.591"]
"npow/MemNN" ["l"="46.02,27.832"]
"facebookarchive/NAMAS" ["l"="58.388,29.153"]
"google/pygtrie" ["l"="53.889,27.361"]
"pytries/marisa-trie" ["l"="53.985,27.303"]
"pytries/datrie" ["l"="54.028,27.309"]
"WojciechMula/pyahocorasick" ["l"="53.767,27.309"]
"abusix/ahocorapy" ["l"="53.892,27.334"]
"taku910/crfpp" ["l"="53.428,27.615"]
"clab/fast_align" ["l"="53.8,24.78"]
"chujiezheng/ChID-Dataset" ["l"="53.091,27.729"]
"ewrfcas/bert_cn_finetune" ["l"="53.111,27.68"]
"VisualJoyce/ChengyuBERT" ["l"="53.077,27.758"]
"aceimnorstuvwxz/toutiao-text-classfication-dataset" ["l"="53.489,27.294"]
"aceimnorstuvwxz/toutiao-multilevel-text-classfication-dataset" ["l"="53.612,27.286"]
"OYE93/Chinese-NLP-Corpus" ["l"="53.527,27.339"]
"IAdmireu/ChineseSTS" ["l"="53.363,27.356"]
"scrapinghub/python-crfsuite" ["l"="53.394,27.599"]
"chokkan/crfsuite" ["l"="53.356,27.655"]
"TeamHG-Memex/sklearn-crfsuite" ["l"="53.325,27.672"]
"timvieira/crf" ["l"="53.366,27.682"]
"pystruct/pystruct" ["l"="53.172,27.664"]
"aleju/ner-crf" ["l"="53.387,27.695"]
"chilynn/sequence-labeling" ["l"="53.456,27.549"]
"larsmans/seqlearn" ["l"="53.225,27.666"]
"kmkurn/pytorch-crf" ["l"="53.549,27.413"]
"allanj/pytorch_neural_crf" ["l"="53.671,27.581"]
"kaniblu/pytorch-bilstmcrf" ["l"="53.666,27.638"]
"jidasheng/bi-lstm-crf" ["l"="53.685,27.535"]
"sgrvinod/a-PyTorch-Tutorial-to-Sequence-Labeling" ["l"="53.634,27.587"]
"mali19064/LSTM-CRF-pytorch-faster" ["l"="53.624,27.697"]
"Nealcly/BiLSTM-LAN" ["l"="53.671,27.549"]
"lonePatient/BiLSTM-CRF-NER-PyTorch" ["l"="53.655,27.54"]
"fjklqq/Geocoding" ["l"="53.281,27.756"]
"yihenglu/chinese-address-segment" ["l"="53.301,27.793"]
"ShawnyXiao/TextClassification-Keras" ["l"="-53.203,-16.439"]
"prakashpandey9/Text-Classification-Pytorch" ["l"="53.355,28.716"]
"Tencent/NeuralNLP-NeuralClassifier" ["l"="53.585,27.211"]
"TobiasLee/Text-Classification" ["l"="53.385,28.787"]
"yao8839836/text_gcn" ["l"="52.881,15.91"]
"castorini/hedwig" ["l"="53.272,28.712"]
"yumeng5/WeSTClass" ["l"="54.179,27.295"]
"yumeng5/WeSHClass" ["l"="54.137,27.248"]
"yuzhimanhua/MetaCat" ["l"="54.247,27.275"]
"yuzhimanhua/HIMECat" ["l"="54.23,27.272"]
"yumeng5/CatE" ["l"="54.148,27.315"]
"mickeysjm/SetExpan" ["l"="54.253,27.35"]
"yumeng5/JoSH" ["l"="54.191,27.314"]
"ArtistScript/FastTextRank" ["l"="53.438,27.103"]
"ztz818/Automatic-generation-of-text-summaries" ["l"="53.438,26.971"]
"Valuebai/Text-Auto-Summarization" ["l"="53.424,26.991"]
"bigzhao/Keyword_Extraction" ["l"="53.493,27.27"]
"zkwi/textSummary" ["l"="53.448,26.983"]
"yongzhuo/nlg-yongzhuo" ["l"="53.449,27.048"]
"pingyuan2016/word2vec_textrank" ["l"="53.461,26.989"]
"CourteousWood/text-summarization" ["l"="53.447,26.949"]
"HorieYuan/TransformerTextSummarization" ["l"="53.454,26.968"]
"bojone/SPACES" ["l"="53.387,27.084"]
"danan0755/Bert_Classifier" ["l"="53.55,27.224"]
"AimeeLee77/keyword_extraction" ["l"="53.391,27.226"]
"chapzq77/LTP_Python_Interface" ["l"="54.151,28.997"]
"ouprince/text-rank" ["l"="53.469,27.018"]
"Hellisotherpeople/CX_DB8" ["l"="53.132,27.848"]
"zedom1/Error-Detection" ["l"="53.159,27.77"]
"zhedongzheng/tensorflow-nlp" ["l"="53.435,27.34"]
"microsoft/NeuronBlocks" ["l"="53.329,27.334"]
"asyml/texar" ["l"="57.735,29.417"]
"NTMC-Community/awesome-neural-models-for-semantic-match" ["l"="53.257,27.397"]
"openai/sparse_attention" ["l"="48.822,33.923"]
"facebookresearch/pytext" ["l"="52.976,25.701"]
"sogou/SogouMRCToolkit" ["l"="-51.579,-15"]
"Brokenwind/BertSimilarity" ["l"="53.388,27.347"]
"BonnieHuangxin/Bert_sentence_similarity" ["l"="53.299,27.47"]
"JepsonWong/Text_Matching" ["l"="53.343,27.377"]
"cjymz886/sentence-similarity" ["l"="53.345,27.408"]
"rsanshierli/EasyBert" ["l"="53.542,27.187"]
"ShuaichiLi/Chinese-sentence-similarity-task" ["l"="53.41,27.337"]
"DengBoCong/text-similarity" ["l"="53.313,27.098"]
"xiongma/chinese-law-bert-similarity" ["l"="53.319,27.496"]
"liuhuanyong/SiameseSentenceSimilarity" ["l"="53.295,27.402"]
"phychaos/TextSimilar" ["l"="53.336,27.434"]
"ownthink/KnowledgeGraphData" ["l"="55.306,27.151"]
"liuhuanyong/QASystemOnMedicalKG" ["l"="55.385,27.239"]
"NLPchina/ansj_seg" ["l"="-3.992,8.601"]
"NLPchina/nlp-lang" ["l"="-3.971,8.568"]
"koth/kcws" ["l"="53.329,27.454"]
"rockingdingo/deepnlp" ["l"="53.39,27.446"]
"morenjiujiu/sensitive_content_filter" ["l"="52.834,27.148"]
"qloog/sensitive_words" ["l"="52.799,27.14"]
"SunLinJie/Text_Review" ["l"="52.79,27.092"]
"keithsun80/speachless" ["l"="52.772,27.168"]
"houbb/word-checker" ["l"="53.559,27.593"]
"jiangnanboy/jcorrector" ["l"="45.701,2.631"]
"houbb/nlp-hanzi-similar" ["l"="53.517,27.574"]
"houbb/segment" ["l"="53.525,27.623"]
"houbb/opencc4j" ["l"="53.464,27.592"]
"beyondacm/Autochecker4Chinese" ["l"="53.668,27.514"]
"statedecoded/statedecoded" ["l"="52.643,27.967"]
"papertrail/legal-docs" ["l"="52.579,28.004"]
"unitedstates/uslaw.link" ["l"="52.612,27.956"]
"statedecoded/legal-dictionary" ["l"="52.629,27.986"]
"unitedstates/citation" ["l"="52.619,27.927"]
"cofounders/legal" ["l"="52.607,27.993"]
"TracyWang95/legal-prompts-for-gpt" ["l"="50.671,2.969"]
"howl-anderson/hanzi_chaizi" ["l"="53.498,27.566"]
"kfcd/chaizi" ["l"="53.41,27.513"]
"howl-anderson/hanzi_char_featurizer" ["l"="53.475,27.562"]
"contr4l/SimilarCharacter" ["l"="53.522,27.494"]
"hanzi-chai/chai" ["l"="53.442,27.599"]
"WenDesi/Chinese_radical" ["l"="53.279,25.056"]
"charlesXu86/char_featurizer" ["l"="53.499,27.588"]
"qingyujean/ssc" ["l"="53.591,27.563"]
"WTree/chineseStroke" ["l"="55.027,29.13"]
"sfyc23/python-wubi" ["l"="53.534,27.637"]
"dalinvip/cw2vec" ["l"="53.271,25.087"]
"MrAl3x0/LegalLens" ["l"="52.551,28.022"]
"Separius/BERT-keras" ["l"="53.747,27.266"]
"zhanzecheng/Time_NLP" ["l"="53.4,27.429"]
"shinyke/Time-NLP" ["l"="-4.073,8.509"]
"ryanInf/Time-NLPY" ["l"="53.362,27.519"]
"xiaoxiong74/Time-Extractor" ["l"="53.367,27.506"]
"bojone/kg-2019" ["l"="55.622,26.571"]
"Ailln/cn2an" ["l"="53.367,27.418"]
"Wall-ee/chinese2digits" ["l"="53.408,27.48"]
"fighting41love/hardNLU" ["l"="53.386,27.5"]
"murray-z/text_analysis_tools" ["l"="53.448,27.164"]
"yongzhuo/Macropodus" ["l"="53.469,27.242"]
"hiDaDeng/cnsenti" ["l"="50.079,22.073"]
"linguishi/chinese_sentiment" ["l"="50.046,22.103"]
"panchunguang/ccks_baidu_entity_link" ["l"="53.509,27.274"]
"JackKuo666/NLP_basis" ["l"="53.618,27.136"]
"nlpdz/Medical-Named-Entity-Rec-Based-on-Dilated-CNN" ["l"="53.689,27.052"]
"lpty/nlp_base" ["l"="53.499,27.342"]
"Dod-o/NLP-practice-program" ["l"="53.671,27.082"]
"learning511/cs224n-learning-camp" ["l"="53.665,27.174"]
"smilelight/lightNLP" ["l"="53.533,27.223"]
"bainingchao/NLP-ML" ["l"="53.707,27.069"]
"nlpinaction/learning-nlp" ["l"="53.502,27.256"]
"yuquanle/NLP-progress" ["l"="53.729,26.911"]
"hmmlearn/hmmlearn" ["l"="45.667,26.233"]
"dwiel/tensorflow_hmm" ["l"="52.977,27.657"]
"jmschrei/pomegranate" ["l"="45.637,26.21"]
"jmschrei/yahmm" ["l"="45.194,27.522"]
"guyz/HMM" ["l"="45.72,26.289"]
"FlorentF9/DeepTemporalClustering" ["l"="52.658,14.751"]
"eBay/bayesian-belief-networks" ["l"="39.356,35.988"]
"aigamedev/scikit-neuralnetwork" ["l"="44.825,27.682"]
"hellonlp/classifier-multi-label" ["l"="53.692,27.137"]
"bojone/seq2seq" ["l"="53.761,27.233"]
"bojone/crf" ["l"="53.703,27.303"]
"bojone/attention" ["l"="53.649,27.27"]
"CyberZHG/keras-xlnet" ["l"="53.822,27.17"]
"stephen-v/zh-NER-keras" ["l"="53.723,27.294"]
"bojone/kg-2019-baseline" ["l"="55.63,26.543"]
"bojone/Capsule" ["l"="50.929,33.207"]
"shawroad/Keras-Learning-Summary" ["l"="53.801,27.208"]
"harveyaot/DianJing" ["l"="53.841,27.179"]
"kaushaltrivedi/bert-toxic-comments-multilabel" ["l"="53.717,27.242"]
"javaidnabi31/Multi-Label-Text-classification-Using-BERT" ["l"="53.758,27.187"]
"utterworks/fast-bert" ["l"="52.823,25.655"]
"wshuyi/demo-fastbert-multi-label-classification" ["l"="53.75,27.209"]
"wshuyi/demo-multi-label-classification-bert" ["l"="53.778,27.217"]
"yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast" ["l"="54.344,27.646"]
"yuxiaowww/2018-China-University-Computer-Contest" ["l"="54.367,27.655"]
"yuxiaowww/NLP-Basic-Learning" ["l"="54.357,27.667"]
"FNo0/Knight" ["l"="54.344,27.63"]
"YORK-CHAN/Rank1-Crawler-weather---of-BDCI-2018-Supply-Chain-Demand-Forecast" ["l"="54.371,27.628"]
"luoda888/CCF2018-Top2-Demand-Forecast" ["l"="54.379,27.68"]
"FNo0/LIFT_for_NLP" ["l"="54.33,27.63"]
"sunwantong/Xsm_Education_App" ["l"="54.358,27.63"]
"YangKing0834131/2018-KUAISHOU-TSINGHUA-Solutions-" ["l"="54.367,27.642"]
"PandasCute/2018-CCF-BDCI-China-Unicom-Research-Institute-top2" ["l"="57.829,22.644"]
"rebornZH/2019-sohu-algorithm-competition" ["l"="54.257,27.597"]
"drop-out/RNN-Active-User-Forecast" ["l"="57.779,22.654"]
"allenai/writing-code-for-nlp-research-emnlp2018" ["l"="54.09,26.982"]
"allenai/acl2018-semantic-parsing-tutorial" ["l"="37.593,-1.715"]
"neulab/compare-mt" ["l"="53.854,24.762"]
"qipeng/golden-retriever" ["l"="54.769,26.378"]
"baidu/DDParser" ["l"="53.425,27.282"]
"apachecn/nlp-pytorch-zh" ["l"="53.564,27.122"]
"zhanlaoban/CS224N-Stanford-Winter-2019" ["l"="53.639,27.087"]
"ZacBi/CS224n-2019-solutions" ["l"="53.652,27.064"]
"apachecn/stanford-cs224n-notes-zh" ["l"="53.659,27.037"]
"zhanzecheng/Chinese_segment_augment" ["l"="53.388,27.467"]
"bojone/word-discovery" ["l"="53.364,27.403"]
"zhanzecheng/The-Art-Of-Programming-By-July" ["l"="53.35,27.533"]
"Rayarrow/New-Word-Discovery" ["l"="53.353,27.495"]
"Moonshile/ChineseWordSegmentation" ["l"="53.387,27.576"]
"izisong/new-words-discovery" ["l"="53.345,27.547"]
"NCXiaozui/New-Word-Detection" ["l"="53.346,27.519"]
"cjymz886/find-Chinese-medical-words" ["l"="53.336,27.494"]
"brightmart/nlu_sim" ["l"="53.298,27.432"]
"liuhuanyong/TopicCluster" ["l"="54.056,28.925"]
"cooscao/Bert-BiLSTM-CRF-pytorch" ["l"="53.675,27.364"]
"qiufengyuyi/sequence_tagging" ["l"="53.577,27.327"]
"hemingkx/CLUENER2020" ["l"="53.673,27.318"]
"amansrivastava17/embedding-as-service" ["l"="54.212,27.748"]
"hellohaptik/spello" ["l"="54.143,27.694"]
"xmxoxo/BERT-Vector" ["l"="54.25,27.775"]
"keitakurita/Practical_NLP_in_PyTorch" ["l"="53.997,27.081"]
"keitakurita/practical-torchtext" ["l"="53.933,27.05"]
"mhagiwara/realworldnlp" ["l"="54.109,27.184"]
"facebookresearch/adaptive-span" ["l"="48.781,33.928"]
"graykode/xlnet-Pytorch" ["l"="53.683,27.107"]
"huggingface/naacl_transfer_learning_tutorial" ["l"="23.497,14.916"]
"google-research-datasets/paws" ["l"="57.488,29.327"]
"Delta-ML/delta" ["l"="53.214,27.187"]
"mravanelli/pytorch-kaldi" ["l"="35.563,2.316"]
"athena-team/athena" ["l"="50.614,2.815"]
"didi/athena" ["l"="53.058,27.083"]
"crownpku/Rasa_NLU_Chi" ["l"="55.665,28.28"]
"tensorflow/lingvo" ["l"="35.536,2.371"]
"k2-fsa/k2" ["l"="35.642,2.36"]
"GaoQ1/rasa_chatbot_cn" ["l"="55.629,28.255"]
"freewym/espresso" ["l"="35.692,2.353"]
"google/uis-rnn" ["l"="37.055,3.21"]
"liuhuanyong/Word2Vector" ["l"="53.516,27.432"]
"SophonPlus/ChineseWordVectors" ["l"="53.563,27.573"]
"liuhuanyong/ChineseNLPCorpus" ["l"="53.503,27.371"]
"lfoppiano/grobid-quantities" ["l"="-34.162,16.486"]
"kermitt2/entity-fishing" ["l"="-0.336,-42.083"]
"kermitt2/Pub2TEI" ["l"="-34.124,16.424"]
"iliaschalkidis/ELMo-keras" ["l"="53.892,27.386"]
"kermitt2/biblio-glutton" ["l"="-34.15,16.42"]
"gentaiscool/lstm-attention" ["l"="53.985,27.227"]
"AimeeLee77/wiki_zh_word2vec" ["l"="53.411,27.352"]
"murray-z/text_clustering" ["l"="53.306,27.068"]
"AimeeLee77/senti_analysis" ["l"="50.025,22.106"]
"HUANGZHIHAO1994/weibo-analysis-and-visualization" ["l"="49.977,22.041"]
"cedrickchee/awesome-transformer-nlp" ["l"="53.421,27.127"]
"NirantK/NLP_Quickbook" ["l"="52.775,25.639"]
"seriousran/awesome-qa" ["l"="55.513,26.132"]
"seopbo/nlp_classification" ["l"="-5.067,-23.122"]
"tlatkowski/multihead-siamese-nets" ["l"="53.041,27.4"]
"likejazz/Siamese-LSTM" ["l"="53.02,27.417"]
"amansrivastava17/lstm-siamese-text-similarity" ["l"="53.119,27.384"]
"dhwajraj/deep-siamese-text-similarity" ["l"="53.072,27.412"]
"Observerspy/CS224n" ["l"="53.814,27.114"]
"ankit-ai/cs224n-natural-language-processing-winter2019" ["l"="53.87,27.069"]
"nyu-dl/dl4marco-bert" ["l"="54.495,25.763"]
"alibaba-edu/simple-effective-text-matching" ["l"="53.306,27.347"]
"ChenglongChen/tensorflow-DSMM" ["l"="57.959,23.234"]
"castorini/anserini" ["l"="54.522,25.717"]
"AdeDZY/DeepCT" ["l"="54.482,25.746"]
"AdeDZY/SIGIR19-BERT-IR" ["l"="54.453,25.792"]
"RandolphVI/Hierarchical-Multi-Label-Text-Classification" ["l"="53.885,27.164"]
"RandolphVI/Multi-Label-Text-Classification" ["l"="53.68,27.247"]
"howl-anderson/Chinese_models_for_SpaCy" ["l"="53.371,27.376"]
"GaoQ1/rasa_nlu_gq" ["l"="55.623,28.235"]
"zqhZY/_rasa_chatbot" ["l"="55.643,28.287"]
"jeusgao/spaCy-new-language-test-Chinese" ["l"="53.342,27.471"]
"paschmann/rasa-ui" ["l"="55.58,28.267"]
"chatopera/insuranceqa-corpus-zh" ["l"="55.777,28.346"]
"howl-anderson/WeatherBot" ["l"="55.637,28.23"]
"hankcs/CS224n" ["l"="53.692,27.197"]
"stanfordnlp/cs224n-winter17-notes" ["l"="52.977,25.662"]
"L1aoXingyu/cs231n-camp" ["l"="48.477,28.623"]
"MLjian/TextClassificationImplement" ["l"="53.746,27.325"]
"thunlp/RCPapers" ["l"="54.714,26.541"]
"learning511/Stanford-Machine-Learning-camp" ["l"="50.834,27.577"]
"Y1ran/NLP-BERT--ChineseVersion" ["l"="53.571,27.269"]
"Pelhans/Z_knowledge_graph" ["l"="55.404,27.145"]
"RedstoneWill/MachineLearningInAction-Camp" ["l"="50.798,27.676"]
"Luvata/CS224N-2019" ["l"="53.678,27.016"]
"xixiaoyao/CS224n-winter-together" ["l"="53.58,27.077"]
"LooperXX/CS224n-Reading-Notes" ["l"="53.62,27.033"]
"lrs1353281004/CS224n_winter2019_notes_and_assignments" ["l"="53.654,27.014"]
"LooperXX/CS224n-Resource" ["l"="53.639,27.042"]
"jon-tow/cs224n" ["l"="53.693,26.991"]
"chrischute/squad" ["l"="54.802,26.571"]
"leehanchung/cs224n" ["l"="53.666,26.996"]
"robert-bor/aho-corasick" ["l"="54.009,26.981"]
"hankcs/AhoCorasickDoubleArrayTrie" ["l"="53.944,27.091"]
"hankcs/aho-corasick" ["l"="53.982,27.019"]
"google/re2j" ["l"="-5.645,10.554"]
"QSFT/Mensa" ["l"="54.038,26.93"]
"raymanrt/aho-corasick" ["l"="54.028,26.953"]
"linkedin/URL-Detector" ["l"="-2.715,14.267"]
"leventov/Koloboke" ["l"="-5.544,10.583"]
"OpenHFT/Chronicle-Map" ["l"="-5.462,10.615"]
"OpenHFT/Zero-Allocation-Hashing" ["l"="-5.529,10.593"]
"fast-pack/JavaFastPFOR" ["l"="-5.611,10.614"]
"almondtools/stringsearchalgorithms" ["l"="54.06,26.92"]
"wenyangchou/SimilarCharactor" ["l"="53.607,27.61"]
"yanqiangmiffy/sentence-similarity" ["l"="53.31,27.397"]
"WenRichard/QAmodel-for-Retrievalchatbot" ["l"="55.721,28.297"]
"ZhuiyiTechnology/simbert" ["l"="53.388,27.153"]
"zyymax/text-similarity" ["l"="-1.063,4.347"]
"pengming617/bert_textMatching" ["l"="53.306,27.415"]
"liuhuanyong/PersonRelationKnowledgeGraph" ["l"="55.427,27.162"]
"applenob/simple_crf" ["l"="53.333,27.83"]
"shawntan/python-crf" ["l"="53.343,27.797"]
"JianWenJun/MLDemo" ["l"="53.264,27.425"]
"LittletreeZou/Question-Pairs-Matching" ["l"="53.228,27.454"]
"zle1992/atec" ["l"="53.248,27.455"]
"Huijun-Cui/ATEC-NLP" ["l"="53.237,27.467"]
"raven4752/huabei" ["l"="53.254,27.465"]
"zhiguowang/BiMPM" ["l"="53.104,27.486"]
"qrfaction/paipaidai" ["l"="52.87,27.469"]
"guoday/PaiPaiDai2018_rank16" ["l"="52.901,27.465"]
"world2vec/atec_2018_nlp" ["l"="53.235,27.48"]
"duterscmy/ccks2019-ckbqa-4th-codes" ["l"="55.559,26.055"]
"ATEC2018/deep-siamese-text-similarity" ["l"="53.139,27.423"]
"WenDesi/sentenceSimilarity" ["l"="53.128,27.411"]
"smilelight/lightKG" ["l"="55.411,27.131"]
"ShomyLiu/pytorch-relation-extraction" ["l"="55.671,26.637"]
"Dod-o/LeetCode" ["l"="53.71,27.029"]
"InsaneLife/dssm" ["l"="58.044,23.292"]
"qiangsiwei/bert_distill" ["l"="53.424,27.111"]
"YJiangcm/Chinese-sentence-pair-modeling" ["l"="53.329,27.386"]
"wangle1218/deep_text_matching" ["l"="53.339,27.347"]
"luhua-rain/MRC_Competition_Dureader" ["l"="53.404,27.285"]
"SunnyMarkLiu/lic2019-dureader2.0-rank2" ["l"="54.832,26.545"]
"cooscao/BERT-Dureader" ["l"="54.814,26.557"]
"baidu/DuReader" ["l"="54.664,26.542"]
"YingZiqiang/LES-MMRC-Summary" ["l"="53.122,27.556"]
"ymcui/cmrc2018" ["l"="54.608,26.576"]
"NoneWait/cail2019" ["l"="53.125,27.602"]
"BDBC-KG-NLP/QA-Survey-CN" ["l"="53.51,27.187"]
"SeanLee97/QANet_dureader" ["l"="54.741,26.542"]
"cooelf/AwesomeMRC" ["l"="54.85,26.475"]
"ymcui/Chinese-RC-Datasets" ["l"="54.636,26.596"]
"Jekub/Wapiti" ["l"="53.383,27.716"]
"chokkan/liblbfgs" ["l"="-19.341,-25.916"]
"knowitall/openie" ["l"="-0.535,-41.997"]
"clab/stack-lstm-ner" ["l"="53.485,27.577"]
"attardi/deepnl" ["l"="53.058,25.337"]
"WladimirSidorenko/CRFSuite" ["l"="53.333,27.704"]
"percyliang/brown-cluster" ["l"="-0.253,-41.915"]
"hanbt/learn_dl" ["l"="53.482,27.423"]
"hanbt/awesome-deep-learning" ["l"="53.468,27.505"]
"ljpzzz/machinelearning" ["l"="50.905,28.103"]
"jiqizhixin/ML-Tutorial-Experiment" ["l"="50.354,28.218"]
"nicodjimenez/lstm" ["l"="-9.232,12.532"]
"dalinvip/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch" ["l"="53.317,28.693"]
"WenDesi/lihang_book_algorithm" ["l"="50.711,28.086"]
"nndl/nndl.github.io" ["l"="50.809,28.206"]
"NELSONZHAO/zhihu" ["l"="53.413,27.452"]
"wzyonggege/statistical-learning-method" ["l"="50.748,28.024"]
"SnailTyan/deep-learning-papers-translation" ["l"="50.799,29.872"]
"allenai/beaker-cli" ["l"="54.35,27.47"]
"allenai/allennlp-language-modeling" ["l"="54.388,27.489"]
"allenai/allentune" ["l"="54.264,27.426"]
"baidu/information-extraction" ["l"="55.641,26.561"]
"accordproject/concerto" ["l"="52.629,28.072"]
"accordproject/web-components" ["l"="52.61,28.072"]
"accordproject/template-playground" ["l"="52.626,28.107"]
"accordproject/ergo" ["l"="52.614,28.056"]
"accordproject/template-engine" ["l"="52.637,28.093"]
"accordproject/template-archive" ["l"="52.643,28.022"]
"accordproject/models" ["l"="52.626,28.048"]
"accordproject/cicero-template-library" ["l"="52.637,28.058"]
"accordproject/markdown-transform" ["l"="52.606,28.093"]
"accordproject/techdocs" ["l"="52.6,28.051"]
"Jacen789/HotNewsAnalysis" ["l"="52.878,26.996"]
"mattzheng/LangueOne" ["l"="52.824,26.963"]
"czy1999/Text-hotspot-mining" ["l"="52.844,26.978"]
"lliuz/KeigoHigashino" ["l"="52.851,26.954"]
"liuhuanyong/LawCrimeMining" ["l"="53.053,27.729"]
"pengxiao-song/awesome-chinese-legal-resources" ["l"="52.966,27.799"]
"LiuHC0428/LAW-GPT" ["l"="52.966,27.835"]
"zhang17173/Event-Extraction" ["l"="54.219,28.874"]
"zhihao-chen/QASystemOnMedicalGraph" ["l"="55.442,27.262"]
"liuhuanyong/QAonMilitaryKG" ["l"="55.425,27.114"]
"charlesXu86/Chatbot_CN" ["l"="55.687,28.259"]
"LawRefBook/Laws" ["l"="52.99,27.812"]
"57ing/Sensitive-word" ["l"="52.776,27.148"]
"fwwdn/sensitive-stop-words" ["l"="52.814,27.153"]
"k5h9999/keywordfilter" ["l"="52.817,27.134"]
"cjh0613/tencent-sensitive-words" ["l"="52.786,27.122"]
"yuanjie-ai/ChineseSensitiveVocabulary" ["l"="52.704,27.155"]
"nyzhhd/keyword" ["l"="52.687,27.131"]
"adlered/DangerousSpamWords" ["l"="52.719,27.135"]
"andyzty/sensitivewd-filter" ["l"="52.792,27.159"]
"cjh0613/strict-sensitive-word" ["l"="52.735,27.108"]
"observerss/textfilter" ["l"="52.986,27.236"]
"elulis/sensitive-words" ["l"="52.837,27.174"]
"wanghaitao93/text_filter" ["l"="52.734,27.158"]
"rikeda71/TorchCRF" ["l"="53.594,27.62"]
"MarvinTeichmann/ConvCRF" ["l"="53.444,30.834"]
"SunYanCN/BAND" ["l"="53.588,27.296"]
"jingyihiter/mycail" ["l"="53.089,27.684"]
"HenryYuxuanWang/judicial_competition" ["l"="53.094,27.695"]
"shelleyHLX/cail" ["l"="53.082,27.67"]
"renjunxiang/Competition_CAIL" ["l"="53.102,27.664"]
"FengBli/CAIL2018-toy" ["l"="53.077,27.694"]
"ShannonAI/glyce" ["l"="53.587,27.439"]
"ShannonAI/ChineseBert" ["l"="53.654,27.426"]
"AidenHuen/FGN-NER" ["l"="53.703,27.539"]
"liuwei1206/CCW-NER" ["l"="53.665,27.53"]
"RowitZou/LGN" ["l"="53.651,27.515"]
"DianboWork/Graph4CNER" ["l"="53.639,27.509"]
"yuanxiaosc/BERT_Paper_Chinese_Translation" ["l"="53.544,27.256"]
"sohucampus2019/coreEntityEmotion_baseline" ["l"="54.144,27.543"]
"Chevalier1024/SOHU-baseline" ["l"="54.13,27.532"]
"ouwenjie03/sohucampus2019" ["l"="54.158,27.556"]
"lmhgithi/2019-sohu-finals" ["l"="54.185,27.561"]
"yuankeyi/2019-SOHU-Contest" ["l"="54.199,27.577"]
"LLouice/Sohu2019" ["l"="54.213,27.573"]
"lmhgithi/SOHU-baseline" ["l"="54.113,27.525"]
"Zessay/sohu_2019" ["l"="54.209,27.562"]
"sys1874/seq2seq-model-for-Sohu-2019" ["l"="54.23,27.577"]
"baidu/Dialogue" ["l"="56.736,29.109"]
"facebookresearch/DrQA" ["l"="54.617,26.505"]
"raynardj/yuan" ["l"="53.342,28.138"]
"LinDong123a/ancient-chinese-translator" ["l"="53.325,28.155"]
"1148270327/TextSummary" ["l"="53.442,26.925"]
"hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization" ["l"="53.461,26.905"]
"circlePi/Bert_Chinese_Ner_pytorch" ["l"="53.603,27.474"]
"liuyijiang1994/sohu_baseline" ["l"="53.637,27.524"]
"circlePi/knowledge-driven-dialogue-lic2019" ["l"="53.295,27.586"]
"llcing/BiLSTM-CRF-ChineseNER.pytorch" ["l"="53.689,27.553"]
"SmallVagetable/machine_learning_python" ["l"="53.663,27.238"]
"KangCai/Machine-Learning-Algorithm" ["l"="50.437,26.345"]
"Erikfather/Decision_tree-python" ["l"="33.464,29.821"]
"wrayzheng/gmm-em-clustering" ["l"="46.412,8.066"]
"ice-tong/ML_demo" ["l"="50.364,26.261"]
"zhengyima/mnist-classification" ["l"="50.108,27.053"]
"wzy6642/Machine-Learning-in-Action-Python3" ["l"="50.707,28.002"]
"Jack-Cherish/Machine-Learning" ["l"="50.83,28.058"]
"declare-lab/CASCADE" ["l"="52.349,27.217"]
"AniSkywalker/SarcasmDetection" ["l"="52.388,27.245"]
"NLPrinceton/SARC" ["l"="52.369,27.213"]
"silviu-oprea/iSarcasm" ["l"="52.317,27.199"]
"NIHRIO/IronyDetectionInTwitter" ["l"="52.327,27.222"]
"yanyiwu/cppjieba" ["l"="53.101,27.369"]
"yanyiwu/simhash" ["l"="-1.019,4.33"]
"thunlp/THULAC" ["l"="53.204,27.415"]
"yanyiwu/nodejieba" ["l"="-8.146,-34.952"]
"yanyiwu/gojieba" ["l"="3.382,-8.732"]
"leethomason/tinyxml2" ["l"="-19.722,-25.694"]
"yanyiwu/limonp" ["l"="-0.963,4.368"]
"Tencent/libco" ["l"="-19.79,-25.441"]
"blade-build/blade-build" ["l"="1.063,14.093"]
"sogou/srpc" ["l"="-18.319,-28.268"]
"chenshuo/muduo" ["l"="-18.187,-28.082"]
"allenai/allennlp-demo" ["l"="54.184,27.332"]
"allenai/allennlp-as-a-library-example" ["l"="54.161,27.296"]
"allenai/allennlp-guide" ["l"="54.194,27.357"]
"thunlp/CLAIM" ["l"="52.949,27.718"]
"china-ai-law-challenge/CAIL2020" ["l"="53.098,27.583"]
"myx666/LeCaRD" ["l"="52.949,27.756"]
"thunlp/CAIL2018" ["l"="53.05,27.684"]
"china-ai-law-challenge/CAIL2021" ["l"="53.001,27.685"]
"MorvanZhou/NLP-Tutorials" ["l"="53.543,27.143"]
"MorvanZhou/Tensorflow2-Tutorial" ["l"="50.901,27.562"]
"MorvanZhou/PyTorch-Tutorial" ["l"="50.67,28.425"]
"MorvanZhou/mnistGANs" ["l"="49.861,26.462"]
"wmathor/nlp-tutorial" ["l"="53.554,27.082"]
"MorvanZhou/Tensorflow-Tutorial" ["l"="50.52,28.354"]
"prometheusXN/LADAN" ["l"="53.004,27.728"]
"PolarisRisingWar/pytorch_ljp" ["l"="53.009,27.712"]
"brightmart/ai_law" ["l"="53.055,27.697"]
"THUNLP-AIPoet/Datasets" ["l"="53.498,28.028"]
"THUNLP-AIPoet/StylisticPoetry" ["l"="53.529,28.038"]
"THUNLP-AIPoet/WMPoetry" ["l"="53.509,28.05"]
"THUNLP-AIPoet/PaperList" ["l"="53.513,28.068"]
"THUNLP-AIPoet/BERT-CCPoem" ["l"="53.469,28.08"]
"THUNLP-AIPoet/MixPoet" ["l"="53.498,28.058"]
"THUNLP-AIPoet/CCPM" ["l"="53.537,28.057"]
"monk1337/Various-Attention-mechanisms" ["l"="54.325,27.276"]
"monk1337/Unbox" ["l"="54.443,27.294"]
"coughresearch/cough-classification" ["l"="54.493,27.29"]
"aespresso/chinese_sentiment" ["l"="50.073,22.128"]
"tanpero/JavaScript-Art-Tour" ["l"="53.418,28.264"]
"tanpero/Reservator" ["l"="53.404,28.203"]
"tanpero/Flaner" ["l"="53.424,28.288"]
"FanhuaandLuomu/BiLstm_CNN_CRF_CWS" ["l"="53.465,27.529"]
"EricLingRui/NLP-tools" ["l"="53.559,27.537"]
"FanhuaandLuomu/ParseLawDocuments" ["l"="53.145,27.702"]
"GlassyWing/bi-lstm-crf" ["l"="53.594,27.422"]
"shen1994/chinese_bilstm_cnn_crf" ["l"="53.54,27.53"]
"supercoderhawk/DNN_CWS" ["l"="53.534,27.61"]
"fudannlp16/CWS_Dict" ["l"="53.52,27.73"]
"achernodub/targer" ["l"="53.604,27.523"]
"ZephyrChenzf/NER-Sequence-labeling--Textcnn-bilstm-crf-pytorch" ["l"="53.627,27.515"]
"DA-southampton/ner" ["l"="53.631,27.304"]
"zhengyima/kg-baseline-pytorch" ["l"="55.582,26.595"]
"maxim5/cs224n-2017-winter" ["l"="53.778,27.17"]
"nishithbsk/tensorflow_tutorials" ["l"="53.773,27.154"]
"YerevaNN/DIIN-in-Keras" ["l"="53.068,27.481"]
"easonnie/multiNLI_encoder" ["l"="53.026,27.446"]
"yuhsinliu1993/Quora_QuestionPairs_DL" ["l"="52.997,27.485"]
"nelson-liu/paraphrase-id-tensorflow" ["l"="53.051,27.478"]
"castorini/castor" ["l"="52.909,27.447"]
"huanghuidmml/cail2019_track2" ["l"="53.146,27.603"]
"Executedone/CAIL2021_LAJS" ["l"="53.011,27.692"]
"hecongqing/CAIL2019" ["l"="53.051,27.631"]
"caldreaming/CAIL" ["l"="53.122,27.618"]
"kakaobrain/g2pm" ["l"="37.36,2.376"]
"speechio/chinese_text_normalization" ["l"="35.722,2.397"]
"GitYCC/g2pW" ["l"="38.45,2.056"]
"wenet-e2e/WeTextProcessing" ["l"="38.402,2.007"]
"liuhuanyong/MiningZhiDaoQACorpus" ["l"="49.113,23.71"]
"gumblex/zhconv" ["l"="53.267,27.5"]
"nkrnrnk/BertPunc" ["l"="35.817,2.632"]
"ZhuiyiTechnology/roformer-sim" ["l"="53.386,27.071"]
"speechio/BigCiDian" ["l"="35.733,2.365"]
"open-speech/speech-aligner" ["l"="37.336,2.384"]
"BangLiu/StoryForest" ["l"="53.267,27.532"]
"BangLiu/ConcepT" ["l"="53.33,27.557"]
"chongyangtao/MRFN" ["l"="56.81,29.131"]
"MarkWuNLP/MultiTurnResponseSelection" ["l"="56.685,29.089"]
"cooelf/DeepUtteranceAggregation" ["l"="56.752,29.09"]
"DataTerminatorX/Keyword-BERT" ["l"="53.326,27.218"]
"thu-coai/CrossWOZ" ["l"="56.679,29.158"]
"GaoPeng97/transformer-xl-chinese" ["l"="53.39,27.33"]
"massquantity/text-generation-using-keras" ["l"="53.583,27.743"]
"leido/char-rnn-cn" ["l"="53.648,27.827"]
"yanqiangmiffy/char-rnn-writer" ["l"="53.576,27.763"]
"liuaiting/Hip-Hop-Seq2Seq" ["l"="53.594,27.775"]
"Morizeyao/Decoders-Chinese-TF2.0" ["l"="53.337,27.286"]
"yangjianxin1/CPM" ["l"="53.292,27.119"]
"JunnYu/Paddle-AI-Writer" ["l"="45.932,-2.066"]
"qingkongzhiqian/GPT2-Summary" ["l"="53.418,27.048"]
"okcy1016/poem-onthefly" ["l"="53.424,28.068"]
"animalize/QuanTangshi" ["l"="53.464,28.036"]
"lixinsu/RCZoo" ["l"="54.666,26.48"]
"uzaymacar/attention-mechanisms" ["l"="54.002,27.25"]
"CyberZHG/keras-self-attention" ["l"="53.872,27.248"]
"moneyDboat/data_grand" ["l"="53.744,27.357"]
"hu-qi/hu-qi.github.io" ["l"="-52.875,-16.53"]
"hu-qi/myAwesome" ["l"="-52.875,-16.552"]
"MaiJiantian/blockchain-kotlin" ["l"="-51.938,-16.481"]
"HelipengTony/Zeo_UC" ["l"="53.852,27.349"]
"MaiJiantian/hyperledger" ["l"="-51.851,-16.49"]
"Iivre/kiana" ["l"="53.916,27.377"]
"hu-qi/GeekTimeAI" ["l"="53.843,27.363"]
"tsroten/pynlpir" ["l"="53.237,27.41"]
"haobibo/ICTCLAS_Python_Wrapper" ["l"="53.15,27.436"]
"ml-distribution/chinese-corpus" ["l"="53.373,27.532"]
"zhenlohuang/python-nlpir" ["l"="53.166,27.429"]
"2shou/TextGrocery" ["l"="53.319,27.431"]
"thunlp/NRE" ["l"="55.718,26.627"]
"scoder/acora" ["l"="53.923,27.343"]
"wharris/esmre" ["l"="53.91,27.316"]
"ztane/python-Levenshtein" ["l"="52.555,25.984"]
"xizhicode/ahocorasick-python" ["l"="53.858,27.306"]
"shangjingbo1226/AutoPhrase" ["l"="53.489,27.484"]
"viewlei/fsauor2018" ["l"="53.775,27.383"]
"Syd-Q/Text-Mining-Sentiment-Analysis-2020-" ["l"="53.811,27.393"]
"kpe/bert-for-tf2" ["l"="53.628,27.233"]
"kamalkraj/ALBERT-TF2.0" ["l"="53.722,27.216"]
"kamalkraj/BERT-NER-TF" ["l"="53.741,27.231"]
"google-research/albert" ["l"="53.337,27.179"]
"tensorflow/addons" ["l"="45.684,25.755"]
"CyberZHG/keras-transformer" ["l"="53.819,27.218"]
"THUNLP-MT/TG-Reading-List" ["l"="57.657,29.344"]
"soulbliss/NLP-conference-compendium" ["l"="53.564,27.052"]
"loujie0822/Pre-trained-Models" ["l"="53.496,27.163"]
"IndexFziQ/GNN4NLP-Papers" ["l"="52.811,16.011"]
"stanleylsx/text_classifier_tf2" ["l"="53.878,27.303"]
"stanleylsx/app_comments_spider" ["l"="53.927,27.294"]
"stanleylsx/entity_extractor_by_pointer" ["l"="53.907,27.296"]
"stanleylsx/bert_nlu_joint" ["l"="53.958,27.289"]
"sgrvinod/Deep-Tutorials-for-PyTorch" ["l"="48.628,31.81"]
"epwalsh/pytorch-crf" ["l"="53.659,27.661"]
"taoshen58/DiSAN" ["l"="53.479,28.768"]
"erickrf/multiffn-nli" ["l"="52.986,27.467"]
"shuohangwang/SeqMatchSeq" ["l"="54.694,26.552"]
"shuuki4/decomposable_attention" ["l"="52.965,27.484"]
"chaoming0625/WaiMaiOpinionMiner" ["l"="53.873,27.418"]
"YZHANG1270/Aspect-Based-Sentiment-Analysis" ["l"="54.154,28.183"]
"nlpjoe/CCF-BDCI-Automotive-Field-ASC-2018" ["l"="53.781,27.325"]
"nlpjoe/2018-CCL-UIIMCS" ["l"="53.805,27.347"]
"idorce/sentiment-analysis-ccf-bdci" ["l"="53.819,27.324"]
"312shan/Subject-and-Sentiment-Analysis" ["l"="53.846,27.333"]
"chantcalf/ccf-car" ["l"="53.79,27.34"]
"scruel/sentiment_analysis" ["l"="53.743,27.386"]
"PPshrimpGo/BDCI2018-ChinauUicom-1st-solution" ["l"="57.81,22.637"]
"Dikea/Dialog-System-with-Task-Retrieval-and-Seq2seq" ["l"="56.774,29.092"]
"zhanzecheng/SOHU_competition" ["l"="53.963,27.452"]
"zengbin93/jddc_solution_4th" ["l"="56.807,29.085"]
"moxiu2012/PJ_NLP" ["l"="53.809,27.131"]
"littletiger0712/text-classification-mutli-label" ["l"="53.814,27.087"]
"murray-z/Multi_Label_TextCNN" ["l"="53.802,27.101"]
"lushishuai/BERT-ROBERTA-pytorch-multi-label-classification" ["l"="53.787,27.09"]
"percent4/keras_bert_multi_label_cls" ["l"="53.811,27.073"]
"yangtaoxf/spider_lawyer_case_doc" ["l"="53.071,27.822"]
"foowaa/Chinese_from_dongxiexidian" ["l"="53.206,27.518"]
"zhangyics/Chinese-abbreviation-dataset" ["l"="53.424,27.494"]
"tinyfool/ChineseWithEnglish" ["l"="53.223,27.476"]
"practicingman/chinese_ulmfit" ["l"="50.007,22.206"]
"coderSkyChen/zhihu_kanshan_cup_2017" ["l"="53.634,27.412"]
"lancopku/SGM" ["l"="-51.531,-14.771"]
"observerss/ngender" ["l"="53.214,27.391"]
"Law-AI/DELSumm" ["l"="52.658,27.948"]
"Law-AI/semantic-segmentation" ["l"="52.658,27.936"]
"Law-AI/codscomad2023tutorial" ["l"="52.661,27.922"]
"SimmerChan/corpus" ["l"="53.537,27.241"]
"luge-ai/luge-ai" ["l"="53.601,27.265"]
"wdimmy/Automatic-Corpus-Generation" ["l"="53.72,27.466"]
"gitabtion/SoftMaskedBert-PyTorch" ["l"="53.736,27.491"]
"hiyoung123/YoungCorrector" ["l"="-55.41,-14.229"]
"jasonwei20/eda_nlp" ["l"="53.43,27.163"]
"google-research/uda" ["l"="51.287,30.273"]
"styfeng/DataAug4NLP" ["l"="52.673,25.732"]
"QData/TextAttack" ["l"="52.748,25.575"]
"houbb/pinyin" ["l"="53.505,27.628"]
"infinilabs/analysis-stconvert" ["l"="-3.842,8.65"]
"luhuiguo/chinese-utils" ["l"="-3.984,8.48"]
"tianlian0/duplicate-check-sample" ["l"="30.223,-28.736"]
"huaban/jieba-analysis" ["l"="-3.964,8.544"]
"inspirehep/magpie" ["l"="53.576,27.34"]
"chenzhi1992/Multi-Label-Text-Classification" ["l"="53.7,27.27"]
"lancopku/SU4MLC" ["l"="53.489,28.748"]
"yourh/AttentionXML" ["l"="51.701,30.961"]
"Vincent131499/Multi_Label_Classifier_finetune" ["l"="53.756,27.136"]
"hscspring/Multi-Label-Text-Classification-for-Chinese" ["l"="53.739,27.13"]
"brightmart/multi-label_classification" ["l"="53.313,27.519"]
"kk7nc/RMDL" ["l"="54.133,27.16"]
"kk7nc/HDLTex" ["l"="54.042,27.163"]
"lsdefine/attention-is-all-you-need-keras" ["l"="53.826,27.26"]
"kpot/keras-transformer" ["l"="53.815,27.242"]
"strongio/keras-bert" ["l"="53.839,27.319"]
"huggingface/hmtl" ["l"="52.951,25.564"]
"AtmaHou/Task-Oriented-Dialogue-Research-Progress-Survey" ["l"="56.669,29.18"]
"MachineLP/TextMatch" ["l"="53.441,27.259"]
"atnlp/torchtext-summary" ["l"="53.838,27.061"]
"hltcoe/golden-horse" ["l"="53.554,27.456"]
"Rowchen/Text-classifier" ["l"="53.797,27.362"]
"CortexFoundation/-" ["l"="53.826,27.386"]
"yuquanle/2018-daguan-competition-rank4" ["l"="53.778,27.364"]
"AbnerYang/2016CCF-SouGou" ["l"="58.054,22.676"]
"nzc/tencent-contest" ["l"="57.778,22.689"]
"PhantomGrapes/MultiDigraphNER" ["l"="53.692,27.577"]
"zerohd4869/Chinese-NER" ["l"="53.697,27.567"]
"allanj/ner_incomplete_annotation" ["l"="53.72,27.643"]
"allanj/neural-partialCRF" ["l"="53.709,27.656"]
"allanj/ner_with_dependency" ["l"="53.702,27.616"]
"ZhuiyiTechnology/AutoIE" ["l"="53.741,27.669"]
"leodotnet/neural-chinese-address-parsing" ["l"="53.329,27.779"]
"xueyouluo/ccks2021-track2-code" ["l"="53.38,27.804"]
"wodejiafeiyu/ccks2021-track3-top1" ["l"="53.35,27.819"]
"LeeSureman/Batch_Parallel_LatticeLSTM" ["l"="53.678,27.491"]
"beader/tianchi_nl2sql" ["l"="37.586,-1.552"]
"ZhuiyiTechnology/nl2sql_baseline" ["l"="37.587,-1.586"]
"eguilg/nl2sql" ["l"="37.597,-1.567"]
"CyberZHG/summary" ["l"="53.795,27.188"]
"yhcc/OntoNotes-5.0-NER" ["l"="53.608,27.549"]
"INK-USC/TriggerNER" ["l"="53.706,27.602"]
"yuchenlin/OntoNotes-5.0-NER-BIO" ["l"="53.553,27.61"]
"sutd-statnlp/statnlp-neural" ["l"="53.722,27.69"]
"juntaoy/biaffine-ner" ["l"="53.656,27.501"]
"bentrevett/pytorch-pos-tagging" ["l"="51.337,29.871"]
"ZihanWangKi/CrossWeigh" ["l"="53.69,27.627"]
"michaelliao/itranswarp" ["l"="53.231,28.247"]
"michaelliao/warpexchange" ["l"="53.196,28.334"]
"michaelliao/itranswarp.js" ["l"="48.302,23.707"]
"howl-anderson/four_corner_method" ["l"="53.469,27.612"]
"Edward1Chou/textClustering" ["l"="53.298,26.959"]
"RandyPen/TextCluster" ["l"="53.252,26.976"]
"arnab64/textclusteringDBSCAN" ["l"="53.083,17.037"]
"Edward1Chou/Textclassification" ["l"="53.381,26.901"]
"FesonX/cn-text-classifier" ["l"="53.237,27.002"]
"angeliababy/textcluster" ["l"="53.248,27.018"]
"yanqiangmiffy/text-cluster" ["l"="53.204,27.007"]
"HaowenHOU/single-pass-clustering-for-chinese-text" ["l"="53.218,26.995"]
"amazon-science/sccl" ["l"="53.235,26.898"]
"AIChallenger/AI_Challenger_2017" ["l"="48.492,31.846"]
"huangxiangzhou/NLPCC2016KBQA" ["l"="55.576,26.088"]
"jimmyyfeng/TD-LSTM" ["l"="54.275,28.227"]
"lvapeab/nmt-keras" ["l"="53.774,24.762"]
"farizrahman4u/seq2seq" ["l"="55.837,28.49"]
"Kyubyong/transformer" ["l"="53.233,25.678"]
"keras-team/keras-contrib" ["l"="53.878,27.193"]
"tkipf/keras-gcn" ["l"="52.848,15.958"]
"EOA-AILab/NER-Chinese" ["l"="53.627,27.323"]
"EOA-AILab/Seg_Pos" ["l"="53.686,27.303"]
"xiaofei05/Distant-Supervised-Chinese-Relation-Extraction" ["l"="55.617,26.607"]
"yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once" ["l"="55.613,26.584"]
"HKUST-KnowComp/DeepGraphCNNforTexts" ["l"="54.007,27.158"]
"morningmoni/HiLAP" ["l"="54.025,27.17"]
"rokid/ELMo-chinese" ["l"="53.872,27.51"]
"searobbersduck/ELMo_Chin" ["l"="53.883,27.489"]
"MenglinLu/Chinese-clinical-NER" ["l"="55.575,27.311"]
"quincyliang/nlp-public-dataset" ["l"="53.632,27.435"]
"yaleimeng/NER_corpus_chinese" ["l"="53.631,27.558"]
"benywon/en-ch-NMT" ["l"="53.622,25.579"]
"VectorFist/RNN-NMT" ["l"="53.776,25.551"]
"fastnlp/TENER" ["l"="53.629,27.451"]
"howl-anderson/tools_for_corpus_of_people_daily" ["l"="53.543,27.576"]
"AlanConstantine/PeoplesDailyNER" ["l"="53.74,27.62"]
"X-jun-0130/Easy_NER_biLSTM_CRF" ["l"="50.137,22.309"]
"CyberZHG/keras-multi-head" ["l"="53.852,27.232"]
"thushv89/attention_keras" ["l"="53.9,27.245"]
"Alibaba-NLP/HiAGM" ["l"="54.021,27.143"]
"ShimShim46/HFT-CNN" ["l"="53.988,27.148"]
"uhh-lt/BlurbGenreCollection-HMC" ["l"="53.992,27.164"]
"minqukanq/hierarchical-multi-label-text-classification" ["l"="54.035,27.11"]
"electron1c/HARNN-pytorch" ["l"="53.924,27.136"]
"wzh9969/contrastive-htc" ["l"="54.043,27.14"]
"accordproject/cicero-ui" ["l"="52.595,28.065"]
"accordproject/template-studio" ["l"="52.614,28.035"]
"accordproject/cicero-word-add-in-deprecated" ["l"="52.595,28.076"]
"LiangsLi/ChineseHomophones" ["l"="53.678,27.383"]
"ccheng16/correction" ["l"="53.588,27.459"]
"liuhuanyong/QueryCorrection" ["l"="53.58,27.582"]
"lambdal/bert" ["l"="53.713,27.188"]
"haoyuhu/bert-multi-gpu" ["l"="53.693,27.226"]
"guotong1988/BERT-pre-training" ["l"="53.644,27.178"]
"jannson/yaha" ["l"="53.34,27.588"]
"jannson/wordmaker" ["l"="53.322,27.627"]
"avplayer/wordmaker" ["l"="53.33,27.638"]
"GeorgeBourne/grid" ["l"="53.346,27.569"]
"yanghanxy/New-Word-Detection" ["l"="53.359,27.581"]
"chenbjin/ASExtractor" ["l"="-4.253,8.526"]
"AndrewZhe/lawyer-llama" ["l"="52.96,27.815"]
"zhihaiLLM/wisdomInterrogatory" ["l"="52.948,27.794"]
"siat-nlp/HanFei" ["l"="52.942,27.808"]
"crabcamp/lexrank" ["l"="52.304,27.335"]
"sildar/potara" ["l"="52.369,27.333"]
"liuhuanyong/KnowledgeGraphSlides" ["l"="54.165,28.938"]
"liuhuanyong/SequentialEventExtration" ["l"="54.151,28.908"]
"aditya1503/Siamese-LSTM" ["l"="52.994,27.423"]
"fionn-mac/Manhattan-LSTM" ["l"="52.969,27.398"]
"LuJunru/Sentences_Pair_Similarity_Calculation_Siamese_LSTM" ["l"="52.943,27.4"]
"THTBSE/siamese-lstm-network" ["l"="53.004,27.407"]
"jx00109/siamese-lstm-for-sentence-similarity" ["l"="52.959,27.413"]
"MahmoudWahdan/Siamese-Sentence-Similarity" ["l"="52.942,27.423"]
"eliorc/Medium" ["l"="53.013,27.461"]
"ilivans/tf-rnn-attention" ["l"="53.357,28.838"]
"luozhouyang/python-string-similarity" ["l"="53.493,27.221"]
"life4/textdistance" ["l"="52.623,25.845"]
"jamesturk/jellyfish" ["l"="52.505,25.991"]
"mammothb/symspellpy" ["l"="52.813,24.337"]
"tdebatty/java-string-similarity" ["l"="-2.274,12.045"]
"boudinfl/pke" ["l"="52.501,25.791"]
"rapidfuzz/RapidFuzz" ["l"="52.527,25.915"]
"epfml/sent2vec" ["l"="52.915,25.554"]
"GEM-benchmark/NL-Augmenter" ["l"="52.667,25.643"]
"aravindpai/How-to-build-own-text-summarizer-using-deep-learning" ["l"="58.428,29.221"]
"zhunzhong07/Random-Erasing" ["l"="56.034,32.765"]
"YC-wind/embedding_study" ["l"="53.92,27.52"]
"liuhuanyong/PoemMining" ["l"="53.439,27.934"]
"evilking-yh/PoemSpider" ["l"="53.445,27.962"]
"BangLiu/GIANT" ["l"="53.31,27.599"]
"alibaba-research/ConceptGraph" ["l"="53.296,27.612"]
"rockyzhengwu/FoolNLTK" ["l"="53.286,27.371"]
"facebookresearch/MUSE" ["l"="52.983,25.589"]
"ShenDezhou/CAIL" ["l"="53.07,27.632"]
"shelleyHLX/text-classification" ["l"="53.047,27.66"]
"ductri/reuters_loader" ["l"="54.018,27.124"]
"deepcs233/jieba_fast" ["l"="53.379,27.271"]
"ArthurRizar/tensorflow_ernie" ["l"="53.587,27.16"]
"yichen0831/opencc-python" ["l"="22.043,1.932"]
"jackeyGao/chinese-poetry" ["l"="53.459,28.006"]
"todototry/AncientChinesePoemsDB" ["l"="53.439,28.033"]
"justdark/pytorch-poetry-gen" ["l"="53.505,27.967"]
"pingpong-ai/xlnet-pytorch" ["l"="53.747,27.031"]
"asyml/texar-pytorch" ["l"="57.701,29.406"]
"mrqa/MRQA-Shared-Task-2019" ["l"="54.744,26.404"]
"renatoviolin/xlnet" ["l"="53.754,27.005"]
"graykode/gpt-2-Pytorch" ["l"="53.404,25.84"]
"dhlee347/pytorchic-bert" ["l"="-5.07,-23.152"]
"nyu-dl/bert-gen" ["l"="54.644,26.334"]
"graykode/ALBERT-Pytorch" ["l"="53.6,27.126"]
"real-brilliant/bert_chinese_pytorch" ["l"="53.777,27.127"]
"duanzhihua/bert_chinese_pytorch" ["l"="53.822,27.097"]
"duanzhihua/pytorch-pretrained-BERT" ["l"="53.836,27.087"]
"FakerYFX/Bert-Pytorch-Chinese-TextClassification" ["l"="53.869,27.023"]
"PengboLiu/Doc2Vec-Document-Similarity" ["l"="53.313,27.478"]
"downdawn/Similarity" ["l"="53.325,27.416"]
"GiantPeterZhou/Word2vec-with-Chinese-character" ["l"="53.296,27.488"]
"x-hacker/CNN_ChineseTextBinaryClassify" ["l"="53.369,26.851"]
"yaonphy/PoetryLibrary" ["l"="53.298,28.009"]
"dengxiuqi/ChineseLyrics" ["l"="49.039,23.692"]
"yht050511/gushiwen" ["l"="53.282,28.045"]
"yuxqiu/modern-poetry" ["l"="53.271,28.068"]
"ZeweiChu/PyTorch-Course" ["l"="53.588,27.105"]
"xavier-zy/Awesome-pytorch-list-CNVersion" ["l"="50.732,28.294"]
"Iallen520/lhy_DL_Hw" ["l"="50.958,28.063"]
"dragen1860/Deep-Learning-with-PyTorch-Tutorials" ["l"="50.771,28.307"]
"Sakura-gh/ML-notes" ["l"="50.948,28.039"]
"ShusenTang/Dive-into-DL-PyTorch" ["l"="50.849,28.247"]
"shuhuai007/Machine-Learning-Session" ["l"="50.799,28.048"]
"phychaos/transformer_crf" ["l"="53.771,27.789"]
"XingyanLee/Chinese-NER" ["l"="53.724,27.724"]
"songyingxin/BERT-pytorch" ["l"="53.618,27.09"]
"AnubhavGupta3377/Text-Classification-Models-Pytorch" ["l"="53.362,28.683"]
"FreedomIntelligence/TextClassificationBenchmark" ["l"="53.375,28.734"]
"songyingxin/python-algorithm" ["l"="53.618,27.066"]
"Lizhen0628/text_classification" ["l"="53.608,27.156"]
"SophonPlus/ChineseAnnotator" ["l"="53.583,27.643"]
"berniey/hanziconv" ["l"="53.179,27.704"]
"javayhu/haitang" ["l"="45.364,-0.691"]
"johnnyzhang1992/gushi_lite" ["l"="53.413,28.033"]
"rishabh-16/cs231n-2019-assignments" ["l"="48.634,28.586"]
"alongstar518/CS224NHomeworks" ["l"="53.706,26.97"]
"zepingyu0512/srnn" ["l"="53.93,27.155"]
"dinghanshen/SWEM" ["l"="53.482,28.73"]
"AlexYangLi/ccks2019_el" ["l"="55.643,26.455"]
"bojone/el-2019" ["l"="55.665,26.456"]
"WuHuRestaurant/xf_event_extraction2020Top1" ["l"="54.254,28.894"]
"zhihu/cuBERT" ["l"="53.325,27.081"]
"Tencent/TurboTransformers" ["l"="53.292,27.093"]
"bytedance/effective_transformer" ["l"="53.242,27.037"]
"autoliuweijie/FastBERT" ["l"="53.357,27.178"]
"bohanli/BERT-flow" ["l"="53.381,27.098"]
"qsyao/cudaBERT" ["l"="36.955,0.584"]
"LeeJuly30/BERTCpp" ["l"="53.169,26.944"]
"bytedance/lightseq" ["l"="53.268,27.061"]
"microsoft/fastformers" ["l"="52.612,25.524"]
"LiyuanLucasLiu/LD-Net" ["l"="53.472,27.756"]
"LiyuanLucasLiu/Torch-Scope" ["l"="53.474,27.807"]
"LiyuanLucasLiu/LightNER" ["l"="53.498,27.725"]
"LiyuanLucasLiu/Fast-Furious-Paper" ["l"="53.482,27.792"]
"LiyuanLucasLiu/Vanilla_NER" ["l"="53.496,27.763"]
"GentleZhu/ReMine" ["l"="53.485,27.774"]
"rainarch/DSNER" ["l"="53.614,27.592"]
"CPF-NLPR/AT4ChineseNER" ["l"="53.632,27.542"]
"Georgetown-IR-Lab/cedr" ["l"="54.482,25.796"]
"thunlp/OpenMatch" ["l"="54.467,25.755"]
"Albert-Ma/PROP" ["l"="54.446,25.735"]
"sebastian-hofstaetter/matchmaker" ["l"="54.498,25.747"]
"mahavivo/qianzhongshu" ["l"="-5.177,16.777"]
"CIRCSE/LT4HALA" ["l"="53.387,28.166"]
"jbarrow/allennlp_tutorial" ["l"="54.167,27.267"]
"michaelliao/learngit" ["l"="53.282,28.304"]
"michaelliao/learn-sql" ["l"="53.279,28.349"]
"michaelliao/learn-javascript" ["l"="-8.065,-34.57"]
"michaelliao/learn-java" ["l"="53.293,28.329"]
"michaelliao/springcloud" ["l"="53.286,28.396"]
"chriswangweb/chinese-poem-creater" ["l"="55.079,29.079"]
"jenojp/negspacy" ["l"="-33.44,16.268"]
"gandersen101/spaczz" ["l"="52.41,25.619"]
"msg-systems/holmes-extractor" ["l"="52.487,25.509"]
"openlegaldata/awesome-legal-data" ["l"="52.756,27.901"]
"explosion/spacy-transformers" ["l"="52.708,25.579"]
"explosion/projects" ["l"="52.602,25.571"]
"zoulala/New_words_find" ["l"="53.329,27.534"]
"whaleloops/interpoetry" ["l"="53.542,28.077"]
"tlwg/thpronun" ["l"="54.338,27.062"]
"tlwg/swath" ["l"="54.297,27.072"]
"wipen/bert_and_ernie" ["l"="53.649,27.135"]
"pengming617/text_classification" ["l"="53.262,27.479"]
"pengming617/LanguageModel" ["l"="53.25,27.478"]
"Menyoupingxiaoguo/AliyunSendMail" ["l"="53.251,27.489"]
"Menyoupingxiaoguo/MQTT" ["l"="53.242,27.488"]
"china-ai-law-challenge/CAIL2018" ["l"="53.035,27.695"]
"circlePi/2019Cail-A-Bert-Joint-Baseline-for-Machine-Comprehension" ["l"="53.157,27.616"]
"G-Research/ahocorasick_rs" ["l"="53.998,27.364"]
"liushaoweihua/keras-bert-ner" ["l"="53.79,27.294"]
"stephen-v/zh-segmentation-keras" ["l"="53.804,27.305"]
"littledeepthink/NER-in-Chinese-Text" ["l"="53.817,27.296"]
"kifish/NER-demo" ["l"="53.807,27.285"]
"cxy229/BDCI2019-SENTIMENT-CLASSIFICATION" ["l"="53.682,27.161"]
"sihuajian/cail2018" ["l"="53.078,27.706"]
"pmichel31415/are-16-heads-really-better-than-1" ["l"="52.912,27.228"]
"lena-voita/the-story-of-heads" ["l"="52.813,27.237"]
"jayavardhanr/End-to-end-Sequence-Labeling-via-Bi-directional-LSTM-CNNs-CRF-Tutorial" ["l"="53.663,27.607"]
"Cartus/AGGCN" ["l"="55.68,26.684"]
"microsoft/vert-papers" ["l"="53.74,27.561"]
"asappresearch/structshot" ["l"="53.775,27.617"]
"psunlpgroup/CONTaiNER" ["l"="53.798,27.632"]
"rtmaww/EntLM" ["l"="53.805,27.643"]
"kaisugi/entity-related-papers" ["l"="53.927,15.022"]
"few-shot-NER-benchmark/BaselineCode" ["l"="53.795,27.612"]
"LeePleased/NegSampling-NER" ["l"="53.773,27.572"]
"facebookresearch/SpanBERT" ["l"="53.381,27.397"]
"conll/reference-coreference-scorers" ["l"="53.269,27.674"]
"troublemaker-r/Chinese_Coreference_Resolution" ["l"="53.264,27.689"]
"vdobrovolskii/wl-coref" ["l"="53.241,27.695"]
"lxucs/coref-hoi" ["l"="53.251,27.677"]
"huggingface/neuralcoref" ["l"="52.83,25.597"]
"emorynlp/coref-hoi" ["l"="53.247,27.707"]
"ontonotes/conll-formatted-ontonotes-5.0" ["l"="53.364,27.618"]
"CyberZHG/keras-layer-normalization" ["l"="53.852,27.202"]
"CyberZHG/keras-gcn" ["l"="52.882,15.932"]
"lavis-nlp/spert" ["l"="55.571,26.646"]
"sighsmile/conlleval" ["l"="53.611,27.569"]
"pytorch/text" ["l"="53.07,25.646"]
"crownpku/Somiao-Pinyin" ["l"="52.847,27.337"]
"Kyubyong/neural_chinese_transliterator" ["l"="52.674,27.314"]
"Pelhans/ZASR_tensorflow" ["l"="35.522,2.147"]
"LiuRoy/Pinyin_Demo" ["l"="52.889,27.35"]
"letiantian/Pinyin2Hanzi" ["l"="53.035,27.357"]
"audier/DeepSpeechRecognition" ["l"="35.56,2.235"]
"shaypal5/skift" ["l"="53.98,27.522"]
"vishnumani2009/sklearn-fasttext" ["l"="54.025,27.54"]
"shaypal5/s3bp" ["l"="54.099,27.594"]
"wshuyi/demo-chinese-text-binary-classification-with-bert" ["l"="53.644,27.223"]
"wshuyi/demo_chinese_text_classification_bert_fastai" ["l"="53.727,27.198"]
"cliuxinxin/TX-WORD2VEC-SMALL" ["l"="53.563,27.182"]
"luopeixiang/textclf" ["l"="53.695,27.087"]
"xyionwu/ccks-2020-finance-transfer-ee-baseline" ["l"="54.301,28.95"]
"apachecn/stanford-cs234-notes-zh" ["l"="57.856,17.753"]
"CyberZHG/keras-transformer-xl" ["l"="53.866,27.175"]
"czhang99/SynonymNet" ["l"="53.702,27.48"]
"mickeysjm/SynSetMine-pytorch" ["l"="54.215,27.373"]
"HuHsinpang/Ontonotes5.0-pretreatment" ["l"="53.642,27.603"]
"mmichazzj/Semantic-Role-Labeling" ["l"="53.651,27.621"]
"clauseHQ/demo-clause-ibm-perishable-goods" ["l"="52.572,28.063"]
"ACL2020SpellGCN/SpellGCN" ["l"="53.712,27.456"]
"DaDaMrX/ReaLiSe" ["l"="53.74,27.442"]
"destwang/CTCResources" ["l"="53.706,27.429"]
"destwang/CTC2021" ["l"="53.743,27.456"]
"FDChongLi/TwoWaysToImproveCSC" ["l"="53.757,27.459"]
"sunnyqiny/Confusionset-guided-Pointer-Networks-for-Chinese-Spelling-Check" ["l"="53.76,27.474"]
"liushulinle/PLOME" ["l"="53.729,27.447"]
"gitabtion/BertBasedCorrectionModels" ["l"="53.739,27.467"]
"onebula/sighan_raw" ["l"="53.784,27.475"]
"nghuyong/Chinese-text-correction-papers" ["l"="53.758,27.44"]
"HillZhang1999/MuCGEC" ["l"="53.734,27.422"]
"destwang/DCN" ["l"="53.751,27.451"]
"zhaoyyoo/NLPCC2018_GEC" ["l"="53.797,27.486"]
"liushulinle/CRASpell" ["l"="53.774,27.471"]
"PengheLiu/Cn_Speck_Checker" ["l"="53.628,27.499"]
"blcuicall/NLPCC_2018_TASK2_GEC" ["l"="53.783,27.51"]
"zhangsonglei/ChineseSpellingCheck" ["l"="53.656,27.485"]
"cliang1453/BOND" ["l"="53.637,27.633"]
"lingluodlut/BioNER-Progress" ["l"="-33.391,16.385"]
"v-mipeng/LexiconNER" ["l"="53.683,27.602"]
"yuzhimanhua/Multi-BioNER" ["l"="-33.415,16.394"]
"liyibo/text-classification-demos" ["l"="53.5,27.009"]
"hichenway/CodeShare" ["l"="53.906,26.976"]
"lonePatient/BERT-chinese-text-classification-pytorch" ["l"="53.936,26.937"]
"yuquanle/funNLP" ["l"="53.756,26.88"]
"yuquanle/DeepLearning-500-questions" ["l"="53.737,26.879"]
"yuquanle/Algorithm_Interview_Notes-Chinese" ["l"="53.747,26.866"]
"Rowchen/Keyword-Extraction" ["l"="53.556,27.295"]
"dongrixinyu/chinese_keyphrase_extractor" ["l"="53.43,27.247"]
"Dikea/Shence-Cup-Keyword-Extractor" ["l"="53.543,27.291"]
"zeitiempo/ECSD" ["l"="53.442,27.53"]
"Codelegant92/SentimentAnalysis-chinese" ["l"="53.448,27.579"]
"fangj/rmrb" ["l"="53.893,27.603"]
"ppmm/get-people-daily" ["l"="53.93,27.628"]
"caspiankexin/people-daily-crawler-date" ["l"="53.955,27.65"]
"wonderfulsuccess/chinese_abstractive_corpus" ["l"="53.466,27.059"]
"bifeng/nlp_paper_notes" ["l"="53.52,26.952"]
"zhp510730568/bert-ad" ["l"="53.719,27.156"]
"caochangkui/miniprogram-project" ["l"="-2.753,-35.051"]
"szpnygo/wepy_ios_top" ["l"="-4.243,-36.732"]
"shangjingbo1226/PL2M" ["l"="53.466,27.78"]
"GlassyWing/transformer-word-segmenter" ["l"="53.649,27.471"]
"X-jun-0130/Easy_CWS_biLSTM_CRF" ["l"="50.153,22.318"]
"WhiteGive-Boy/CWS-Hmm_BiLSTM-CRF" ["l"="53.73,27.403"]
"yongzhuo/Macadam" ["l"="53.587,27.277"]
"liuhuanyong/HyponymyExtraction" ["l"="54.266,27.471"]
"liuhuanyong/BaikeKnowledgeSchema" ["l"="54.314,27.499"]
"facebookresearch/hypernymysuite" ["l"="54.351,27.417"]
"liuhuanyong/CognitiveInference" ["l"="54.101,27.476"]
"globality-corp/sklearn-hierarchical-classification" ["l"="54.111,27.136"]
"scikit-learn-contrib/hiclass" ["l"="54.189,27.124"]
"yanqiangmiffy/daguan" ["l"="53.869,27.345"]
"cjymz886/text_rnn_attention" ["l"="50.126,22.255"]
"bojone/accum_optimizer_for_keras" ["l"="53.895,27.14"]
"lspvic/CopyNet" ["l"="54.561,27.266"]
"MultiPath/CopyNet" ["l"="54.602,27.257"]
"adamklec/copynet" ["l"="54.464,27.274"]
"liuhuanyong/MedicalNamedEntityRecognition" ["l"="55.554,27.306"]
"F-debug/Medical-named-entity-recognition" ["l"="55.592,27.283"]
"evilbear/mgw-ner" ["l"="53.707,27.716"]
"adelevie/walverine" ["l"="52.627,27.897"]
"HKUST-KnowComp/Pronoun-Coref" ["l"="53.216,27.686"]
"HKUST-KnowComp/Pronoun-Coref-KG" ["l"="53.221,27.695"]
"MirunaPislar/Sarcasm-Detection" ["l"="52.355,27.235"]
"surajr/SarcasmDetection" ["l"="52.355,27.251"]
"guocheng18/BiLSTM-CRF" ["l"="53.724,27.594"]
"duanhongyi/genius" ["l"="53.352,27.715"]
"fangpenlin/loso" ["l"="53.347,27.77"]
"s-yata/darts-clone" ["l"="54.094,27.156"]
"rixwew/darts-clone-python" ["l"="54.145,27.141"]
"tlwg/libdatrie" ["l"="54.114,27.108"]
"s-yata/marisa-trie" ["l"="54.097,27.243"]
"lining0806/TextFilter" ["l"="52.897,27.107"]
"youyuge34/Poems_generator_Keras" ["l"="53.567,27.845"]
"ioiogoo/poetry_generator_Keras" ["l"="53.59,27.883"]
"hjptriplebee/Chinese_poem_generator" ["l"="53.527,27.838"]
"LandyGuo/WritePoems" ["l"="53.564,27.824"]
"norybaby/poet" ["l"="53.529,27.779"]
"kwsy/FictionAnalysis" ["l"="53.449,27.677"]
"songyouwei/fiction_generator" ["l"="53.513,27.677"]
"databinQ/paipaidai_comp" ["l"="53.187,27.476"]
"ami66/nlp-competitions-list-review" ["l"="53.214,27.466"]
"Lapis-Hong/atec-nlp" ["l"="-8.921,14.854"]
"codertimo/ELMO-tf" ["l"="53.975,27.548"]
"GeminiLn/EarningsCall_Dataset" ["l"="53.869,26.814"]
"Earnings-Call-Dataset/MAEC-A-Multimodal-Aligned-Earnings-Conference-Call-Dataset-for-Financial-Risk-Prediction" ["l"="53.892,26.818"]
"YangLinyi/HTML-Hierarchical-Transformer-based-Multi-task-Learning-for-Volatility-Prediction" ["l"="53.879,26.769"]
"cdubiel08/Earnings-Calls-NLP" ["l"="53.897,26.78"]
"psychbruce/ChineseNames" ["l"="53.026,27.379"]
"psychbruce/drawMap" ["l"="52.982,27.373"]
"liuhuanyong/ImportantEventExtractor" ["l"="54.117,28.928"]
"JackHCC/Chinese-Keyphrase-Extraction" ["l"="52.398,25.916"]
"chenaoxd/dtopwords" ["l"="53.31,27.561"]
"openlegaldata/legal-reference-extraction" ["l"="52.735,27.933"]
"cheniison/e2e-coref-pytorch" ["l"="53.208,27.655"]
"YangXuanyue/pytorch-e2e-coref" ["l"="53.259,27.66"]
"arthisuresh/coreference-resolution" ["l"="53.257,27.651"]
"swiseman/nn_coref" ["l"="53.204,27.638"]
"yuxiaowww/Big-data-analysis-and-processing" ["l"="54.419,27.679"]
"yuxiaowww/IJCAI-18-TIANCHI" ["l"="54.445,27.691"]
"BYVoid/ytenx" ["l"="20.864,2.535"]
"cjkvi/cjkvi-dict" ["l"="-36.018,18.887"]
"nk2028/tshet-uinh-autoderiver" ["l"="20.858,2.516"]
"KoichiYasuoka/UD-Kanbun" ["l"="53.407,28.165"]
"haoxizhong/pytorch-worker" ["l"="52.881,27.71"]
"thunlp/jec-qa" ["l"="52.85,27.714"]
"haoxizhong/law_pre" ["l"="52.83,27.711"]
"thunlp/QAJudge" ["l"="52.953,27.701"]
"zig-kwin-hu/Low-Resource-Name-Tagging" ["l"="53.676,27.664"]
"Adaxry/GCDT" ["l"="53.784,27.653"]
"cslydia/BiFlaG" ["l"="53.757,27.697"]
"fishjh2/merge_label" ["l"="53.743,27.695"]
"stanleylsx/image_classification" ["l"="53.946,27.291"]
"Dhanachandra/bert_crf" ["l"="53.794,27.582"]
"Clover27/ancient-Chinese-poem-generator" ["l"="53.496,27.933"]
"Tushar-N/attributes-as-operators" ["l"="52.677,27.754"]
"facebookresearch/taskmodularnets" ["l"="52.647,27.754"]
"Fritz449/ProtoNER" ["l"="53.771,27.632"]
"berlino/nest-trans-em18" ["l"="53.761,27.716"]
"sanmusunrise/ARNs" ["l"="53.723,27.704"]
"thecharm/boundary-aware-nested-ner" ["l"="53.758,27.664"]
"yahshibu/nested-ner-tacl2020-transformers" ["l"="53.763,27.686"]
"berlino/overlapping-ner-em18" ["l"="53.747,27.72"]
"WAPAY/EPM" ["l"="52.996,27.718"]
"jkszw2014/bert-kbqa-NLPCC2017" ["l"="55.554,26.096"]
"psnonis/FinBERT" ["l"="53.817,26.943"]
"Sudy/coling2018" ["l"="53.849,26.91"]
"shenweichen/coding_interviews" ["l"="49.899,23.153"]
"galsang/BIMPM-pytorch" ["l"="53.157,27.55"]
"ijinmao/BiMPM_keras" ["l"="53.082,27.52"]
"ShawnyXiao/2017-CCF-BDCI-AIJudge" ["l"="58.054,22.77"]
"lc222/text_classification_AI100" ["l"="53.405,29"]
"jiegzhan/multi-class-text-classification-cnn" ["l"="53.368,28.888"]
"zhanlaoban/NLP_PEMDC" ["l"="53.712,27.122"]
"zhanlaoban/NLP_competitions" ["l"="53.724,27.129"]
"zhanlaoban/CCF_BDCI_2019_datafountain350" ["l"="53.712,27.145"]
"koustuvsinha/hier-class" ["l"="54.082,27.173"]
"kongds/HBGL" ["l"="54.06,27.141"]
"HKUST-KnowComp/PathPredictionForTextClassification" ["l"="54.073,27.158"]
"cjymz886/text_bert_cnn" ["l"="53.53,26.881"]
"lena-voita/description-length-probing" ["l"="52.739,27.236"]
"yilinyang7/fairseq_multi_fix" ["l"="52.779,27.243"]
"lena-voita/good-translation-wrong-in-context" ["l"="53.709,24.904"]
"neulab/word-embeddings-for-nmt" ["l"="53.698,24.848"]
"clarkkev/attention-analysis" ["l"="23.564,14.904"]
"smoothnlp/DomainWords" ["l"="53.527,27.304"]
"wangbin4317/BDCI_Car_2018-master" ["l"="54.17,27.535"]
"xiaosongshine/transfromer_keras" ["l"="53.856,27.164"]
"CyberZHG/keras-gpt-2" ["l"="53.927,27.188"]
"CyberZHG/keras-pos-embd" ["l"="53.906,27.183"]
"AlexGidiotis/Document-Classifier-LSTM" ["l"="54.07,27.218"]
"nooralahzadeh/DSNER-pytorch" ["l"="53.634,27.655"]
"timvieira/arsenal" ["l"="-4.759,21.953"]
"lancifollia/crf" ["l"="53.346,27.749"]
"ne7ermore/yolo-v3" ["l"="53.4,27.863"]
"ne7ermore/gRBAC" ["l"="53.4,27.814"]
"nitishgupta/nmn-drop" ["l"="54.299,27.425"]
"allenai/allennlp-semparse" ["l"="54.245,27.397"]
"Spyder2017/Named-Entity-Recognition" ["l"="53.741,27.76"]
"mickeysjm/awesome-taxonomy" ["l"="54.306,27.372"]
"mickeysjm/TaxoExpan" ["l"="54.274,27.371"]
"mickeysjm/HiExpan" ["l"="54.284,27.357"]
"morningmoni/TaxoRL" ["l"="54.337,27.369"]
"IBM/gnn-taxo-construction" ["l"="54.389,27.371"]
"franticnerd/taxogen" ["l"="54.323,27.354"]
"sheryc/HEF" ["l"="54.327,27.379"]
"mickeysjm/SetRank" ["l"="54.263,27.366"]
"JieyuZ2/TMN" ["l"="54.334,27.391"]
"hankcs/multi-criteria-cws" ["l"="53.483,27.71"]
"FudanNLP/adversarial-multi-criteria-learning-for-CWS" ["l"="53.516,27.814"]
"jcyk/greedyCWS" ["l"="53.499,27.741"]
"SVAIGBA/WMSeg" ["l"="53.486,27.612"]
"jiesutd/RichWordSegmentor" ["l"="53.547,27.71"]
"ownthink/evaluation" ["l"="53.456,27.795"]
"FudanNLP/NLPCC-WordSeg-Weibo" ["l"="53.508,27.795"]
"jcyk/CWS" ["l"="53.525,27.76"]
"shanybar/event_entity_coref_ecb_plus" ["l"="53.247,27.773"]
"kiankd/events" ["l"="53.255,27.759"]
"ariecattan/coref" ["l"="53.234,27.784"]
"prafulla77/ACL-2018-Event-Coreference" ["l"="53.248,27.79"]
"aviclu/CDLM" ["l"="53.237,27.81"]
"taki0112/AdaBound-Tensorflow" ["l"="54.304,26.968"]
"chatopera/wikidata-corpus" ["l"="53.632,27.481"]
"xueyouluo/my_seq2seq" ["l"="54.507,27.245"]
"wangchuan2008888/daguan-2018-longtext-classify" ["l"="53.826,27.358"]
"Machine-Tom/bertsum-chinese-LAI" ["l"="53.496,26.852"]
"425776024/bertsum-chinese" ["l"="53.482,26.901"]
"psklight/keras_one_cycle_clr" ["l"="54.206,26.966"]
"bckenstler/CLR" ["l"="54.076,27.061"]
"shaoanlu/AdamW-and-SGDW" ["l"="54.25,26.967"]
"WittmannF/LRFinder" ["l"="54.219,26.978"]
"emrul/Learning-Rate" ["l"="54.189,26.958"]
"CyberZHG/keras-adabound" ["l"="54.321,26.989"]
"zedom1/XLNet_embbeding" ["l"="53.87,27.13"]
"CyberZHG/keras-lr-multiplier" ["l"="53.974,27.096"]
"wb14123/seq2seq-couplet" ["l"="-5.034,17.743"]
"v-zich/couplet-clean-dataset" ["l"="53.371,27.733"]
"liuslnlp/CoupletAI" ["l"="53.383,27.756"]
"liuhuanyong/MusicLyricChatbot" ["l"="49.068,23.7"]
"CLUEbenchmark/CLGE" ["l"="53.422,27.081"]
"thunlp/Chinese_Rumor_Dataset" ["l"="52.386,26.747"]
"panhaiqi/AncientPoetry" ["l"="53.359,27.889"]
"tongchangD/bert_for_corrector" ["l"="53.723,27.52"]
"apanly/proofreadv1" ["l"="53.649,27.527"]
"FreeFlyXiaoMa/pycorrector" ["l"="53.741,27.586"]
"fushengwuyu/chinese_spelling_correction" ["l"="53.74,27.508"]
"li-aolong/li-aolong.github.io" ["l"="53.79,27.543"]
"wanglke/Soft-Masked-BERT" ["l"="53.766,27.529"]
"zzy99/epidemic-sentence-pair" ["l"="53.476,27.272"]
"JonneryR/2019.1-TianChi-Jinnan" ["l"="53.913,27.392"]
"yongfengxuemei/NLP" ["l"="53.367,26.831"]
"berlino/SA-Sent" ["l"="53.761,27.749"]
"Ac-heron/luxun" ["l"="52.853,27.994"]
"Suffoquer-fang/LuXun-GPT" ["l"="52.864,27.937"]
"RingBDStack/KPGNN" ["l"="53.199,27.579"]
"mbs0221/Multitask-Learning" ["l"="58.412,23.074"]
"bekou/multihead_joint_entity_relation_extraction" ["l"="55.639,26.613"]
"hjzin/PolyphoneDisambiguation" ["l"="53.146,27.525"]
"letiantian/ChineseTone" ["l"="53.128,27.484"]
"gaoming95/Sohu" ["l"="54.256,27.582"]
"gbcolborne/hypernym_discovery" ["l"="54.375,27.442"]
"vered1986/UnsupervisedHypernymy" ["l"="54.384,27.429"]
"yajian/bert" ["l"="53.836,27.144"]
"maksna/bert-fine-tuning-for-chinese-multiclass-classification" ["l"="53.821,27.151"]
"BatsResearch/labelmodels" ["l"="53.055,27.764"]
"BatsResearch/alfred" ["l"="52.921,27.768"]
"zhpmatrix/cged_tf" ["l"="53.889,27.54"]
"LorraineZhou/NLP-CGED" ["l"="53.955,27.583"]
"imrdong/cged-crf" ["l"="53.849,27.505"]
"swjtu-gec/zlyang-master-dissertation-code" ["l"="53.834,27.528"]
"voidful/ChineseErrorDataset" ["l"="53.834,27.506"]
"BatsResearch/wiser" ["l"="53.316,27.73"]
"BatsResearch/safranchik-aaai20-code" ["l"="53.312,27.763"]
"BatsResearch/taglets" ["l"="52.979,27.751"]
"thespectrewithin/cross-lingual_NER" ["l"="53.712,27.75"]
"davidandym/multilingual-NER" ["l"="53.729,27.783"]
"ne7ermore/deeping-flow" ["l"="53.403,27.74"]
"zx576/rhyme" ["l"="53.622,27.817"]
"liuhuanyong/BaikeInfoExtraction" ["l"="54.337,27.513"]
"Disiok/poetry-seq2seq" ["l"="53.557,27.971"]
"titu1994/Snapshot-Ensembles" ["l"="54.155,26.965"]
"Genpeng/datagrand-text-classification" ["l"="53.937,27.362"]
"goxdve/BiLSTM-CRF" ["l"="53.696,27.51"]
"shushanxingzhe/transformers_ner" ["l"="53.608,27.665"]
"MrQianjinsi/poetry_analyzer" ["l"="53.607,27.859"]
"DevinZ1993/Chinese-Poetry-Generation" ["l"="53.549,27.922"]
"lucasjinreal/tensorflow_poems" ["l"="53.424,27.572"]
"mscarey/AuthoritySpoke" ["l"="52.653,27.908"]
"ciarrocki/LibreLaw" ["l"="52.64,27.924"]
"officeanddragons/awesome-lawtech" ["l"="52.534,27.904"]
"liuyukid/transformers-ner" ["l"="53.858,27.545"]
"CyberZHG/keras-adaptive-softmax" ["l"="53.95,27.131"]
"CyberZHG/keras-ordered-neurons" ["l"="52.881,25.304"]
"dayihengliu/a2m_chineseNMT" ["l"="53.329,28.22"]
"dicalab-scu/Research" ["l"="53.33,28.258"]
"zqhZY/semanaly" ["l"="53.055,27.383"]
"makeplanetoheaven/NlpModel" ["l"="53.146,27.082"]
"makeplanetoheaven/IntelligentService" ["l"="53.085,27.035"]
"openlegaldata/oldp" ["l"="52.748,27.957"]
"dot-legal/reference" ["l"="52.751,27.983"]
"taoyafan/jinnan" ["l"="53.946,27.396"]
"MsUberyl/BiLSTMwithBF" ["l"="53.948,27.407"]
"lytum/joint-intent-classification-and-slot-filling-based-on-BERT" ["l"="53.853,27.401"]
"jllan/sentence_similarity" ["l"="53.099,27.441"]
"lonePatient/ERNIE-text-classification-pytorch" ["l"="53.968,26.895"]
"Ushiao/wordiscovery" ["l"="53.319,27.579"]
"bojone/on-lstm" ["l"="52.912,25.318"]
"Menyoupingxiaoguo/AliyunRDS" ["l"="53.23,27.503"]
"Menyoupingxiaoguo/DDMessageCallback" ["l"="53.234,27.496"]
"God-Fish-X/Extractable-automatic-Text" ["l"="53.452,26.915"]
"LowinLi/Text-Summarizer-Pytorch-Chinese" ["l"="53.437,26.999"]
"lancopku/superAE" ["l"="58.548,29.076"]
"sys1874/chinese-textsum" ["l"="53.43,26.884"]
"dongjun-Lee/text-summarization-tensorflow" ["l"="58.441,29.133"]
"zingp/pointer-generator-pytorch" ["l"="53.458,26.865"]
"zpppy/seq2seq-chinese-textsum" ["l"="53.437,26.904"]
"davidawad/lobe" ["l"="52.477,27.899"]
"Aditya-shahh/Legal-AI" ["l"="52.447,27.899"]
"harvard-lil/cap-examples" ["l"="52.568,27.855"]
"paultopia/quantitative-methods-for-lawyers" ["l"="52.537,27.852"]
"fennuDetudou/BERT_implement" ["l"="54.036,27.483"]
"sanshibayuan/Sohu-2018-4th-place-solution" ["l"="54.002,27.464"]
"allenai/allennlp-hub" ["l"="54.205,27.262"]
"FNo0/2018-KUAISHOU" ["l"="54.385,27.638"]
"YangKing0834131/2018-User-purchase-forecast" ["l"="54.393,27.653"]
"hadifar/stc_clustering" ["l"="53.172,26.832"]
"rashadulrakib/short-text-clustering-enhancement" ["l"="53.187,26.827"]
"jacoxu/STC2" ["l"="53.159,26.809"]
"yinwenpeng/Attentive_Convolution" ["l"="53.199,27.601"]
"yinwenpeng/Answer_Selection" ["l"="53.213,27.588"]
"hanxiao/tf-attentive-conv" ["l"="53.184,27.62"]
"alexyoung/ircd.js" ["l"="52.274,27.724"]
"martynsmith/node-irc" ["l"="52.301,27.749"]
"yashbonde/freeciv-python" ["l"="54.012,27.574"]
"chris1869/freeciv-bot" ["l"="54.045,27.587"]
"Menyoupingxiaoguo/Kafka" ["l"="53.241,27.505"]
"ns-moosavi/coval" ["l"="53.118,27.725"]
"jkkummerfeld/berkeley-coreference-analyser" ["l"="53.125,27.701"]
"AlonEirew/extract-wec" ["l"="53.237,27.843"]
"AlonEirew/cross-doc-event-coref" ["l"="53.224,27.842"]
"FudanNLP/CWS_LSTM" ["l"="53.547,27.809"]
"noisemix/noisemix" ["l"="52.824,26.039"]
"pfnet-research/contextual_augmentation" ["l"="52.82,25.984"]
"Genpeng/play-with-leetcode" ["l"="53.961,27.367"]
"jiesutd/SubwordEncoding-CWS" ["l"="53.566,27.743"]
"bcol23/HyperIM" ["l"="54.053,27.182"]
"caitian521/QADomain" ["l"="53.136,27.625"]
"Tianxiaomo/cail2019_rc" ["l"="53.132,27.637"]
"SuMeng123/text_bert_cnn_rnn" ["l"="53.544,26.837"]
"PxYu/entity-expansion" ["l"="54.28,27.342"]
"yzhan238/CGExpan" ["l"="54.306,27.337"]
"yuzhimanhua/HiGitClass" ["l"="54.246,27.253"]
"liuhuanyong/Pinyin2Chinese" ["l"="52.919,27.368"]
"EvilPsyCHo/TaskBot" ["l"="52.865,27.377"]
"blcu-nlp/GEC-Reading-List" ["l"="53.822,27.517"]
"alphanlp/aphchatbot" ["l"="53.135,27.512"]
"CyberZHG/keras-gradient-accumulation" ["l"="54.002,27.102"]
"nusnlp/m2scorer" ["l"="52.82,24.439"]
"kimiyoung/transfer" ["l"="53.682,27.684"]
"jiachenwestlake/Cross-Domain_NER" ["l"="53.753,27.643"]
"jiachenwestlake/Multi-Cell_LSTM" ["l"="53.8,27.684"]
"Menyoupingxiaoguo/DDRobot" ["l"="53.223,27.517"]
"haorannlp/mix" ["l"="53.741,27.736"]
"tsterbak/keras_attention" ["l"="54.019,27.236"]
"GLambard/AdamW_Keras" ["l"="54.13,27.016"]
"OverLordGoldDragon/keras-adamw" ["l"="54.097,27.031"]
"IceFlameWorm/NLP_Datasets" ["l"="53.337,26.899"]
"iseesaw/FAQ-Semantic-Retrieval" ["l"="53.323,26.843"]
"pluto-junzeng/CNSD" ["l"="53.357,26.994"]
"EternalFeather/ESIM" ["l"="52.996,27.442"]
"sdnr1/EBIM-NLI" ["l"="53.04,27.417"]
"0x0cafe/SparkiForest" ["l"="53.062,27.019"]
"nickyringland/nested_named_entities" ["l"="53.791,27.746"]
"yahshibu/nested-ner-tacl2020" ["l"="53.79,27.725"]
"mmichelsonIF/hearst_patterns_python" ["l"="54.392,27.412"]
"nguyenkh/HyperVec" ["l"="54.399,27.43"]
"vered1986/HypeNET" ["l"="54.426,27.437"]
"PeaceWish/seq2seq_textsum" ["l"="53.434,26.86"]
"sml2h3/wenshu" ["l"="53.03,27.832"]
"altmanWang/IJCAI-18-CVR" ["l"="54.473,27.699"]
"yuxiaowww/User-purchase-forecast-in-consumer-finance-scenarios" ["l"="54.456,27.704"]
"YingyWang/NLPCC_2018_TASK2_GEC" ["l"="53.845,27.514"]
"ZooTopiaGG/wx-small-program" ["l"="53.092,27.874"]
"chuan6/structured-law-document" ["l"="53.104,27.837"]
"yanqiangmiffy/shence-cup" ["l"="53.601,27.295"]
"qili5/TruePIE" ["l"="53.434,27.776"]
"mjiang89/MetaPAD" ["l"="53.435,27.753"]
"freelawproject/citation-regexes" ["l"="52.636,27.86"]
"freelawproject/related-literature" ["l"="52.614,27.834"]
"substack/node-ssh" ["l"="52.437,27.728"]
"ChienDevIT/papirus-icon-theme" ["l"="52.365,27.745"]
"ChienDevIT/socket.io-client-cpp" ["l"="52.372,27.736"]
"ChienDevIT/javalin" ["l"="52.504,27.715"]
"ChienDevIT/pyright" ["l"="52.412,27.726"]
"ChienDevIT/micrometer" ["l"="52.361,27.731"]
"ChienDevIT/electron-vue" ["l"="52.515,27.723"]
"ChienDevIT/guava" ["l"="52.416,27.743"]
"ChienDevIT/fish-shell" ["l"="52.518,27.712"]
"ChienDevIT/DeepLearning-500-questions" ["l"="52.419,27.714"]
"zqhZY/short_text_cnn_cluster" ["l"="53.146,26.777"]
"CNMan/HYDZD" ["l"="53.206,27.793"]
"CNMan/XDHYDCD" ["l"="53.216,27.803"]
"circlePi/NER" ["l"="53.276,27.607"]
"Tianyijian/poetry" ["l"="53.288,27.996"]
"Tianyijian/GushiWenSpider" ["l"="53.259,28.009"]
"cslydia/Hire-NER" ["l"="53.9,27.635"]
"Adaxry/get_aligned_BERT_emb" ["l"="53.822,27.69"]
"cltl/EventCoreference" ["l"="53.258,27.784"]
"tucunchao/legalpapers" ["l"="52.802,27.712"]
"FNo0/Algorithm_Interview_Notes-Chinese" ["l"="54.345,27.616"]
"accordproject/markdown-editor" ["l"="52.578,28.081"]
"rover9632/atec_nlp" ["l"="-8.958,14.855"]
"zerohd4869/SLK-NER" ["l"="53.729,27.611"]
"sunwantong/Kuaishou-Active-User" ["l"="54.401,27.626"]
"TianWuYuJiangHenShou/Multi-label_Text_classification" ["l"="53.838,27.028"]
"FBI1314/textClassification" ["l"="53.852,27.005"]
"YinpeiDai/Seq2Seq-Models" ["l"="54.534,27.223"]
"airaria/text-summarization" ["l"="54.552,27.211"]
"jiangnanboy/python_search" ["l"="53.91,27.127"]
"jiangnanboy/text_grapher" ["l"="53.869,27.158"]
"accordproject/vscode-extension" ["l"="52.573,28.095"]
"accordproject/cicero-word-add-in" ["l"="52.589,28.095"]
"Moeinh77/jump-start-machine-learning" ["l"="53.452,26.606"]
"Moeinh77/Kaggle-House-Prices-Advanced-Regression-Techniques" ["l"="53.456,26.58"]
"Moeinh77/Chatbot-with-TensorFlow-and-Keras" ["l"="53.445,26.589"]
"DengBoCong/WelcomePage" ["l"="53.383,26.863"]
"DengBoCong/Algorithm" ["l"="53.391,26.853"]
"DengBoCong/aided_driving_app" ["l"="53.393,26.867"]
"allenai/bettermap" ["l"="54.408,27.498"]
"131250208/TPlinker-joint-extraction" ["l"="55.501,26.628"]
"weizhepei/CasRel" ["l"="55.568,26.617"]
"princeton-nlp/PURE" ["l"="55.527,26.641"]
"vdogmcgee/SimCSE-Chinese-Pytorch" ["l"="53.342,26.981"]
"zhoujx4/NLP-Series-sentence-embeddings" ["l"="53.354,26.975"]
"zhengyanzhao1997/NLP-model" ["l"="53.369,27.01"]
"zejunwang1/CSTS" ["l"="53.377,27.043"]
"bojone/SimCSE" ["l"="53.36,27.03"]
"pluto-junzeng/ChineseSquad" ["l"="54.565,26.613"]
"KwangKa/SIMCSE_unsup" ["l"="53.332,26.968"]
"xinyi-code/SimCSE-Pytorch" ["l"="53.343,26.961"]
"bojone/CoSENT" ["l"="53.376,27.025"]
"yangjianxin1/SimCSE" ["l"="53.353,26.954"]
"CLUEbenchmark/OCNLI" ["l"="53.316,26.879"]
"liuhuanyong/ChineseTextualInference" ["l"="53.339,26.867"]
"bojone/BERT-whitening" ["l"="53.364,27.064"]
"fighting41love/funNLP" ["l"="51.085,28.495"]
"chinabugotech/hutool" ["l"="-3.4,11.558"]
"sqshq/piggymetrics" ["l"="-4.285,15.345"]
"halo-dev/halo" ["l"="-4.148,15.155"]
"alibaba/arthas" ["l"="-3.143,11.692"]
"infinilabs/analysis-ik" ["l"="-3.269,11.644"]
"apache/dubbo" ["l"="-3.106,11.76"]
"microsoft/DeBERTa" ["l"="53.231,27.124"]
"facebookresearch/DPR" ["l"="54.497,25.597"]
"google-research/text-to-text-transfer-transformer" ["l"="53.106,25.819"]
"allenai/longformer" ["l"="53.252,27.091"]
"timoschick/pet" ["l"="50.044,38.101"]
"CarperAI/trlx" ["l"="37.133,-0.204"]
"beir-cellar/beir" ["l"="54.538,25.659"]
"facebookresearch/cc_net" ["l"="38.527,-0.625"]
"saiwaiyanyu/bi-lstm-crf-ner-tf2.0" ["l"="53.836,27.28"]
"lonePatient/daguan_2019_rank9" ["l"="53.94,27.601"]
"ShannonAI/dice_loss_for_NLP" ["l"="53.683,27.465"]
"fursovia/self-adj-dice" ["l"="53.716,27.501"]
"tricktreat/locate-and-label" ["l"="53.775,27.591"]
"modelscope/AdaSeq" ["l"="54.062,15.15"]
"syuoni/eznlp" ["l"="53.757,27.513"]
"DianboWork/SPN4RE" ["l"="55.536,26.614"]
"ljynlp/W2NER" ["l"="53.672,27.416"]
"taishan1994/BERT-BILSTM-CRF" ["l"="53.705,27.322"]
"XavierWww/Chinese-Medical-Entity-Recognition" ["l"="55.668,27.371"]
"taishan1994/pytorch_triple_extraction" ["l"="55.474,26.651"]
"jasoncao11/nlp-notebook" ["l"="53.523,27.04"]
"dengxiuqi/WeiboSentiment" ["l"="50.018,22.086"]
"hellonlp/sentiment-analysis" ["l"="50.015,22.132"]
"microsoft/DialoGPT" ["l"="56.65,29.104"]
"lemon234071/clean-dialog" ["l"="56.821,29.002"]
"thu-coai/EVA" ["l"="56.774,29.037"]
"thu-coai/KdConv" ["l"="56.726,29.085"]
"ymcui/MacBERT" ["l"="53.476,27.23"]
"DefuLi/Emotional-Analysis-Transformers2.0-Bert" ["l"="53.831,27.11"]
"DefuLi/Emotional-Analysis-of-Internet-News" ["l"="53.858,27.103"]
"DefuLi/Emotional-Analysis-Bert-As-Service" ["l"="53.878,27.087"]
"linhaow/TextClassification" ["l"="53.736,27.15"]
"lizhe2004/chatbot-list" ["l"="53.374,27.115"]
"chatopera/chatbot.catalog.customer-service" ["l"="53.396,27.034"]
"qhduan/ConversationalRobotDesign" ["l"="55.711,28.324"]
"airaria/TextPruner" ["l"="54.446,26.584"]
"lonePatient/CLUE_pytorch" ["l"="53.584,27.13"]
"lonePatient/NeZha_Chinese_PyTorch" ["l"="57.447,22.988"]
"suolyer/PyTorch_BERT_Biaffine_NER" ["l"="53.688,27.52"]
"amir-zeldes/biaffine-ner" ["l"="53.709,27.554"]
"yhcc/BARTNER" ["l"="53.743,27.523"]
"luanyi/DyGIE" ["l"="55.588,26.661"]
"thunlp/PromptPapers" ["l"="50.059,38.052"]
"MLNLP-World/AI-Paper-Collector" ["l"="-3.913,23.473"]
"lucidrains/reformer-pytorch" ["l"="48.824,33.956"]
"google-research/bigbird" ["l"="48.844,34.038"]
"nlpyang/PreSumm" ["l"="58.38,29.071"]
"marcotcr/checklist" ["l"="52.788,25.588"]
"920232796/bert_seq2seq" ["l"="53.472,27.122"]
"DA-southampton/Read_Bert_Code" ["l"="53.563,27.098"]
"Jacen789/relation-extraction" ["l"="55.538,26.628"]
"haiker2011/awesome-nlp-sentiment-analysis" ["l"="54.113,28.201"]
"murray-z/multi_label_classification" ["l"="53.778,27.068"]
"hellonlp/classifier_multi_label" ["l"="53.768,27.09"]
"moon-hotel/MachineLearningWithMe" ["l"="53.595,26.91"]
"moon-hotel/DeepLearningWithMe" ["l"="53.611,26.924"]
"moon-hotel/BertWithPretrained" ["l"="53.568,26.996"]
"moon-hotel/TransformerTranslation" ["l"="53.593,26.933"]
"Lynten/stanford-corenlp" ["l"="53.14,27.461"]
"twjiang/fact_triple_extraction" ["l"="54.171,28.969"]
"ttzHome/AnchiBERT" ["l"="53.343,28.158"]
"iris2hu/ancient_chinese_sense_annotation" ["l"="53.35,28.183"]
"jd-aig/nlp_baai" ["l"="53.644,27.354"]
"kitaharatomoyo/JDDC2020-3rd-SourceCode" ["l"="53.727,27.35"]
"ConvLab/ConvLab" ["l"="56.637,29.16"]
"tiantian91091317/OCR-Corrector" ["l"="46.489,6.085"]
"hiyoung123/SoftMaskedBert" ["l"="-55.259,-14.315"]
"grezbo/cn_zipcode" ["l"="53.445,28.135"]
"PaddlePaddle/Research" ["l"="53.352,27.199"]
"PaddlePaddle/Knover" ["l"="56.706,29.089"]
"lihanghang/NLP-Knowledge-Graph" ["l"="55.376,27.19"]
"malllabiisc/EmbedKGQA" ["l"="55.602,26.032"]
"wangle1218/KBQA-for-Diagnosis" ["l"="55.415,27.288"]
"BshoterJ/awesome-kgqa" ["l"="55.591,26.058"]
"husthuke/awesome-knowledge-graph" ["l"="55.315,27.186"]
"FreedomIntelligence/Medical_NLP" ["l"="55.456,27.384"]
"lonePatient/awesome-pretrained-chinese-nlp-models" ["l"="38.953,-2.143"]
"qianlima-lab/HiMatch" ["l"="54.07,27.125"]
"Rooooyy/HiTIN" ["l"="54.055,27.121"]
"dwadden/dygiepp" ["l"="54.243,28.83"]
"plkmo/BERT-Relation-Extraction" ["l"="55.619,26.674"]
"liwenzhu/corpusZh" ["l"="53.394,27.545"]
"jayparks/transformer" ["l"="53.357,25.66"]
"wangshusen/DeepLearning" ["l"="57.91,17.912"]
"illiterate/BertClassifier" ["l"="53.783,27.01"]
"taishan1994/pytorch_bert_chinese_text_classification" ["l"="53.848,26.952"]
"JackHCC/Chinese-Text-Classification-PyTorch" ["l"="53.676,27.066"]
"zejunwang1/bert_text_classification" ["l"="53.829,26.967"]
"taishan1994/pytorch_bert_multi_classification" ["l"="53.811,27.024"]
"secsilm/zi-dataset" ["l"="53.403,27.679"]
"Kybs0/HanziDictionary" ["l"="53.403,27.719"]
"thunlp/KRLPapers" ["l"="53.668,15.963"]
"LingDong-/cope" ["l"="53.536,28.156"]
"wenyan-lang/book" ["l"="53.577,28.242"]
"LingDong-/edges2calligraphy" ["l"="46.417,28.877"]
"LingDong-/rrpl" ["l"="-53.061,-11.863"]
"LingDong-/ci-ren" ["l"="53.568,28.067"]
"LingDong-/nonflowers" ["l"="37.608,25.045"]
"lzhang10/maxent" ["l"="53.407,27.784"]
"panyang/yuzhen_nlp_edu_tools" ["l"="53.411,27.842"]
"thu-ml/warplda" ["l"="57.762,23.562"]
"minixalpha/PyCWS" ["l"="53.413,27.82"]
"hankcs/MaxEnt" ["l"="53.391,27.837"]
"chosendai/MarkTool" ["l"="53.55,27.398"]
"universal-ie/UIE" ["l"="53.992,15.145"]
"yongzhuo/Pytorch-NLU" ["l"="53.706,27.164"]
"carrie0307/DL_EventExtractionPapers" ["l"="54.243,28.846"]
"xiaoqian19940510/Event-Extraction" ["l"="54.246,28.869"]
"cocacola-lab/ChatIE" ["l"="53.963,15.141"]
"DSXiangLi/ChineseNER" ["l"="53.659,27.347"]
"Marilynmontu/ChineseNER-pytorch" ["l"="53.727,27.332"]
"rojagtap/transformer-abstractive-summarization" ["l"="53.452,26.753"]
"aj-naik/Text-Summarization" ["l"="53.452,26.717"]
"Moeinh77/Transformers-for-abstractive-summarization" ["l"="53.452,26.668"]
"shibing624/text2vec" ["l"="39.014,-2.073"]
"DengBoCong/nlp-dialogue" ["l"="53.394,26.928"]
"mantasu/cs224n" ["l"="48.681,28.472"]
"yao8839836/kg-bert" ["l"="53.658,15.933"]
"allenai/kb" ["l"="-0.419,-42.221"]
"THU-KEG/KEPLER" ["l"="55.696,25.921"]
"txsun1997/CoLAKE" ["l"="55.686,25.892"]
"NVIDIA/FasterTransformer" ["l"="38.883,-0.641"]
"bytedance/ByteTransformer" ["l"="36.968,0.992"]
"alibaba/BladeDISC" ["l"="37.066,0.962"]
"microsoft/nnfusion" ["l"="37.073,0.947"]
"Tencent/Forward" ["l"="53.248,32.753"]
"NVIDIA-Merlin/HugeCTR" ["l"="58.146,23.558"]
"bytedance/matxscript" ["l"="37.032,1.037"]
"AlibabaResearch/flash-llm" ["l"="63.147,-2.017"]
"freelawproject/reporters-db" ["l"="52.613,27.884"]
"freelawproject/recap-chrome" ["l"="52.596,27.877"]
"freelawproject/courts-db" ["l"="52.614,27.898"]
"freelawproject/doctor" ["l"="52.633,27.886"]
"freelawproject/free.law" ["l"="52.597,27.865"]
"freelawproject/x-ray" ["l"="52.596,27.894"]
"freelawproject/seal-rookery" ["l"="52.582,27.873"]
"freelawproject/judge-pics" ["l"="52.583,27.887"]
"freelawproject/bigcases2" ["l"="52.585,27.847"]
"Feuoy/sentiment-analysis" ["l"="50.01,22.254"]
"xiaoqian19940510/text-classification-surveys" ["l"="50.535,2.748"]
"Renovamen/Text-Classification" ["l"="53.404,28.629"]
"hanzi-chai/hanzi-chai.github.io" ["l"="21.22,2.689"]
"hanzi-chai/data" ["l"="53.431,27.638"]
"tyistyler/Bert-Chinese-RE" ["l"="53.454,27.771"]
"tyistyler/Bert-Bi-LSTM-CRF" ["l"="53.459,27.748"]
"ydli-ai/CSL" ["l"="39.193,-2.26"]
"esbatmop/MNBVC" ["l"="38.987,-2.12"]
"Htring/BERT-BiLSTM-CRF_PL" ["l"="53.774,27.337"]
"DeShuiYu/nlp_from_dsy" ["l"="53.798,27.329"]
"hellohaptik/multi-task-NLP" ["l"="53.947,27.544"]
"hellohaptik/chatbot_ner" ["l"="54.049,27.62"]
"liuwei1206/LEBERT" ["l"="53.646,27.406"]
"suolyer/PyTorch_BERT_SimpleLexicon_NER" ["l"="53.688,27.425"]
"Vincent131499/TextClassifier_Transformer" ["l"="53.775,27.108"]
"PolarisRisingWar/text_summarization_chinese" ["l"="53.471,26.919"]
"maszhongming/MatchSum" ["l"="58.35,29.016"]
"yamonc/New-Pytorch-Chinese" ["l"="53.469,26.952"]
"qiufengyuyi/event_extraction" ["l"="54.277,28.876"]
"lxj5957/CLTS-Dataset" ["l"="53.495,26.804"]
"zhusleep/pytorch_chinese_lm_pretrain" ["l"="53.439,27.144"]
"nilboy/gaic_track3_pair_sim" ["l"="57.462,22.982"]
"HuiResearch/epidemicTextMatch" ["l"="57.487,22.98"]
"Macielyoung/sentence_representation_matching" ["l"="53.36,26.963"]
"autoliuweijie/BERT-whitening-pytorch" ["l"="53.345,27.039"]
"xuyige/BERT4doc-Classification" ["l"="53.515,27.164"]
"allenai/dont-stop-pretraining" ["l"="53.345,27.068"]
"yym6472/ConSERT" ["l"="53.336,27.054"]
"princeton-nlp/LM-BFF" ["l"="50.039,38.082"]
"yumeng5/LOTClass" ["l"="53.989,27.328"]
"liucongg/GPT2-NewsTitle" ["l"="53.407,27.079"]
"YunwenTechnology/Unilm" ["l"="53.428,27.063"]
"Chevalier1024/CCF-BDCI-ABSA" ["l"="53.751,27.095"]
"rebornZH/2019-CCF-BDCI-NLP" ["l"="53.736,27.112"]
"Makaixin/Correlation-between-requirements-and-achievements" ["l"="53.754,27.115"]
"finlay-liu/kaggle_public" ["l"="53.734,27.174"]
"dayeren/Kaggle_Competition_Treasure" ["l"="57.819,22.625"]
"hertz-pj/BDCI2019_Financial_Entities_Baseline" ["l"="53.852,27.076"]
"luoda888/HUAWEI-DIGIX-AgeGroup" ["l"="57.411,23.128"]
"bettenW/Tencent2019_Finals_Rank1st" ["l"="58.109,23.318"]
"chizhu/yiguan_sex_age_predict_1st_solution" ["l"="57.42,23.11"]
"WenRichard/DIAC2019-Adversarial-Attack-Share" ["l"="53.689,27.285"]
"anzhizh/2019-taida-jdata-top3" ["l"="57.385,23.194"]
"ZhuiyiTechnology/WoBERT" ["l"="53.41,27.116"]
"wuba/qa_match" ["l"="53.281,27.185"]
"wuba/dl_inference" ["l"="53.102,32.762"]
"bytedance/byteps" ["l"="58.028,23.559"]
"ModelTC/lightllm" ["l"="38.919,-0.53"]
"deepspeedai/Megatron-DeepSpeed" ["l"="38.765,-0.569"]
"NVIDIA/TransformerEngine" ["l"="38.884,-0.512"]
"NVIDIA/Megatron-LM" ["l"="38.862,-0.695"]
"Oneflow-Inc/oneflow" ["l"="51.362,2.685"]
"dcjones/hat-trie" ["l"="54.178,27.242"]
"pytries/hat-trie" ["l"="54.11,27.28"]
"malbrain/HatTrie" ["l"="54.239,27.222"]
"memect/hao" ["l"="53.227,27.434"]
"memect/kg-beijing" ["l"="55.336,27.131"]
"ahangchen/GDLnotes" ["l"="50.333,28.084"]
"licstar/compare" ["l"="53.18,25.249"]
"white127/QA-deep-learning" ["l"="55.836,28.388"]
"joanbruna/stat212b" ["l"="47.831,28.854"]
"JustFollowUs/Natural-Language-Processing" ["l"="53.203,27.345"]
"thunlp/KB2E" ["l"="53.639,15.97"]
"andrewt3000/DL4NLP" ["l"="52.942,25.617"]
"lipiji/App-DL" ["l"="58.414,29.172"]
"ExtremeMart/DeepLearningBook-CN" ["l"="50.233,28.109"]
"yanxionglu/text_pdf" ["l"="50.164,28.106"]
"LooperXX/LooperXX.github.io" ["l"="53.678,26.946"]
"PKU-TANGENT/nlp-tutorial" ["l"="38.603,-2.102"]
"Liquid-Legal-Institute/Legal-Ontologies" ["l"="52.775,27.907"]
"Liquid-Legal-Institute/Legal-LLMs-GPTs" ["l"="52.775,27.892"]
"CLUEbenchmark/FewCLUE" ["l"="53.381,27.058"]
"gaohongkui/GlobalPointer_pytorch" ["l"="55.429,26.62"]
"DA-southampton/TRM_tutorial" ["l"="53.632,26.99"]
"MuQiuJun-AI/bert4pytorch" ["l"="53.481,27.052"]
"SunnyGJing/t5-pegasus-chinese" ["l"="53.451,27.029"]
"ZhuiyiTechnology/t5-pegasus" ["l"="53.398,27.054"]
"fangpings/BERT-Transformer-for-Summarization" ["l"="58.483,29.094"]
"yzhangcs/parser" ["l"="52.898,25.162"]
"PaddlePaddle/TrustAI" ["l"="49.752,29.421"]
"unclegem/Sentiment-analysis" ["l"="53.79,27.143"]
"coughresearch/Cough-signal-processing" ["l"="54.53,27.286"]
"coughresearch/cough-research-papers" ["l"="54.531,27.301"]
"coughresearch/Cough-data" ["l"="54.552,27.296"]
"whgaara/pytorch-soft-masked-bert" ["l"="53.767,27.501"]
"xv44586/ccf_2020_qa_match" ["l"="57.437,22.944"]
"guoday/Tencent2020_Rank1st" ["l"="57.382,23.073"]
"salestock/fastText.py" ["l"="53.036,25.593"]
"2shou/python-libshorttext" ["l"="53.289,27.499"]
"cjlin1/liblinear" ["l"="57.916,23.445"]
"xlvector/learning-dl" ["l"="51.853,33.7"]
"dhammack/Word2VecExample" ["l"="53.217,25.308"]
"linanqiu/word2vec-sentiments" ["l"="53.07,25.399"]
"cosmichut/TextGrocery" ["l"="53.284,27.478"]
"ycjuan/kaggle-2014-criteo" ["l"="58.018,23.396"]
"tsroten/zhon" ["l"="35.919,2.375"]
"linzehui/mRASP" ["l"="53.997,24.726"]
"ishine/New-Pytorch-Chinese" ["l"="53.414,26.928"]
"mukut03/ESG-BERT" ["l"="53.919,26.714"]
"hannahawalsh/ESG_AI" ["l"="53.94,26.672"]
"edgetrader/esg-nlp" ["l"="53.96,26.663"]
"databricks-industry-solutions/esg-scoring" ["l"="53.94,26.656"]
"adamFinastra/ESGAI" ["l"="53.951,26.68"]
"ilastik/lazyflow" ["l"="52.524,27.687"]
"ilastik/volumina" ["l"="52.549,27.694"]
"rycolab/info-theoretic-probing" ["l"="52.705,27.233"]
"salgadev/medical-nlp" ["l"="52.525,27.926"]
"soukron/maragi" ["l"="52.596,27.909"]
"kavgan/clinical-concepts" ["l"="52.49,27.934"]
"realcactus/bert" ["l"="53.771,27.201"]
"galesour/BTM" ["l"="53.3,26.23"]
"wavewangyue/ner" ["l"="53.605,27.329"]
"xiaofei05/Chinese-NER" ["l"="53.741,27.293"]
"abhimishra91/transformers-tutorials" ["l"="53.325,27.014"]
"ThilinaRajapakse/simpletransformers" ["l"="52.79,25.725"]
"abhimishra91/insight" ["l"="42.498,-2.628"]
"patil-suraj/exploring-T5" ["l"="57.759,29.2"]
"ThilinaRajapakse/pytorch-transformers-classification" ["l"="53.368,28.619"]
"patil-suraj/question_generation" ["l"="57.345,29.309"]
"huggingface/notebooks" ["l"="38.631,-0.827"]
"allenai/naacl2021-longdoc-tutorial" ["l"="48.8,34.092"]
"google-research/multilingual-t5" ["l"="53.272,27.002"]
"nlp-with-transformers/notebooks" ["l"="47.75,26.429"]
"Shivampanwar/Bert-text-classification" ["l"="53.388,28.582"]
"HHousen/TransformerSum" ["l"="58.337,28.99"]
"liuhuanyong/DomainWordsDict" ["l"="53.422,27.384"]
"wzzzd/lm_ner" ["l"="53.829,27.344"]
"yangjianxin1/LEBERT-NER-Chinese" ["l"="53.702,27.405"]
"ChileWang0228/Deep-Learning-With-Python" ["l"="53.571,27.311"]
"pyunits/pyunit-address" ["l"="53.275,27.845"]
"zhuyandong/ChineseAddressDict" ["l"="53.301,27.842"]
"tidalmelon/addrseg" ["l"="53.295,27.774"]
"wangyulu1993/ranqi_word_split" ["l"="53.286,27.828"]
"JunnYu/RoFormer_pytorch" ["l"="53.413,27.063"]
"ShannonAI/service-streamer" ["l"="53.346,27.159"]
"layerism/TensorRT-Inference-Server-Tutorial" ["l"="53.163,32.707"]
"pytorch/serve" ["l"="45.342,25.702"]
"nghuyong/cscd-ns" ["l"="53.774,27.437"]
"yzhihao/MCSCSet" ["l"="53.807,27.473"]
"CLUEbenchmark/ELECTRA" ["l"="53.495,26.949"]
"wind91725/gpt2-ml-finetune-" ["l"="49.256,23.785"]
"idmu/java_study" ["l"="-52.902,-15.352"]
"mattzheng/py-kenlm-model" ["l"="53.292,27.52"]
"DenseAI/kaitian-xinci" ["l"="53.33,27.476"]
"LiyuanLucasLiu/Transformer-Clinic" ["l"="53.306,27.867"]
"layer6ai-labs/T-Fixup" ["l"="53.285,27.917"]
"namisan/exdeep-nmt" ["l"="53.303,27.903"]
"allenai/allennlp-models" ["l"="54.147,27.359"]
"allenai/SciREX" ["l"="-33.994,16.32"]
"MaksymDel/allennlp-light" ["l"="54.188,27.388"]
"miyyer/scpn" ["l"="57.541,29.326"]
"allenai/specter" ["l"="-34.042,16.28"]
"harvardnlp/pytorch-struct" ["l"="57.622,29.477"]
"Smerity/sha-rnn" ["l"="53.204,27.143"]
"yikangshen/Ordered-Neurons" ["l"="52.953,25.326"]
"salesforce/awd-lstm-lm" ["l"="53.085,25.565"]
"facebookresearch/unlikelihood_training" ["l"="53.41,26.083"]
"salesforce/ctrl" ["l"="53.262,25.783"]
"shibing624/companynameparser" ["l"="53.296,27.696"]
"YangLinyi/FinNLP-Progress" ["l"="50.552,2.707"]
"yuriak/DLQuant" ["l"="-9.636,14.752"]
"sudhamstarun/Understanding-Financial-Reports-using-Natural-Language-Processing" ["l"="53.771,26.985"]
"PKUJohnson/OpenData" ["l"="-8.581,14.747"]
"shun-zheng/Doc2EDAG" ["l"="54.259,28.827"]
"yya518/FinBERT" ["l"="53.795,26.925"]
"MengLingchao/Chinese_financial_sentiment_dictionary" ["l"="-8.974,14.917"]
"M0025/KnowledgeGraphOfA-shareCompanys" ["l"="55.506,27.108"]
"ProsusAI/finBERT" ["l"="-9,12.68"]
"LiyuanLucasLiu/ArabicNER" ["l"="53.716,27.674"]
"ymcui/PERT" ["l"="54.493,26.61"]
"ymcui/LERT" ["l"="54.452,26.605"]
"MarsRoger/albert_ner" ["l"="53.773,27.267"]
"jiangnanboy/albert_lstm_crf_ner" ["l"="53.77,27.251"]
"percent4/ALBERT_NER_KERAS" ["l"="53.788,27.275"]
"alibaba/EasyTransfer" ["l"="53.357,27.102"]
"alibaba/EasyNLP" ["l"="53.391,27.129"]
"alibaba/AliceMind" ["l"="53.359,27.127"]
"wenyan-lang/wyg" ["l"="53.573,28.269"]
"LingDong-/qiji-font" ["l"="20.786,1.364"]
"antfu/wenyan-lang-vscode" ["l"="53.607,28.283"]
"LingDong-/tk-fangsong-font" ["l"="53.574,28.293"]
"wenyan-lang/ide" ["l"="53.603,28.256"]
"ukoethe/vigra" ["l"="52.6,27.704"]
"ChienDevIT/dropwizard" ["l"="52.569,27.714"]
"ilastik/ilastik" ["l"="41.749,26.51"]
"opengm/opengm" ["l"="52.858,27.679"]
"ChienDevIT/docz" ["l"="52.573,27.695"]
"liuhuanyong/CommonSchemaKG" ["l"="54.182,27.504"]
"PengboLiu/NLP-Papers" ["l"="53.637,26.9"]
"JasonWade001/chtxt" ["l"="53.454,28.105"]
"ymcui/cmrc2019" ["l"="54.633,26.562"]
"thunderboom/text_similarity" ["l"="53.454,27.499"]
"daniellibin/nCoV-2019-sentence-similarity" ["l"="53.458,27.459"]
"MS20190155/Measuring-Corporate-Culture-Using-Machine-Learning" ["l"="-8.455,13.56"]
"lefterisloukas/edgar-crawler" ["l"="-9.414,12.734"]
"bkelly-lab/ReplicationCrisis" ["l"="-8.667,13.408"]
"AI4Finance-Foundation/FinNLP" ["l"="-8.965,12.538"]
"gtfintechlab/fomc-hawkish-dovish" ["l"="53.841,26.882"]
"abhijeet3922/finbert_embedding" ["l"="53.818,26.88"]
"yuanbit/FinBERT-QA" ["l"="53.834,26.841"]
"SALT-NLP/MixText" ["l"="53.931,27.313"]
"SanghunYun/UDA_pytorch" ["l"="51.338,30.34"]
"SALT-NLP/AAAI_CLF" ["l"="53.964,27.325"]
"johnson7788/MixText" ["l"="53.971,27.339"]
"crux82/ganbert" ["l"="54.029,27.339"]
"facebookresearch/SentAugment" ["l"="52.647,25.487"]
"SALT-NLP/LADA" ["l"="53.995,27.416"]
"princeton-nlp/EntityQuestions" ["l"="54.477,25.647"]
"tongchangD/bert_ner_for_corrector" ["l"="53.771,27.548"]
"taishan1994/pytorch_bert_chinese_spell_correction" ["l"="53.781,27.558"]
"Wingsdh/soft_masked_bert_reiteration" ["l"="53.764,27.558"]
"nltk/nltk_contrib" ["l"="53.125,27.126"]
"nltk/nltk_data" ["l"="53.275,27.202"]
"nltk/nltk_book" ["l"="53.139,27.108"]
"nltk/nltk.github.com" ["l"="53.167,27.13"]
"nltk/nltk_papers" ["l"="53.092,27.078"]
"nltk/nltk_teach" ["l"="53.084,27.066"]
"DengBoCong/prompt-tuning" ["l"="53.39,26.832"]
"BitVoyage/FastBERT" ["l"="53.343,27.087"]
"JetRunner/BERT-of-Theseus" ["l"="53.177,27.235"]
"castorini/DeeBERT" ["l"="37.215,-1.022"]
"xuanyuan14/CACM" ["l"="52.829,27.981"]
"CHIANGEL/Neural-Click-Model" ["l"="52.816,28.027"]
"xuanyuan14/THUIR_WSDM_Cup" ["l"="52.854,27.916"]
"thunlp/SelectiveMasking" ["l"="53.272,26.963"]
"bojone/Pattern-Exploiting-Training" ["l"="53.322,26.986"]
"VITA-Group/BERT-Tickets" ["l"="53.155,27.967"]
"huggingface/block_movement_pruning" ["l"="53.163,27.908"]
"prnake/CialloCorpus" ["l"="54.009,27.694"]
"jianzhu/dl-notes" ["l"="53.522,27.141"]
"panyang/AINLP-Resource" ["l"="53.57,26.927"]
"CastellanZhang/alphaFM" ["l"="58.052,23.402"]
"zhanggyb/nndl" ["l"="50.327,28.118"]
"imsheridan/DeepRec" ["l"="58.154,23.366"]
"Pysamlam/Tips-of-Feature-engineering" ["l"="50.62,27.968"]
"hscspring/All4NLP" ["l"="53.557,26.97"]
"yangxudong/deeplearning" ["l"="58.109,23.35"]
"teapot123/CoRel" ["l"="54.294,27.393"]
"yueyu1030/STEAM" ["l"="54.314,27.389"]
"Breakend/PileOfLaw" ["l"="52.785,27.881"]
"reglab/casehold" ["l"="52.753,27.839"]
"Jeryi-Sun/LLM-and-Law" ["l"="52.885,27.797"]
"maastrichtlawtech/gdsr" ["l"="52.813,27.883"]
"HoyTta0/KnowledgeDistillation" ["l"="53.476,26.987"]
"Lisennlp/TinyBert" ["l"="53.449,27.007"]
"murray-z/knowledge_distillation" ["l"="53.509,26.932"]
"kevinmtian/distill-bert" ["l"="53.472,27.004"]
"Hyfred/Pytroch_NER_tutorial" ["l"="53.652,27.745"]
"fastnlp/CPT" ["l"="53.502,27.149"]
"shawroad/NLP_pytorch_project" ["l"="53.529,27.201"]
"shawroad/CoSENT_Pytorch" ["l"="53.381,27.004"]
"zhuyuanxiang/NLTK-Python-CN" ["l"="53.587,26.872"]
"AtmaHou/MetaDialog" ["l"="56.886,29.419"]
"ha-lins/MetaLearning4NLP-Papers" ["l"="56.899,29.476"]
"harvard-lil/capstone" ["l"="52.61,27.855"]
"iiscleap/Coswara-Data" ["l"="54.946,27.298"]
"virufy/virufy-data" ["l"="54.975,27.313"]
"hernanmd/COVID-19-train-audio" ["l"="54.83,27.301"]
"virufy/virufy-covid" ["l"="54.978,27.296"]
"cam-mobsys/covid19-sounds-neurips" ["l"="54.949,27.319"]
"Saranga7/covid19--cough-diagnosis" ["l"="54.948,27.275"]
"walzter/COVID_Cough" ["l"="54.963,27.282"]
"stanfordmlgroup/selfsupervised-lungandheartsounds" ["l"="55.024,27.294"]
"JunnYu/WoBERT_pytorch" ["l"="53.424,27.018"]
"voldikss/vim-wenyan" ["l"="53.622,28.309"]
"wangjiezju1988/kgqa" ["l"="53.166,28.175"]
"hululuzhu/chinese-ai-writing-share" ["l"="53.179,28.146"]
"liushaoweihua/Keras-Bert-Kbqa" ["l"="53.856,27.287"]
"AI-YULU/KBQA-BERT" ["l"="53.904,27.279"]
"intersun/PKD-for-BERT-Model-Compression" ["l"="53.206,27.107"]
"CLUEbenchmark/DistilBert" ["l"="53.495,26.923"]
"tacchinotacchi/distil-bilstm" ["l"="53.5,26.971"]
"alexa/bort" ["l"="53.231,26.935"]
"yitu-opensource/ConvBert" ["l"="53.181,26.881"]
"monologg/DistilKoBERT" ["l"="-5.143,-23.098"]
"ROBINADC/BiGRU-CRF-with-Attention-for-NER" ["l"="53.872,27.328"]
"poonlap/linuxbook" ["l"="54.382,27.05"]
"xmxoxo/vector_server" ["l"="53.129,28.226"]
"xmxoxo/Tencent_ChineseEmbedding_Process" ["l"="53.118,28.241"]
"yangwei-nlp/bert_seq2seq" ["l"="53.411,26.804"]
"mryuan0428/Title_Generator_CN" ["l"="53.413,26.838"]
"Makaixin/similar-sentence-pairs-in-epidemic" ["l"="57.525,22.987"]
"WangShengguang/ccks-2020" ["l"="55.54,26.042"]
"BeHappyForMe/UniLM_summarization" ["l"="53.444,26.887"]
"hquzhuguofeng/New-Pointer-Generator-Networks-for-Summarization-Chinese" ["l"="53.459,26.892"]
"bxianghui/summarizer" ["l"="53.476,26.884"]
"zhangxu999/AutoSummarization" ["l"="53.455,26.848"]
"liucongg/UnilmChatchitRobot" ["l"="53.425,26.957"]
"YunwenTechnology/QueryGeneration" ["l"="53.428,26.938"]
"zhongerqiandan/pretrained-unilm-Chinese" ["l"="53.417,26.905"]
"percent4/UniLM_Chinese_DEMO" ["l"="53.411,26.892"]
"renmada/t5-pegasus-pytorch" ["l"="53.431,27.034"]
"geektcp/UeWoW" ["l"="-53.018,-11.856"]
"mislav/contacts" ["l"="-53.012,-11.848"]
"zhensherlock/intellij-platform-git-stats-plugin" ["l"="-53.001,-11.874"]
"liuhuanyong/EventKGNELL" ["l"="54.283,27.544"]
"liuhuanyong/DescriptionKBExtraction" ["l"="54.24,27.527"]
"Houlong66/lattice_lstm_with_pytorch" ["l"="53.73,27.537"]
"guitaowufeng/LR-CNN" ["l"="53.723,27.547"]
"bamtercelboo/LatticeLSTM" ["l"="53.716,27.535"]
"ThuYShao/BERT-PLI-IJCAI2020" ["l"="52.928,27.728"]
"Thesharing/LFESM" ["l"="52.897,27.724"]
"ruc-wjyu/IOT-Match" ["l"="52.938,27.741"]
"Wenorm/BERT-PLI" ["l"="52.919,27.743"]
"rohithreddy024/Text-Summarizer-Pytorch" ["l"="58.458,29.082"]
"neulab/Text-Summarization-Papers" ["l"="58.37,29.049"]
"neulab/nn4nlp-concepts" ["l"="53.121,25.504"]
"cambridgeltl/MTL-Bioinformatics-2016" ["l"="-33.409,16.369"]
"yuexiashanren/emotion-analysis-3" ["l"="53.9,27.071"]
"saurabhkulkarni77/DistillBERT" ["l"="53.526,26.806"]
"xiongma/roberta-wwm-base-distill" ["l"="53.536,26.769"]
"qiufengyuyi/bert-of-theseus-tf" ["l"="53.099,27.195"]
"ZubinGou/NER-BiLSTM-CRF-PyTorch" ["l"="53.754,27.603"]
"crux82/ganbert-pytorch" ["l"="54.077,27.352"]
"whgaara/tensorflow-faspell" ["l"="53.909,27.576"]
"whgaara/pytorch-transformerXL-LongTextClassify" ["l"="53.921,27.583"]
"whgaara/pytorch-roberta" ["l"="53.882,27.562"]
"amzn/amazon-weak-ner-needle" ["l"="53.656,27.689"]
"dmis-lab/GeNER" ["l"="54.563,25.526"]
"NorskRegnesentral/weak-supervision-for-NER" ["l"="53.585,27.696"]
"yumeng5/RoSTER" ["l"="53.814,27.53"]
"zwkatgithub/DSCAU" ["l"="53.739,27.599"]
"kangISU/Conf-MPU-DS-NER" ["l"="53.645,27.677"]
"bojone/dgcnn_for_reading_comprehension" ["l"="54.393,26.924"]
"natureLanguageQing/radam_dgcnn_for_reading_comprehension" ["l"="54.422,26.91"]
"AI4Finance-Foundation/Quantifying-ESG-Alpha-using-Scholar-Big-Data-ICAIF-2020" ["l"="53.953,26.634"]
"dainlp/acl2020-transition-discontinuous-ner" ["l"="53.805,27.552"]
"foxlf823/sodner" ["l"="53.802,27.567"]
"berlino/disco_em19" ["l"="53.846,27.573"]
"yumeng5/Spherical-Text-Embedding" ["l"="54.23,27.323"]
"monk1337/Mixclu" ["l"="54.498,27.303"]
"percent4/multi-label-classification-4-event-type" ["l"="53.878,26.995"]
"xuxingya/tf2crf" ["l"="53.929,27.271"]
"LieluoboAi/radish" ["l"="53.007,26.772"]
"ericperfect/libtorch_tokenizer" ["l"="53.061,26.831"]
"dhpollack/huggingface_libtorch" ["l"="53.027,26.795"]
"ruediger/libbert" ["l"="52.982,26.743"]
"SVAIGBA/TwASP" ["l"="53.493,27.664"]
"tyistyler/Bert-Chinese-NER" ["l"="53.465,27.71"]
"SVAIGBA/paper_list" ["l"="53.556,27.686"]
"cuhksz-nlp/McASP" ["l"="53.486,27.684"]
"Splinter0/CoughCNN" ["l"="54.552,27.311"]
"yuvalkirstain/s2e-coref" ["l"="53.213,27.716"]
"pitrack/incremental-coref" ["l"="53.228,27.705"]
"shtoshni/fast-coref" ["l"="53.211,27.734"]
"ShenDezhou/lawa" ["l"="53.115,27.763"]
"wangyizhen/lawdict" ["l"="53.101,27.797"]
"ckmarkoh/AcrosticPoem" ["l"="53.627,28.025"]
"XingxingZhang/rnnpg" ["l"="53.591,27.991"]
"Inndy/sligen" ["l"="53.658,28.053"]
"fumin/ntm" ["l"="46.004,27.821"]
"zheng-yuwei/multi-label-classification" ["l"="53.885,27.04"]
"hellonlp/classifier_multi_label_seq2seq_attention" ["l"="53.817,27.045"]
"hellonlp/classifier_multi_label_denses" ["l"="53.804,27.05"]
"grallage/ALBERT-BiLSTM-CRF-NER" ["l"="53.794,27.247"]
"percent4/ALBERT_4_Time_Recognition" ["l"="53.802,27.261"]
"bojone/t5_in_bert4keras" ["l"="53.345,27.023"]
"bzantium/pytorch-PKD-for-BERT-compression" ["l"="53.118,27.031"]
"intersun/CoDIR" ["l"="53.138,27.054"]
"xinydev/NovelConversationCorpus" ["l"="53.417,27.648"]
"pyunits/pyunit-ner" ["l"="53.264,27.872"]
"thuiar/OKD-Reading-List" ["l"="53.067,26.596"]
"thuiar/TEXTOIR" ["l"="53.065,26.573"]
"thuiar/DeepAligned-Clustering" ["l"="53.098,26.629"]
"thuiar/Adaptive-Decision-Boundary" ["l"="53.085,26.591"]
"thuiar/TEXTOIR-DEMO" ["l"="53.043,26.572"]
"thuiar/CDAC-plus" ["l"="53.098,26.604"]
"stanleylsx/entity_extractor" ["l"="53.955,27.304"]
"stanleylsx/uie_torch" ["l"="53.984,27.282"]
"xhw205/GPLinker_torch" ["l"="55.447,26.639"]
"gaozhanfire/CCF-BDCI2019_Entity_Discovery" ["l"="53.771,27.052"]
"417liangjunjun/financial_NER" ["l"="53.795,27.024"]
"ksboy/lic2020-ee" ["l"="53.807,27.009"]
"jiangnanboy/albert_re" ["l"="53.8,27.227"]
"caishiqing/joint-mrc" ["l"="53.053,27.586"]
"SunnyMarkLiu/les-military-mrc-rank7" ["l"="53.077,27.579"]
"hy-struggle/ccks_ner" ["l"="53.009,27.602"]
"LiyuanLucasLiu/RAdam" ["l"="51.031,30.058"]
"RCJansonVTFL/SeekingAlphaWebScrape" ["l"="53.936,26.78"]
"midas-research/m3a-acl" ["l"="53.914,26.799"]
"nilijing/Earnings_Call_Analyzed_By_NLP" ["l"="53.919,26.776"]
"propbank/propbank-release" ["l"="57.775,28.946"]
"Law-AI/automatic-charge-identification" ["l"="52.64,27.952"]
"anseljh/casebot" ["l"="52.571,27.906"]
"zingp/NLP" ["l"="53.458,26.82"]
"becxer/pointer-generator" ["l"="58.412,29.097"]
"997261095/point-generate" ["l"="53.459,26.781"]
"komiya-atsushi/darts-java" ["l"="54.005,27.023"]
"boudinfl/sume" ["l"="52.345,27.332"]
"UKPLab/acl2017-interactive_summarizer" ["l"="52.334,27.353"]
"LucasEstevam/CNNSummarizer" ["l"="52.356,27.352"]
"OpenCOVID19CoughCheck/CoughCheckApp" ["l"="54.704,27.305"]
"shresthagrawal/detect-now" ["l"="54.728,27.313"]
"jiacheng-ye/DocL-NER" ["l"="53.972,27.579"]
"jiacheng-ye/UANet" ["l"="54.007,27.504"]
"kyang888/unilm" ["l"="53.414,26.867"]
"Scagin/CCTC" ["l"="53.309,28.13"]
"Scagin/Classical2Modern" ["l"="53.293,28.153"]
"yinmingjun/TinyBERT" ["l"="53.465,26.939"]
"light8lee/2019-BDCI-FinancialEntityDiscovery" ["l"="54.441,29.105"]
"yuanbit/FinBERT-QA-notebooks" ["l"="53.842,26.803"]
"hallochen/Adversarial-Attack" ["l"="53.723,27.265"]
"CNMan/XDHYCD7th" ["l"="53.227,27.765"]
"bamboo512/ModernChineseDict" ["l"="53.21,27.819"]
"takushun-wu/WenJinMincho" ["l"="20.879,1.303"]
"lingluodlut/Att-ChemdNER" ["l"="-33.385,16.417"]
"acphile/MCCWS" ["l"="53.481,27.73"]
"smartschat/cort" ["l"="53.15,27.642"]
"gregdurrett/berkeley-entity" ["l"="-0.424,-42.024"]
"JohnGiorgi/DeCLUTR" ["l"="53.22,26.963"]
"UCSD-AI4H/CERT" ["l"="53.16,26.918"]
"yuzhimanhua/MAPLE" ["l"="54.289,27.232"]
"yuzhimanhua/FUTEX" ["l"="54.279,27.25"]
"1250658183/Chinese-Error-Checking" ["l"="53.91,27.504"]
"mnhng/HeadFilt" ["l"="53.86,27.494"]
"prometheusXN/D-LADAN" ["l"="52.992,27.749"]
"mly-nlp/LJP-MSJudge" ["l"="52.993,27.761"]
"Deriq-Qian-Dong/R-former" ["l"="52.97,27.908"]
"PolarisRisingWar/LJP_Collection" ["l"="52.99,27.733"]
"EliasCai/CCF-negative-entity" ["l"="53.914,27.011"]
"rjk-git/CCF_Negative_Financial_Information_and_Subject_Judgment" ["l"="53.936,26.997"]
"GeneZC/BERTFinanceNeg" ["l"="53.93,26.987"]
"CLUEbenchmark/LightLM" ["l"="53.512,26.9"]
"ufal/acl2019_nested_ner" ["l"="53.79,27.7"]
"frederick-wang/tongjiazi-resources" ["l"="53.381,28.195"]
"Jihuai-wpy/bert-ancient-chinese" ["l"="53.394,28.158"]
"hsc748NLP/sikufenci" ["l"="53.384,28.18"]
"TinkerMob/keras_albert_model" ["l"="53.876,27.277"]
"AidenHuen/Chinese-Character-Feature-Resource" ["l"="53.747,27.574"]
"LorrinWWW/Pyramid" ["l"="53.809,27.725"]
"blcuicall/GEC-Reading-List" ["l"="53.231,27.266"]
"blcuicall/YACLC" ["l"="53.347,27.296"]
"blcuicall/SimpDefiner" ["l"="53.234,27.256"]
"blcuicall/litmind-dictionary" ["l"="53.251,27.267"]
"SuffolkLITLab/docassemble-ALToolbox" ["l"="52.721,28.021"]
"SuffolkLITLab/docassemble-ALWeaver" ["l"="52.707,27.998"]
"UniversalDependencies/UD_Classical_Chinese-Kyoto" ["l"="53.428,28.203"]
"KoichiYasuoka/GuwenCOMBO" ["l"="53.427,28.19"]
"didichuxing/athena" ["l"="53.026,27.058"]
"LianjiaTech/athena" ["l"="53.01,27.047"]
"bojone/perturbed_masking" ["l"="53.963,27.42"]
"LividWo/Perturbed-Masking" ["l"="54.029,27.447"]
"CHIANGEL/GraphCM" ["l"="52.809,28.052"]
"yuzhimanhua/MATCH" ["l"="54.279,27.266"]
"yuzhimanhua/MICoL" ["l"="54.308,27.253"]
"hmllmh/RSTC" ["l"="53.174,26.795"]
"shtoshni/long-doc-coref" ["l"="53.233,27.718"]
"mathCrazyy/text_classify" ["l"="54.272,27.79"]
"lxj5957/CLTS-plus-Dataset" ["l"="53.499,26.769"]
"BatsResearch/efsl" ["l"="52.891,27.75"]
"thuiar/AWESOME-Dialogue" ["l"="53.104,26.58"]
"jiangnanboy/movie_kg" ["l"="53.923,27.119"]
"IBM/kbqa-relation-linking" ["l"="54.439,27.362"]
"IBM/Open-KG-canonicalization" ["l"="54.418,27.367"]
"xieranmaya/china-city-area-zip-data" ["l"="53.462,28.168"]
"bojone/P-tuning" ["l"="53.315,26.951"]
"sunyilgdx/NSP-BERT" ["l"="53.31,26.927"]
"lsq357/rank6" ["l"="53.451,27.514"]
"huminghao16/MTMSN" ["l"="54.829,26.446"]
"kaen2891/stethoscope-guided_supervised_contrastive_learning" ["l"="55.054,27.303"]
"thunlp/CorefBERT" ["l"="53.189,27.776"]
"julielin123/DIAC2019-DQD-Based-on-Adversarial-Attack" ["l"="53.73,27.277"]
"activemodest/DIAC" ["l"="53.766,27.282"]
"guoxw/wenshu-" ["l"="53.065,27.864"]
"bojone/memm" ["l"="54.357,26.944"]
"lacuna-technologies/clerkent" ["l"="52.508,27.903"]
"DotDoug/TreatiseAI" ["l"="52.493,27.912"]
"SuperMap/address-matching" ["l"="53.383,27.886"]
"qq1065507891/ChineseAddressNER" ["l"="53.377,27.855"]
"minqukanq/extract-video-keyframe" ["l"="54.067,27.098"]
"minqukanq/transformer-pytorch" ["l"="54.058,27.09"]
"SVAIGBA/CDKGen" ["l"="53.593,27.725"]
"Moeinh77/Image-Captioning-with-Beam-Search" ["l"="53.456,26.552"]
"NastaranBa/preprocessing-for-word-representation" ["l"="52.315,27.246"]
"NastaranBa/ACE-for-Sarcasm-Detection" ["l"="52.337,27.246"]
"dayihengliu/CRQDA" ["l"="53.335,28.286"]
"XiaoMi/MiNLP" ["l"="53.439,27.182"]
"PaddlePaddle/Paddle" ["l"="50.003,29.643"]
"ymcui/Chinese-LLaMA-Alpaca" ["l"="39.035,-1.985"]
"THUDM/ChatGLM2-6B" ["l"="39.075,-1.94"]
"THUDM/ChatGLM-6B" ["l"="39.109,-1.855"]
"chatchat-space/Langchain-Chatchat" ["l"="38.945,-1.875"]
"PaddlePaddle/PaddleHub" ["l"="50.082,29.627"]
"harvard-lil/olaw" ["l"="52.715,27.82"]
"open-compass/LawBench" ["l"="52.905,27.814"]
"Jeryi-Sun/SPACES-Pytorch" ["l"="53.374,26.989"]
"km1994/LLMs_interview_notes" ["l"="38.752,-2.117"]
"km1994/LLMsNineStoryDemonTower" ["l"="38.864,-2.073"]
"taishan1994/awesome-chinese-ner" ["l"="53.682,27.35"]
"taishan1994/BERT_MRC_NER_chinese" ["l"="53.839,27.393"]
"xhw205/GlobalPointer_torch" ["l"="55.403,26.616"]
"thunlp/OpenPrompt" ["l"="50.099,38.067"]
"jhpyle/docassemble" ["l"="52.702,27.958"]
"SuffolkLITLab/docassemble-AssemblyLine" ["l"="52.721,28.002"]
"GBLS/docassemble-MAEvictionDefense" ["l"="52.68,27.977"]
"Lexpedite/blawx" ["l"="52.701,28.02"]
"usgpo/uslm" ["l"="18.943,13.786"]
"ttamg/deploy-docassemble" ["l"="52.711,27.982"]
"radiant-law/docassemble-docusign" ["l"="52.694,27.984"]
"maastrichtlawtech/graphdoc" ["l"="52.675,27.992"]
"medelman17/blackstone-api" ["l"="52.681,28.013"]
"blcuicall/CCL2022-CLTC" ["l"="53.663,27.387"]
"xlxwalex/FCGEC" ["l"="53.747,27.403"]
"google-research/byt5" ["l"="53.191,26.927"]
"google-research/t5x" ["l"="37.139,-0.072"]
"facebookresearch/LASER" ["l"="52.968,25.635"]
"google-research/xtreme" ["l"="54.681,25.374"]
"google-research/language" ["l"="54.474,25.54"]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" ["l"="53.208,27.069"]
"coffee-and-fun/google-profanity-words" ["l"="40.311,34.452"]
"first20hours/google-10000-english" ["l"="52.084,25.602"]
"google/sentencepiece" ["l"="53.057,25.762"]
"PhoebusSi/Alpaca-CoT" ["l"="39.078,-2.202"]
"zacanger/profane-words" ["l"="40.347,34.462"]
"google/BIG-bench" ["l"="37.205,-0.127"]
"attardi/wikiextractor" ["l"="53.009,25.629"]
"allenai/RL4LMs" ["l"="37.17,-0.197"]
"toolgood/ToolGood.Words" ["l"="-32.991,0.693"]
"saffsd/langid.py" ["l"="53.719,24.682"]
"fake-useragent/fake-useragent" ["l"="48.559,23.377"]
"spetacular/bannedwords" ["l"="52.846,27.222"]
"shiyanhui/Young" ["l"="43.804,20.822"]
"jkiss/sensitive-words" ["l"="52.751,27.126"]
"importcjj/sensitive" ["l"="3.224,-8.666"]
"houbb/sensitive-word" ["l"="-3.407,11.498"]
"hailin0/sensitive-word-filter" ["l"="52.793,27.178"]
"konsheng/Sensitive-lexicon" ["l"="52.752,27.093"]
"fanhua1994/DzFilter" ["l"="0.391,12.264"]
"muyuuuu/E-commerce-Search-Recall" ["l"="53.35,26.804"]
"TsinghuaAI/CPM" ["l"="50.239,37.959"]
"TsinghuaAI/CPM-2-Pretrain" ["l"="50.265,37.945"]
"BAAI-WuDao/Chinese-Transformer-XL" ["l"="50.39,37.846"]
"OpenBMB/BMInf" ["l"="50.215,38"]
"deepdialog/CPM-LM-TF2" ["l"="53.276,27.034"]
"yangjianxin1/CLIP-Chinese" ["l"="50.06,30.469"]
"liucongg/NLPDataSet" ["l"="53.485,27.198"]
"clue-ai/PromptCLUE" ["l"="39.171,-2.222"]
"ZhuiyiTechnology/roformer" ["l"="53.418,27.095"]
"dropreg/R-Drop" ["l"="53.366,27.083"]
"ZhuiyiTechnology/roformer-v2" ["l"="53.393,26.994"]
"RUCAIBox/TextBox" ["l"="53.41,26.976"]
"RUCAIBox/CRSLab" ["l"="58.989,22.866"]
"xcfcode/Summarization-Papers" ["l"="58.368,29.02"]
"aHuiWang/plot_demo" ["l"="59.198,22.881"]
"allenai/natural-instructions" ["l"="37.211,-0.1"]
"OpenBioLink/ThoughtSource" ["l"="36.831,-2.48"]
"bigscience-workshop/promptsource" ["l"="37.178,-0.097"]
"shibing624/textgen" ["l"="39.062,-2.172"]
"Maluuba/nlg-eval" ["l"="58.307,29.128"]
"XiangLi1999/PrefixTuning" ["l"="50.086,38.092"]
"Shark-NLP/DiffuSeq" ["l"="46.015,30.706"]
"Chunngai/gec-papers" ["l"="53.93,27.454"]
"li-aolong/TemplateGEC" ["l"="53.853,27.431"]
"Wentao-Xu/HIST" ["l"="-8.538,15.699"]
"shawroad/Semantic-Textual-Similarity-Pytorch" ["l"="53.374,26.975"]
"jjljkjljk/SimCSE-Chinese" ["l"="53.343,26.928"]
"kongds/Prompt-BERT" ["l"="53.301,26.899"]
"leerumor/ai-study" ["l"="53.525,27.009"]
"microsoft/RespireNet" ["l"="55.08,27.275"]
"SJTU-YONGFU-RESEARCH-GRP/Lung-Sound-Classification-System-LungSys-I" ["l"="55.102,27.286"]
"ilyassmoummad/scl_icbhi2017" ["l"="55.054,27.275"]
"raymin0223/patch-mix_contrastive_learning" ["l"="55.051,27.287"]
"jm12138/CPM-Generate-Pytorch" ["l"="50.285,37.88"]
"bojone/CPM_LM_bert4keras" ["l"="53.276,26.982"]
"jm12138/CPM-Generate-Paddle" ["l"="35.58,1.867"]
"TsinghuaAI/CPM-KG" ["l"="50.265,37.88"]
"OFA-Sys/OFA" ["l"="49.008,30.282"]
"hemingkx/WordSeg" ["l"="53.812,27.369"]
"Dustyposa/rasa_ch_faq" ["l"="55.65,28.193"]
"GYee/CV_interviews_Q-A" ["l"="50.498,28.202"]
"donnyyou/cv-interview" ["l"="50.455,28.232"]
"DiHiera/Algorithm_Interview_Notes-Chinese-master" ["l"="53.56,26.885"]
"espectre/Algorithms_Engineer_Interview" ["l"="50.462,28.257"]
"zejunwang1/bert4vec" ["l"="53.387,26.968"]
"CLUEbenchmark/SimCLUE" ["l"="53.357,27.053"]
"THUDM/P-tuning" ["l"="50.066,38.077"]
"takawitter/trie4j" ["l"="54.016,27.045"]
"digitalstain/DoubleArrayTrie" ["l"="53.995,27.043"]
"hankcs/Viterbi" ["l"="54.048,27.016"]
"RoaringBitmap/RoaringBitmap" ["l"="-5.661,10.624"]
"NLPchina/Word2VEC_java" ["l"="-4.013,8.537"]
"hiroshi-manabe/darts-clone-java" ["l"="53.971,27.054"]
"Liquid-Legal-Institute/Meta-Lex" ["l"="52.768,27.924"]
"oasis-open/legaldocml-akomantoso" ["l"="52.778,27.952"]
"HIT-SCIR/plm-nlp-code" ["l"="53.553,27.029"]
"rrmenon10/ADAPET" ["l"="49.983,38.101"]
"huggingface/nn_pruning" ["l"="53.169,27.808"]
"WoosukKwon/retraining-free-pruning" ["l"="53.128,27.909"]
"princeton-nlp/CoFiPruning" ["l"="53.139,27.884"]
"yaozhewei/MLPruning" ["l"="53.163,27.839"]
"IntelLabs/Model-Compression-Research-Package" ["l"="53.17,27.87"]
"TheAtticusProject/maud" ["l"="52.675,27.829"]
"heiko-hotz/cuad-demo" ["l"="52.688,27.845"]
"hunter-meloche/REMO-langflow" ["l"="52.551,27.941"]
"jormeijer/HIAF" ["l"="52.6,27.922"]
"AurelienStebe/Gladdis" ["l"="52.619,27.912"]
"shweta-29/Companies_ESG_Scraper" ["l"="53.972,26.643"]
"jihyeonseong/ESG-AI-investment-by-streamlit" ["l"="53.954,26.652"]
"THUIR/LeCaRDv2" ["l"="52.904,27.8"]
"CSHaitao/SAILER" ["l"="52.902,27.835"]
"thunlp/LEVEN" ["l"="52.959,27.743"]
"china-ai-law-challenge/CAIL2022" ["l"="52.967,27.726"]
"THUlawtech/MUSER" ["l"="52.911,27.756"]
"CSHaitao/THUIR-COLIEE2023" ["l"="52.885,27.865"]
"XTUAI-LAW/LegalCaseKnowledgeGraph" ["l"="52.904,27.744"]
"liuhuanyong/ChineseDiachronicCorpus" ["l"="53.821,27.434"]
"Alalalalaki/Guide2EconRA" ["l"="43.166,26.526"]
"wyh267/ChineseWordSegmentation" ["l"="53.373,27.635"]
"hankcs/ID-CNN-CWS" ["l"="53.515,27.65"]
"zhangzhiqiangccm/NLP-project" ["l"="53.544,26.923"]
"Ricardokevins/Kevinpro-NLP-demo" ["l"="55.487,26.641"]
"shibing624/pytextclassifier" ["l"="53.622,27.011"]
"ls0f/phone" ["l"="-65.596,15.933"]
"peiss/chinese-name-score" ["l"="55.011,29.093"]
"JakLiao/GoodGoodName" ["l"="55.048,29.115"]
"lucidrains/rotary-embedding-torch" ["l"="46.375,30.416"]
"bojone/rerope" ["l"="38.066,-1.449"]
"jiahaozhenbang/SCOPE" ["l"="53.77,27.449"]
"aopolin-lv/ECSpell" ["l"="53.792,27.461"]
"geekjuruo/LEAD" ["l"="53.783,27.456"]
"HillZhang1999/NaSGEC" ["l"="53.773,27.422"]
"shibing624/nlp-tutorial" ["l"="53.594,27.007"]
"amazon-science/tanl" ["l"="53.919,27.661"]
"neulab/SpanNER" ["l"="53.845,27.601"]
"yhcc/CNN_Nested_NER" ["l"="53.819,27.579"]
"tricktreat/DiffusionNER" ["l"="53.811,27.591"]
"GanjinZero/Triaffine-nested-ner" ["l"="53.832,27.545"]
"xgeric/UCPhrase-exp" ["l"="54.211,27.221"]
"Nealcly/templateNER" ["l"="53.825,27.655"]
"chen700564/sdnet" ["l"="53.872,27.696"]
"tricktreat/PromptNER" ["l"="53.822,27.626"]
"xinyi-code/Chinese-Text-Classification" ["l"="53.663,26.967"]
"moon-hotel/TransformerClassification" ["l"="53.578,26.944"]
"moon-hotel/TransformerCouplet" ["l"="53.595,26.948"]
"CoderMusou/MECT4CNER" ["l"="53.722,27.489"]
"davidfan1224/CAIL2021_Multi-span_MRC" ["l"="52.967,27.679"]
"cloudyskyy/Guwen-UNILM" ["l"="53.403,28.095"]
"austinjhunt/msci_esg" ["l"="53.987,26.623"]
"Tongjilibo/bert4torch" ["l"="-53.101,-12.758"]
"xiangking/ark-nlp" ["l"="52.925,3.002"]
"Ugenteraan/Deep_Hierarchical_Classification" ["l"="54.128,27.082"]
"ankitdhall/learning_embeddings" ["l"="54.17,27.074"]
"lixuanhng/NLP_related_projects" ["l"="53.248,27.564"]
"weiyinfu/SiDaMingZhu" ["l"="53.471,28.13"]
"xp44mm/hanchuancaolu" ["l"="53.478,28.15"]
"mahavivo/core-books" ["l"="53.495,28.138"]
"bgc2017/chtxt" ["l"="53.486,28.121"]
"fanolabs/NID_ACLARR2022" ["l"="53.081,26.605"]
"thuiar/MIntRec" ["l"="53.033,26.535"]
"thuiar/MIntRec2.0" ["l"="53.043,26.523"]
"thuiar/UMC" ["l"="53.057,26.535"]
"zhang-yu-wei/MTP-CLNN" ["l"="53.084,26.573"]
"bojone/r-drop" ["l"="53.296,26.982"]
"shibing624/pke_zh" ["l"="53.669,26.919"]
"deepdialog/ZhKeyBERT" ["l"="53.695,26.857"]
"IBM/kgi-slot-filling" ["l"="54.464,27.379"]
"IBM/AITQA" ["l"="54.498,27.384"]
"zliucr/CrossNER" ["l"="56.872,29.292"]
"AtmaHou/FewShotTagging" ["l"="56.874,29.401"]
"humdingers/2020CAIL_LDLJ" ["l"="52.997,27.672"]
"AChen-qaq/ProML" ["l"="53.805,27.657"]
"lipiji/TtT" ["l"="53.774,27.462"]
"AutoTemp/Shallow-Aggressive-Decoding" ["l"="53.846,27.481"]
"Jun-jie-Huang/WhiteningBERT" ["l"="53.279,26.946"]
"UKPLab/pytorch-bertflow" ["l"="53.303,27.02"]
"hy-struggle/ccks-ee-subject" ["l"="54.312,28.96"]
"Yunfan-Li/Contrastive-Clustering" ["l"="53.028,29.69"]
"renmada/sentence_bert_chinese" ["l"="53.328,26.925"]
"wakafengfan/simcse-pytorch" ["l"="53.284,26.917"]
"gingasan/lemon" ["l"="53.788,27.447"]
"CoderMusou/NFLAT4CNER" ["l"="53.727,27.476"]
"cchen-reese/Boundary-Enhanced-NER" ["l"="53.785,27.524"]
"qukequke/bert-crf-token_classification_ner" ["l"="53.972,27.381"]
"wangwang110/CSC" ["l"="53.8,27.499"]
"HillZhang1999/CTC-Report" ["l"="53.805,27.456"]
"Akeepers/LEAR" ["l"="53.824,27.561"]
"thunlp/PL-Marker" ["l"="55.517,26.618"]
"ShannonAI/KNN-NER" ["l"="53.754,27.496"]
"JetRunner/MetaDistil" ["l"="53.058,26.982"]
"monk1337/Graph-Neural-networks-for-NLP" ["l"="54.474,27.301"]
"taishan1994/pytorch_bert_event_extraction" ["l"="54.339,28.896"]
"xueyouluo/Biaffine-BERT-NER" ["l"="53.577,27.716"]
"zqtan1024/sequence-to-set" ["l"="53.832,27.617"]
"tricktreat/piqn" ["l"="53.818,27.608"]
"XiPotatonium/pnr" ["l"="53.88,27.656"]
"taishan1994/sbert_text_similarity" ["l"="53.265,26.858"]
"yuzhimanhua/MotifClass" ["l"="54.301,27.241"]
"shangjingbo1226/SegPhrase" ["l"="53.452,27.66"]
"remenberl/SegPhrase-MultiLingual" ["l"="53.468,27.682"]
"INK-USC/ClusType" ["l"="53.442,27.735"]
"anirudyd/topmine" ["l"="53.472,27.645"]
"remenberl/Latent-Keyphrase-Inference" ["l"="53.462,27.735"]
"kno10/WikipediaEntities" ["l"="53.439,27.707"]
"YJiangcm/BMC" ["l"="37.32,-0.014"]
"Intel-bigdata/CRF-Spark" ["l"="57.752,23.315"]
"yandex/faster-rnnlm" ["l"="46.105,27.776"]
"phychaos/pycrfpp" ["l"="53.422,27.687"]
"moses-smt/giza-pp" ["l"="53.803,24.822"]
"425776024/LOTClass" ["l"="54.024,27.354"]
"dheeraj7596/ConWea" ["l"="54.05,27.356"]
"ZihanWangKi/XClass" ["l"="54.06,27.335"]
"parZival27/supervised-contrastive-learning-for-out-of-domain-detection" ["l"="53.115,26.613"]
"clinc/oos-eval" ["l"="56.597,29.254"]
"risshun/Chinese_Laws" ["l"="53.126,27.776"]
"GoThereGit/EvaHan" ["l"="53.335,28.195"]
"iris2hu/L2C-rater" ["l"="53.349,28.226"]
"yuanren88/python-" ["l"="53.451,27.716"]
"jacoxu/StackOverflow" ["l"="53.129,26.788"]
"pln-fing-udelar/pghumor" ["l"="52.439,27.27"]
"Orekhov/SentenceBreaking" ["l"="52.514,27.287"]
"bryant1410/trsh" ["l"="52.412,27.269"]
"JavaStudenttwo/BERT_MRC" ["l"="53.92,27.411"]
"RingBDStack/FinEvent" ["l"="53.176,27.601"]
"nikwilms/ESG-Score-Prediction-from-Sustainability-Reports" ["l"="53.992,26.647"]
"freefuiiismyname/ddz-ai" ["l"="53.106,28.262"]
"zhangzibin/char-rnn-chinese" ["l"="53.7,27.898"]
"hit-computer/char-rnn-tf" ["l"="53.693,27.879"]
"yuzhimanhua/PENNER" ["l"="54.263,27.281"]
"hamid-vakilzadeh/SeekingAlpha-Scraper" ["l"="53.955,26.765"]
"BatsResearch/zsl-kg" ["l"="52.877,27.755"]
"BatsResearch/ex2" ["l"="52.854,27.764"]
"BatsResearch/csp" ["l"="52.82,27.754"]
"teanalab/FieldedSDM" ["l"="52.337,27.293"]
"laura-dietz/tutorial-kb4ir" ["l"="52.304,27.29"]
"iai-group/DBpedia-Entity" ["l"="52.369,27.296"]
"monk1337/Awesome-Question-Answering" ["l"="54.528,27.32"]
"openlifescience-ai/ai-deadlines" ["l"="54.513,27.319"]
"xueyouluo/biaffine-bert-relation-extract" ["l"="53.604,27.744"]
"taishan1994/address_normalize" ["l"="53.271,27.8"]
"Happleasei/Chinese-Grammatical-error-diagnosis" ["l"="53.995,27.61"]
"CHIANGEL/Research-Paper-Note" ["l"="52.803,28.071"]
"ExplainableML/czsl" ["l"="52.749,27.758"]
"haoosz/ade-czsl" ["l"="52.78,27.761"]
"wqshmzh/CANet-CZSL" ["l"="52.755,27.773"]
"XDUxyLi/SCEN-master" ["l"="52.715,27.753"]
"yeliudev/ConsNet" ["l"="47.39,33.771"]
"bighuang624/Troika" ["l"="52.759,27.74"]
"zhaohengz/CAILA" ["l"="52.722,27.766"]
"cehinson/ERRANT_ZH" ["l"="53.897,27.515"]
"tricktreat/trimf" ["l"="53.839,27.633"]
"medelman17/socrates-api" ["l"="52.68,28.041"]
"alali3030/earnings_calls_NLP" ["l"="53.938,26.748"]
"DM2-ND/GenTaxo" ["l"="54.358,27.378"]
"Deriq-Qian-Dong/LGRe" ["l"="52.938,27.984"]
"anareta48/anareata48" ["l"="52.925,28.007"]
"Deriq-Qian-Dong/RLCF" ["l"="52.959,27.967"]
"CSQianDong/KERM" ["l"="52.955,27.946"]
"taishan1994/W2NER_predict" ["l"="53.774,27.406"]
"may-/cnn-re-tf" ["l"="55.804,26.612"]
"davidsbatista/text-classification" ["l"="53.656,27.441"]
"pangwong/pytorch-multi-label-classifier" ["l"="51.429,30.724"]
"jiegzhan/multi-class-text-classification-cnn-rnn" ["l"="53.364,28.863"]
"BartyzalRadek/Multi-label-Inception-net" ["l"="51.437,30.702"]
"dongxiexidian/Chinese" ["l"="53.369,27.456"]
"liuhuanyong/ChainKnowledgeGraph" ["l"="53.502,27.446"]
"heastup/Industrychain" ["l"="53.56,27.476"]
"liuhuanyong/PersonGraphDataSet" ["l"="51.993,15.466"]
"michaelliao/simple-match-engine" ["l"="53.157,28.362"]
"michaelliao/simple-trading-engine" ["l"="53.139,28.376"]
"explosion/spacy-models" ["l"="52.691,25.621"]
"nltk/nltk" ["l"="52.969,25.926"]
"hhsecond/corenlp_pywrap" ["l"="52.965,27.569"]
"stanfordnlp/python-stanford-corenlp" ["l"="53.082,27.562"]
"fssqawj/SentenceSim" ["l"="-1.07,4.477"]
"pytries/DAWG" ["l"="54.062,27.291"]
"pytries/DAWG-Python" ["l"="54.049,27.308"]
"bosnzt/wordscheck" ["l"="52.729,27.078"]
"qxchuckle/vsc-cec-ide" ["l"="-53.545,-19.637"]
"chason777777/mgck" ["l"="52.688,27.091"]
"Icelame-31/news_title_summary_generate" ["l"="53.478,26.967"]
"lansinuote/Huggingface_Toturials" ["l"="53.601,26.975"]
"lansinuote/Huggingface_Task" ["l"="53.637,26.853"]
"zyds/transformers-code" ["l"="38.762,-2.065"]
"lansinuote/NER_in_Chinese" ["l"="53.72,26.954"]
"lansinuote/Transformer_Example" ["l"="53.655,26.771"]
"liucongg/ChatGLM-Finetuning" ["l"="39.041,-2.095"]
"yuanzhoulvpi2017/zero_nlp" ["l"="39.013,-2.112"]
"datawhalechina/learn-nlp-with-transformers" ["l"="38.665,-2.063"]
"taishan1994/awesome-chinese-text-correction" ["l"="53.783,27.429"]
"masr2000/CLG-CGEC" ["l"="53.791,27.416"]
"Claude-Liu/ReLM" ["l"="53.821,27.46"]
"RanKKI/LawRefBook" ["l"="53,27.848"]
"lvwzhen/law-cn-ai" ["l"="43.75,1.069"]
"CSHaitao/LexiLaw" ["l"="52.945,27.832"]
"xloger/LawRefBookAndroid" ["l"="53.004,27.912"]
"ImCa0/just-laws" ["l"="-54.968,-13.678"]
"pengxiao-song/LaWGPT" ["l"="52.956,27.879"]
"PKU-YuanGroup/ChatLaw" ["l"="39.062,-1.903"]
"feeddd/feeds" ["l"="-44.17,11.84"]
"FudanDISC/DISC-LawLLM" ["l"="52.931,27.815"]
"metowolf/vCards" ["l"="-50.75,14.791"]
"YeDeming/THUTag" ["l"="52.466,27.245"]
"thunlp/THUTag" ["l"="52.484,27.274"]
"alibaba/EasyCV" ["l"="50.391,29.908"]
"IDEA-CCNL/Fengshenbang-LM" ["l"="39.065,-2.107"]
"allenai/tango" ["l"="54.213,27.407"]
"allenai/catwalk" ["l"="38.438,-0.679"]
"cjkvi/cjkvi-ids" ["l"="-36.052,18.874"]
"skishore/makemeahanzi" ["l"="-36.15,18.899"]
"mozillazg/phrase-pinyin-data" ["l"="53.221,27.543"]
"CLUEbenchmark/KgCLUE" ["l"="55.53,26.014"]
"HUSTAI/uie_pytorch" ["l"="54.016,15.13"]
"supabase-community/nextjs-openai-doc-search" ["l"="-3.217,-30.437"]
"CSHaitao/Awesome-LegalAI-Resources" ["l"="52.925,27.8"]
"lansinuote/NLP-Toturials" ["l"="53.649,26.796"]
"lansinuote/Diffusion_From_Scratch" ["l"="53.665,26.714"]
"lansinuote/Simple_Generative_in_PyTorch" ["l"="53.682,26.717"]
"cheng6076/SNLI-attention" ["l"="52.756,27.489"]
"iassael/torch-bnlstm" ["l"="45.949,27.667"]
"junfenglx/reasoning_attention" ["l"="52.821,27.474"]
"facebookarchive/torch-rnnlib" ["l"="45.978,27.674"]
"shyamupa/snli-entailment" ["l"="52.778,27.483"]
"xhw205/Efficient-GlobalPointer-torch" ["l"="55.419,26.64"]
"lining0806/TextMining" ["l"="53.009,27.107"]
"lining0806/TextClassify2" ["l"="52.966,27.078"]
"xlvchao/spartacus" ["l"="53.197,28.362"]
"TianRanPig/chinese_ner" ["l"="53.8,27.155"]
"yuanphoenix/Bert-BiLSTM-CRF" ["l"="53.845,27.13"]
"jjljkjljk/BERT-NER-Chinese" ["l"="53.781,27.034"]
"enze5088/WenTianSearch" ["l"="53.342,26.757"]
"zwkkk/wentian-rank2" ["l"="53.356,26.77"]
"bugensui/WenTianSearch" ["l"="53.337,26.775"]
"Langboat/Mengzi" ["l"="53.407,27.011"]
"Langboat/mengzi-zero-shot" ["l"="53.397,26.944"]
"OpenBMB/CPM-Live" ["l"="50.203,38.035"]
"wangyuxinwhy/uniem" ["l"="39.057,-2.129"]
"quqxui/Awesome-LLM4IE-Papers" ["l"="53.946,15.123"]
"taishan1994/BERT-Relation-Extraction" ["l"="55.461,26.671"]
"ShuheWang1998/GPT-NER" ["l"="53.995,15.078"]
"yaoxingcheng/TLM" ["l"="53.303,26.81"]
"ruisun1/Mask-Predict-main" ["l"="53.818,27.48"]
"pystruct/pyqpbo" ["l"="53.004,27.665"]
"y0ast/Variational-Autoencoder" ["l"="46.219,29.378"]
"VimWei/MdxSourceBuilder" ["l"="-36.021,18.257"]
"Litles/AutoMdxBuilder" ["l"="-36.024,18.276"]
"aliosmanulusoy/Probabilistic-Volumetric-3D-Reconstruction" ["l"="52.749,27.669"]
"dthuerck/mapmap_cpu" ["l"="52.78,27.684"]
"voidism/DiffCSE" ["l"="53.258,26.796"]
"Sense-GVT/SNCSE" ["l"="53.251,26.825"]
"perceptiveshawty/RankCSE" ["l"="53.264,26.776"]
"amzn/trans-encoder" ["l"="53.24,26.762"]
"Oreomeow/Law-Book" ["l"="53.084,27.8"]
"almondtools/stringbench" ["l"="54.077,26.898"]
"neesetifa/bert_classification" ["l"="53.069,28.593"]
"lxs602/Chinese-Mandarin-Dictionaries" ["l"="53.247,27.739"]
"chanind/hanzi-writer-data" ["l"="-36.153,18.93"]
"yihui/zdict.js" ["l"="53.261,27.718"]
"theajack/cnchar" ["l"="-55.059,-14.225"]
"Jason3900/corenlp_client" ["l"="52.835,24.541"]
"blcuicall/cged_datasets" ["l"="53.62,27.373"]
"blcuicall/OMGEval" ["l"="53.199,27.242"]
"blcuicall/BLCU-HPC" ["l"="53.245,27.26"]
"kongds/scaling_sentemb" ["l"="53.288,26.785"]
"thunlp/KnowledgeablePromptTuning" ["l"="50.048,37.961"]
"YJiangcm/PromCSE" ["l"="53.238,26.808"]
"caskcsg/sentemb" ["l"="53.291,26.868"]
"coastalcph/zeroshot_lexglue" ["l"="52.739,27.914"]
"candlewill/Chinsese_word_vectors" ["l"="53.339,27.615"]
"to-shimo/chinese-word2vec" ["l"="53.366,27.556"]
"HillZhang1999/SynGEC" ["l"="53.804,27.422"]
"xiangking/PyTorch_CoSENT" ["l"="53.376,26.957"]
"entropy2333/awesome-multi-label-paper-list" ["l"="54.143,27.106"]
"bojone/CLUE-bert4keras" ["l"="54.437,26.688"]
"ZhuiyiTechnology/GAU-alpha" ["l"="53.371,26.925"]
"qiufengyuyi/lear_ner_extraction" ["l"="53.875,27.584"]
"CASIA-IVA-Lab/FLAP" ["l"="53.115,27.968"]
"QingruZhang/PLATON" ["l"="53.128,27.946"]
"kssteven418/LTP" ["l"="53.092,27.959"]
"friendshipkim/neuron-merging" ["l"="53.105,27.939"]
"tianyic/only_train_once_personal_footprint" ["l"="41.636,2.2"]
"yumeng5/TopClus" ["l"="54.211,27.304"]
"AI-confused/CCL2022_CGED-8_Top1_project" ["l"="53.79,27.398"]
"wzh9969/HPT" ["l"="54.09,27.122"]
"1KE-JI/HierVerb" ["l"="54.082,27.135"]
"xuanyuan14/ARES" ["l"="52.871,27.893"]
"oneal2000/Wikiformer" ["l"="52.864,27.921"]
"CSHaitao/JTR" ["l"="52.872,27.881"]
"qukequke/bert_classfication" ["l"="54.046,27.398"]
"hasibi/EntityLinkingInQueries-ELQ" ["l"="52.405,27.301"]
"hasibi/EntityLinkingInQueries-Methods" ["l"="52.385,27.311"]
"hasibi/TAGME-Reproducibility" ["l"="52.422,27.299"]
"hasibi/EntityLinkingRetrieval-ELR" ["l"="52.463,27.296"]
"cambridgeltl/mirror-bert" ["l"="53.221,26.713"]
"lunzima/profanities.txt" ["l"="52.651,27.124"]
"bryan31/liteBanner" ["l"="52.622,27.115"]
"YJiangcm/improved_DeepLOB" ["l"="37.323,-0.002"]
"jamong/music-rnn" ["l"="52.59,27.274"]
"Kyubyong/neural_tokenizer" ["l"="52.622,27.294"]
"ChaosPKU/Poetry" ["l"="53.58,27.972"]
"ckmarkoh/AcrosticPoem-RNNPG" ["l"="53.621,28.045"]
"Cogito2012/PLID" ["l"="52.795,27.753"]
"zhanghaok/BERT-MRC-NER" ["l"="53.872,27.401"]
"yuanzhoulvpi2017/quick_sentence_transformers" ["l"="53.211,26.781"]
"xueyouluo/speller-bert" ["l"="53.625,27.775"]
"unitedstates/uscode" ["l"="52.59,27.943"]
"unitedstates/legisworks-historical-statutes" ["l"="52.58,27.932"]
"unitedstates/inspectors-general" ["l"="18.835,13.633"]
"18F/linkify-citations" ["l"="52.588,27.957"]
"liyongqi2002/TadNER" ["l"="53.853,27.691"]
"benbijituo/SpellBERT" ["l"="53.821,27.496"]
"Xuanfang1121/CRASpell_pytorch" ["l"="53.831,27.489"]
"zjunlp/KnowPrompt" ["l"="50.025,37.958"]
"galsang/ABCNN" ["l"="53.252,27.539"]
"RingBDStack/HTCInfoMax" ["l"="54.094,27.103"]
"LucS12/ESG-Score-Integration" ["l"="53.937,26.622"]
"FudanNLP/CWS_GatedRNN" ["l"="53.556,27.833"]
"XiPotatonium/chatbot-webui" ["l"="53.897,27.675"]
"mozillazg/go-pinyin" ["l"="3.372,-8.703"]
"mozillazg/rust-pinyin" ["l"="-10.901,-6.574"]
"LopezGG/NN_NER_tensorFlow" ["l"="53.512,27.608"]
"codekansas/keras-language-modeling" ["l"="55.861,28.465"]
"vsitzmann/snli-attention-tensorflow" ["l"="52.766,27.465"]
"Smerity/keras_snli" ["l"="52.809,27.491"]
"crownpku/Small-Chinese-Corpus" ["l"="53.431,27.508"]
"Shuang0420/knowledge_graph_demo" ["l"="55.405,27.11"]
"harpribot/nlp-metrics" ["l"="53.444,27.867"]
"vikasnar/Bleu" ["l"="53.449,27.829"]
"michaelliao/summer-framework" ["l"="53.181,28.389"]
"gitbitex/gitbitex-new" ["l"="-10.309,12.939"]
"yifanhunter/NLP_textClassifier" ["l"="53.741,26.976"]
"kingglory/Bert_TextCNN_Chinese_classification_Pytorch" ["l"="53.712,27.016"]
"BeiCunNan/Sentiment_Analysis_Imdb" ["l"="53.753,26.938"]
"mzc421/nlp" ["l"="53.726,26.996"]
"kampersanda/xcdat" ["l"="54.153,27.233"]
"Tessil/hat-trie" ["l"="-19.704,-26.084"]
"kampersanda/poplar-trie" ["l"="54.153,27.214"]
"xxsds/sdsl-lite" ["l"="-39.329,21.272"]
"simongog/sdsl-lite" ["l"="-19.607,-26.186"]
"kampersanda/fast_succinct_trie" ["l"="54.133,27.231"]
"armon/libart" ["l"="1.676,13.395"]
"efficient/SuRF" ["l"="1.743,13.399"]
"castorini/MP-CNN-Torch" ["l"="52.895,27.427"]
"jwieting/iclr2016" ["l"="53.088,25.409"]
"lampts/my_dl_solutions" ["l"="52.914,27.411"]
"thunlp/THULAC-Java" ["l"="-3.924,8.528"]
"thunlp/THUCTC" ["l"="-3.92,8.466"]
"skydark/nstools" ["l"="53.414,27.401"]
"csdz/nstools" ["l"="53.393,27.486"]
"panyang/Wikipedia_Word2vec" ["l"="21.873,1.896"]
"MarvinBertin/HiddenMarkovModel_TensorFlow" ["l"="52.908,27.656"]
"abhyudaynj/LSTM-CRF-models" ["l"="53.493,27.646"]
"clab/lstm-parser" ["l"="53.013,25.213"]
"wlin12/wang2vec" ["l"="53.115,25.242"]
"XuezheMax/LasagneNLP" ["l"="53.5,27.686"]
"tlwg/libthai" ["l"="54.245,27.083"]
"SJTU-YONGFU-RESEARCH-GRP/SPRSound" ["l"="55.089,27.304"]
"hit-computer/char-rnn" ["l"="53.68,27.865"]
"tuzhaopeng/NMT-Coverage" ["l"="54.678,27.262"]
"tuzhaopeng/NMT" ["l"="54.705,27.271"]
"sebastien-j/LV_groundhog" ["l"="54.72,27.252"]
"aehuynh/hidden-markov-model" ["l"="52.841,27.65"]
"jiaqianghuai/tf-lstm-crf-batch" ["l"="53.462,27.696"]
"wsy555/wangsy.github.io" ["l"="53.252,28.161"]
"DragonFlyXD/poetryclub-backend" ["l"="53.235,28.185"]
"Aaronzijingcai/MP-TFWA" ["l"="53.766,26.909"]
"BeiCunNan/Image_Classfiation_Coil20" ["l"="53.777,26.898"]
"shijiebei2009/CEC-Corpus" ["l"="54.234,28.886"]
"yankewei/laravel-sensitive" ["l"="52.783,27.221"]
"FireLustre/php-dfa-sensitive" ["l"="-19.158,25.377"]
"nowgoo/dict" ["l"="-19.011,25.344"]
"thuiar/TCL-MAP" ["l"="53.023,26.516"]
"ankitp94/relationship-extraction" ["l"="52.531,27.3"]
"PKULCWM/PKUSUMSUM" ["l"="52.497,27.299"]
"chqiwang/convseg" ["l"="52.541,27.29"]
"ymym3412/position-rank" ["l"="52.372,25.837"]
"thunlp/THUCKE" ["l"="52.436,27.243"]
"harveyai/biglaw-bench" ["l"="52.79,27.918"]
"JoelNiklaus/LEXTREME" ["l"="52.797,27.896"]
"maastrichtlawtech/VendorLink" ["l"="52.817,27.903"]
"Yifan-Song793/InfoCL" ["l"="37.042,-1.178"]
"liuyeah/K-HTC" ["l"="54.131,27.119"]
"Doragd/Awesome-Sentence-Embedding" ["l"="53.278,26.831"]
"RUCAIBox/DenseRetrieval" ["l"="54.448,25.689"]
"taiqing/pinyin2hanzi" ["l"="52.83,27.329"]
"OrangeX4/simple-pinyin" ["l"="52.948,27.343"]
"whatbeg/GodTian_Pinyin" ["l"="52.965,27.353"]
"sunpinyin/sunpinyin" ["l"="21.031,2.24"]
"aceimnorstuvwxz/dgk_lost_conv" ["l"="55.725,28.356"]
"indiejoseph/cnn-text-classification-tf-chinese" ["l"="53.372,28.919"]
"masr2000/NaCGEC" ["l"="53.821,27.418"]
"THUKElab/CLEME" ["l"="52.737,24.274"]
"michaelliao/openweixin" ["l"="53.288,28.452"]
"michaelliao/warpdb" ["l"="53.288,28.477"]
"Forest-art/DFSP" ["l"="52.735,27.74"]
"quhongyu/ClusPro" ["l"="52.732,27.728"]
"xUhEngwAng/pinyin" ["l"="52.912,27.333"]
"NagiNikaido/pinyin4IAI" ["l"="52.86,27.354"]
"WiInputMethod/VE" ["l"="52.812,27.354"]
"iseesaw/Pinyin2ChineseChars" ["l"="52.844,27.361"]
"FreedomIntelligence/GrammarGPT" ["l"="53.797,27.435"]
"xlxwalex/HyCxG" ["l"="53.804,27.405"]
"zhezhaoa/cluster-driven" ["l"="53.213,27.452"]
"zhezhaoa/neural_BOW_toolkit" ["l"="53.25,27.44"]
"AONE-NLP/DiFiNet" ["l"="53.86,27.612"]
"JunnYu/jy_ner" ["l"="53.865,27.599"]
"baoguangsheng/ctx-rewriter-for-summ" ["l"="58.285,29.088"]
"iFLYOS-OPEN/SDK-Android" ["l"="58.242,29.136"]
"unitedstates/reports" ["l"="18.793,13.588"]
"accordproject/apap" ["l"="52.639,28.12"]
"microsoft/binder" ["l"="53.903,27.738"]
"BatsResearch/trove" ["l"="52.894,27.769"]
"BatsResearch/planetarium" ["l"="52.877,27.776"]
"BatsResearch/fudd" ["l"="52.861,27.775"]
"vered1986/LexNET" ["l"="54.456,27.446"]
"lixsh6/Tencent_wsdm_cup2023" ["l"="52.837,27.942"]
"AI-confused/Sequence-to-Action" ["l"="53.825,27.405"]
"kaen2891/adversarial_fine-tuning_using_generated_respiratory_sound" ["l"="55.068,27.291"]
"dkyang/UMDHMM-python" ["l"="52.809,27.648"]
"chaoming0625/FineGrainedOpinionMining" ["l"="53.913,27.432"]
"kaimenluo/CustomerReviewSummarizeSystem" ["l"="53.931,27.432"]
"exacity/deeplearningbook-chinese" ["l"="50.749,28.189"]
"littlecodersh/ItChat" ["l"="48.152,23.298"]
"facebookresearch/fastText" ["l"="53.043,25.835"]
"imhuay/Algorithm_Interview_Notes-Chinese" ["l"="50.748,28.231"]
"pyecharts/pyecharts" ["l"="48.043,23.379"]
"irlab-sdu/fuzi.mingcha" ["l"="52.926,27.829"]
"CSQianDong/III-Retriever" ["l"="52.97,27.952"]
"FudanDISC/DISC-MedLLM" ["l"="55.502,27.482"]
"Dai-shen/LAiW" ["l"="52.912,27.825"]
"X-D-Lab/Sunsimiao" ["l"="55.49,27.519"]
"imagetellerD/chinese-poem-generator" ["l"="53.564,27.947"]
"dhwajraj/NER-RNN" ["l"="56.024,26.621"]
"HadoopIt/rnn-nlu" ["l"="56.63,29.244"]
"divamgupta/lstm-gender-predictor" ["l"="53.553,27.628"]
"naayaaa/SNLI-Keras" ["l"="52.769,27.515"]
"lmjohns3/downhill" ["l"="52.734,27.512"]
"lansinuote/Diffusion_Training_Examples" ["l"="53.678,26.684"]
"lansinuote/Stable_Diffusion_fine_tuning" ["l"="53.688,26.652"]
"SourKream/NLP-Project" ["l"="52.731,27.464"]
"mozillazg/pypinyin-dict" ["l"="53.176,27.582"]
"aishell-foundation/DaCiDian" ["l"="35.668,2.381"]
"Kyubyong/g2pC" ["l"="37.392,2.363"]
"mozillazg/pypinyin-g2pW" ["l"="38.54,2.089"]
"rguthrie3/BiLSTM-CRF" ["l"="53.447,27.638"]
"manubharghav-zz/NER" ["l"="53.454,27.622"]
"davidpig/lychee_law" ["l"="52.973,27.823"]
"ZixinxinWang/Legal-Eagle-InternLM" ["l"="52.897,27.879"]
"dengwentao99/SLJA" ["l"="52.872,27.823"]
"CSHaitao/LexEval" ["l"="52.888,27.827"]
"ymcui/Chinese-Cloze-RC" ["l"="54.525,26.545"]
"z17176/Chinese_conversation_sentiment" ["l"="53.422,27.533"]
"MediaBrain-SJTU/MING" ["l"="55.482,27.476"]
"sunzeyeah/RLHF" ["l"="39.239,-2.283"]
"HillZhang1999/RobustGEC" ["l"="53.88,27.446"]
"karthikncode/DeepRL-InformationExtraction" ["l"="53.488,27.83"]
"jxwuyi/AtNRE" ["l"="55.79,26.628"]
"patverga/torch-relation-extraction" ["l"="53.486,27.884"]
"SCIR-HI/Huatuo-Llama-Med-Chinese" ["l"="55.435,27.448"]
"baichuan-inc/Baichuan-7B" ["l"="39.079,-2.055"]
"wenda-LLM/wenda" ["l"="39.176,-2.022"]
"hiyouga/ChatGLM-Efficient-Tuning" ["l"="39.081,-2.083"]
"OpenMOSS/MOSS" ["l"="39.13,-1.971"]
"shibing624/MedicalGPT" ["l"="38.984,-2.086"]
"curryli/AddressCompare" ["l"="53.278,27.778"]
"gf3/IRC-js" ["l"="52.259,27.769"]
"slate/slate-irc" ["l"="-49.697,2.778"]
"Throne3d/node-irc" ["l"="52.269,27.75"]
"KokoIRC/koko" ["l"="52.23,27.74"]
"glowing-bear/glowing-bear" ["l"="-49.616,2.529"]
"kiwiirc/irc-framework" ["l"="-49.528,2.491"]
"cinchrb/cinch" ["l"="52.184,27.776"]
"hookio/hook.io" ["l"="1.994,-34.444"]
"thenables/composition" ["l"="52.277,27.783"]
"gf3/Jerk" ["l"="52.3,27.776"]
"Nuggt-dev/Nuggt" ["l"="52.5,27.972"]
"yencarnacion/yt-sum" ["l"="52.532,27.972"]
"RISCfuture/autumn" ["l"="52.144,27.764"]
"DAddYE/foreverb" ["l"="2.887,-35.522"]
"vangberg/isaac" ["l"="52.154,27.78"]
"Quintus/cinch-plugins" ["l"="52.171,27.8"]
"evanphx/gx" ["l"="2.86,-35.602"]
"sbp/phenny" ["l"="-49.46,2.717"]
"leejarvis/slop" ["l"="2.868,-35.527"]
"ruby-rbot/rbot" ["l"="52.145,27.798"]
"linpingta/lianjia-eroom-analysis" ["l"="53.625,27.963"]
"linpingta/chinese-poem-generator" ["l"="53.58,27.924"]
"guogene/nlp_ann" ["l"="53.444,27.484"]
"taishan1994/chinese_information_extraction" ["l"="55.478,26.671"]
"cnschema/cnSchema" ["l"="55.384,27.138"]
"michaelliao/jerrymouse" ["l"="53.18,28.417"]
"chen700564/metaner-icl" ["l"="53.865,27.665"]
"stanleylsx/llms_tool" ["l"="54.024,27.285"]
"stanleylsx/text_embedding" ["l"="54.035,27.271"]
"stanleylsx/nlu_torch" ["l"="54.055,27.271"]
"Mxoder/LLM-from-scratch" ["l"="54.107,27.304"]
"CSHaitao/ChatGLM_mutli_gpu_tuning" ["l"="52.88,27.906"]
"THUlawtech/LegalAttack" ["l"="52.882,27.946"]
"NJU-LegalAI/Legal-ChatGLM" ["l"="52.916,27.863"]
"cambridgeltl/BioNLP-2016" ["l"="53.86,27.804"]
"lsy3/clinical-notes-diagnosis-dl-nlp" ["l"="53.895,27.84"]
"cmusjtuliuyuan/SequenceTagging" ["l"="53.509,27.705"]
"langflow-ai/langflow_examples" ["l"="52.413,28.011"]
"langflow-ai/langflow-embedded-chat" ["l"="52.386,28.027"]
"langflow-ai/langflow-helm-charts" ["l"="52.402,28.038"]
"langflow-ai/langflow-extras" ["l"="52.364,28.033"]
"techwithtim/Langflow-RAG-Tutorial" ["l"="52.376,28.05"]
"menloparklab/langflow-railway-deployment" ["l"="52.468,27.987"]
"yaitec/langflow-streamlit" ["l"="52.388,27.998"]
"misbahsy/InsightExpress" ["l"="52.371,28.008"]
"dingyaguang117/DoubleArrayTrie" ["l"="54.033,26.996"]
"ansjsun/tree_split" ["l"="54.045,26.98"]
"python-cachier/cachier" ["l"="54.184,27.65"]
"hynek/svcs" ["l"="45.087,21.25"]
"hynek/stamina" ["l"="45.011,21.196"]
"memray/seq2seq-keyphrase" ["l"="52.429,25.835"]
"JasirVoriya/dark-one" ["l"="53.16,28.41"]
"BatsResearch/menghini-neurips23-code" ["l"="52.827,27.778"]
"jingtaozhan/IntelligenceTest" ["l"="52.865,27.853"]
"blcuicall/taoli" ["l"="53.152,27.24"]
"blcuicall/yacsc" ["l"="53.145,27.226"]
"blcuicall/mcts" ["l"="53.098,27.219"]
"blcuicall/blcuthesis" ["l"="53.119,27.223"]
"ECNU-ICALK/EduChat" ["l"="39.014,-2.239"]
"harvardnlp/decomp-attn" ["l"="52.943,27.48"]
"DeNeutoy/Decomposable_Attn" ["l"="52.936,27.494"]
"zhouh/WCC-Segmentation" ["l"="53.51,27.771"]
"ckmarkoh/deepSeg" ["l"="53.644,28.08"]
"ShuleHao/Chinese_text_summarization_based_on_GPT" ["l"="53.486,26.831"]
"ZBWpro/PretCoTandKE" ["l"="53.279,26.743"]
"yanshanjing/ChineseDiachronicCorpus" ["l"="54.035,27.715"]
"AZURE-ARC-0/atomv0-fullsample" ["l"="52.525,27.951"]
"daveshap/REMO_Framework" ["l"="40.659,1.06"]
"SUTDNLP/NNTransitionSegmentor" ["l"="53.52,27.748"]
"MeteorYee/LSTM-CNN-CWS" ["l"="53.566,27.797"]
"ai-bites/simple-rag-app" ["l"="52.338,28.055"]
"chuzhumin98/PRE" ["l"="52.847,27.962"]
"Xiaoyu-SZ/LLMasEvaluator" ["l"="52.863,27.968"]
"Alibaba-NLP/MANNER" ["l"="53.88,27.72"]
"tlaanemaa/langflow-docker" ["l"="52.335,28.037"]
"RUCAIBox/Erya" ["l"="53.387,28.227"]
"TechWithRay/demystify_flowise_langflow" ["l"="52.315,28.068"]
"ogabrielluiz/langflow-railway" ["l"="52.454,28.004"]
"ogabrielluiz/langflow.pinokio" ["l"="52.444,28.022"]
"Ling97/Blog2" ["l"="53.985,27.398"]
"shaypal5/lazyimport" ["l"="54.123,27.61"]
"Kyubyong/word_prediction" ["l"="52.565,27.299"]
"Steven-Hewitt/Entailment-with-Tensorflow" ["l"="52.551,27.31"]
"dice-group/AGDISTIS" ["l"="-0.365,-42.077"]
"rime/librime" ["l"="21.126,2.383"]
"rime/home" ["l"="21.152,2.395"]
"adobe-fonts/source-han-serif" ["l"="20.623,1.345"]
"be5invis/Sarasa-Gothic" ["l"="20.589,1.311"]
"studyzy/imewlconverter" ["l"="21.254,2.361"]
"adobe-fonts/source-han-sans" ["l"="20.582,1.38"]
"osfans/trime" ["l"="21.213,2.412"]
"isen-zhang/ACLUE" ["l"="53.349,28.205"]
"PeterH0323/ancient-chat-llm" ["l"="53.366,28.21"]
"tobegit3hub/tensorflow_template_application" ["l"="58.027,23.481"]
"yzhangcs/ctc-copy" ["l"="53.912,27.451"]
"Jacob-Zhou/gecdi" ["l"="53.917,27.464"]
"JustFollowUs/Machine-Learning" ["l"="50.592,28.056"]
"JustFollowUs/Reinforcement-Learning" ["l"="53.018,27.32"]
"JustFollowUs/Deep-Learning" ["l"="52.989,27.313"]
"Kyubyong/nlp_tasks" ["l"="53.003,25.68"]
"dapurv5/awesome-question-answering" ["l"="55.573,26.141"]
"luozhouyang/AutoPhraseX" ["l"="55.352,26.604"]
"LL4J/Filter4J" ["l"="52.671,27.05"]
"namaemonaishi/AIAClient" ["l"="52.631,27.029"]
"leonvanzyl/langflow-tutorial-2024" ["l"="52.354,28.065"]
"gaohuang/SnapshotEnsemble" ["l"="54.172,26.918"]
"moskomule/pytorch.snapshot.ensembles" ["l"="54.181,26.935"]
"negar-rostamzadeh/LSTM-Attention" ["l"="54.015,27.216"]
"shunyaoshih/TPA-LSTM" ["l"="44.915,24.224"]
"bubbliiiing/Keras-Attention" ["l"="50.154,30.321"]
"PatientEz/CNN-BiLSTM-Attention-Time-Series-Prediction_Keras" ["l"="44.945,24.186"]
"u784799i/biLSTM_attn" ["l"="53.188,28.709"]
"PatientEz/keras-attention-mechanism" ["l"="44.938,24.119"]
"thu-coai/COLDataset" ["l"="37.025,-0.1"]
"thu-coai/Safety-Prompts" ["l"="37.076,-0.143"]
"whitzard-ai/jade-db" ["l"="37.011,-0.12"]
"Go0p/emmmm" ["l"="52.704,27.042"]
"latorrefabian/topmine" ["l"="53.479,27.675"]
"JustFollowUs/Computer-Security" ["l"="52.854,27.282"]
"JustFollowUs/Computer-Graphics" ["l"="52.922,27.301"]
"brmson/dataset-sts" ["l"="53.027,25.458"]
"localminimum/QANet" ["l"="54.708,26.522"]
"abisee/pointer-generator" ["l"="58.397,29.109"]
"JustFollowUs/Computer-Vision" ["l"="52.958,27.306"]
"JustFollowUs/Probabilistic-graphical-models" ["l"="52.969,27.323"]
"raghakot/keras-vis" ["l"="50.472,33.257"]
"aurora95/Keras-FCN" ["l"="53.479,30.682"]
"keras-team/keras-applications" ["l"="50.567,30.063"]
"fchollet/keras-resources" ["l"="47.697,28.66"]
"tdeboissiere/DeepLearningImplementations" ["l"="45.92,29.202"]
"farizrahman4u/recurrentshop" ["l"="55.877,28.51"]
"bstriner/keras-adversarial" ["l"="46.019,29.224"]
"eriklindernoren/Keras-GAN" ["l"="45.733,29.058"]
"yhenon/keras-frcnn" ["l"="50.494,33.143"]
"TiltonLAW/LegalWRITER" ["l"="52.688,27.808"]
"FanhuaandLuomu/pkulaw_spider" ["l"="53.123,27.745"]
"FanhuaandLuomu/QQSpider" ["l"="-18.37,26.305"]
"rickyxume/Law_Mining" ["l"="53.091,27.771"]
"MC-EIU/MC-EIU" ["l"="53.033,26.494"]
"arthurdouillard/keras-snapshot_ensembles" ["l"="54.157,26.934"]
"kristpapadopoulos/keras-stochastic-weight-averaging" ["l"="54.198,26.923"]
"LinkAnonymous/BESA" ["l"="53.106,27.994"]
"hu-po/o" ["l"="52.5,28.007"]
"SanjayKhatwani/Sarcasm_Detection_using_Tensorflow" ["l"="52.368,27.26"]
"JustFollowUs/CS_MUST" ["l"="52.807,27.295"]
"JustFollowUs/Computer-Science-and-Technology" ["l"="52.858,27.299"]
"hit-computer/SC-LSTM" ["l"="53.733,27.926"]
"LopezGG/Sequence-Labelling" ["l"="53.539,27.659"]
"JustFollowUs/Human-Computer-Interaction" ["l"="52.878,27.296"]
"iesl/Distributional-Inclusion-Vector-Embedding" ["l"="54.408,27.449"]
"libowen2121/SNLI-decomposable-attention" ["l"="52.915,27.493"]
"HsiaoYetGun/Decomposable-Attention" ["l"="52.885,27.496"]
"nmoehrle/rayint" ["l"="52.739,27.69"]
"louisbrulenaudet/docutron" ["l"="52.461,27.921"]
"brucewen05/CSE_481_NLP" ["l"="52.928,27.348"]
"nlpub/hyperstar" ["l"="54.426,27.41"]
"oneal2000/STARD" ["l"="52.884,27.972"]
"yandexdataschool/nlp_course" ["l"="52.819,25.863"]
"thunlp/OpenKE" ["l"="53.602,15.934"]
"zjunlp/DeepKE" ["l"="52.937,3.136"]
"lukecq1231/kim" ["l"="53.013,27.439"]
"dallascard/TreeLSTM" ["l"="52.97,27.44"]
"bradleypallen/keras-quora-question-pairs" ["l"="53.062,27.498"]
"abhishekkrthakur/is_that_a_duplicate_quora_question" ["l"="53.065,27.514"]
"erogol/QuoraDQBaseline" ["l"="53.011,27.519"]
"qqgeogor/kaggle-quora-solution-8th" ["l"="53.047,27.51"]
"qqgeogor/kaggle_quora_benchmark" ["l"="53.027,27.514"]
"allenai/deep_qa" ["l"="55.894,28.39"]
"sjvasquez/quora-duplicate-questions" ["l"="53.033,27.527"]
"dysdsyd/kaggle-question-pairs-quora" ["l"="53.014,27.506"]
"lucasjinreal/tensorflow_novelist" ["l"="53.428,27.669"]
"hzy46/Char-RNN-TensorFlow" ["l"="53.462,27.478"]
"lucasjinreal/weibo_terminater" ["l"="48.503,23.501"]
"sherjilozair/char-rnn-tensorflow" ["l"="46.238,27.763"]
"luyishisi/shisi.eth-in-web3" ["l"="50.259,28.013"]
"google/seq2seq" ["l"="53.179,25.669"]
"stratospark/keras-multiprocess-image-data-generator" ["l"="50.368,33.362"]
"maxpumperla/hyperas" ["l"="45.631,26.158"]
"titu1994/keras-squeeze-excite-network" ["l"="50.545,33.362"]
"qubvel/efficientnet" ["l"="50.665,30.064"]
"flyyufelix/cnn_finetune" ["l"="50.439,33.234"]
"rcmalli/keras-mobilenet" ["l"="50.372,33.388"]
"keplr-io/quiver" ["l"="50.406,33.282"]
"qubvel/segmentation_models" ["l"="50.661,29.928"]
"XifengGuo/CapsNet-Keras" ["l"="50.81,33.22"]
"howardyclo/Kaggle-Quora-Question-Pairs" ["l"="52.98,27.506"]
"adsva/python-wapiti" ["l"="53.373,27.775"]
"shibing624/similarities" ["l"="38.949,-2.178"]
"viraja1/mitm_postman" ["l"="54.083,27.643"]
"yongyehuang/Tensorflow-Tutorial" ["l"="53.479,27.447"]
"kevin369ml/My-TensorFlow-tutorials" ["l"="50.398,33.146"]
"kratzert/finetune_alexnet_with_tensorflow" ["l"="50.395,33.205"]
"qiaoguan/deep-ctr-prediction" ["l"="58.13,23.34"]
"wasiahmad/paraphrase_identification" ["l"="57.495,29.294"]
"iamaaditya/neural-paraphrase-generation" ["l"="57.527,29.319"]
"SpongebBob/Quora-Kaggle" ["l"="53.111,27.51"]
"plantsgo/ijcai-2018" ["l"="57.802,22.669"]
"xue2han/AncientChinesePoemRNN" ["l"="53.554,27.896"]
"XiaoyuanYi/WMPoetry" ["l"="53.58,27.956"]
"wagamamaz/tensorflow-tutorial" ["l"="50.212,28.069"]
"yaserkl/RLSeq2Seq" ["l"="58.455,29.062"]
"tensorflow/nmt" ["l"="53.192,25.709"]
"shuaihuaiyi/QA" ["l"="55.789,28.386"]
"nfmcclure/tensorflow_cookbook" ["l"="47.774,28.763"]
"pl8787/MatchPyramid-TensorFlow" ["l"="53.146,27.581"]
"phdowling/abcnn-keras" ["l"="53.223,27.573"]
"flrngel/Self-Attentive-tensorflow" ["l"="53.452,28.778"]
"zake7749/word2vec-tutorial" ["l"="21.991,1.928"]
"liuwenqiang1202/wiki-word2vec" ["l"="53.413,27.417"]
"pengming617/bert_classification" ["l"="50.019,22.177"]
"Deermini/word2vec-tensorflow" ["l"="21.921,1.903"]
"SeoSangwoo/Attention-Based-BiLSTM-relation-extraction" ["l"="55.708,26.595"]
"OSU-slatelab/seq_tagger" ["l"="53.692,27.725"]
"castorini/NCE-CNN-Torch" ["l"="52.848,27.446"]
"strubell/LISA" ["l"="53.592,28.777"]
"google/sling" ["l"="53.06,25.542"]
"SUTDNLP/LibN3L" ["l"="50.065,28.119"]
"heshenghuan/LSTM-CRF" ["l"="53.522,27.594"]
"Tixierae/deep_learning_NLP" ["l"="54.06,27.434"]
"BrambleXu/nlp-beginner-guide-keras" ["l"="54.133,27.454"]
"ChenglongChen/kaggle-HomeDepot" ["l"="57.452,24.041"]
"kaz-Anova/StackNet" ["l"="57.449,24.024"]
"ChenglongChen/kaggle-CrowdFlower" ["l"="57.479,24.098"]
"mcrisc/lexdecomp" ["l"="33.075,30.485"]
"allenai/bi-att-flow" ["l"="54.681,26.519"]
"tommccoy1/hans" ["l"="48.448,32.242"]
"OanaMariaCamburu/e-SNLI" ["l"="54.597,25.379"]
"0prrr/Chinese-novel-generation" ["l"="53.422,27.723"]
"lucasjinreal/Spider12306" ["l"="47.536,22.978"]
"lc222/MPCNN-sentence-similarity-tensorflow" ["l"="52.765,27.408"]
"Chevalier1024/MPCNN" ["l"="52.724,27.396"]
"Irvinglove/TF_Sentence_Similarity_CNN" ["l"="52.736,27.407"]
"Irvinglove/MP-CNN-Tensorflow-sentence-similarity" ["l"="52.728,27.418"]
"guitaowufeng/TPANN" ["l"="53.527,27.87"]
"FudanNLP/fudan_mtl_reviews" ["l"="53.508,27.847"]
"yanshao9798/tagger" ["l"="53.51,27.864"]
"FudanNLP/nlpcc2017_news_headline_categorization" ["l"="53.526,27.909"]
"yangzhiye/NLPCC2017-task3" ["l"="53.536,27.958"]
"MLWave/RGF-sklearn" ["l"="57.488,23.967"]
"Ironsub/quick" ["l"="53.125,27.8"]
"hankcs/sub-character-cws" ["l"="53.498,27.783"]
"RandolphVI/Text-Pairs-Relation-Classification" ["l"="52.685,27.411"]
"desh2608/crnn-relation-classification" ["l"="55.776,26.565"]
"thuiar/MMIA" ["l"="53.061,26.511"]
"skydar/Text-Eigenvalue" ["l"="54.247,27.043"]
"PeiJieSun/NESCL" ["l"="52.949,28.018"]
"JayYip/cws-tensorflow" ["l"="53.564,27.662"]
"yangzhiye/Papers-For-Text-Summarization" ["l"="53.546,27.991"]
"kaen2891/bts" ["l"="55.065,27.32"]
"UKPLab/emnlp2018-april" ["l"="52.313,27.364"]
"BatsResearch/cross-lingual-detox" ["l"="52.844,27.789"]
"shangjingbo1226/ESim" ["l"="53.474,27.862"]
"ysyushi/prep" ["l"="53.468,27.898"]
"qhduan/Seq2Seq_Chatbot_QA" ["l"="55.729,28.371"]
"qhduan/just_another_seq2seq" ["l"="55.705,28.344"]
"hzy46/fast-neural-style-tensorflow" ["l"="45.597,29.417"]
"LantaoYu/SeqGAN" ["l"="57.813,29.4"]
"Hironsan/awesome-embedding-models" ["l"="53.029,25.513"]
"fierceX/NER_BiLSTM_CRF_Chinese" ["l"="53.537,27.596"]
"liu-nlper/DocumentClassification" ["l"="53.394,28.968"]
"microsoft/LightLDA" ["l"="57.817,23.504"]
"cemoody/lda2vec" ["l"="52.867,25.606"]
"philipperemy/keras-tcn" ["l"="44.929,24.206"]
"philipperemy/keract" ["l"="53.963,27.185"]
"sicara/tf-explain" ["l"="24.104,14.325"]
"keisen/tf-keras-vis" ["l"="24.037,14.372"]
"autonomio/talos" ["l"="45.608,26.051"]
"keras-team/keras-tuner" ["l"="45.637,25.918"]
"pltrdy/rouge" ["l"="58.336,29.098"]
"stanfordnlp/stanza" ["l"="52.949,25.808"]
"ChenRocks/fast_abs_rl" ["l"="58.398,29.071"]
"stanfordnlp/CoreNLP" ["l"="52.982,25.883"]
"dasguptar/treelstm.pytorch" ["l"="53,25.464"]
"sina-al/pynlp" ["l"="52.993,27.579"]
"stanfordnlp/stanza-old" ["l"="52.979,27.598"]
"vitutorial/VITutorial" ["l"="57.589,29.498"]
"danqi/rc-cnn-dailymail" ["l"="54.707,26.565"]
"stanfordnlp/treelstm" ["l"="46.148,27.771"]
"vxl/vxl" ["l"="52.678,27.666"]
"ematvey/tensorflow-seq2seq-tutorials" ["l"="55.803,28.528"]
"princewen/tensorflow_practice" ["l"="58.188,23.357"]
"shenweichen/DeepCTR" ["l"="58.19,23.431"]
"wzhe06/Ad-papers" ["l"="58.15,23.422"]
"shenweichen/DeepMatch" ["l"="58.194,23.387"]
"wzhe06/Reco-papers" ["l"="58.168,23.4"]
"DragonFlyXD/poetryclub-frontend" ["l"="53.214,28.208"]
"yasiemir/cs224n" ["l"="53.758,27.165"]
"bogatyy/cs224d" ["l"="52.772,25.98"]
"guoday/Tencent2018_Lookalike_Rank7th" ["l"="57.816,22.693"]
"plantsgo/Rental-Listing-Inquiries" ["l"="57.357,24.005"]
"tnmichael309/kaggle-avito-demand-challenge" ["l"="53.001,27.533"]
"Codefeater/Kaggle_Reuse_Code" ["l"="1.303,11.92"]
"thinline72/toxic" ["l"="57.525,23.992"]
"qqgeogor/fm_pypy" ["l"="52.984,27.533"]
"zhezhaoa/ngram2vec" ["l"="53.354,27.388"]
"Leonard-Xu/CWE" ["l"="53.179,25.141"]
"svn2github/word2vec" ["l"="53.262,25.351"]
"PrincetonML/SIF" ["l"="52.975,25.507"]
"pl8787/textnet-release" ["l"="53.038,27.611"]
"faneshion/DRMM" ["l"="53.102,27.603"]
"helanfeiyun/RNN-peoms" ["l"="53.544,27.877"]
"tcxdgit/e2e-coref-old" ["l"="53.211,27.62"]
"ne7ermore/torch-light" ["l"="53.404,27.621"]
"surmenok/TextSum" ["l"="58.521,29.197"]
"xwzhong/papernote" ["l"="52.941,27.459"]
"jihunchoi/shortcut-stacked-encoder-pytorch" ["l"="52.977,27.452"]
"hyperlane-xyz/hyperlane-explorer" ["l"="-22.685,9.43"]
"aerdem4/mercari-price-suggestion" ["l"="52.963,27.517"]
"LexPredict/lexpredict-contraxsuite-deploy" ["l"="52.683,27.929"]
"LexPredict/lexpredict-contraxsuite-samples" ["l"="52.685,27.942"]
"zhangmeishan/SarcasmDetection" ["l"="52.385,27.223"]
"jarvisqi/machine_learning" ["l"="53.284,27.542"]
"lybroman/Chinese-sentiment-analysis-with-Doc2Vec" ["l"="53.276,27.561"]
"pl8787/textnet-model" ["l"="52.993,27.625"]
"faneshion/HiNT" ["l"="54.424,25.847"]
"QuantumLiu/Neural-Headline-Generator-CN" ["l"="53.893,27.122"]
"cullengao/lsnm" ["l"="1.248,12.114"]
"congyh/wechat-platform-SDK" ["l"="1.231,12.114"]
"martbert/decomp_attn_keras" ["l"="53.05,27.545"]
}