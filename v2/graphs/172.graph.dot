digraph G {
"piskvorky/gensim" -> "explosion/spaCy"
"piskvorky/gensim" -> "facebookresearch/fastText"
"piskvorky/gensim" -> "nltk/nltk"
"piskvorky/gensim" -> "allenai/allennlp"
"piskvorky/gensim" -> "stanfordnlp/GloVe"
"piskvorky/gensim" -> "google-research/bert"
"piskvorky/gensim" -> "dmlc/xgboost" ["e"=1]
"piskvorky/gensim" -> "flairNLP/flair"
"piskvorky/gensim" -> "sebastianruder/NLP-progress"
"piskvorky/gensim" -> "stanfordnlp/CoreNLP"
"piskvorky/gensim" -> "keras-team/keras" ["e"=1]
"piskvorky/gensim" -> "sloria/TextBlob"
"piskvorky/gensim" -> "microsoft/LightGBM" ["e"=1]
"piskvorky/gensim" -> "spotify/annoy"
"piskvorky/gensim" -> "jina-ai/clip-as-service"
"facebookresearch/fairseq" -> "huggingface/transformers" ["e"=1]
"facebookresearch/fairseq" -> "google-research/bert"
"facebookresearch/fairseq" -> "sebastianruder/NLP-progress"
"facebookresearch/fairseq" -> "microsoft/unilm" ["e"=1]
"facebookresearch/fairseq" -> "deepspeedai/DeepSpeed" ["e"=1]
"facebookresearch/fairseq" -> "allenai/allennlp"
"facebookresearch/fairseq" -> "google-research/google-research" ["e"=1]
"facebookresearch/fairseq" -> "facebookresearch/faiss"
"facebookresearch/fairseq" -> "UKPLab/sentence-transformers"
"facebookresearch/fairseq" -> "Lightning-AI/pytorch-lightning" ["e"=1]
"facebookresearch/fairseq" -> "google/sentencepiece"
"facebookresearch/fairseq" -> "tensorflow/tensor2tensor"
"facebookresearch/fairseq" -> "OpenNMT/OpenNMT-py"
"facebookresearch/fairseq" -> "meta-llama/llama" ["e"=1]
"facebookresearch/fairseq" -> "facebookresearch/fastText"
"sebastianruder/NLP-progress" -> "allenai/allennlp"
"sebastianruder/NLP-progress" -> "google-research/bert"
"sebastianruder/NLP-progress" -> "flairNLP/flair"
"sebastianruder/NLP-progress" -> "keon/awesome-nlp"
"sebastianruder/NLP-progress" -> "graykode/nlp-tutorial"
"sebastianruder/NLP-progress" -> "jina-ai/clip-as-service"
"sebastianruder/NLP-progress" -> "facebookresearch/fastText"
"sebastianruder/NLP-progress" -> "zihangdai/xlnet"
"sebastianruder/NLP-progress" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"sebastianruder/NLP-progress" -> "UKPLab/sentence-transformers"
"sebastianruder/NLP-progress" -> "brightmart/text_classification" ["e"=1]
"sebastianruder/NLP-progress" -> "facebookresearch/fairseq"
"sebastianruder/NLP-progress" -> "explosion/spaCy"
"sebastianruder/NLP-progress" -> "tensorflow/tensor2tensor"
"sebastianruder/NLP-progress" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"delip/PyTorchNLPBook" -> "apachecn/nlp-pytorch-zh" ["e"=1]
"delip/PyTorchNLPBook" -> "fastai/course-nlp"
"delip/PyTorchNLPBook" -> "PetrochukM/PyTorch-NLP"
"delip/PyTorchNLPBook" -> "graykode/nlp-tutorial"
"delip/PyTorchNLPBook" -> "DSKSD/DeepNLP-models-Pytorch"
"delip/PyTorchNLPBook" -> "spro/practical-pytorch"
"delip/PyTorchNLPBook" -> "jacobeisenstein/gt-nlp-class"
"delip/PyTorchNLPBook" -> "rguthrie3/DeepLearningForNLPInPytorch"
"delip/PyTorchNLPBook" -> "bentrevett/pytorch-sentiment-analysis"
"delip/PyTorchNLPBook" -> "lyeoni/nlp-tutorial" ["e"=1]
"delip/PyTorchNLPBook" -> "microsoft/nlp-recipes"
"delip/PyTorchNLPBook" -> "scoutbee/pytorch-nlp-notebooks"
"delip/PyTorchNLPBook" -> "cgpotts/cs224u"
"delip/PyTorchNLPBook" -> "allenai/allennlp"
"delip/PyTorchNLPBook" -> "keitakurita/Practical_NLP_in_PyTorch" ["e"=1]
"ines/course-starter-python" -> "ines/course-starter-r" ["e"=1]
"ines/course-starter-python" -> "explosion/spacy-course"
"ines/course-starter-python" -> "ines/juniper" ["e"=1]
"ines/course-starter-python" -> "textpipe/textpipe"
"vgrabovets/multi_rake" -> "csurfer/rake-nltk"
"vgrabovets/multi_rake" -> "swisscom/ai-research-keyphrase-extraction"
"vgrabovets/multi_rake" -> "LIAAD/yake"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "ojasphansekar/Zillow-Home-Value-Prediction"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "A-safarji/Time-series-deep-learning"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/Students-Performance-Analytics"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/Drugs-Recommendation-using-Reviews"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/SECOM-Detecting-Defected-Items"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "prateekjoshi565/twitter_sentiment_analysis"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/Big-Mart-Sales-Prediction"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/MNIST-Dataset"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/Titanic-Passenger-Survival-Prediction"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/Employee-Reviews"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/World-Food-Production"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/Restaurant-Reviews-Analysis"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/Wine-Quality-Predictions"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/Loan-Prediction"
"sharmaroshan/Twitter-Sentiment-Analysis" -> "sharmaroshan/HR-Analytics"
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/practical-machine-learning-with-python"
"dipanjanS/hands-on-transfer-learning-with-python" -> "artix41/awesome-transfer-learning" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/art_of_data_visualization"
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/text-analytics-with-python"
"dipanjanS/hands-on-transfer-learning-with-python" -> "PacktPublishing/Hands-On-Transfer-Learning-with-Python"
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/data_science_for_all"
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/feature_engineering_session_dhs18"
"dipanjanS/hands-on-transfer-learning-with-python" -> "hfawaz/bigdata18" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/nlp_essentials"
"dipanjanS/hands-on-transfer-learning-with-python" -> "easezyc/deep-transfer-learning" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "jindongwang/transferlearning-tutorial" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/tensorflow2-crash-course"
"dipanjanS/hands-on-transfer-learning-with-python" -> "keras-team/keras-applications" ["e"=1]
"dipanjanS/hands-on-transfer-learning-with-python" -> "dipanjanS/nlp_workshop_dhs18"
"dipanjanS/hands-on-transfer-learning-with-python" -> "domainadaptation/salad" ["e"=1]
"omarsar/nlp_highlights" -> "omarsar/nlp_overview"
"explosion/prodigy-recipes" -> "explosion/jupyterlab-prodigy"
"explosion/prodigy-recipes" -> "explosion/projects"
"explosion/prodigy-recipes" -> "explosion/spacy-transformers"
"explosion/prodigy-recipes" -> "ahalterman/multiuser_prodigy"
"explosion/prodigy-recipes" -> "explosion/prodigy-openai-recipes"
"explosion/prodigy-recipes" -> "explosion/sense2vec"
"explosion/prodigy-recipes" -> "explosion/spacy-notebooks"
"explosion/prodigy-recipes" -> "explosion/weasel" ["e"=1]
"explosion/prodigy-recipes" -> "explosion/spacy-streamlit" ["e"=1]
"explosion/prodigy-recipes" -> "argilla-io/spacy-wordnet"
"explosion/prodigy-recipes" -> "explosion/thinc"
"explosion/prodigy-recipes" -> "gandersen101/spaczz"
"explosion/prodigy-recipes" -> "NLPatVCU/medaCy" ["e"=1]
"explosion/prodigy-recipes" -> "explosion/wasabi" ["e"=1]
"explosion/prodigy-recipes" -> "jenojp/negspacy" ["e"=1]
"DSKSD/DeepNLP-models-Pytorch" -> "spro/practical-pytorch"
"DSKSD/DeepNLP-models-Pytorch" -> "rguthrie3/DeepLearningForNLPInPytorch"
"DSKSD/DeepNLP-models-Pytorch" -> "allenai/allennlp"
"DSKSD/DeepNLP-models-Pytorch" -> "graykode/nlp-tutorial"
"DSKSD/DeepNLP-models-Pytorch" -> "FudanNLP/nlp-beginner" ["e"=1]
"DSKSD/DeepNLP-models-Pytorch" -> "OpenNMT/OpenNMT-py"
"DSKSD/DeepNLP-models-Pytorch" -> "brightmart/text_classification" ["e"=1]
"DSKSD/DeepNLP-models-Pytorch" -> "PetrochukM/PyTorch-NLP"
"DSKSD/DeepNLP-models-Pytorch" -> "bharathgs/Awesome-pytorch-list" ["e"=1]
"DSKSD/DeepNLP-models-Pytorch" -> "Kyubyong/nlp_tasks"
"DSKSD/DeepNLP-models-Pytorch" -> "codertimo/BERT-pytorch"
"DSKSD/DeepNLP-models-Pytorch" -> "pytorch/text"
"DSKSD/DeepNLP-models-Pytorch" -> "jadore801120/attention-is-all-you-need-pytorch"
"DSKSD/DeepNLP-models-Pytorch" -> "sebastianruder/NLP-progress"
"DSKSD/DeepNLP-models-Pytorch" -> "crownpku/Awesome-Chinese-NLP" ["e"=1]
"stanfordnlp/CoreNLP" -> "nltk/nltk"
"stanfordnlp/CoreNLP" -> "stanfordnlp/stanza"
"stanfordnlp/CoreNLP" -> "piskvorky/gensim"
"stanfordnlp/CoreNLP" -> "allenai/allennlp"
"stanfordnlp/CoreNLP" -> "facebookresearch/fastText"
"stanfordnlp/CoreNLP" -> "stanfordnlp/GloVe"
"stanfordnlp/CoreNLP" -> "explosion/spaCy"
"stanfordnlp/CoreNLP" -> "sebastianruder/NLP-progress"
"stanfordnlp/CoreNLP" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"stanfordnlp/CoreNLP" -> "keon/awesome-nlp"
"stanfordnlp/CoreNLP" -> "google-research/bert"
"stanfordnlp/CoreNLP" -> "HIT-SCIR/ltp" ["e"=1]
"stanfordnlp/CoreNLP" -> "flairNLP/flair"
"stanfordnlp/CoreNLP" -> "NLPchina/ansj_seg" ["e"=1]
"stanfordnlp/CoreNLP" -> "hankcs/HanLP" ["e"=1]
"dav/word2vec" -> "danielfrg/word2vec"
"dav/word2vec" -> "tmikolov/word2vec"
"dav/word2vec" -> "stanfordnlp/GloVe"
"dav/word2vec" -> "svn2github/word2vec"
"dav/word2vec" -> "yoonkim/CNN_sentence" ["e"=1]
"dav/word2vec" -> "jdeng/word2vec"
"dav/word2vec" -> "chrisjmccormick/word2vec_commented"
"dav/word2vec" -> "dennybritz/cnn-text-classification-tf"
"dav/word2vec" -> "3Top/word2vec-api"
"dav/word2vec" -> "ycjuan/libffm" ["e"=1]
"dav/word2vec" -> "ycjuan/kaggle-2014-criteo" ["e"=1]
"dav/word2vec" -> "phanein/deepwalk" ["e"=1]
"dav/word2vec" -> "thunlp/NRLPapers" ["e"=1]
"dav/word2vec" -> "google/seq2seq"
"dav/word2vec" -> "tangjianpku/LINE" ["e"=1]
"SamLynnEvans/Transformer" -> "hyunwoongko/transformer"
"SamLynnEvans/Transformer" -> "Kyubyong/transformer"
"SamLynnEvans/Transformer" -> "jayparks/transformer"
"SamLynnEvans/Transformer" -> "jadore801120/attention-is-all-you-need-pytorch"
"SamLynnEvans/Transformer" -> "kimiyoung/transformer-xl"
"SamLynnEvans/Transformer" -> "codertimo/BERT-pytorch"
"SamLynnEvans/Transformer" -> "bentrevett/pytorch-seq2seq"
"SamLynnEvans/Transformer" -> "huggingface/pytorch-openai-transformer-lm"
"SamLynnEvans/Transformer" -> "harvardnlp/annotated-transformer"
"SamLynnEvans/Transformer" -> "OpenNMT/OpenNMT-py"
"SamLynnEvans/Transformer" -> "tunz/transformer-pytorch"
"SamLynnEvans/Transformer" -> "facebookresearch/XLM"
"SamLynnEvans/Transformer" -> "rsennrich/subword-nmt" ["e"=1]
"SamLynnEvans/Transformer" -> "FengQuanLi/ResnetGPT" ["e"=1]
"SamLynnEvans/Transformer" -> "spro/practical-pytorch"
"sloria/TextBlob" -> "nltk/nltk"
"sloria/TextBlob" -> "piskvorky/gensim"
"sloria/TextBlob" -> "isnowfy/snownlp" ["e"=1]
"sloria/TextBlob" -> "explosion/spaCy"
"sloria/TextBlob" -> "clips/pattern"
"sloria/TextBlob" -> "cjhutto/vaderSentiment"
"sloria/TextBlob" -> "flairNLP/flair"
"sloria/TextBlob" -> "facebookresearch/fastText"
"sloria/TextBlob" -> "allenai/allennlp"
"sloria/TextBlob" -> "codelucas/newspaper" ["e"=1]
"sloria/TextBlob" -> "stanfordnlp/CoreNLP"
"sloria/TextBlob" -> "chartbeat-labs/textacy"
"sloria/TextBlob" -> "aboSamoor/polyglot"
"sloria/TextBlob" -> "seatgeek/fuzzywuzzy"
"sloria/TextBlob" -> "keon/awesome-nlp"
"stanfordnlp/stanza" -> "allenai/allennlp"
"stanfordnlp/stanza" -> "flairNLP/flair"
"stanfordnlp/stanza" -> "stanfordnlp/CoreNLP"
"stanfordnlp/stanza" -> "sebastianruder/NLP-progress"
"stanfordnlp/stanza" -> "zihangdai/xlnet"
"stanfordnlp/stanza" -> "UKPLab/sentence-transformers"
"stanfordnlp/stanza" -> "google/sentencepiece"
"stanfordnlp/stanza" -> "jina-ai/clip-as-service"
"stanfordnlp/stanza" -> "facebookresearch/pytext"
"stanfordnlp/stanza" -> "explosion/spaCy"
"stanfordnlp/stanza" -> "OpenNMT/OpenNMT-py"
"stanfordnlp/stanza" -> "huggingface/tokenizers"
"stanfordnlp/stanza" -> "microsoft/nlp-recipes"
"stanfordnlp/stanza" -> "piskvorky/gensim"
"stanfordnlp/stanza" -> "google-research/bert"
"asappresearch/sru" -> "salesforce/pytorch-qrnn"
"asappresearch/sru" -> "facebookresearch/fairseq-lua"
"asappresearch/sru" -> "salesforce/awd-lstm-lm"
"asappresearch/sru" -> "kimiyoung/transformer-xl"
"asappresearch/sru" -> "MaximumEntropy/Seq2Seq-PyTorch"
"asappresearch/sru" -> "spro/practical-pytorch"
"asappresearch/sru" -> "allenai/bi-att-flow" ["e"=1]
"asappresearch/sru" -> "OpenNMT/OpenNMT-py"
"asappresearch/sru" -> "PetrochukM/PyTorch-NLP"
"asappresearch/sru" -> "facebookresearch/InferSent"
"asappresearch/sru" -> "LantaoYu/SeqGAN" ["e"=1]
"asappresearch/sru" -> "pytorch/text"
"asappresearch/sru" -> "facebookresearch/DrQA" ["e"=1]
"asappresearch/sru" -> "rsennrich/subword-nmt" ["e"=1]
"asappresearch/sru" -> "facebookarchive/MemNN" ["e"=1]
"bentrevett/pytorch-seq2seq" -> "bentrevett/pytorch-sentiment-analysis"
"bentrevett/pytorch-seq2seq" -> "jadore801120/attention-is-all-you-need-pytorch"
"bentrevett/pytorch-seq2seq" -> "OpenNMT/OpenNMT-py"
"bentrevett/pytorch-seq2seq" -> "spro/practical-pytorch"
"bentrevett/pytorch-seq2seq" -> "graykode/nlp-tutorial"
"bentrevett/pytorch-seq2seq" -> "codertimo/BERT-pytorch"
"bentrevett/pytorch-seq2seq" -> "allenai/allennlp"
"bentrevett/pytorch-seq2seq" -> "IBM/pytorch-seq2seq"
"bentrevett/pytorch-seq2seq" -> "UKPLab/sentence-transformers"
"bentrevett/pytorch-seq2seq" -> "sebastianruder/NLP-progress"
"bentrevett/pytorch-seq2seq" -> "pytorch/text"
"bentrevett/pytorch-seq2seq" -> "harvardnlp/annotated-transformer"
"bentrevett/pytorch-seq2seq" -> "jessevig/bertviz"
"bentrevett/pytorch-seq2seq" -> "pytorch/examples" ["e"=1]
"bentrevett/pytorch-seq2seq" -> "bharathgs/Awesome-pytorch-list" ["e"=1]
"flairNLP/flair" -> "allenai/allennlp"
"flairNLP/flair" -> "sebastianruder/NLP-progress"
"flairNLP/flair" -> "jina-ai/clip-as-service"
"flairNLP/flair" -> "UKPLab/sentence-transformers"
"flairNLP/flair" -> "explosion/spaCy"
"flairNLP/flair" -> "zihangdai/xlnet"
"flairNLP/flair" -> "facebookresearch/pytext"
"flairNLP/flair" -> "stanfordnlp/stanza"
"flairNLP/flair" -> "facebookresearch/fastText"
"flairNLP/flair" -> "doccano/doccano" ["e"=1]
"flairNLP/flair" -> "google-research/bert"
"flairNLP/flair" -> "google/sentencepiece"
"flairNLP/flair" -> "piskvorky/gensim"
"flairNLP/flair" -> "microsoft/nlp-recipes"
"flairNLP/flair" -> "keon/awesome-nlp"
"abdulfatir/twitter-sentiment-analysis" -> "ayushoriginal/Sentiment-Analysis-Twitter"
"abdulfatir/twitter-sentiment-analysis" -> "adeshpande3/LSTM-Sentiment-Analysis"
"abdulfatir/twitter-sentiment-analysis" -> "chaoming0625/SentimentPolarityAnalysis" ["e"=1]
"abdulfatir/twitter-sentiment-analysis" -> "bentrevett/pytorch-sentiment-analysis"
"abdulfatir/twitter-sentiment-analysis" -> "xiamx/awesome-sentiment-analysis"
"abdulfatir/twitter-sentiment-analysis" -> "baidu/Senta" ["e"=1]
"abdulfatir/twitter-sentiment-analysis" -> "mayank93/Twitter-Sentiment-Analysis"
"abdulfatir/twitter-sentiment-analysis" -> "sharmaroshan/Twitter-Sentiment-Analysis"
"abdulfatir/twitter-sentiment-analysis" -> "cjhutto/vaderSentiment"
"abdulfatir/twitter-sentiment-analysis" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"abdulfatir/twitter-sentiment-analysis" -> "vivekn/sentiment"
"abdulfatir/twitter-sentiment-analysis" -> "marrrcin/ml-twitter-sentiment-analysis"
"abdulfatir/twitter-sentiment-analysis" -> "Edward1Chou/SentimentAnalysis" ["e"=1]
"abdulfatir/twitter-sentiment-analysis" -> "brightmart/text_classification" ["e"=1]
"abdulfatir/twitter-sentiment-analysis" -> "dipanjanS/text-analytics-with-python"
"harvardnlp/annotated-transformer" -> "jadore801120/attention-is-all-you-need-pytorch"
"harvardnlp/annotated-transformer" -> "codertimo/BERT-pytorch"
"harvardnlp/annotated-transformer" -> "OpenNMT/OpenNMT-py"
"harvardnlp/annotated-transformer" -> "tensorflow/tensor2tensor"
"harvardnlp/annotated-transformer" -> "Kyubyong/transformer"
"harvardnlp/annotated-transformer" -> "kimiyoung/transformer-xl"
"harvardnlp/annotated-transformer" -> "allenai/allennlp"
"harvardnlp/annotated-transformer" -> "graykode/nlp-tutorial"
"harvardnlp/annotated-transformer" -> "zihangdai/xlnet"
"harvardnlp/annotated-transformer" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"harvardnlp/annotated-transformer" -> "google-research/bert"
"harvardnlp/annotated-transformer" -> "jina-ai/clip-as-service"
"harvardnlp/annotated-transformer" -> "google/sentencepiece"
"harvardnlp/annotated-transformer" -> "sebastianruder/NLP-progress"
"harvardnlp/annotated-transformer" -> "huggingface/peft" ["e"=1]
"Hyperparticle/udify" -> "UppsalaNLP/uuparser"
"Hyperparticle/udify" -> "datquocnguyen/jPTDP"
"graykode/nlp-tutorial" -> "sebastianruder/NLP-progress"
"graykode/nlp-tutorial" -> "FudanNLP/nlp-beginner" ["e"=1]
"graykode/nlp-tutorial" -> "NLP-LOVE/ML-NLP" ["e"=1]
"graykode/nlp-tutorial" -> "DA-southampton/NLP_ability" ["e"=1]
"graykode/nlp-tutorial" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"graykode/nlp-tutorial" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"graykode/nlp-tutorial" -> "google-research/bert"
"graykode/nlp-tutorial" -> "yandexdataschool/nlp_course"
"graykode/nlp-tutorial" -> "brightmart/nlp_chinese_corpus" ["e"=1]
"graykode/nlp-tutorial" -> "yunjey/pytorch-tutorial" ["e"=1]
"graykode/nlp-tutorial" -> "crownpku/Awesome-Chinese-NLP" ["e"=1]
"graykode/nlp-tutorial" -> "brightmart/text_classification" ["e"=1]
"graykode/nlp-tutorial" -> "bharathgs/Awesome-pytorch-list" ["e"=1]
"graykode/nlp-tutorial" -> "allenai/allennlp"
"graykode/nlp-tutorial" -> "keon/awesome-nlp"
"argilla-io/spacy-wordnet" -> "jenojp/negspacy" ["e"=1]
"argilla-io/spacy-wordnet" -> "goodmami/wn"
"mayank93/Twitter-Sentiment-Analysis" -> "ujjwalkarn/Twitter-Sentiment-Analysis"
"mayank93/Twitter-Sentiment-Analysis" -> "ravikiranj/twitter-sentiment-analyzer"
"mayank93/Twitter-Sentiment-Analysis" -> "abromberg/sentiment_analysis_python"
"fastai/course-nlp" -> "fastai/course-v3" ["e"=1]
"fastai/course-nlp" -> "microsoft/nlp-recipes"
"fastai/course-nlp" -> "delip/PyTorchNLPBook"
"fastai/course-nlp" -> "fastai/numerical-linear-algebra" ["e"=1]
"fastai/course-nlp" -> "yandexdataschool/nlp_course"
"fastai/course-nlp" -> "graykode/nlp-tutorial"
"fastai/course-nlp" -> "ivan-bilan/The-NLP-Pandect"
"fastai/course-nlp" -> "susanli2016/NLP-with-Python"
"fastai/course-nlp" -> "keon/awesome-nlp"
"fastai/course-nlp" -> "sebastianruder/NLP-progress"
"fastai/course-nlp" -> "jacobeisenstein/gt-nlp-class"
"fastai/course-nlp" -> "mihail911/nlp-library" ["e"=1]
"fastai/course-nlp" -> "llSourcell/Learn-Natural-Language-Processing-Curriculum" ["e"=1]
"fastai/course-nlp" -> "allenai/allennlp"
"fastai/course-nlp" -> "mhagiwara/100-nlp-papers"
"vi3k6i5/flashtext" -> "flairNLP/flair"
"vi3k6i5/flashtext" -> "allenai/allennlp"
"vi3k6i5/flashtext" -> "google/python-fire" ["e"=1]
"vi3k6i5/flashtext" -> "explosion/spaCy"
"vi3k6i5/flashtext" -> "piskvorky/gensim"
"vi3k6i5/flashtext" -> "facebookresearch/fastText"
"vi3k6i5/flashtext" -> "seatgeek/fuzzywuzzy"
"vi3k6i5/flashtext" -> "jina-ai/clip-as-service"
"vi3k6i5/flashtext" -> "sebastianruder/NLP-progress"
"vi3k6i5/flashtext" -> "brightmart/text_classification" ["e"=1]
"vi3k6i5/flashtext" -> "scikit-learn-contrib/imbalanced-learn" ["e"=1]
"vi3k6i5/flashtext" -> "WZBSocialScienceCenter/pdftabextract" ["e"=1]
"vi3k6i5/flashtext" -> "sanic-org/sanic" ["e"=1]
"vi3k6i5/flashtext" -> "Qix-/better-exceptions" ["e"=1]
"vi3k6i5/flashtext" -> "facebookresearch/pytext"
"john-hewitt/structural-probes" -> "clarkkev/attention-analysis" ["e"=1]
"john-hewitt/structural-probes" -> "nelson-liu/contextual-repr-analysis"
"john-hewitt/structural-probes" -> "yoavg/bert-syntax"
"john-hewitt/structural-probes" -> "harvardnlp/urnng"
"john-hewitt/structural-probes" -> "strubell/LISA" ["e"=1]
"john-hewitt/structural-probes" -> "nyu-mll/jiant"
"john-hewitt/structural-probes" -> "BeckyMarvin/LM_syneval"
"john-hewitt/structural-probes" -> "nikitakit/self-attentive-parser"
"john-hewitt/structural-probes" -> "neulab/compare-mt" ["e"=1]
"john-hewitt/structural-probes" -> "successar/AttentionExplanation"
"john-hewitt/structural-probes" -> "jihunchoi/unsupervised-treelstm"
"john-hewitt/structural-probes" -> "facebookresearch/colorlessgreenRNNs"
"john-hewitt/structural-probes" -> "miyyer/scpn" ["e"=1]
"john-hewitt/structural-probes" -> "alexwarstadt/blimp"
"john-hewitt/structural-probes" -> "john-hewitt/control-tasks"
"harvardnlp/compound-pcfg" -> "harvardnlp/urnng"
"harvardnlp/compound-pcfg" -> "iesl/diora"
"harvardnlp/compound-pcfg" -> "yikangshen/PRPN"
"openai/gpt-2" -> "openai/gpt-3"
"openai/gpt-2" -> "google-research/bert"
"openai/gpt-2" -> "tensorflow/tensor2tensor"
"openai/gpt-2" -> "zihangdai/xlnet"
"openai/gpt-2" -> "sebastianruder/NLP-progress"
"openai/gpt-2" -> "allenai/allennlp"
"openai/gpt-2" -> "huggingface/transformers" ["e"=1]
"openai/gpt-2" -> "Morizeyao/GPT2-Chinese" ["e"=1]
"openai/gpt-2" -> "karpathy/minGPT" ["e"=1]
"openai/gpt-2" -> "google/sentencepiece"
"openai/gpt-2" -> "facebookresearch/fairseq"
"openai/gpt-2" -> "openai/gym" ["e"=1]
"openai/gpt-2" -> "facebookresearch/fastText"
"openai/gpt-2" -> "karpathy/nanoGPT" ["e"=1]
"openai/gpt-2" -> "jina-ai/clip-as-service"
"deepset-ai/FARM" -> "explosion/spacy-transformers"
"deepset-ai/FARM" -> "ThilinaRajapakse/simpletransformers"
"deepset-ai/FARM" -> "utterworks/fast-bert"
"deepset-ai/FARM" -> "linkedin/detext"
"deepset-ai/FARM" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"deepset-ai/FARM" -> "deepset-ai/COVID-QA"
"deepset-ai/FARM" -> "deepset-ai/haystack" ["e"=1]
"deepset-ai/FARM" -> "huggingface/neuralcoref"
"deepset-ai/FARM" -> "flairNLP/flair"
"deepset-ai/FARM" -> "ddangelov/Top2Vec"
"deepset-ai/FARM" -> "facebookresearch/SentEval"
"deepset-ai/FARM" -> "dbmdz/berts"
"deepset-ai/FARM" -> "jalammar/ecco"
"deepset-ai/FARM" -> "bhoov/exbert"
"deepset-ai/FARM" -> "QData/TextAttack"
"newsdev/who-the-hill" -> "newsdev/elex" ["e"=1]
"newsdev/who-the-hill" -> "datadesk/lapd-crime-classification-analysis"
"deeppavlov/DeepPavlov" -> "RasaHQ/rasa"
"deeppavlov/DeepPavlov" -> "facebookresearch/ParlAI"
"deeppavlov/DeepPavlov" -> "allenai/allennlp"
"deeppavlov/DeepPavlov" -> "jina-ai/clip-as-service"
"deeppavlov/DeepPavlov" -> "flairNLP/flair"
"deeppavlov/DeepPavlov" -> "gunthercox/ChatterBot" ["e"=1]
"deeppavlov/DeepPavlov" -> "sebastianruder/NLP-progress"
"deeppavlov/DeepPavlov" -> "snipsco/snips-nlu" ["e"=1]
"deeppavlov/DeepPavlov" -> "facebookresearch/DrQA" ["e"=1]
"deeppavlov/DeepPavlov" -> "zihangdai/xlnet"
"deeppavlov/DeepPavlov" -> "brightmart/text_classification" ["e"=1]
"deeppavlov/DeepPavlov" -> "AtmaHou/Task-Oriented-Dialogue-Research-Progress-Survey" ["e"=1]
"deeppavlov/DeepPavlov" -> "facebookresearch/pytext"
"deeppavlov/DeepPavlov" -> "Conchylicultor/DeepQA" ["e"=1]
"deeppavlov/DeepPavlov" -> "facebookresearch/fastText"
"ztane/python-Levenshtein" -> "miohtama/python-Levenshtein"
"ztane/python-Levenshtein" -> "roy-ht/editdistance"
"ztane/python-Levenshtein" -> "seatgeek/fuzzywuzzy"
"ztane/python-Levenshtein" -> "jamesturk/jellyfish"
"ztane/python-Levenshtein" -> "seatgeek/thefuzz"
"ztane/python-Levenshtein" -> "WojciechMula/pyahocorasick" ["e"=1]
"ztane/python-Levenshtein" -> "life4/textdistance"
"ztane/python-Levenshtein" -> "rapidfuzz/RapidFuzz"
"ztane/python-Levenshtein" -> "rapidfuzz/Levenshtein"
"ztane/python-Levenshtein" -> "doukremt/distance"
"ztane/python-Levenshtein" -> "Mimino666/langdetect" ["e"=1]
"ztane/python-Levenshtein" -> "mammothb/symspellpy" ["e"=1]
"ztane/python-Levenshtein" -> "deanmalmgren/textract" ["e"=1]
"ztane/python-Levenshtein" -> "PyTables/PyTables" ["e"=1]
"ztane/python-Levenshtein" -> "aneesha/RAKE"
"google-research/bert" -> "jina-ai/clip-as-service"
"google-research/bert" -> "huggingface/transformers" ["e"=1]
"google-research/bert" -> "sebastianruder/NLP-progress"
"google-research/bert" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"google-research/bert" -> "tensorflow/tensor2tensor"
"google-research/bert" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"google-research/bert" -> "facebookresearch/fastText"
"google-research/bert" -> "allenai/allennlp"
"google-research/bert" -> "tensorflow/models" ["e"=1]
"google-research/bert" -> "zihangdai/xlnet"
"google-research/bert" -> "facebookresearch/fairseq"
"google-research/bert" -> "openai/gpt-2"
"google-research/bert" -> "fxsjy/jieba" ["e"=1]
"google-research/bert" -> "codertimo/BERT-pytorch"
"google-research/bert" -> "google-research/google-research" ["e"=1]
"jina-ai/clip-as-service" -> "google-research/bert"
"jina-ai/clip-as-service" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"jina-ai/clip-as-service" -> "zihangdai/xlnet"
"jina-ai/clip-as-service" -> "macanv/BERT-BiLSTM-CRF-NER" ["e"=1]
"jina-ai/clip-as-service" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"jina-ai/clip-as-service" -> "allenai/allennlp"
"jina-ai/clip-as-service" -> "UKPLab/sentence-transformers"
"jina-ai/clip-as-service" -> "brightmart/text_classification" ["e"=1]
"jina-ai/clip-as-service" -> "sebastianruder/NLP-progress"
"jina-ai/clip-as-service" -> "PaddlePaddle/ERNIE" ["e"=1]
"jina-ai/clip-as-service" -> "brightmart/nlp_chinese_corpus" ["e"=1]
"jina-ai/clip-as-service" -> "brightmart/albert_zh" ["e"=1]
"jina-ai/clip-as-service" -> "flairNLP/flair"
"jina-ai/clip-as-service" -> "bojone/bert4keras" ["e"=1]
"jina-ai/clip-as-service" -> "tensorflow/tensor2tensor"
"plasticityai/magnitude" -> "facebookresearch/StarSpace"
"plasticityai/magnitude" -> "facebookresearch/InferSent"
"plasticityai/magnitude" -> "facebookresearch/SentEval"
"plasticityai/magnitude" -> "chartbeat-labs/textacy"
"plasticityai/magnitude" -> "IndicoDataSolutions/finetune"
"plasticityai/magnitude" -> "bheinzerling/bpemb"
"plasticityai/magnitude" -> "facebookresearch/MUSE"
"plasticityai/magnitude" -> "salesforce/decaNLP"
"plasticityai/magnitude" -> "explosion/spacy-transformers"
"plasticityai/magnitude" -> "huggingface/hmtl"
"plasticityai/magnitude" -> "Hironsan/anago" ["e"=1]
"plasticityai/magnitude" -> "huggingface/neuralcoref"
"plasticityai/magnitude" -> "ThoughtRiver/lmdb-embeddings" ["e"=1]
"plasticityai/magnitude" -> "flairNLP/flair"
"plasticityai/magnitude" -> "facebookresearch/LASER"
"nlptown/nlp-notebooks" -> "adsieg/text_similarity"
"nlptown/nlp-notebooks" -> "NirantK/NLP_Quickbook"
"nlptown/nlp-notebooks" -> "makcedward/nlp"
"nlptown/nlp-notebooks" -> "kavgan/nlp-in-practice"
"nlptown/nlp-notebooks" -> "PrincetonML/SIF"
"nlptown/nlp-notebooks" -> "susanli2016/NLP-with-Python"
"nlptown/nlp-notebooks" -> "msgi/nlp-journey" ["e"=1]
"nlptown/nlp-notebooks" -> "oborchers/Fast_Sentence_Embeddings"
"nlptown/nlp-notebooks" -> "delip/PyTorchNLPBook"
"nlptown/nlp-notebooks" -> "pengshuang/Text-Similarity" ["e"=1]
"nlptown/nlp-notebooks" -> "nlptown/nlppapers"
"nlptown/nlp-notebooks" -> "fastai/course-nlp"
"nlptown/nlp-notebooks" -> "hb20007/hands-on-nltk-tutorial"
"nlptown/nlp-notebooks" -> "llhthinker/NLP-Papers"
"nlptown/nlp-notebooks" -> "scoutbee/pytorch-nlp-notebooks"
"JohnSnowLabs/spark-nlp-workshop" -> "JohnSnowLabs/spark-nlp" ["e"=1]
"JohnSnowLabs/spark-nlp-workshop" -> "JohnSnowLabs/spark-nlp-models"
"JohnSnowLabs/spark-nlp-workshop" -> "JohnSnowLabs/nlu"
"JohnSnowLabs/spark-nlp-workshop" -> "JohnSnowLabs/johnsnowlabs"
"JohnSnowLabs/spark-nlp-workshop" -> "JohnSnowLabs/visual-nlp-workshop"
"JohnSnowLabs/spark-nlp-workshop" -> "JohnSnowLabs/langtest"
"JohnSnowLabs/spark-nlp-workshop" -> "allenai/scispacy" ["e"=1]
"JohnSnowLabs/spark-nlp-workshop" -> "explosion/spacy-transformers"
"JohnSnowLabs/spark-nlp-workshop" -> "CogStack/MedCAT" ["e"=1]
"JohnSnowLabs/spark-nlp-workshop" -> "dmis-lab/biobert" ["e"=1]
"JohnSnowLabs/spark-nlp-workshop" -> "NorskRegnesentral/skweak"
"JohnSnowLabs/spark-nlp-workshop" -> "ivan-bilan/The-NLP-Pandect"
"JohnSnowLabs/spark-nlp-workshop" -> "medspacy/medspacy" ["e"=1]
"JohnSnowLabs/spark-nlp-workshop" -> "PAIR-code/lit"
"JohnSnowLabs/spark-nlp-workshop" -> "bigscience-workshop/biomedical" ["e"=1]
"omarsar/nlp_overview" -> "dair-ai/nlp_paper_summaries"
"omarsar/nlp_overview" -> "omarsar/nlp_highlights"
"omarsar/nlp_overview" -> "huggingface/awesome-papers"
"omarsar/nlp_overview" -> "microsoft/nlp-recipes"
"omarsar/nlp_overview" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"omarsar/nlp_overview" -> "mihail911/nlp-library" ["e"=1]
"omarsar/nlp_overview" -> "jacobeisenstein/gt-nlp-class"
"omarsar/nlp_overview" -> "ivan-bilan/The-NLP-Pandect"
"omarsar/nlp_overview" -> "facebookresearch/pytext"
"omarsar/nlp_overview" -> "tomohideshibata/BERT-related-papers" ["e"=1]
"omarsar/nlp_overview" -> "fastai/course-nlp"
"omarsar/nlp_overview" -> "dair-ai/d2l-study-group"
"omarsar/nlp_overview" -> "delip/PyTorchNLPBook"
"omarsar/nlp_overview" -> "brianspiering/awesome-dl4nlp"
"omarsar/nlp_overview" -> "mathsyouth/awesome-text-summarization" ["e"=1]
"dbamman/anlp19" -> "dbamman/book-nlp"
"dbamman/anlp19" -> "dbamman/litbank"
"dbamman/anlp19" -> "cu-nil/chnotes"
"dbamman/book-nlp" -> "dbamman/litbank"
"dbamman/book-nlp" -> "booknlp/booknlp"
"dbamman/book-nlp" -> "dbamman/anlp19"
"dbamman/book-nlp" -> "melaniewalsh/responsible-datasets-in-context"
"dbamman/book-nlp" -> "melaniewalsh/Intro-Cultural-Analytics"
"dbamman/book-nlp" -> "sgsinclair/alta"
"facebookresearch/pytext" -> "allenai/allennlp"
"facebookresearch/pytext" -> "zihangdai/xlnet"
"facebookresearch/pytext" -> "flairNLP/flair"
"facebookresearch/pytext" -> "pytorch/text"
"facebookresearch/pytext" -> "facebookresearch/XLM"
"facebookresearch/pytext" -> "facebookresearch/LASER"
"facebookresearch/pytext" -> "facebookresearch/ParlAI"
"facebookresearch/pytext" -> "facebookresearch/mmf" ["e"=1]
"facebookresearch/pytext" -> "PetrochukM/PyTorch-NLP"
"facebookresearch/pytext" -> "facebookresearch/StarSpace"
"facebookresearch/pytext" -> "jina-ai/clip-as-service"
"facebookresearch/pytext" -> "sebastianruder/NLP-progress"
"facebookresearch/pytext" -> "salesforce/decaNLP"
"facebookresearch/pytext" -> "facebookresearch/PyTorch-BigGraph" ["e"=1]
"facebookresearch/pytext" -> "facebookresearch/fastText"
"codertimo/BERT-pytorch" -> "jadore801120/attention-is-all-you-need-pytorch"
"codertimo/BERT-pytorch" -> "allenai/allennlp"
"codertimo/BERT-pytorch" -> "zihangdai/xlnet"
"codertimo/BERT-pytorch" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"codertimo/BERT-pytorch" -> "kimiyoung/transformer-xl"
"codertimo/BERT-pytorch" -> "google-research/bert"
"codertimo/BERT-pytorch" -> "jina-ai/clip-as-service"
"codertimo/BERT-pytorch" -> "OpenNMT/OpenNMT-py"
"codertimo/BERT-pytorch" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"codertimo/BERT-pytorch" -> "brightmart/albert_zh" ["e"=1]
"codertimo/BERT-pytorch" -> "PaddlePaddle/ERNIE" ["e"=1]
"codertimo/BERT-pytorch" -> "harvardnlp/annotated-transformer"
"codertimo/BERT-pytorch" -> "brightmart/nlp_chinese_corpus" ["e"=1]
"codertimo/BERT-pytorch" -> "Kyubyong/transformer"
"codertimo/BERT-pytorch" -> "brightmart/text_classification" ["e"=1]
"kimiyoung/transformer-xl" -> "zihangdai/xlnet"
"kimiyoung/transformer-xl" -> "facebookresearch/XLM"
"kimiyoung/transformer-xl" -> "Kyubyong/transformer"
"kimiyoung/transformer-xl" -> "codertimo/BERT-pytorch"
"kimiyoung/transformer-xl" -> "brightmart/albert_zh" ["e"=1]
"kimiyoung/transformer-xl" -> "openai/finetune-transformer-lm"
"kimiyoung/transformer-xl" -> "allenai/bilm-tf"
"kimiyoung/transformer-xl" -> "allenai/allennlp"
"kimiyoung/transformer-xl" -> "google-research/text-to-text-transfer-transformer"
"kimiyoung/transformer-xl" -> "OpenNMT/OpenNMT-py"
"kimiyoung/transformer-xl" -> "salesforce/awd-lstm-lm"
"kimiyoung/transformer-xl" -> "namisan/mt-dnn" ["e"=1]
"kimiyoung/transformer-xl" -> "google/sentencepiece"
"kimiyoung/transformer-xl" -> "ymcui/Chinese-XLNet" ["e"=1]
"kimiyoung/transformer-xl" -> "tensorflow/tensor2tensor"
"nshepperd/gpt-2" -> "minimaxir/gpt-2-simple"
"nshepperd/gpt-2" -> "ak9250/gpt-2-colab"
"nshepperd/gpt-2" -> "lopuhin/transformer-lm"
"nshepperd/gpt-2" -> "ConnorJL/GPT2" ["e"=1]
"nshepperd/gpt-2" -> "openai/gpt-2-output-dataset"
"nshepperd/gpt-2" -> "graykode/gpt-2-Pytorch"
"nshepperd/gpt-2" -> "huggingface/transfer-learning-conv-ai" ["e"=1]
"nshepperd/gpt-2" -> "akanyaani/gpt-2-tensorflow2.0"
"nshepperd/gpt-2" -> "openai/gpt-2"
"nshepperd/gpt-2" -> "minimaxir/aitextgen"
"nshepperd/gpt-2" -> "shawwn/gpt-2"
"nshepperd/gpt-2" -> "jcpeterson/openwebtext"
"nshepperd/gpt-2" -> "minimaxir/gpt-2-cloud-run"
"nshepperd/gpt-2" -> "minimaxir/textgenrnn"
"nshepperd/gpt-2" -> "microsoft/DialoGPT" ["e"=1]
"jessevig/bertviz" -> "UKPLab/sentence-transformers"
"jessevig/bertviz" -> "zihangdai/xlnet"
"jessevig/bertviz" -> "allenai/allennlp"
"jessevig/bertviz" -> "jina-ai/clip-as-service"
"jessevig/bertviz" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"jessevig/bertviz" -> "sebastianruder/NLP-progress"
"jessevig/bertviz" -> "makcedward/nlpaug"
"jessevig/bertviz" -> "princeton-nlp/SimCSE" ["e"=1]
"jessevig/bertviz" -> "codertimo/BERT-pytorch"
"jessevig/bertviz" -> "flairNLP/flair"
"jessevig/bertviz" -> "google/sentencepiece"
"jessevig/bertviz" -> "google-research/text-to-text-transfer-transformer"
"jessevig/bertviz" -> "PAIR-code/lit"
"jessevig/bertviz" -> "PaddlePaddle/ERNIE" ["e"=1]
"jessevig/bertviz" -> "google-research/bert"
"zihangdai/xlnet" -> "kimiyoung/transformer-xl"
"zihangdai/xlnet" -> "PaddlePaddle/ERNIE" ["e"=1]
"zihangdai/xlnet" -> "ymcui/Chinese-XLNet" ["e"=1]
"zihangdai/xlnet" -> "brightmart/albert_zh" ["e"=1]
"zihangdai/xlnet" -> "jina-ai/clip-as-service"
"zihangdai/xlnet" -> "allenai/allennlp"
"zihangdai/xlnet" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"zihangdai/xlnet" -> "brightmart/roberta_zh" ["e"=1]
"zihangdai/xlnet" -> "namisan/mt-dnn" ["e"=1]
"zihangdai/xlnet" -> "google-research/text-to-text-transfer-transformer"
"zihangdai/xlnet" -> "brightmart/text_classification" ["e"=1]
"zihangdai/xlnet" -> "google-research/bert"
"zihangdai/xlnet" -> "facebookresearch/XLM"
"zihangdai/xlnet" -> "macanv/BERT-BiLSTM-CRF-NER" ["e"=1]
"zihangdai/xlnet" -> "google-research/albert" ["e"=1]
"UKPLab/sentence-transformers" -> "jina-ai/clip-as-service"
"UKPLab/sentence-transformers" -> "facebookresearch/faiss"
"UKPLab/sentence-transformers" -> "flairNLP/flair"
"UKPLab/sentence-transformers" -> "MaartenGr/BERTopic"
"UKPLab/sentence-transformers" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"UKPLab/sentence-transformers" -> "sebastianruder/NLP-progress"
"UKPLab/sentence-transformers" -> "princeton-nlp/SimCSE" ["e"=1]
"UKPLab/sentence-transformers" -> "allenai/allennlp"
"UKPLab/sentence-transformers" -> "google-research/bert"
"UKPLab/sentence-transformers" -> "huggingface/peft" ["e"=1]
"UKPLab/sentence-transformers" -> "google/sentencepiece"
"UKPLab/sentence-transformers" -> "microsoft/unilm" ["e"=1]
"UKPLab/sentence-transformers" -> "FlagOpen/FlagEmbedding" ["e"=1]
"UKPLab/sentence-transformers" -> "huggingface/trl" ["e"=1]
"UKPLab/sentence-transformers" -> "jessevig/bertviz"
"google/active-learning" -> "ej0cl6/deep-active-learning"
"google/active-learning" -> "rmunro/pytorch_active_learning"
"google/active-learning" -> "modAL-python/modAL"
"google/active-learning" -> "NUAA-AL/ALiPy"
"google/active-learning" -> "ntucllab/libact"
"google/active-learning" -> "ozansener/active_learning_coreset"
"google/active-learning" -> "dsgissin/DiscriminativeActiveLearning"
"google/active-learning" -> "baifanxxx/awesome-active-learning"
"google/active-learning" -> "SupeRuier/awesome-active-learning"
"google/active-learning" -> "sinhasam/vaal"
"google/active-learning" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"google/active-learning" -> "SineZHAN/deepALplus"
"google/active-learning" -> "JordanAsh/badge"
"google/active-learning" -> "Azure/active-learning-workshop" ["e"=1]
"google/active-learning" -> "baal-org/baal"
"modAL-python/modAL" -> "google/active-learning"
"modAL-python/modAL" -> "NUAA-AL/ALiPy"
"modAL-python/modAL" -> "ej0cl6/deep-active-learning"
"modAL-python/modAL" -> "ntucllab/libact"
"modAL-python/modAL" -> "rmunro/pytorch_active_learning"
"modAL-python/modAL" -> "baal-org/baal"
"modAL-python/modAL" -> "SupeRuier/awesome-active-learning"
"modAL-python/modAL" -> "baifanxxx/awesome-active-learning"
"modAL-python/modAL" -> "dsgissin/DiscriminativeActiveLearning"
"modAL-python/modAL" -> "webis-de/small-text"
"modAL-python/modAL" -> "ozansener/active_learning_coreset"
"modAL-python/modAL" -> "snorkel-team/snorkel"
"modAL-python/modAL" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"modAL-python/modAL" -> "BlackHC/BatchBALD"
"modAL-python/modAL" -> "scikit-optimize/scikit-optimize" ["e"=1]
"ej0cl6/deep-active-learning" -> "google/active-learning"
"ej0cl6/deep-active-learning" -> "rmunro/pytorch_active_learning"
"ej0cl6/deep-active-learning" -> "NUAA-AL/ALiPy"
"ej0cl6/deep-active-learning" -> "ozansener/active_learning_coreset"
"ej0cl6/deep-active-learning" -> "baifanxxx/awesome-active-learning"
"ej0cl6/deep-active-learning" -> "JordanAsh/badge"
"ej0cl6/deep-active-learning" -> "modAL-python/modAL"
"ej0cl6/deep-active-learning" -> "dsgissin/DiscriminativeActiveLearning"
"ej0cl6/deep-active-learning" -> "SineZHAN/deepALplus"
"ej0cl6/deep-active-learning" -> "SupeRuier/awesome-active-learning"
"ej0cl6/deep-active-learning" -> "ntucllab/libact"
"ej0cl6/deep-active-learning" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"ej0cl6/deep-active-learning" -> "sinhasam/vaal"
"ej0cl6/deep-active-learning" -> "baal-org/baal"
"ej0cl6/deep-active-learning" -> "BlackHC/BatchBALD"
"ozansener/active_learning_coreset" -> "sinhasam/vaal"
"ozansener/active_learning_coreset" -> "dsgissin/DiscriminativeActiveLearning"
"ozansener/active_learning_coreset" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"ozansener/active_learning_coreset" -> "ej0cl6/deep-active-learning"
"ozansener/active_learning_coreset" -> "google/active-learning"
"ozansener/active_learning_coreset" -> "JordanAsh/badge"
"ozansener/active_learning_coreset" -> "avihu111/TypiClust"
"ozansener/active_learning_coreset" -> "rmunro/pytorch_active_learning"
"ozansener/active_learning_coreset" -> "svdesai/coreset-al"
"ozansener/active_learning_coreset" -> "SineZHAN/deepALplus"
"ozansener/active_learning_coreset" -> "BlackHC/BatchBALD"
"ozansener/active_learning_coreset" -> "yongjin-shin/awesome-active-learning"
"ozansener/active_learning_coreset" -> "baifanxxx/awesome-active-learning"
"ozansener/active_learning_coreset" -> "NUAA-AL/ALiPy"
"ozansener/active_learning_coreset" -> "Riashat/Active-Learning-Bayesian-Convolutional-Neural-Networks"
"dsgissin/DiscriminativeActiveLearning" -> "ozansener/active_learning_coreset"
"dsgissin/DiscriminativeActiveLearning" -> "ej0cl6/deep-active-learning"
"dsgissin/DiscriminativeActiveLearning" -> "sinhasam/vaal"
"dsgissin/DiscriminativeActiveLearning" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"dsgissin/DiscriminativeActiveLearning" -> "BlackHC/BatchBALD"
"dsgissin/DiscriminativeActiveLearning" -> "NUAA-AL/ALiPy"
"dsgissin/DiscriminativeActiveLearning" -> "google/active-learning"
"dsgissin/DiscriminativeActiveLearning" -> "rmunro/pytorch_active_learning"
"dsgissin/DiscriminativeActiveLearning" -> "markpwoodward/active_osl"
"dsgissin/DiscriminativeActiveLearning" -> "JordanAsh/badge"
"dsgissin/DiscriminativeActiveLearning" -> "Riashat/Deep-Bayesian-Active-Learning"
"dsgissin/DiscriminativeActiveLearning" -> "AAAI2018submission/Adversarial_Active_Learning"
"dsgissin/DiscriminativeActiveLearning" -> "ntucllab/libact"
"dsgissin/DiscriminativeActiveLearning" -> "SineZHAN/deepALplus"
"dsgissin/DiscriminativeActiveLearning" -> "Riashat/Active-Learning-Bayesian-Convolutional-Neural-Networks"
"rmunro/pytorch_active_learning" -> "ej0cl6/deep-active-learning"
"rmunro/pytorch_active_learning" -> "google/active-learning"
"rmunro/pytorch_active_learning" -> "NUAA-AL/ALiPy"
"rmunro/pytorch_active_learning" -> "modAL-python/modAL"
"rmunro/pytorch_active_learning" -> "baifanxxx/awesome-active-learning"
"rmunro/pytorch_active_learning" -> "ntucllab/libact"
"rmunro/pytorch_active_learning" -> "baal-org/baal"
"rmunro/pytorch_active_learning" -> "SupeRuier/awesome-active-learning"
"rmunro/pytorch_active_learning" -> "ozansener/active_learning_coreset"
"rmunro/pytorch_active_learning" -> "dsgissin/DiscriminativeActiveLearning"
"rmunro/pytorch_active_learning" -> "sinhasam/vaal"
"rmunro/pytorch_active_learning" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"rmunro/pytorch_active_learning" -> "SineZHAN/deepALplus"
"rmunro/pytorch_active_learning" -> "yongjin-shin/awesome-active-learning"
"rmunro/pytorch_active_learning" -> "yuantn/MI-AOD"
"sinhasam/vaal" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"sinhasam/vaal" -> "ozansener/active_learning_coreset"
"sinhasam/vaal" -> "JordanAsh/badge"
"sinhasam/vaal" -> "dsgissin/DiscriminativeActiveLearning"
"sinhasam/vaal" -> "BlackHC/BatchBALD"
"sinhasam/vaal" -> "ej0cl6/deep-active-learning"
"sinhasam/vaal" -> "alimottaghi/adversarial-representation-active-learning"
"sinhasam/vaal" -> "avihu111/TypiClust"
"sinhasam/vaal" -> "toantm/BGADL"
"sinhasam/vaal" -> "rmunro/pytorch_active_learning"
"sinhasam/vaal" -> "nihalsid/ViewAL"
"sinhasam/vaal" -> "cubeyoung/TA-VAAL"
"sinhasam/vaal" -> "cure-lab/deep-active-learning"
"sinhasam/vaal" -> "Riashat/Deep-Bayesian-Active-Learning"
"sinhasam/vaal" -> "NUAA-AL/ALiPy"
"bentrevett/pytorch-sentiment-analysis" -> "bentrevett/pytorch-seq2seq"
"bentrevett/pytorch-sentiment-analysis" -> "pytorch/text"
"bentrevett/pytorch-sentiment-analysis" -> "songyouwei/ABSA-PyTorch" ["e"=1]
"bentrevett/pytorch-sentiment-analysis" -> "graykode/nlp-tutorial"
"bentrevett/pytorch-sentiment-analysis" -> "spro/practical-pytorch"
"bentrevett/pytorch-sentiment-analysis" -> "prakashpandey9/Text-Classification-Pytorch" ["e"=1]
"bentrevett/pytorch-sentiment-analysis" -> "allenai/allennlp"
"bentrevett/pytorch-sentiment-analysis" -> "delip/PyTorchNLPBook"
"bentrevett/pytorch-sentiment-analysis" -> "sebastianruder/NLP-progress"
"bentrevett/pytorch-sentiment-analysis" -> "649453932/Chinese-Text-Classification-Pytorch" ["e"=1]
"bentrevett/pytorch-sentiment-analysis" -> "abdulfatir/twitter-sentiment-analysis"
"bentrevett/pytorch-sentiment-analysis" -> "UKPLab/sentence-transformers"
"bentrevett/pytorch-sentiment-analysis" -> "flairNLP/flair"
"bentrevett/pytorch-sentiment-analysis" -> "brightmart/text_classification" ["e"=1]
"bentrevett/pytorch-sentiment-analysis" -> "codertimo/BERT-pytorch"
"clips/pattern" -> "numenta/nupic-legacy" ["e"=1]
"clips/pattern" -> "johnmyleswhite/ML_for_Hackers" ["e"=1]
"clips/pattern" -> "apache/predictionio" ["e"=1]
"clips/pattern" -> "sloria/TextBlob"
"clips/pattern" -> "piskvorky/gensim"
"clips/pattern" -> "VowpalWabbit/vowpal_wabbit" ["e"=1]
"clips/pattern" -> "dive-into-machine-learning/dive-into-machine-learning" ["e"=1]
"clips/pattern" -> "Theano/Theano" ["e"=1]
"clips/pattern" -> "nltk/nltk"
"clips/pattern" -> "explosion/spaCy"
"clips/pattern" -> "airbnb/aerosolve" ["e"=1]
"clips/pattern" -> "codelucas/newspaper" ["e"=1]
"clips/pattern" -> "lisa-lab/pylearn2" ["e"=1]
"clips/pattern" -> "tflearn/tflearn" ["e"=1]
"clips/pattern" -> "pybrain/pybrain" ["e"=1]
"openai/finetune-transformer-lm" -> "huggingface/pytorch-openai-transformer-lm"
"openai/finetune-transformer-lm" -> "allenai/bilm-tf"
"openai/finetune-transformer-lm" -> "kimiyoung/transformer-xl"
"openai/finetune-transformer-lm" -> "zihangdai/xlnet"
"openai/finetune-transformer-lm" -> "facebookresearch/XLM"
"openai/finetune-transformer-lm" -> "Kyubyong/transformer"
"openai/finetune-transformer-lm" -> "namisan/mt-dnn" ["e"=1]
"openai/finetune-transformer-lm" -> "salesforce/decaNLP"
"openai/finetune-transformer-lm" -> "rsennrich/subword-nmt" ["e"=1]
"openai/finetune-transformer-lm" -> "localminimum/QANet" ["e"=1]
"openai/finetune-transformer-lm" -> "allenai/bi-att-flow" ["e"=1]
"openai/finetune-transformer-lm" -> "abisee/pointer-generator" ["e"=1]
"openai/finetune-transformer-lm" -> "allenai/allennlp"
"openai/finetune-transformer-lm" -> "facebookresearch/InferSent"
"openai/finetune-transformer-lm" -> "IndicoDataSolutions/finetune"
"kavgan/nlp-in-practice" -> "susanli2016/NLP-with-Python"
"kavgan/nlp-in-practice" -> "makcedward/nlp"
"kavgan/nlp-in-practice" -> "NirantK/NLP_Quickbook"
"kavgan/nlp-in-practice" -> "nlptown/nlp-notebooks"
"kavgan/nlp-in-practice" -> "msgi/nlp-journey" ["e"=1]
"kavgan/nlp-in-practice" -> "kk7nc/Text_Classification" ["e"=1]
"kavgan/nlp-in-practice" -> "fastai/course-nlp"
"kavgan/nlp-in-practice" -> "explosion/projects"
"kavgan/nlp-in-practice" -> "dipanjanS/text-analytics-with-python"
"kavgan/nlp-in-practice" -> "boudinfl/pke"
"kavgan/nlp-in-practice" -> "gaoisbest/NLP-Projects"
"kavgan/nlp-in-practice" -> "JasonKessler/scattertext"
"kavgan/nlp-in-practice" -> "mihail911/nlp-library" ["e"=1]
"kavgan/nlp-in-practice" -> "microsoft/nlp-recipes"
"kavgan/nlp-in-practice" -> "dair-ai/nlp_paper_summaries"
"vijayanandrp/Thirukkural-Tamil-Dataset" -> "tk120404/thirukkural"
"PetrochukM/PyTorch-NLP" -> "pytorch/text"
"PetrochukM/PyTorch-NLP" -> "allenai/allennlp"
"PetrochukM/PyTorch-NLP" -> "facebookresearch/pytext"
"PetrochukM/PyTorch-NLP" -> "spro/practical-pytorch"
"PetrochukM/PyTorch-NLP" -> "outcastofmusic/quick-nlp"
"PetrochukM/PyTorch-NLP" -> "rguthrie3/DeepLearningForNLPInPytorch"
"PetrochukM/PyTorch-NLP" -> "facebookresearch/XLM"
"PetrochukM/PyTorch-NLP" -> "salesforce/decaNLP"
"PetrochukM/PyTorch-NLP" -> "OpenNMT/OpenNMT-py"
"PetrochukM/PyTorch-NLP" -> "huggingface/pytorch-openai-transformer-lm"
"PetrochukM/PyTorch-NLP" -> "facebookresearch/UnsupervisedMT" ["e"=1]
"PetrochukM/PyTorch-NLP" -> "DSKSD/DeepNLP-models-Pytorch"
"PetrochukM/PyTorch-NLP" -> "IntelLabs/nlp-architect"
"PetrochukM/PyTorch-NLP" -> "facebookresearch/SentEval"
"PetrochukM/PyTorch-NLP" -> "facebookresearch/InferSent"
"yandexdataschool/nlp_course" -> "graykode/nlp-tutorial"
"yandexdataschool/nlp_course" -> "yandexdataschool/Practical_RL" ["e"=1]
"yandexdataschool/nlp_course" -> "yandexdataschool/Practical_DL" ["e"=1]
"yandexdataschool/nlp_course" -> "sebastianruder/NLP-progress"
"yandexdataschool/nlp_course" -> "FudanNLP/nlp-beginner" ["e"=1]
"yandexdataschool/nlp_course" -> "esokolov/ml-course-hse" ["e"=1]
"yandexdataschool/nlp_course" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"yandexdataschool/nlp_course" -> "crownpku/Awesome-Chinese-NLP" ["e"=1]
"yandexdataschool/nlp_course" -> "keon/awesome-nlp"
"yandexdataschool/nlp_course" -> "brightmart/text_classification" ["e"=1]
"yandexdataschool/nlp_course" -> "google-research/bert"
"yandexdataschool/nlp_course" -> "brightmart/nlp_chinese_corpus" ["e"=1]
"yandexdataschool/nlp_course" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"yandexdataschool/nlp_course" -> "girafe-ai/ml-course" ["e"=1]
"yandexdataschool/nlp_course" -> "bharathgs/Awesome-pytorch-list" ["e"=1]
"makcedward/nlpaug" -> "QData/TextAttack"
"makcedward/nlpaug" -> "jasonwei20/eda_nlp" ["e"=1]
"makcedward/nlpaug" -> "UKPLab/sentence-transformers"
"makcedward/nlpaug" -> "princeton-nlp/SimCSE" ["e"=1]
"makcedward/nlpaug" -> "google-research/uda" ["e"=1]
"makcedward/nlpaug" -> "marcotcr/checklist"
"makcedward/nlpaug" -> "ThilinaRajapakse/simpletransformers"
"makcedward/nlpaug" -> "PAIR-code/lit"
"makcedward/nlpaug" -> "flairNLP/flair"
"makcedward/nlpaug" -> "jessevig/bertviz"
"makcedward/nlpaug" -> "styfeng/DataAug4NLP"
"makcedward/nlpaug" -> "allenai/allennlp"
"makcedward/nlpaug" -> "sebastianruder/NLP-progress"
"makcedward/nlpaug" -> "MaartenGr/BERTopic"
"makcedward/nlpaug" -> "thunlp/PLMpapers" ["e"=1]
"huggingface/hmtl" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"huggingface/hmtl" -> "salesforce/decaNLP"
"huggingface/hmtl" -> "namisan/mt-dnn" ["e"=1]
"huggingface/hmtl" -> "nyu-mll/jiant"
"huggingface/hmtl" -> "huggingface/pytorch-openai-transformer-lm"
"huggingface/hmtl" -> "huggingface/neuralcoref"
"huggingface/hmtl" -> "facebookresearch/XLM"
"huggingface/hmtl" -> "Separius/BERT-keras" ["e"=1]
"huggingface/hmtl" -> "JayYip/m3tl" ["e"=1]
"huggingface/hmtl" -> "facebookresearch/adaptive-span" ["e"=1]
"huggingface/hmtl" -> "kentonl/e2e-coref" ["e"=1]
"huggingface/hmtl" -> "huggingface/torchMoji"
"huggingface/hmtl" -> "facebookresearch/SentEval"
"huggingface/hmtl" -> "facebookresearch/SpanBERT" ["e"=1]
"huggingface/hmtl" -> "explosion/spacy-transformers"
"Orange-OpenSource/conllueditor" -> "jonorthwash/ud-annotatrix"
"utterworks/fast-bert" -> "ThilinaRajapakse/simpletransformers"
"utterworks/fast-bert" -> "kaushaltrivedi/bert-toxic-comments-multilabel" ["e"=1]
"utterworks/fast-bert" -> "zihangdai/xlnet"
"utterworks/fast-bert" -> "deepset-ai/FARM"
"utterworks/fast-bert" -> "explosion/spacy-transformers"
"utterworks/fast-bert" -> "facebookresearch/XLM"
"utterworks/fast-bert" -> "huggingface/awesome-papers"
"utterworks/fast-bert" -> "makcedward/nlpaug"
"utterworks/fast-bert" -> "jina-ai/clip-as-service"
"utterworks/fast-bert" -> "allenai/longformer" ["e"=1]
"utterworks/fast-bert" -> "namisan/mt-dnn" ["e"=1]
"utterworks/fast-bert" -> "google-research/albert" ["e"=1]
"utterworks/fast-bert" -> "flairNLP/flair"
"utterworks/fast-bert" -> "facebookresearch/SentEval"
"utterworks/fast-bert" -> "huggingface/neuralcoref"
"facebookresearch/LASER" -> "facebookresearch/XLM"
"facebookresearch/LASER" -> "facebookresearch/MUSE"
"facebookresearch/LASER" -> "rsennrich/subword-nmt" ["e"=1]
"facebookresearch/LASER" -> "THUNLP-MT/MT-Reading-List" ["e"=1]
"facebookresearch/LASER" -> "facebookresearch/UnsupervisedMT" ["e"=1]
"facebookresearch/LASER" -> "google/sentencepiece"
"facebookresearch/LASER" -> "facebookresearch/pytext"
"facebookresearch/LASER" -> "clab/fast_align" ["e"=1]
"facebookresearch/LASER" -> "facebookresearch/SentEval"
"facebookresearch/LASER" -> "facebookresearch/InferSent"
"facebookresearch/LASER" -> "artetxem/vecmap" ["e"=1]
"facebookresearch/LASER" -> "glample/fastBPE" ["e"=1]
"facebookresearch/LASER" -> "facebookresearch/flores" ["e"=1]
"facebookresearch/LASER" -> "allenai/allennlp"
"facebookresearch/LASER" -> "flairNLP/flair"
"LIAAD/yake" -> "boudinfl/pke"
"LIAAD/yake" -> "MaartenGr/KeyBERT"
"LIAAD/yake" -> "csurfer/rake-nltk"
"LIAAD/yake" -> "aneesha/RAKE"
"LIAAD/yake" -> "swisscom/ai-research-keyphrase-extraction"
"LIAAD/yake" -> "chartbeat-labs/textacy"
"LIAAD/yake" -> "vgrabovets/multi_rake"
"LIAAD/yake" -> "DerwenAI/pytextrank"
"LIAAD/yake" -> "sunyilgdx/SIFRank_zh"
"LIAAD/yake" -> "LIAAD/KeywordExtractor-Datasets"
"LIAAD/yake" -> "ibatra/BERT-Keyword-Extractor"
"LIAAD/yake" -> "makcedward/nlpaug"
"LIAAD/yake" -> "thunlp/BERT-KPE"
"LIAAD/yake" -> "MaartenGr/BERTopic"
"LIAAD/yake" -> "ddangelov/Top2Vec"
"SpikeKing/DL-Project-Template" -> "SpikeKing/triplet-loss-mnist" ["e"=1]
"SpikeKing/DL-Project-Template" -> "Ahmkel/Keras-Project-Template"
"SpikeKing/DL-Project-Template" -> "lifeomic/sparkflow"
"SpikeKing/DL-Project-Template" -> "MrGemy95/Tensorflow-Project-Template" ["e"=1]
"Separius/awesome-sentence-embedding" -> "facebookresearch/InferSent"
"Separius/awesome-sentence-embedding" -> "Hironsan/awesome-embedding-models"
"Separius/awesome-sentence-embedding" -> "facebookresearch/SentEval"
"Separius/awesome-sentence-embedding" -> "Jiakui/awesome-bert" ["e"=1]
"Separius/awesome-sentence-embedding" -> "NTMC-Community/MatchZoo" ["e"=1]
"Separius/awesome-sentence-embedding" -> "epfml/sent2vec"
"Separius/awesome-sentence-embedding" -> "zihangdai/xlnet"
"Separius/awesome-sentence-embedding" -> "tomohideshibata/BERT-related-papers" ["e"=1]
"Separius/awesome-sentence-embedding" -> "HIT-SCIR/ELMoForManyLangs"
"Separius/awesome-sentence-embedding" -> "jina-ai/clip-as-service"
"Separius/awesome-sentence-embedding" -> "thunlp/PLMpapers" ["e"=1]
"Separius/awesome-sentence-embedding" -> "PrincetonML/SIF"
"Separius/awesome-sentence-embedding" -> "brightmart/text_classification" ["e"=1]
"Separius/awesome-sentence-embedding" -> "allenai/bilm-tf"
"Separius/awesome-sentence-embedding" -> "allenai/allennlp"
"adbar/German-NLP" -> "tblock/10kGNAD"
"adbar/German-NLP" -> "devmount/GermanWordEmbeddings"
"adbar/German-NLP" -> "tsproisl/SoMaJo"
"adbar/German-NLP" -> "WZBSocialScienceCenter/germalemma"
"adbar/German-NLP" -> "dbmdz/berts"
"adbar/German-NLP" -> "gambolputty/german-nouns"
"adbar/German-NLP" -> "oliverguhr/german-sentiment"
"adbar/German-NLP" -> "oliverguhr/german-sentiment-lib"
"adbar/German-NLP" -> "hdaSprachtechnologie/odenet"
"adbar/German-NLP" -> "gesistsa/oolong" ["e"=1]
"adbar/German-NLP" -> "elenanereiss/Legal-Entity-Recognition" ["e"=1]
"adbar/German-NLP" -> "thorstenMueller/Thorsten-Voice" ["e"=1]
"adbar/German-NLP" -> "dkpro/dkpro-cassis"
"adbar/German-NLP" -> "stefan-it/europeana-bert"
"adbar/German-NLP" -> "PolMine/GermaParlTEI"
"amaiya/ktrain" -> "ThilinaRajapakse/simpletransformers"
"amaiya/ktrain" -> "utterworks/fast-bert"
"amaiya/ktrain" -> "ddangelov/Top2Vec"
"amaiya/ktrain" -> "deepset-ai/FARM"
"amaiya/ktrain" -> "PAIR-code/lit"
"amaiya/ktrain" -> "QData/TextAttack"
"amaiya/ktrain" -> "jfilter/clean-text"
"amaiya/ktrain" -> "makcedward/nlpaug"
"amaiya/ktrain" -> "cdpierse/transformers-interpret"
"amaiya/ktrain" -> "MilaNLProc/contextualized-topic-models"
"amaiya/ktrain" -> "JohnSnowLabs/nlu"
"amaiya/ktrain" -> "MaartenGr/BERTopic"
"amaiya/ktrain" -> "GEM-benchmark/NL-Augmenter"
"amaiya/ktrain" -> "georgian-io/Multimodal-Toolkit" ["e"=1]
"amaiya/ktrain" -> "keras-team/keras-tuner" ["e"=1]
"zihangdai/mos" -> "benkrause/dynamic-evaluation"
"zihangdai/mos" -> "salesforce/awd-lstm-lm"
"zihangdai/mos" -> "salesforce/nonauto-nmt" ["e"=1]
"zihangdai/mos" -> "nyu-dl/dl4mt-nonauto" ["e"=1]
"zihangdai/mos" -> "dreasysnail/deconv_paragraph_represention" ["e"=1]
"zihangdai/mos" -> "kelvinguu/neural-editor" ["e"=1]
"zihangdai/mos" -> "salesforce/pytorch-qrnn"
"zihangdai/mos" -> "ChengyueGongR/Frequency-Agnostic"
"facebookresearch/XLM" -> "facebookresearch/UnsupervisedMT" ["e"=1]
"facebookresearch/XLM" -> "facebookresearch/LASER"
"facebookresearch/XLM" -> "facebookresearch/MUSE"
"facebookresearch/XLM" -> "rsennrich/subword-nmt" ["e"=1]
"facebookresearch/XLM" -> "zihangdai/xlnet"
"facebookresearch/XLM" -> "THUNLP-MT/MT-Reading-List" ["e"=1]
"facebookresearch/XLM" -> "microsoft/MASS" ["e"=1]
"facebookresearch/XLM" -> "kimiyoung/transformer-xl"
"facebookresearch/XLM" -> "OpenNMT/OpenNMT-py"
"facebookresearch/XLM" -> "glample/fastBPE" ["e"=1]
"facebookresearch/XLM" -> "artetxem/vecmap" ["e"=1]
"facebookresearch/XLM" -> "namisan/mt-dnn" ["e"=1]
"facebookresearch/XLM" -> "google/sentencepiece"
"facebookresearch/XLM" -> "allenai/allennlp"
"facebookresearch/XLM" -> "facebookresearch/pytext"
"CalculatedContent/WeightWatcher" -> "f-dangel/cockpit" ["e"=1]
"CalculatedContent/WeightWatcher" -> "cdpierse/transformers-interpret"
"CalculatedContent/WeightWatcher" -> "NannyML/nannyml" ["e"=1]
"CalculatedContent/WeightWatcher" -> "koaning/doubtlab" ["e"=1]
"CalculatedContent/WeightWatcher" -> "jalammar/ecco"
"CalculatedContent/WeightWatcher" -> "huggingface/setfit"
"CalculatedContent/WeightWatcher" -> "awslabs/fortuna" ["e"=1]
"CalculatedContent/WeightWatcher" -> "pytorch/functorch" ["e"=1]
"CalculatedContent/WeightWatcher" -> "deepchecks/deepchecks" ["e"=1]
"CalculatedContent/WeightWatcher" -> "SelfExplainML/PiML-Toolbox" ["e"=1]
"CalculatedContent/WeightWatcher" -> "Lightning-Universe/lightning-bolts" ["e"=1]
"CalculatedContent/WeightWatcher" -> "argilla-io/argilla"
"CalculatedContent/WeightWatcher" -> "patrick-kidger/torchtyping" ["e"=1]
"CalculatedContent/WeightWatcher" -> "google/neural-tangents" ["e"=1]
"CalculatedContent/WeightWatcher" -> "oegedijk/explainerdashboard" ["e"=1]
"NirantK/NLP_Quickbook" -> "hb20007/hands-on-nltk-tutorial"
"NirantK/NLP_Quickbook" -> "ElizaLo/NLP-Natural-Language-Processing"
"NirantK/NLP_Quickbook" -> "brianspiering/awesome-dl4nlp"
"NirantK/NLP_Quickbook" -> "costezki/awesome-nlprojects"
"NirantK/NLP_Quickbook" -> "nlptown/nlp-notebooks"
"NirantK/NLP_Quickbook" -> "NirantK/best-of-jupyter"
"NirantK/NLP_Quickbook" -> "kavgan/nlp-in-practice"
"NirantK/NLP_Quickbook" -> "cedrickchee/awesome-transformer-nlp" ["e"=1]
"NirantK/NLP_Quickbook" -> "susanli2016/NLP-with-Python"
"NirantK/NLP_Quickbook" -> "omarsar/nlp_overview"
"NirantK/NLP_Quickbook" -> "astorfi/Deep-Learning-NLP"
"NirantK/NLP_Quickbook" -> "fastai/course-nlp"
"NirantK/NLP_Quickbook" -> "keon/awesome-nlp"
"NirantK/NLP_Quickbook" -> "gaoisbest/NLP-Projects"
"NirantK/NLP_Quickbook" -> "dipanjanS/practical-machine-learning-with-python"
"Andras7/word2vec-pytorch" -> "OlgaChernytska/word2vec-pytorch"
"Andras7/word2vec-pytorch" -> "theeluwin/pytorch-sgns"
"lopuhin/transformer-lm" -> "ak9250/gpt-2-colab"
"lopuhin/transformer-lm" -> "rkfg/gpt-2"
"imgarylai/bert-embedding" -> "Kyubyong/bert-token-embeddings"
"imgarylai/bert-embedding" -> "szha/KDD18-Gluon" ["e"=1]
"imgarylai/bert-embedding" -> "dmlc/gluon-nlp"
"imgarylai/bert-embedding" -> "brightmart/bert_language_understanding" ["e"=1]
"imgarylai/bert-embedding" -> "PrincetonML/SIF"
"imgarylai/bert-embedding" -> "howardhsu/BERT-for-RRC-ABSA" ["e"=1]
"microsoft/nlp-recipes" -> "sebastianruder/NLP-progress"
"microsoft/nlp-recipes" -> "flairNLP/flair"
"microsoft/nlp-recipes" -> "fastai/course-nlp"
"microsoft/nlp-recipes" -> "allenai/allennlp"
"microsoft/nlp-recipes" -> "keon/awesome-nlp"
"microsoft/nlp-recipes" -> "graykode/nlp-tutorial"
"microsoft/nlp-recipes" -> "recommenders-team/recommenders" ["e"=1]
"microsoft/nlp-recipes" -> "microsoft/computervision-recipes" ["e"=1]
"microsoft/nlp-recipes" -> "stanfordnlp/stanza"
"microsoft/nlp-recipes" -> "ivan-bilan/The-NLP-Pandect"
"microsoft/nlp-recipes" -> "dair-ai/nlp_paper_summaries"
"microsoft/nlp-recipes" -> "microsoft/forecasting" ["e"=1]
"microsoft/nlp-recipes" -> "facebookresearch/pytext"
"microsoft/nlp-recipes" -> "huggingface/tokenizers"
"microsoft/nlp-recipes" -> "chiphuyen/machine-learning-systems-design" ["e"=1]
"microsoft/BlingFire" -> "facebookresearch/XLM"
"microsoft/BlingFire" -> "marian-nmt/marian" ["e"=1]
"microsoft/BlingFire" -> "microsoft/SPTAG" ["e"=1]
"microsoft/BlingFire" -> "google/sentencepiece"
"microsoft/BlingFire" -> "huggingface/neuralcoref"
"microsoft/BlingFire" -> "facebookresearch/pytext"
"microsoft/BlingFire" -> "plasticityai/magnitude"
"microsoft/BlingFire" -> "deepset-ai/FARM"
"microsoft/BlingFire" -> "curiosity-ai/catalyst" ["e"=1]
"microsoft/BlingFire" -> "VKCOM/YouTokenToMe" ["e"=1]
"microsoft/BlingFire" -> "castorini/anserini" ["e"=1]
"microsoft/BlingFire" -> "nipunsadvilkar/pySBD"
"microsoft/BlingFire" -> "attardi/wikiextractor"
"microsoft/BlingFire" -> "microsoft/nlp-recipes"
"microsoft/BlingFire" -> "huggingface/tokenizers"
"explosion/spacy-course" -> "ines/course-starter-python"
"explosion/spacy-course" -> "explosion/spacy-transformers"
"explosion/spacy-course" -> "explosion/projects"
"explosion/spacy-course" -> "chartbeat-labs/textacy"
"explosion/spacy-course" -> "explosion/thinc"
"explosion/spacy-course" -> "explosion/spacy-models"
"explosion/spacy-course" -> "ines/course-starter-r" ["e"=1]
"explosion/spacy-course" -> "huggingface/neuralcoref"
"explosion/spacy-course" -> "explosion/sense2vec"
"explosion/spacy-course" -> "microsoft/nlp-recipes"
"explosion/spacy-course" -> "allenai/scispacy" ["e"=1]
"explosion/spacy-course" -> "fastai/course-nlp"
"explosion/spacy-course" -> "explosion/spacy-stanza"
"explosion/spacy-course" -> "flairNLP/flair"
"explosion/spacy-course" -> "explosion/prodigy-recipes"
"Kyubyong/nlp_tasks" -> "niderhoff/nlp-datasets"
"Kyubyong/nlp_tasks" -> "allenai/allennlp"
"Kyubyong/nlp_tasks" -> "brightmart/text_classification" ["e"=1]
"Kyubyong/nlp_tasks" -> "crownpku/Awesome-Chinese-NLP" ["e"=1]
"Kyubyong/nlp_tasks" -> "google/seq2seq"
"Kyubyong/nlp_tasks" -> "facebookresearch/DrQA" ["e"=1]
"Kyubyong/nlp_tasks" -> "spro/practical-pytorch"
"Kyubyong/nlp_tasks" -> "DSKSD/DeepNLP-models-Pytorch"
"Kyubyong/nlp_tasks" -> "andrewt3000/DL4NLP"
"Kyubyong/nlp_tasks" -> "keon/awesome-nlp"
"Kyubyong/nlp_tasks" -> "RedditSota/state-of-the-art-result-for-machine-learning-problems" ["e"=1]
"Kyubyong/nlp_tasks" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"Kyubyong/nlp_tasks" -> "sebastianruder/NLP-progress"
"Kyubyong/nlp_tasks" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"Kyubyong/nlp_tasks" -> "karthikncode/nlp-datasets" ["e"=1]
"chbrown/liwc-python" -> "evanll/liwc-text-analysis-python"
"chbrown/liwc-python" -> "thunlp/Auto_CLIWC"
"chbrown/liwc-python" -> "Ejhfast/empath-client"
"chbrown/liwc-python" -> "SkotBotCambo/liwcExtractor"
"chbrown/liwc-python" -> "dfederschmidt/pyliwc"
"chbrown/liwc-python" -> "kbenoit/LIWCalike"
"HazyResearch/deepdive" -> "snorkel-team/snorkel"
"HazyResearch/deepdive" -> "deepwel/Chinese-Annotator" ["e"=1]
"HazyResearch/deepdive" -> "thunlp/OpenNRE" ["e"=1]
"HazyResearch/deepdive" -> "thunlp/NRE" ["e"=1]
"HazyResearch/deepdive" -> "crownpku/Information-Extraction-Chinese" ["e"=1]
"HazyResearch/deepdive" -> "memect/kg-beijing" ["e"=1]
"HazyResearch/deepdive" -> "Pelhans/Z_knowledge_graph" ["e"=1]
"HazyResearch/deepdive" -> "cemoody/lda2vec"
"HazyResearch/deepdive" -> "Franck-Dernoncourt/NeuroNER" ["e"=1]
"HazyResearch/deepdive" -> "brmson/yodaqa" ["e"=1]
"HazyResearch/deepdive" -> "mit-nlp/MITIE" ["e"=1]
"HazyResearch/deepdive" -> "thunlp/KB2E" ["e"=1]
"HazyResearch/deepdive" -> "INK-USC/USC-DS-RelationExtraction" ["e"=1]
"HazyResearch/deepdive" -> "machinalis/iepy" ["e"=1]
"HazyResearch/deepdive" -> "ryankiros/skip-thoughts" ["e"=1]
"latitudegames/AIDungeon" -> "marblexu/PythonPlantsVsZombies" ["e"=1]
"latitudegames/AIDungeon" -> "minimaxir/gpt-2-simple"
"latitudegames/AIDungeon" -> "cloveranon/Clover-Edition"
"latitudegames/AIDungeon" -> "KoboldAI/KoboldAI-Client" ["e"=1]
"latitudegames/AIDungeon" -> "openai/gpt-2"
"latitudegames/AIDungeon" -> "TerryCavanagh/VVVVVV" ["e"=1]
"latitudegames/AIDungeon" -> "storybro/storybro"
"latitudegames/AIDungeon" -> "NetHack/NetHack" ["e"=1]
"latitudegames/AIDungeon" -> "OpenDiablo2/OpenDiablo2" ["e"=1]
"latitudegames/AIDungeon" -> "thadunge2/AIDungeon"
"latitudegames/AIDungeon" -> "nickwalton/AI-DungeonMaster"
"latitudegames/AIDungeon" -> "joel-simon/ganbreeder" ["e"=1]
"latitudegames/AIDungeon" -> "Eigenbahn/ai-dungeon-cli"
"latitudegames/AIDungeon" -> "Azgaar/Fantasy-Map-Generator" ["e"=1]
"latitudegames/AIDungeon" -> "minimaxir/textgenrnn"
"salesforce/decaNLP" -> "huggingface/pytorch-openai-transformer-lm"
"salesforce/decaNLP" -> "facebookresearch/XLM"
"salesforce/decaNLP" -> "IntelLabs/nlp-architect"
"salesforce/decaNLP" -> "allenai/allennlp"
"salesforce/decaNLP" -> "facebookresearch/UnsupervisedMT" ["e"=1]
"salesforce/decaNLP" -> "salesforce/awd-lstm-lm"
"salesforce/decaNLP" -> "facebookresearch/pytext"
"salesforce/decaNLP" -> "jacobeisenstein/gt-nlp-class"
"salesforce/decaNLP" -> "openai/finetune-transformer-lm"
"salesforce/decaNLP" -> "zihangdai/xlnet"
"salesforce/decaNLP" -> "huggingface/hmtl"
"salesforce/decaNLP" -> "asyml/texar" ["e"=1]
"salesforce/decaNLP" -> "PetrochukM/PyTorch-NLP"
"salesforce/decaNLP" -> "localminimum/QANet" ["e"=1]
"salesforce/decaNLP" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"virtualvinodh/aksharamukha" -> "virtualvinodh/aksharamukha-python"
"virtualvinodh/aksharamukha" -> "indic-transliteration/sanscript.js"
"virtualvinodh/aksharamukha" -> "ashtadhyayi-com/data"
"virtualvinodh/aksharamukha" -> "ambuda-org/ambuda"
"virtualvinodh/aksharamukha" -> "sanskrit/raw_etexts"
"virtualvinodh/aksharamukha" -> "OliverHellwig/sanskrit"
"virtualvinodh/aksharamukha" -> "indic-transliteration/indic_transliteration_py"
"virtualvinodh/aksharamukha" -> "Sandhi-IITBombay/Shobhika"
"virtualvinodh/aksharamukha" -> "sanskrit/ashtadhyayi"
"adashofdata/nlp-in-python-tutorial" -> "adashofdata/intro-to-text-analytics"
"adashofdata/nlp-in-python-tutorial" -> "susanli2016/NLP-with-Python"
"adashofdata/nlp-in-python-tutorial" -> "dipanjanS/text-analytics-with-python"
"adashofdata/nlp-in-python-tutorial" -> "adashofdata/muffin-cupcake"
"adashofdata/nlp-in-python-tutorial" -> "fastai/course-nlp"
"adashofdata/nlp-in-python-tutorial" -> "NirantK/NLP_Quickbook"
"adashofdata/nlp-in-python-tutorial" -> "dipanjanS/practical-machine-learning-with-python"
"adashofdata/nlp-in-python-tutorial" -> "kavgan/nlp-in-practice"
"adashofdata/nlp-in-python-tutorial" -> "lyeoni/nlp-tutorial" ["e"=1]
"adashofdata/nlp-in-python-tutorial" -> "hse-aml/natural-language-processing" ["e"=1]
"adashofdata/nlp-in-python-tutorial" -> "susanli2016/Machine-Learning-with-Python"
"adashofdata/nlp-in-python-tutorial" -> "microsoft/nlp-recipes"
"adashofdata/nlp-in-python-tutorial" -> "graykode/nlp-tutorial"
"adashofdata/nlp-in-python-tutorial" -> "justmarkham/pandas-videos" ["e"=1]
"adashofdata/nlp-in-python-tutorial" -> "yandexdataschool/nlp_course"
"goru001/nlp-for-hindi" -> "AI4Bharat/indicnlp_corpus"
"goru001/nlp-for-hindi" -> "NirantK/hindi2vec"
"goru001/nlp-for-hindi" -> "mapmeld/hindi-bert"
"goru001/inltk" -> "AI4Bharat/indicnlp_catalog"
"goru001/inltk" -> "anoopkunchukuttan/indic_nlp_library"
"goru001/inltk" -> "AI4Bharat/Indic-BERT-v1"
"goru001/inltk" -> "AI4Bharat/indicnlp_corpus"
"goru001/inltk" -> "goru001/nlp-for-hindi"
"goru001/inltk" -> "libindic/indic-trans"
"goru001/inltk" -> "goru001/nlp-for-sanskrit"
"goru001/inltk" -> "AI4Bharat/IndicTrans2"
"goru001/inltk" -> "renatoviolin/next_word_prediction"
"goru001/inltk" -> "google-research-datasets/dakshina"
"goru001/inltk" -> "theainerd/MLInterview" ["e"=1]
"goru001/inltk" -> "dair-ai/nlp_paper_summaries"
"goru001/inltk" -> "neubig/lowresource-nlp-bootcamp-2020"
"goru001/inltk" -> "huggingface/knockknock"
"goru001/inltk" -> "ivan-bilan/The-NLP-Pandect"
"danielfrg/word2vec" -> "dav/word2vec"
"danielfrg/word2vec" -> "stanfordnlp/GloVe"
"danielfrg/word2vec" -> "tmikolov/word2vec"
"danielfrg/word2vec" -> "yoonkim/CNN_sentence" ["e"=1]
"danielfrg/word2vec" -> "piskvorky/gensim"
"danielfrg/word2vec" -> "3Top/word2vec-api"
"danielfrg/word2vec" -> "dennybritz/cnn-text-classification-tf"
"danielfrg/word2vec" -> "google/seq2seq"
"danielfrg/word2vec" -> "maciejkula/glove-python"
"danielfrg/word2vec" -> "brightmart/text_classification" ["e"=1]
"danielfrg/word2vec" -> "facebookresearch/fastText"
"danielfrg/word2vec" -> "phanein/deepwalk" ["e"=1]
"danielfrg/word2vec" -> "koth/kcws" ["e"=1]
"danielfrg/word2vec" -> "HIT-SCIR/ltp" ["e"=1]
"danielfrg/word2vec" -> "farizrahman4u/seq2seq" ["e"=1]
"programminghistorian/jekyll" -> "programminghistorian/ph-submissions"
"programminghistorian/jekyll" -> "cu-nil/chnotes"
"programminghistorian/jekyll" -> "melaniewalsh/Intro-Cultural-Analytics"
"programminghistorian/jekyll" -> "dh-tech/awesome-digital-humanities" ["e"=1]
"programminghistorian/jekyll" -> "dbamman/book-nlp"
"programminghistorian/jekyll" -> "maehr/awesome-digital-history" ["e"=1]
"programminghistorian/jekyll" -> "booknlp/booknlp"
"programminghistorian/jekyll" -> "archivesunleashed/aut" ["e"=1]
"programminghistorian/jekyll" -> "TEIC/TEI" ["e"=1]
"programminghistorian/jekyll" -> "curateteaching/digitalpedagogy" ["e"=1]
"programminghistorian/jekyll" -> "jarmoza/twic"
"programminghistorian/jekyll" -> "ropensci/historydata"
"programminghistorian/jekyll" -> "distant-viewing/dvt"
"jayparks/transformer" -> "leviswind/pytorch-transformer"
"jayparks/transformer" -> "jadore801120/attention-is-all-you-need-pytorch"
"jayparks/transformer" -> "wmathor/nlp-tutorial" ["e"=1]
"jayparks/transformer" -> "SamLynnEvans/Transformer"
"jayparks/transformer" -> "Kyubyong/transformer"
"jayparks/transformer" -> "keon/seq2seq"
"jayparks/transformer" -> "dhlee347/pytorchic-bert" ["e"=1]
"jayparks/transformer" -> "tunz/transformer-pytorch"
"jayparks/transformer" -> "hemingkx/ChineseNMT"
"jayparks/transformer" -> "kimiyoung/transformer-xl"
"nyu-mll/jiant" -> "nyu-mll/GLUE-baselines"
"nyu-mll/jiant" -> "facebookresearch/SentEval"
"nyu-mll/jiant" -> "namisan/mt-dnn" ["e"=1]
"nyu-mll/jiant" -> "facebookresearch/XLM"
"nyu-mll/jiant" -> "facebookresearch/InferSent"
"nyu-mll/jiant" -> "john-hewitt/structural-probes"
"nyu-mll/jiant" -> "salesforce/awd-lstm-lm"
"nyu-mll/jiant" -> "salesforce/decaNLP"
"nyu-mll/jiant" -> "marcotcr/checklist"
"nyu-mll/jiant" -> "tomohideshibata/BERT-related-papers" ["e"=1]
"nyu-mll/jiant" -> "huggingface/hmtl"
"nyu-mll/jiant" -> "harvardnlp/pytorch-struct" ["e"=1]
"nyu-mll/jiant" -> "pytorch/text"
"nyu-mll/jiant" -> "neulab/compare-mt" ["e"=1]
"nyu-mll/jiant" -> "facebookresearch/SpanBERT" ["e"=1]
"yet-another-account/openwebtext" -> "jcpeterson/openwebtext"
"yet-another-account/openwebtext" -> "akanyaani/gpt-2-tensorflow2.0"
"NVIDIA/sentiment-discovery" -> "openai/generating-reviews-discovering-sentiment"
"NVIDIA/sentiment-discovery" -> "guillitte/pytorch-sentiment-neuron"
"NVIDIA/sentiment-discovery" -> "zihangdai/mos"
"NVIDIA/sentiment-discovery" -> "salesforce/awd-lstm-lm"
"NVIDIA/sentiment-discovery" -> "facebookresearch/InferSent"
"NVIDIA/sentiment-discovery" -> "salesforce/pytorch-qrnn"
"NVIDIA/sentiment-discovery" -> "facebookresearch/SentEval"
"NVIDIA/sentiment-discovery" -> "huggingface/torchMoji"
"NVIDIA/sentiment-discovery" -> "openai/finetune-transformer-lm"
"NVIDIA/sentiment-discovery" -> "bfelbo/DeepMoji"
"NVIDIA/sentiment-discovery" -> "vanzytay/pytorch_sentiment_rnn" ["e"=1]
"NVIDIA/sentiment-discovery" -> "salesforce/decaNLP"
"NVIDIA/sentiment-discovery" -> "plasticityai/magnitude"
"NVIDIA/sentiment-discovery" -> "cedias/Hierarchical-Sentiment" ["e"=1]
"NVIDIA/sentiment-discovery" -> "facebookresearch/XLM"
"shreevatsa/sanskrit" -> "sanskrit/sanskrit"
"shreevatsa/sanskrit" -> "ashtadhyayi-com/data"
"shreevatsa/sanskrit" -> "kmadathil/sanskrit_parser"
"shreevatsa/sanskrit" -> "drdhaval2785/SanskritVerb"
"shreevatsa/sanskrit" -> "avinashvarna/sanskrit_tts"
"shreevatsa/sanskrit" -> "OliverHellwig/sanskrit"
"shreevatsa/sanskrit" -> "avinashvarna/audio_alignment"
"shreevatsa/sanskrit" -> "drdhaval2785/SanskritSubanta"
"openai/gpt-2-output-dataset" -> "openai/gpt-2"
"openai/gpt-2-output-dataset" -> "nshepperd/gpt-2"
"openai/gpt-2-output-dataset" -> "minimaxir/gpt-2-simple"
"openai/gpt-2-output-dataset" -> "rowanz/grover"
"openai/gpt-2-output-dataset" -> "jcpeterson/openwebtext"
"openai/gpt-2-output-dataset" -> "eric-mitchell/detect-gpt" ["e"=1]
"openai/gpt-2-output-dataset" -> "graykode/gpt-2-Pytorch"
"openai/gpt-2-output-dataset" -> "microsoft/DialoGPT" ["e"=1]
"openai/gpt-2-output-dataset" -> "openai/finetune-transformer-lm"
"openai/gpt-2-output-dataset" -> "salesforce/ctrl"
"openai/gpt-2-output-dataset" -> "HendrikStrobelt/detecting-fake-text" ["e"=1]
"openai/gpt-2-output-dataset" -> "huggingface/pytorch-openai-transformer-lm"
"openai/gpt-2-output-dataset" -> "openai/image-gpt" ["e"=1]
"openai/gpt-2-output-dataset" -> "kimiyoung/transformer-xl"
"openai/gpt-2-output-dataset" -> "yet-another-account/openwebtext"
"dmlc/gluon-nlp" -> "dmlc/gluon-cv" ["e"=1]
"dmlc/gluon-nlp" -> "IntelLabs/nlp-architect"
"dmlc/gluon-nlp" -> "salesforce/decaNLP"
"dmlc/gluon-nlp" -> "facebookresearch/pytext"
"dmlc/gluon-nlp" -> "awslabs/sockeye" ["e"=1]
"dmlc/gluon-nlp" -> "allenai/allennlp"
"dmlc/gluon-nlp" -> "zihangdai/xlnet"
"dmlc/gluon-nlp" -> "zackchase/mxnet-the-straight-dope" ["e"=1]
"dmlc/gluon-nlp" -> "allenai/bilm-tf"
"dmlc/gluon-nlp" -> "chinakook/Awesome-MXNet" ["e"=1]
"dmlc/gluon-nlp" -> "Separius/awesome-sentence-embedding"
"dmlc/gluon-nlp" -> "facebookresearch/XLM"
"dmlc/gluon-nlp" -> "asyml/texar" ["e"=1]
"dmlc/gluon-nlp" -> "facebookresearch/InferSent"
"dmlc/gluon-nlp" -> "kimiyoung/transformer-xl"
"piskvorky/gensim-data" -> "commonsense/conceptnet-numberbatch"
"piskvorky/gensim-data" -> "piskvorky/gensim"
"piskvorky/gensim-data" -> "3Top/word2vec-api"
"piskvorky/gensim-data" -> "facebookresearch/SentEval"
"piskvorky/gensim-data" -> "facebookresearch/InferSent"
"piskvorky/gensim-data" -> "niderhoff/nlp-datasets"
"piskvorky/gensim-data" -> "stanfordnlp/GloVe"
"piskvorky/gensim-data" -> "maciejkula/glove-python"
"piskvorky/gensim-data" -> "brmson/dataset-sts"
"piskvorky/gensim-data" -> "allenai/bilm-tf"
"piskvorky/gensim-data" -> "ddangelov/Top2Vec"
"piskvorky/gensim-data" -> "epfml/sent2vec"
"piskvorky/gensim-data" -> "strongio/keras-elmo" ["e"=1]
"piskvorky/gensim-data" -> "chartbeat-labs/textacy"
"piskvorky/gensim-data" -> "pytorch/text"
"goru001/nlp-for-sanskrit" -> "shreevatsa/sanskrit"
"goru001/nlp-for-sanskrit" -> "sanskrit/sanskrit"
"goru001/nlp-for-sanskrit" -> "shivanikohlii/SanTran"
"goru001/nlp-for-sanskrit" -> "sanskrit/raw_etexts"
"goru001/nlp-for-sanskrit" -> "OliverHellwig/sanskrit"
"jcpeterson/openwebtext" -> "yet-another-account/openwebtext"
"jcpeterson/openwebtext" -> "soskek/bookcorpus"
"jcpeterson/openwebtext" -> "openai/gpt-2-output-dataset"
"jcpeterson/openwebtext" -> "EleutherAI/the-pile" ["e"=1]
"jcpeterson/openwebtext" -> "nshepperd/gpt-2"
"jcpeterson/openwebtext" -> "VKCOM/YouTokenToMe" ["e"=1]
"jcpeterson/openwebtext" -> "facebookresearch/cc_net" ["e"=1]
"jcpeterson/openwebtext" -> "salesforce/ctrl"
"jcpeterson/openwebtext" -> "rowanz/grover"
"jcpeterson/openwebtext" -> "facebookresearch/ELI5" ["e"=1]
"jcpeterson/openwebtext" -> "google-research/deduplicate-text-datasets" ["e"=1]
"jcpeterson/openwebtext" -> "huggingface/pytorch_block_sparse" ["e"=1]
"jcpeterson/openwebtext" -> "google-deepmind/pg19"
"jcpeterson/openwebtext" -> "google-research/xtreme" ["e"=1]
"jcpeterson/openwebtext" -> "bigscience-workshop/bigscience" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "dipanjanS/practical-machine-learning-with-python"
"hundredblocks/concrete_NLP_tutorial" -> "fastai/course-nlp"
"hundredblocks/concrete_NLP_tutorial" -> "marcotcr/lime" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "susanli2016/NLP-with-Python"
"hundredblocks/concrete_NLP_tutorial" -> "hse-aml/natural-language-processing" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "rouseguy/DeepLearning-NLP" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "lyeoni/nlp-tutorial" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "mesolitica/NLP-Models-Tensorflow" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "jacobeisenstein/gt-nlp-class"
"hundredblocks/concrete_NLP_tutorial" -> "NirantK/NLP_Quickbook"
"hundredblocks/concrete_NLP_tutorial" -> "hundredblocks/ml-powered-applications" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "UKPLab/deeplearning4nlp-tutorial"
"hundredblocks/concrete_NLP_tutorial" -> "RubensZimbres/Repo-2017" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "brightmart/text_classification" ["e"=1]
"hundredblocks/concrete_NLP_tutorial" -> "salesforce/decaNLP"
"neubig/nn4nlp-code" -> "neulab/nn4nlp-concepts"
"neubig/nn4nlp-code" -> "neubig/nlptutorial"
"neubig/nn4nlp-code" -> "neubig/lowresource-nlp-bootcamp-2020"
"neubig/nn4nlp-code" -> "clab/dynet"
"neubig/nn4nlp-code" -> "jacobeisenstein/gt-nlp-class"
"neubig/nn4nlp-code" -> "DSKSD/DeepNLP-models-Pytorch"
"neubig/nn4nlp-code" -> "rguthrie3/DeepLearningForNLPInPytorch"
"neubig/nn4nlp-code" -> "thunlp/PLMpapers" ["e"=1]
"neubig/nn4nlp-code" -> "allenai/allennlp"
"neubig/nn4nlp-code" -> "spro/practical-pytorch"
"neubig/nn4nlp-code" -> "pytorch/text"
"neubig/nn4nlp-code" -> "tomohideshibata/BERT-related-papers" ["e"=1]
"neubig/nn4nlp-code" -> "OpenNMT/OpenNMT-py"
"neubig/nn4nlp-code" -> "facebookresearch/MUSE"
"neubig/nn4nlp-code" -> "stanfordnlp/cs224n-winter17-notes"
"thunlp/TAADpapers" -> "thunlp/OpenAttack"
"thunlp/TAADpapers" -> "QData/TextAttack"
"thunlp/TAADpapers" -> "jind11/TextFooler"
"thunlp/TAADpapers" -> "THUYimingLi/backdoor-learning-resources" ["e"=1]
"thunlp/TAADpapers" -> "nesl/nlp_adversarial_examples"
"thunlp/TAADpapers" -> "Eric-Wallace/universal-triggers"
"thunlp/TAADpapers" -> "P2333/Papers-of-Robust-ML" ["e"=1]
"thunlp/TAADpapers" -> "BorealisAI/advertorch" ["e"=1]
"thunlp/TAADpapers" -> "fuzhenxin/Style-Transfer-in-Text" ["e"=1]
"thunlp/TAADpapers" -> "thunlp/PLMpapers" ["e"=1]
"thunlp/TAADpapers" -> "thunlp/PromptPapers" ["e"=1]
"thunlp/TAADpapers" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"thunlp/TAADpapers" -> "advboxes/AdvBox" ["e"=1]
"thunlp/TAADpapers" -> "textflint/textflint"
"thunlp/TAADpapers" -> "namisan/mt-dnn" ["e"=1]
"gnes-ai/gnes" -> "koursaros-ai/nboost" ["e"=1]
"gnes-ai/gnes" -> "Hironsan/bertsearch" ["e"=1]
"gnes-ai/gnes" -> "castorini/anserini" ["e"=1]
"gnes-ai/gnes" -> "plasticityai/magnitude"
"gnes-ai/gnes" -> "jina-ai/clip-as-service"
"gnes-ai/gnes" -> "IndicoDataSolutions/finetune"
"gnes-ai/gnes" -> "jina-ai/examples" ["e"=1]
"gnes-ai/gnes" -> "facebookresearch/StarSpace"
"gnes-ai/gnes" -> "linkedin/detext"
"gnes-ai/gnes" -> "NTMC-Community/MatchZoo" ["e"=1]
"gnes-ai/gnes" -> "deepset-ai/FARM"
"gnes-ai/gnes" -> "NTMC-Community/awesome-neural-models-for-semantic-match" ["e"=1]
"gnes-ai/gnes" -> "ICLRandD/Blackstone" ["e"=1]
"gnes-ai/gnes" -> "zihangdai/xlnet"
"gnes-ai/gnes" -> "charlesXu86/Chatbot_CN" ["e"=1]
"huggingface/pytorch-openai-transformer-lm" -> "openai/finetune-transformer-lm"
"huggingface/pytorch-openai-transformer-lm" -> "kimiyoung/transformer-xl"
"huggingface/pytorch-openai-transformer-lm" -> "salesforce/decaNLP"
"huggingface/pytorch-openai-transformer-lm" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"huggingface/pytorch-openai-transformer-lm" -> "salesforce/awd-lstm-lm"
"huggingface/pytorch-openai-transformer-lm" -> "facebookresearch/XLM"
"huggingface/pytorch-openai-transformer-lm" -> "PetrochukM/PyTorch-NLP"
"huggingface/pytorch-openai-transformer-lm" -> "facebookresearch/UnsupervisedMT" ["e"=1]
"huggingface/pytorch-openai-transformer-lm" -> "zihangdai/xlnet"
"huggingface/pytorch-openai-transformer-lm" -> "facebookresearch/pytext"
"huggingface/pytorch-openai-transformer-lm" -> "codertimo/BERT-pytorch"
"huggingface/pytorch-openai-transformer-lm" -> "allenai/allennlp"
"huggingface/pytorch-openai-transformer-lm" -> "rsennrich/subword-nmt" ["e"=1]
"huggingface/pytorch-openai-transformer-lm" -> "HIT-SCIR/ELMoForManyLangs"
"huggingface/pytorch-openai-transformer-lm" -> "IBM/pytorch-seq2seq"
"bojone/on-lstm" -> "yikangshen/Ordered-Neurons"
"bojone/on-lstm" -> "CyberZHG/keras-ordered-neurons"
"graykode/gpt-2-Pytorch" -> "affjljoo3581/GPT2"
"graykode/gpt-2-Pytorch" -> "minimaxir/gpt-2-simple"
"graykode/gpt-2-Pytorch" -> "nshepperd/gpt-2"
"graykode/gpt-2-Pytorch" -> "graykode/xlnet-Pytorch" ["e"=1]
"graykode/gpt-2-Pytorch" -> "ConnorJL/GPT2" ["e"=1]
"graykode/gpt-2-Pytorch" -> "yet-another-account/openwebtext"
"graykode/gpt-2-Pytorch" -> "akanyaani/gpt-2-tensorflow2.0"
"graykode/gpt-2-Pytorch" -> "openai/gpt-2-output-dataset"
"graykode/gpt-2-Pytorch" -> "codertimo/BERT-pytorch"
"graykode/gpt-2-Pytorch" -> "graykode/ALBERT-Pytorch" ["e"=1]
"graykode/gpt-2-Pytorch" -> "fuzhenxin/Style-Transfer-in-Text" ["e"=1]
"graykode/gpt-2-Pytorch" -> "minimaxir/gpt-2-cloud-run"
"graykode/gpt-2-Pytorch" -> "huggingface/pytorch-openai-transformer-lm"
"graykode/gpt-2-Pytorch" -> "rish-16/gpt2client"
"graykode/gpt-2-Pytorch" -> "santhoshkolloju/Abstractive-Summarization-With-Transfer-Learning" ["e"=1]
"NiuTrans/NiuTensor" -> "NiuTrans/MTBook"
"NiuTrans/NiuTensor" -> "NiuTrans/MT-paper-lists"
"NiuTrans/NiuTensor" -> "NiuTrans/NiuTrans.SMT"
"NiuTrans/NiuTensor" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/NiuTensor" -> "NiuTrans/LanguageCodes"
"NiuTrans/NiuTensor" -> "NiuTrans/MTVenues"
"NiuTrans/NiuTensor" -> "NiuTrans/ABigSurvey"
"adsieg/text_similarity" -> "nlptown/nlp-notebooks"
"adsieg/text_similarity" -> "adsieg/Multi_Text_Classification"
"adsieg/text_similarity" -> "TharinduDR/Simple-Sentence-Similarity"
"adsieg/text_similarity" -> "makcedward/nlp"
"adsieg/text_similarity" -> "AndriyMulyar/semantic-text-similarity"
"adsieg/text_similarity" -> "mankadronit/Automated-Essay--Scoring" ["e"=1]
"shivanikohlii/SanTran" -> "ad2476/pos-research"
"tatuylonen/wiktextract" -> "suyashb95/WiktionaryParser"
"tatuylonen/wiktextract" -> "tatuylonen/wikitextprocessor"
"tatuylonen/wiktextract" -> "rspeer/wordfreq"
"tatuylonen/wiktextract" -> "hermitdave/FrequencyWords"
"tatuylonen/wiktextract" -> "globalwordnet/english-wordnet"
"tatuylonen/wiktextract" -> "FreeLanguageTools/vocabsieve" ["e"=1]
"tatuylonen/wiktextract" -> "Tatoeba/tatoeba2" ["e"=1]
"tatuylonen/wiktextract" -> "earwig/mwparserfromhell" ["e"=1]
"tatuylonen/wiktextract" -> "yomidevs/kaikki-to-yomitan" ["e"=1]
"tatuylonen/wiktextract" -> "tatuylonen/wiktfinnish"
"tatuylonen/wiktextract" -> "5j9/wikitextparser" ["e"=1]
"tatuylonen/wiktextract" -> "gambolputty/german-nouns"
"tatuylonen/wiktextract" -> "componavt/wikokit"
"tatuylonen/wiktextract" -> "freedict/fd-dictionaries"
"tatuylonen/wiktextract" -> "adbar/simplemma" ["e"=1]
"DoodleJZ/HPSG-Neural-Parser" -> "KhalilMrini/LAL-Parser"
"DoodleJZ/HPSG-Neural-Parser" -> "hantek/distance-parser"
"DoodleJZ/HPSG-Neural-Parser" -> "yzhangcs/crfpar"
"MengtingWan/goodreads" -> "maria-antoniak/goodreads-scraper"
"MengtingWan/goodreads" -> "BahramJannesar/GoodreadsBookDataset"
"MengtingWan/goodreads" -> "MengtingWan/chainRec"
"MengtingWan/goodreads" -> "MengtingWan/bittersweet-phd"
"MengtingWan/goodreads" -> "sefakilic/goodreads"
"tunz/transformer-pytorch" -> "jayparks/transformer"
"tunz/transformer-pytorch" -> "SamLynnEvans/Transformer"
"nyu-mll/GLUE-baselines" -> "nyu-mll/jiant"
"nyu-mll/GLUE-baselines" -> "facebookresearch/SentEval"
"nyu-mll/GLUE-baselines" -> "namisan/mt-dnn" ["e"=1]
"nyu-mll/GLUE-baselines" -> "facebookresearch/XLM"
"nyu-mll/GLUE-baselines" -> "openai/finetune-transformer-lm"
"nyu-mll/GLUE-baselines" -> "huawei-noah/Pretrained-Language-Model" ["e"=1]
"nyu-mll/GLUE-baselines" -> "CLUEbenchmark/CLUE" ["e"=1]
"nyu-mll/GLUE-baselines" -> "salesforce/decaNLP"
"nyu-mll/GLUE-baselines" -> "intersun/PKD-for-BERT-Model-Compression" ["e"=1]
"nyu-mll/GLUE-baselines" -> "google-research/electra" ["e"=1]
"nyu-mll/GLUE-baselines" -> "zihangdai/xlnet"
"nyu-mll/GLUE-baselines" -> "facebookresearch/SpanBERT" ["e"=1]
"nyu-mll/GLUE-baselines" -> "kentonl/e2e-coref" ["e"=1]
"nyu-mll/GLUE-baselines" -> "thunlp/ERNIE" ["e"=1]
"nyu-mll/GLUE-baselines" -> "ChineseGLUE/ChineseGLUE" ["e"=1]
"roy-ht/editdistance" -> "ztane/python-Levenshtein"
"roy-ht/editdistance" -> "mammothb/symspellpy" ["e"=1]
"roy-ht/editdistance" -> "clab/fast_align" ["e"=1]
"roy-ht/editdistance" -> "glample/fastBPE" ["e"=1]
"roy-ht/editdistance" -> "nttcslab-sp/kaldiio" ["e"=1]
"roy-ht/editdistance" -> "belambert/edit-distance" ["e"=1]
"cbaziotis/neat-vision" -> "minqi/hnatt"
"cbaziotis/neat-vision" -> "jiesutd/Text-Attention-Heatmap-Visualization"
"cbaziotis/neat-vision" -> "georgepar/optimistic-adam"
"huggingface/knockknock" -> "huggingface/awesome-papers"
"huggingface/knockknock" -> "huggingface/tokenizers"
"huggingface/knockknock" -> "facebookresearch/XLM"
"huggingface/knockknock" -> "facebookresearch/pytext"
"huggingface/knockknock" -> "allenai/allennlp"
"huggingface/knockknock" -> "huggingface/hmtl"
"huggingface/knockknock" -> "nyu-mll/jiant"
"huggingface/knockknock" -> "utterworks/fast-bert"
"huggingface/knockknock" -> "deepset-ai/FARM"
"huggingface/knockknock" -> "jettify/pytorch-optimizer" ["e"=1]
"huggingface/knockknock" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"huggingface/knockknock" -> "huggingface/accelerate" ["e"=1]
"huggingface/knockknock" -> "PAIR-code/lit"
"huggingface/knockknock" -> "flairNLP/flair"
"huggingface/knockknock" -> "makcedward/nlpaug"
"psolin/cleanco" -> "DeNederlandscheBank/name_matching"
"psolin/cleanco" -> "ing-bank/sparse_dot_topn"
"psolin/cleanco" -> "Bergvca/string_grouper"
"bheinzerling/bpemb" -> "rsennrich/subword-nmt" ["e"=1]
"bheinzerling/bpemb" -> "glample/fastBPE" ["e"=1]
"bheinzerling/bpemb" -> "facebookresearch/SentEval"
"bheinzerling/bpemb" -> "VKCOM/YouTokenToMe" ["e"=1]
"bheinzerling/bpemb" -> "facebookresearch/XLM"
"bheinzerling/bpemb" -> "facebookresearch/InferSent"
"bheinzerling/bpemb" -> "google/sentencepiece"
"bheinzerling/bpemb" -> "facebookresearch/MUSE"
"bheinzerling/bpemb" -> "facebookresearch/LASER"
"bheinzerling/bpemb" -> "HIT-SCIR/ELMoForManyLangs"
"bheinzerling/bpemb" -> "salesforce/awd-lstm-lm"
"bheinzerling/bpemb" -> "artetxem/vecmap" ["e"=1]
"bheinzerling/bpemb" -> "facebookresearch/UnsupervisedMT" ["e"=1]
"bheinzerling/bpemb" -> "Separius/awesome-sentence-embedding"
"bheinzerling/bpemb" -> "babylonhealth/fastText_multilingual"
"IntelLabs/nlp-architect" -> "salesforce/decaNLP"
"IntelLabs/nlp-architect" -> "dmlc/gluon-nlp"
"IntelLabs/nlp-architect" -> "facebookresearch/pytext"
"IntelLabs/nlp-architect" -> "allenai/allennlp"
"IntelLabs/nlp-architect" -> "PetrochukM/PyTorch-NLP"
"IntelLabs/nlp-architect" -> "microsoft/nlp-recipes"
"IntelLabs/nlp-architect" -> "flairNLP/flair"
"IntelLabs/nlp-architect" -> "facebookresearch/InferSent"
"IntelLabs/nlp-architect" -> "huggingface/neuralcoref"
"IntelLabs/nlp-architect" -> "zihangdai/xlnet"
"IntelLabs/nlp-architect" -> "niderhoff/nlp-datasets"
"IntelLabs/nlp-architect" -> "deeppavlov/DeepPavlov"
"IntelLabs/nlp-architect" -> "asyml/texar" ["e"=1]
"IntelLabs/nlp-architect" -> "chartbeat-labs/textacy"
"IntelLabs/nlp-architect" -> "Separius/awesome-sentence-embedding"
"meetDeveloper/freeDictionaryAPI" -> "meetDeveloper/Dictionary-Anywhere"
"meetDeveloper/freeDictionaryAPI" -> "dwyl/english-words"
"meetDeveloper/freeDictionaryAPI" -> "skywind3000/ECDICT" ["e"=1]
"meetDeveloper/freeDictionaryAPI" -> "tatuylonen/wiktextract"
"meetDeveloper/freeDictionaryAPI" -> "wordset/wordset-dictionary"
"meetDeveloper/freeDictionaryAPI" -> "suyashb95/WiktionaryParser"
"meetDeveloper/freeDictionaryAPI" -> "matheuss/google-translate-api"
"meetDeveloper/freeDictionaryAPI" -> "globalwordnet/english-wordnet"
"meetDeveloper/freeDictionaryAPI" -> "LibreTranslate/LibreTranslate" ["e"=1]
"meetDeveloper/freeDictionaryAPI" -> "lukePeavey/quotable" ["e"=1]
"meetDeveloper/freeDictionaryAPI" -> "first20hours/google-10000-english"
"meetDeveloper/freeDictionaryAPI" -> "kajweb/dict" ["e"=1]
"meetDeveloper/freeDictionaryAPI" -> "dolph/dictionary"
"meetDeveloper/freeDictionaryAPI" -> "FooSoft/anki-connect" ["e"=1]
"meetDeveloper/freeDictionaryAPI" -> "matthewreagan/WebstersEnglishDictionary"
"explosion/spacy-transformers" -> "explosion/projects"
"explosion/spacy-transformers" -> "explosion/thinc"
"explosion/spacy-transformers" -> "explosion/spacy-models"
"explosion/spacy-transformers" -> "explosion/spacy-stanza"
"explosion/spacy-transformers" -> "chartbeat-labs/textacy"
"explosion/spacy-transformers" -> "explosion/spacy-course"
"explosion/spacy-transformers" -> "huggingface/neuralcoref"
"explosion/spacy-transformers" -> "deepset-ai/FARM"
"explosion/spacy-transformers" -> "explosion/prodigy-recipes"
"explosion/spacy-transformers" -> "allenai/scispacy" ["e"=1]
"explosion/spacy-transformers" -> "explosion/sense2vec"
"explosion/spacy-transformers" -> "explosion/srsly" ["e"=1]
"explosion/spacy-transformers" -> "utterworks/fast-bert"
"explosion/spacy-transformers" -> "explosion/spacy-streamlit" ["e"=1]
"explosion/spacy-transformers" -> "ICLRandD/Blackstone" ["e"=1]
"iamtraction/google-translate" -> "cjvnjde/google-translate-api-browser"
"iamtraction/google-translate" -> "vitalets/google-translate-api"
"iamtraction/google-translate" -> "matheuss/google-translate-api"
"iamtraction/google-translate" -> "sudongyuer/learn-eslint" ["e"=1]
"allenai/bilm-tf" -> "HIT-SCIR/ELMoForManyLangs"
"allenai/bilm-tf" -> "openai/finetune-transformer-lm"
"allenai/bilm-tf" -> "allenai/bi-att-flow" ["e"=1]
"allenai/bilm-tf" -> "zihangdai/xlnet"
"allenai/bilm-tf" -> "allenai/allennlp"
"allenai/bilm-tf" -> "UKPLab/elmo-bilstm-cnn-crf" ["e"=1]
"allenai/bilm-tf" -> "kimiyoung/transformer-xl"
"allenai/bilm-tf" -> "localminimum/QANet" ["e"=1]
"allenai/bilm-tf" -> "abisee/pointer-generator" ["e"=1]
"allenai/bilm-tf" -> "Kyubyong/transformer"
"allenai/bilm-tf" -> "UKPLab/emnlp2017-bilstm-cnn-crf" ["e"=1]
"allenai/bilm-tf" -> "guillaumegenthial/sequence_tagging" ["e"=1]
"allenai/bilm-tf" -> "HKUST-KnowComp/R-Net" ["e"=1]
"allenai/bilm-tf" -> "namisan/mt-dnn" ["e"=1]
"allenai/bilm-tf" -> "brightmart/text_classification" ["e"=1]
"jdeng/word2vec" -> "licstar/compare"
"jdeng/word2vec" -> "fraym/fraym"
"jdeng/word2vec" -> "IntelLabs/pWord2Vec"
"jdeng/word2vec" -> "maxoodf/word2vec"
"jdeng/word2vec" -> "dmlc/experimental-lda" ["e"=1]
"jdeng/word2vec" -> "tankle/word2vec"
"RobinL/fuzzymatcher" -> "J535D165/recordlinkage"
"RobinL/fuzzymatcher" -> "jsoma/fuzzy_pandas" ["e"=1]
"RobinL/fuzzymatcher" -> "moj-analytical-services/splink" ["e"=1]
"RobinL/fuzzymatcher" -> "J535D165/data-matching-software"
"keon/seq2seq" -> "AuCson/PyTorch-Batch-Attention-Seq2seq"
"keon/seq2seq" -> "IBM/pytorch-seq2seq"
"keon/seq2seq" -> "MaximumEntropy/Seq2Seq-PyTorch"
"keon/seq2seq" -> "eladhoffer/seq2seq.pytorch"
"keon/seq2seq" -> "spro/practical-pytorch"
"keon/seq2seq" -> "ymfa/seq2seq-summarizer" ["e"=1]
"keon/seq2seq" -> "suragnair/seqGAN" ["e"=1]
"keon/seq2seq" -> "atulkum/pointer_summarizer" ["e"=1]
"keon/seq2seq" -> "timbmg/Sentence-VAE" ["e"=1]
"keon/seq2seq" -> "bentrevett/pytorch-seq2seq"
"keon/seq2seq" -> "lium-lst/nmtpytorch" ["e"=1]
"keon/seq2seq" -> "harvardnlp/seq2seq-attn" ["e"=1]
"keon/seq2seq" -> "OpenNMT/OpenNMT-py"
"keon/seq2seq" -> "alex-berard/seq2seq" ["e"=1]
"keon/seq2seq" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"astorfi/Deep-Learning-NLP" -> "brianspiering/awesome-dl4nlp"
"HazyResearch/metal" -> "HazyResearch/babble"
"HazyResearch/metal" -> "HazyResearch/tanda"
"HazyResearch/metal" -> "HazyResearch/reef"
"HazyResearch/metal" -> "snorkel-team/snorkel-tutorials"
"HazyResearch/metal" -> "snorkel-team/snorkel"
"larsga/Duke" -> "YannBrrd/elasticsearch-entity-resolution"
"larsga/Duke" -> "J535D165/recordlinkage"
"larsga/Duke" -> "scify/JedAIToolkit"
"larsga/Duke" -> "dedupeio/dedupe"
"larsga/Duke" -> "drangons/entity_resolution_spark"
"larsga/Duke" -> "J535D165/data-matching-software"
"larsga/Duke" -> "dedupeio/dedupe-examples"
"larsga/Duke" -> "Simmetrics/simmetrics" ["e"=1]
"larsga/Duke" -> "zouzias/spark-lucenerdd"
"dipanjanS/data_science_for_all" -> "dipanjanS/art_of_data_visualization"
"dipanjanS/data_science_for_all" -> "dipanjanS/nlp_essentials"
"dipanjanS/data_science_for_all" -> "dipanjanS/feature_engineering_session_dhs18"
"dipanjanS/data_science_for_all" -> "dipanjanS/stanford-statistical-learning"
"dipanjanS/data_science_for_all" -> "dipanjanS/practical_nlp_workshop_gids20"
"dipanjanS/data_science_for_all" -> "dipanjanS/nlp_crash_course_plugin20"
"lifeomic/sparkflow" -> "dmmiller612/sparktorch"
"dalinvip/cw2vec" -> "dalinvip/corpus_process_script"
"dalinvip/cw2vec" -> "Luka0612/cw2vec"
"dalinvip/cw2vec" -> "HKUST-KnowComp/JWE"
"dalinvip/cw2vec" -> "zhang2010hao/cw2vec-pytorch"
"dalinvip/cw2vec" -> "Leonard-Xu/CWE"
"dalinvip/cw2vec" -> "WenDesi/Chinese_radical"
"dalinvip/cw2vec" -> "dalinvip/Word_Similarity_and_Word_Analogy"
"roomylee/rcnn-text-classification" -> "airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier"
"rowanz/grover" -> "salesforce/ctrl"
"rowanz/grover" -> "KaiDMML/FakeNewsNet" ["e"=1]
"rowanz/grover" -> "HendrikStrobelt/detecting-fake-text" ["e"=1]
"rowanz/grover" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"rowanz/grover" -> "sumeetkr/AwesomeFakeNews" ["e"=1]
"rowanz/grover" -> "facebookresearch/XLM"
"rowanz/grover" -> "openai/gpt-2-output-dataset"
"rowanz/grover" -> "entitize/Fakeddit" ["e"=1]
"rowanz/grover" -> "nelson-liu/contextual-repr-analysis"
"rowanz/grover" -> "uber-research/PPLM"
"rowanz/grover" -> "minimaxir/gpt-2-simple"
"rowanz/grover" -> "FakeNewsChallenge/fnc-1" ["e"=1]
"rowanz/grover" -> "dhruvkhattar/MVAE" ["e"=1]
"rowanz/grover" -> "several27/FakeNewsCorpus" ["e"=1]
"rowanz/grover" -> "sannykim/transformer" ["e"=1]
"facebookresearch/MUSE" -> "facebookresearch/XLM"
"facebookresearch/MUSE" -> "artetxem/vecmap" ["e"=1]
"facebookresearch/MUSE" -> "facebookresearch/LASER"
"facebookresearch/MUSE" -> "facebookresearch/UnsupervisedMT" ["e"=1]
"facebookresearch/MUSE" -> "facebookresearch/InferSent"
"facebookresearch/MUSE" -> "rsennrich/subword-nmt" ["e"=1]
"facebookresearch/MUSE" -> "facebookresearch/SentEval"
"facebookresearch/MUSE" -> "babylonhealth/fastText_multilingual"
"facebookresearch/MUSE" -> "allenai/allennlp"
"facebookresearch/MUSE" -> "facebookresearch/StarSpace"
"facebookresearch/MUSE" -> "google/sentencepiece"
"facebookresearch/MUSE" -> "THUNLP-MT/MT-Reading-List" ["e"=1]
"facebookresearch/MUSE" -> "OpenNMT/OpenNMT-py"
"facebookresearch/MUSE" -> "clab/fast_align" ["e"=1]
"facebookresearch/MUSE" -> "moses-smt/mosesdecoder" ["e"=1]
"salesforce/cos-e" -> "nazneenrajani/CoS-E"
"stefantruehl/research-proposal-template" -> "dair-ai/awesome-research-proposals-guide"
"pickhardt/betty" -> "gutfeeling/beginner_nlp"
"WZBSocialScienceCenter/tmtoolkit" -> "internaut/tmtoolkit"
"Ahmkel/Keras-Project-Template" -> "outcastofmusic/quick-nlp"
"Ahmkel/Keras-Project-Template" -> "MrGemy95/Tensorflow-Project-Template" ["e"=1]
"Ahmkel/Keras-Project-Template" -> "PetrochukM/PyTorch-NLP"
"Ahmkel/Keras-Project-Template" -> "SpikeKing/DL-Project-Template"
"Ahmkel/Keras-Project-Template" -> "Waikato/meka" ["e"=1]
"Ahmkel/Keras-Project-Template" -> "GauravBh1010tt/DeepLearn"
"Ahmkel/Keras-Project-Template" -> "jindongwang/transferlearning-tutorial" ["e"=1]
"Ahmkel/Keras-Project-Template" -> "victoresque/pytorch-template" ["e"=1]
"Ahmkel/Keras-Project-Template" -> "lvapeab/nmt-keras" ["e"=1]
"Ahmkel/Keras-Project-Template" -> "taehoonlee/tensornets" ["e"=1]
"Ahmkel/Keras-Project-Template" -> "maxpumperla/hyperas" ["e"=1]
"Ahmkel/Keras-Project-Template" -> "fchollet/keras-resources" ["e"=1]
"cu-nil/chnotes" -> "senderle/topic-modeling-tool"
"cu-nil/chnotes" -> "TEIC/CETEIcean" ["e"=1]
"dbamman/litbank" -> "dbamman/book-nlp"
"dbamman/litbank" -> "booknlp/booknlp"
"dbamman/litbank" -> "mandarjoshi90/coref" ["e"=1]
"dbamman/litbank" -> "pitrack/incremental-coref" ["e"=1]
"VectorFist/RNN-NMT" -> "foamliu/Machine-Translation"
"VectorFist/RNN-NMT" -> "carrie0307/attention-nmt"
"VectorFist/RNN-NMT" -> "jmhIcoding/machine_translation"
"foamliu/Machine-Translation" -> "foamliu/Machine-Translation-v2"
"foamliu/Machine-Translation" -> "VectorFist/RNN-NMT"
"foamliu/Machine-Translation" -> "foamliu/Transformer"
"foamliu/Machine-Translation" -> "yuenoble/Machine-Translation-by-Transformer"
"makcedward/nlp" -> "adsieg/text_similarity"
"makcedward/nlp" -> "susanli2016/NLP-with-Python"
"makcedward/nlp" -> "fastai/course-nlp"
"makcedward/nlp" -> "makcedward/nlpaug"
"makcedward/nlp" -> "nlptown/nlp-notebooks"
"makcedward/nlp" -> "kavgan/nlp-in-practice"
"makcedward/nlp" -> "juand-r/entity-recognition-datasets" ["e"=1]
"makcedward/nlp" -> "msgi/nlp-journey" ["e"=1]
"makcedward/nlp" -> "mesolitica/NLP-Models-Tensorflow" ["e"=1]
"makcedward/nlp" -> "microsoft/nlp-recipes"
"makcedward/nlp" -> "dair-ai/nlp_paper_summaries"
"makcedward/nlp" -> "kk7nc/Text_Classification" ["e"=1]
"makcedward/nlp" -> "tomohideshibata/BERT-related-papers" ["e"=1]
"makcedward/nlp" -> "icoxfog417/awesome-text-summarization" ["e"=1]
"makcedward/nlp" -> "lyeoni/nlp-tutorial" ["e"=1]
"davidadamojr/TextRank" -> "summanlp/textrank"
"davidadamojr/TextRank" -> "aneesha/RAKE"
"davidadamojr/TextRank" -> "DerwenAI/pytextrank"
"davidadamojr/TextRank" -> "csurfer/rake-nltk"
"davidadamojr/TextRank" -> "miso-belica/sumy"
"davidadamojr/TextRank" -> "snkim/AutomaticKeyphraseExtraction"
"davidadamojr/TextRank" -> "IndigoResearch/textteaser"
"davidadamojr/TextRank" -> "facebookarchive/NAMAS" ["e"=1]
"davidadamojr/TextRank" -> "salestock/fastText.py"
"davidadamojr/TextRank" -> "xiaoxu193/PyTeaser"
"davidadamojr/TextRank" -> "carpedm20/neural-summary-tensorflow" ["e"=1]
"davidadamojr/TextRank" -> "machinalis/iepy" ["e"=1]
"davidadamojr/TextRank" -> "lipiji/App-DL" ["e"=1]
"davidadamojr/TextRank" -> "udibr/headlines" ["e"=1]
"davidadamojr/TextRank" -> "jjangsangy/ExplainToMe"
"JHL-HUST/PWWS" -> "nesl/nlp_adversarial_examples"
"JHL-HUST/PWWS" -> "marcotcr/sears"
"JHL-HUST/PWWS" -> "JHL-HUST/FGPM"
"JHL-HUST/PWWS" -> "RishabhMaheshwary/hard-label-attack"
"JHL-HUST/PWWS" -> "thunlp/SememePSO-Attack"
"HIT-SCIR/ELMoForManyLangs" -> "allenai/bilm-tf"
"HIT-SCIR/ELMoForManyLangs" -> "ymcui/Chinese-XLNet" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "allenai/allennlp"
"HIT-SCIR/ELMoForManyLangs" -> "UKPLab/elmo-bilstm-cnn-crf" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "brightmart/albert_zh" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "Jiakui/awesome-bert" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "jiesutd/LatticeLSTM" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "jiesutd/NCRFpp" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "AtmaHou/Task-Oriented-Dialogue-Research-Progress-Survey" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "zihangdai/xlnet"
"HIT-SCIR/ELMoForManyLangs" -> "ChineseGLUE/ChineseGLUE" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "Hironsan/anago" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "abisee/pointer-generator" ["e"=1]
"HIT-SCIR/ELMoForManyLangs" -> "kimiyoung/transformer-xl"
"HIT-SCIR/ELMoForManyLangs" -> "brightmart/roberta_zh" ["e"=1]
"muatik/naive-bayes-classifier" -> "yhat/python-naive-bayes"
"muatik/naive-bayes-classifier" -> "codebox/bayesian-classifier"
"minimaxir/gpt-2-simple" -> "nshepperd/gpt-2"
"minimaxir/gpt-2-simple" -> "minimaxir/textgenrnn"
"minimaxir/gpt-2-simple" -> "minimaxir/aitextgen"
"minimaxir/gpt-2-simple" -> "minimaxir/gpt-2-cloud-run"
"minimaxir/gpt-2-simple" -> "openai/gpt-2"
"minimaxir/gpt-2-simple" -> "graykode/gpt-2-Pytorch"
"minimaxir/gpt-2-simple" -> "salesforce/ctrl"
"minimaxir/gpt-2-simple" -> "imcaspar/gpt2-ml" ["e"=1]
"minimaxir/gpt-2-simple" -> "ConnorJL/GPT2" ["e"=1]
"minimaxir/gpt-2-simple" -> "openai/gpt-2-output-dataset"
"minimaxir/gpt-2-simple" -> "ak9250/gpt-2-colab"
"minimaxir/gpt-2-simple" -> "EleutherAI/gpt-neo"
"minimaxir/gpt-2-simple" -> "rish-16/gpt2client"
"minimaxir/gpt-2-simple" -> "microsoft/DialoGPT" ["e"=1]
"minimaxir/gpt-2-simple" -> "kingoflolz/mesh-transformer-jax" ["e"=1]
"sotte/pytorch_tutorial" -> "scoutbee/pytorch-nlp-notebooks"
"sotte/pytorch_tutorial" -> "yashu-seth/pytorch-tabular"
"nithyadurai87/machine_learning_examples" -> "nithyadurai87/python-tutorials"
"IndicoDataSolutions/finetune" -> "IndicoDataSolutions/Enso"
"IndicoDataSolutions/finetune" -> "openai/finetune-transformer-lm"
"IndicoDataSolutions/finetune" -> "t-makaro/animatplot"
"IndicoDataSolutions/finetune" -> "huggingface/pytorch-openai-transformer-lm"
"IndicoDataSolutions/finetune" -> "chartbeat-labs/textacy"
"IndicoDataSolutions/finetune" -> "dmlc/gluon-nlp"
"IndicoDataSolutions/finetune" -> "plasticityai/magnitude"
"IndicoDataSolutions/finetune" -> "textpipe/textpipe"
"IndicoDataSolutions/finetune" -> "huggingface/hmtl"
"IndicoDataSolutions/finetune" -> "explosion/spacy-transformers"
"IndicoDataSolutions/finetune" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"IndicoDataSolutions/finetune" -> "Separius/BERT-keras" ["e"=1]
"IndicoDataSolutions/finetune" -> "chakki-works/chazutsu" ["e"=1]
"IndicoDataSolutions/finetune" -> "feedly/transfer-nlp"
"itkach/slob" -> "itkach/aard2-android"
"itkach/slob" -> "itkach/aard2-web"
"itkach/slob" -> "farfromrefug/OSS-Dict"
"itkach/slob" -> "itkach/mw2slob"
"itkach/slob" -> "aarddict/desktop"
"dkpro/dkpro-cassis" -> "catalpa-cl/inceptalytics"
"anhaidgroup/deepmatcher" -> "megagonlabs/ditto"
"anhaidgroup/deepmatcher" -> "anhaidgroup/py_entitymatching"
"anhaidgroup/deepmatcher" -> "scify/JedAIToolkit"
"anhaidgroup/deepmatcher" -> "J535D165/recordlinkage"
"anhaidgroup/deepmatcher" -> "zhao1701/extending-deep-ER"
"anhaidgroup/deepmatcher" -> "J535D165/data-matching-software"
"anhaidgroup/deepmatcher" -> "anhaidgroup/py_stringmatching"
"anhaidgroup/deepmatcher" -> "brunnurs/entity-matching-transformer"
"anhaidgroup/deepmatcher" -> "Gaglia88/sparker"
"anhaidgroup/deepmatcher" -> "chu-data-lab/zeroer"
"anhaidgroup/deepmatcher" -> "ropeladder/record-linkage-resources"
"anhaidgroup/deepmatcher" -> "qcri/DeepBlocker"
"anhaidgroup/deepmatcher" -> "megagonlabs/sato" ["e"=1]
"anhaidgroup/deepmatcher" -> "vintasoftware/entity-embed"
"anhaidgroup/deepmatcher" -> "icip-cas/EntityMatcher"
"madisonmay/CommonRegex" -> "madisonmay/Tomorrow" ["e"=1]
"madisonmay/CommonRegex" -> "tartley/python-regex-cheatsheet"
"madisonmay/CommonRegex" -> "yhat/db.py" ["e"=1]
"madisonmay/CommonRegex" -> "derek73/python-nameparser"
"madisonmay/CommonRegex" -> "datamade/parserator"
"madisonmay/CommonRegex" -> "lk-geimfari/expynent"
"madisonmay/CommonRegex" -> "gandersen101/spaczz"
"madisonmay/CommonRegex" -> "aloisdg/awesome-regex" ["e"=1]
"madisonmay/CommonRegex" -> "vladimarius/pyap"
"derek73/python-nameparser" -> "datamade/probablepeople"
"derek73/python-nameparser" -> "datamade/usaddress"
"derek73/python-nameparser" -> "joshfraser/JavaScript-Name-Parser"
"derek73/python-nameparser" -> "datamade/parserator"
"derek73/python-nameparser" -> "daviddrysdale/python-phonenumbers" ["e"=1]
"derek73/python-nameparser" -> "openvenues/pypostal"
"derek73/python-nameparser" -> "sunlightlabs/name-cleaver"
"derek73/python-nameparser" -> "michaelhelmick/lassie" ["e"=1]
"derek73/python-nameparser" -> "gwu-libraries/namesparser"
"derek73/python-nameparser" -> "mailgun/flanker" ["e"=1]
"msg-systems/holmes-extractor" -> "textpipe/textpipe"
"msg-systems/holmes-extractor" -> "graphbrain/graphbrain"
"msg-systems/holmes-extractor" -> "msg-systems/coreferee"
"msg-systems/holmes-extractor" -> "explosion/spacy-experimental"
"msg-systems/holmes-extractor" -> "jenojp/negspacy" ["e"=1]
"msg-systems/holmes-extractor" -> "ICLRandD/Blackstone" ["e"=1]
"msg-systems/holmes-extractor" -> "artpar/languagecrunch"
"msg-systems/holmes-extractor" -> "yash1994/dframcy"
"msg-systems/holmes-extractor" -> "argilla-io/spacy-wordnet"
"msg-systems/holmes-extractor" -> "explosion/projects"
"minimaxir/tweet-generator" -> "minimaxir/autotweet-from-googlesheet"
"vitalets/google-translate-api" -> "matheuss/google-translate-api"
"vitalets/google-translate-api" -> "AidanWelch/google-translate-api"
"vitalets/google-translate-api" -> "iamtraction/google-translate"
"vitalets/google-translate-api" -> "cjvnjde/google-translate-api-browser"
"vitalets/google-translate-api" -> "matheuss/google-translate-token"
"vitalets/google-translate-api" -> "songkeys/translateer"
"vitalets/google-translate-api" -> "plainheart/bing-translate-api"
"vitalets/google-translate-api" -> "translate-tools/core"
"vitalets/google-translate-api" -> "franciscop/translate"
"vitalets/google-translate-api" -> "Animenosekai/translate"
"vitalets/google-translate-api" -> "Stichoza/google-translate-php" ["e"=1]
"vitalets/google-translate-api" -> "vitalets/google-translate-token"
"nikitakit/self-attentive-parser" -> "yzhangcs/parser"
"nikitakit/self-attentive-parser" -> "mitchellstern/minimal-span-parser"
"nikitakit/self-attentive-parser" -> "KhalilMrini/LAL-Parser"
"nikitakit/self-attentive-parser" -> "harvardnlp/pytorch-struct" ["e"=1]
"nikitakit/self-attentive-parser" -> "XuezheMax/NeuroNLP2"
"nikitakit/self-attentive-parser" -> "hantek/distance-parser"
"nikitakit/self-attentive-parser" -> "DoodleJZ/HPSG-Neural-Parser"
"nikitakit/self-attentive-parser" -> "yikangshen/Ordered-Neurons"
"nikitakit/self-attentive-parser" -> "john-hewitt/structural-probes"
"nikitakit/self-attentive-parser" -> "harvardnlp/urnng"
"nikitakit/self-attentive-parser" -> "jihunchoi/unsupervised-treelstm"
"nikitakit/self-attentive-parser" -> "clab/rnng"
"nikitakit/self-attentive-parser" -> "yikangshen/PRPN"
"nikitakit/self-attentive-parser" -> "hankcs/TreebankPreprocessing"
"nikitakit/self-attentive-parser" -> "yzhangcs/crfpar"
"MojoJolo/textteaser" -> "IndigoResearch/textteaser"
"MojoJolo/textteaser" -> "xiaoxu193/PyTeaser"
"MojoJolo/textteaser" -> "miso-belica/sumy"
"MojoJolo/textteaser" -> "jbrooksuk/node-summary"
"OvidijusParsiunas/myvision" -> "minimaxir/gpt-3-experiments"
"J535D165/data-matching-software" -> "J535D165/recordlinkage"
"J535D165/data-matching-software" -> "scify/JedAIToolkit"
"J535D165/data-matching-software" -> "ropeladder/record-linkage-resources"
"J535D165/data-matching-software" -> "kosukeimai/fastLink"
"J535D165/data-matching-software" -> "dedupeio/dedupe-examples"
"J535D165/data-matching-software" -> "vintasoftware/entity-embed"
"J535D165/data-matching-software" -> "dedupeio/dedupe"
"J535D165/data-matching-software" -> "OlivierBinette/Awesome-Entity-Resolution"
"J535D165/data-matching-software" -> "anhaidgroup/deepmatcher"
"J535D165/data-matching-software" -> "usc-isi-i2/rltk"
"J535D165/data-matching-software" -> "J535D165/recordlinkage-annotator"
"J535D165/data-matching-software" -> "anhaidgroup/py_entitymatching"
"J535D165/data-matching-software" -> "Lyonk71/pandas-dedupe"
"J535D165/data-matching-software" -> "moj-analytical-services/splink" ["e"=1]
"J535D165/data-matching-software" -> "RobinL/fuzzymatcher"
"ManivannanMurugavel/spacy-ner-annotator" -> "ieriii/spacy-annotator"
"tokestermw/spacy_hunspell" -> "tokestermw/spacy_kenlm"
"tokestermw/spacy_hunspell" -> "nickdavidhaynes/spacy-cld"
"sanyam5/skip-thoughts" -> "Cadene/skip-thoughts.torch"
"sanyam5/skip-thoughts" -> "lajanugen/S2V"
"dipanjanS/art_of_data_visualization" -> "dipanjanS/feature_engineering_session_dhs18"
"dipanjanS/art_of_data_visualization" -> "dipanjanS/data_science_for_all"
"dipanjanS/art_of_data_visualization" -> "dipanjanS/stanford-statistical-learning"
"dipanjanS/art_of_data_visualization" -> "dipanjanS/nlp_essentials"
"dipanjanS/art_of_data_visualization" -> "dipanjanS/nlp_workshop_dhs18"
"dipanjanS/art_of_data_visualization" -> "dipanjanS/convolutional_neural_networks_essentials"
"dipanjanS/feature_engineering_session_dhs18" -> "dipanjanS/stanford-statistical-learning"
"dipanjanS/nlp_workshop_dhs18" -> "dipanjanS/feature_engineering_session_dhs18"
"dipanjanS/nlp_workshop_dhs18" -> "dipanjanS/deep_transfer_learning_nlp_dhs2019"
"dipanjanS/nlp_workshop_dhs18" -> "dipanjanS/ml_model_deployment_example"
"dipanjanS/nlp_workshop_dhs18" -> "dipanjanS/nlp_workshop_odsc19"
"explosion/spacy-stanza" -> "explosion/spacy-transformers"
"explosion/spacy-stanza" -> "TakeLab/spacy-udpipe"
"explosion/spacy-stanza" -> "jenojp/negspacy" ["e"=1]
"explosion/spacy-stanza" -> "argilla-io/spacy-wordnet"
"explosion/spacy-stanza" -> "chartbeat-labs/textacy"
"explosion/spacy-stanza" -> "explosion/sense2vec"
"explosion/spacy-stanza" -> "bjascob/LemmInflect" ["e"=1]
"explosion/spacy-stanza" -> "explosion/jupyterlab-prodigy"
"explosion/spacy-stanza" -> "BramVanroy/spacy_conll"
"explosion/spacy-stanza" -> "explosion/projects"
"explosion/spacy-stanza" -> "explosion/spacy-notebooks"
"explosion/spacy-stanza" -> "huggingface/neuralcoref"
"explosion/spacy-stanza" -> "explosion/thinc"
"explosion/spacy-stanza" -> "rock3125/enhanced-subject-verb-object-extraction" ["e"=1]
"explosion/spacy-stanza" -> "ICLRandD/Blackstone" ["e"=1]
"xiaoxu193/PyTeaser" -> "MojoJolo/textteaser"
"xiaoxu193/PyTeaser" -> "miso-belica/sumy"
"xiaoxu193/PyTeaser" -> "IndigoResearch/textteaser"
"xiaoxu193/PyTeaser" -> "thavelick/summarize"
"xiaoxu193/PyTeaser" -> "jbrooksuk/node-summary"
"xiaoxu193/PyTeaser" -> "hengluchang/deep-news-summarization" ["e"=1]
"xiaoxu193/PyTeaser" -> "jjangsangy/ExplainToMe"
"xiaoxu193/PyTeaser" -> "DerwenAI/pytextrank"
"xiaoxu193/PyTeaser" -> "vgel/summarize.py"
"xiaoxu193/PyTeaser" -> "LazoCoder/Article-Summarizer"
"xiaoxu193/PyTeaser" -> "chen0040/keras-text-summarization" ["e"=1]
"xiaoxu193/PyTeaser" -> "davidadamojr/TextRank"
"xiaoxu193/PyTeaser" -> "grangier/python-goose" ["e"=1]
"xiaoxu193/PyTeaser" -> "summanlp/textrank"
"xiaoxu193/PyTeaser" -> "icoxfog417/awesome-text-summarization" ["e"=1]
"salesforce/pytorch-qrnn" -> "salesforce/awd-lstm-lm"
"salesforce/pytorch-qrnn" -> "asappresearch/sru"
"salesforce/pytorch-qrnn" -> "salesforce/matchbox" ["e"=1]
"salesforce/pytorch-qrnn" -> "eladhoffer/seq2seq.pytorch"
"salesforce/pytorch-qrnn" -> "MaximumEntropy/Seq2Seq-PyTorch"
"salesforce/pytorch-qrnn" -> "mila-iqia/welcome_tutorials" ["e"=1]
"salesforce/pytorch-qrnn" -> "zihangdai/mos"
"salesforce/pytorch-qrnn" -> "IBM/pytorch-seq2seq"
"salesforce/pytorch-qrnn" -> "salesforce/cove" ["e"=1]
"salesforce/pytorch-qrnn" -> "spro/practical-pytorch"
"salesforce/pytorch-qrnn" -> "huggingface/pytorch-openai-transformer-lm"
"salesforce/pytorch-qrnn" -> "salesforce/decaNLP"
"salesforce/pytorch-qrnn" -> "harvardnlp/pytorch-struct" ["e"=1]
"salesforce/pytorch-qrnn" -> "NickShahML/tensorflow_with_latest_papers" ["e"=1]
"salesforce/pytorch-qrnn" -> "pytorch/text"
"AndriyMulyar/semantic-text-similarity" -> "TharinduDR/Simple-Sentence-Similarity"
"AndriyMulyar/semantic-text-similarity" -> "AndriyMulyar/bert_document_classification" ["e"=1]
"chriskonnertz/DeepLy" -> "Baby-Markt/deepl-php-lib"
"chriskonnertz/DeepLy" -> "DeepLcom/deepl-php"
"inception-project/inception" -> "dkpro/dkpro-cassis"
"inception-project/inception" -> "webanno/webanno"
"inception-project/inception" -> "nlplab/brat" ["e"=1]
"inception-project/inception" -> "inception-project/inception-external-recommender"
"inception-project/inception" -> "inception-project/pycaprio"
"inception-project/inception" -> "catalpa-cl/inceptalytics"
"inception-project/inception" -> "amir-zeldes/gum" ["e"=1]
"inception-project/inception" -> "TEIC/CETEIcean" ["e"=1]
"inception-project/inception" -> "inception-project/external-recommender-spacy"
"inception-project/inception" -> "NorskRegnesentral/skweak"
"inception-project/inception" -> "chanzuckerberg/MedMentions" ["e"=1]
"inception-project/inception" -> "dkpro/dkpro-core"
"ambuda-org/ambuda" -> "ambuda-org/vidyut"
"ambuda-org/ambuda" -> "ashtadhyayi-com/data"
"ambuda-org/ambuda" -> "kmadathil/sanskrit_parser"
"ambuda-org/ambuda" -> "OliverHellwig/sanskrit"
"ambuda-org/ambuda" -> "cltk/sanskrit_text_gitasupersite"
"hb20007/hands-on-nltk-tutorial" -> "NirantK/NLP_Quickbook"
"hb20007/hands-on-nltk-tutorial" -> "llSourcell/Learn-Natural-Language-Processing-Curriculum" ["e"=1]
"hb20007/hands-on-nltk-tutorial" -> "mihail911/nlp-library" ["e"=1]
"hb20007/hands-on-nltk-tutorial" -> "susanli2016/NLP-with-Python"
"hb20007/hands-on-nltk-tutorial" -> "nlptown/nlp-notebooks"
"hb20007/hands-on-nltk-tutorial" -> "fastai/course-nlp"
"hb20007/hands-on-nltk-tutorial" -> "costezki/awesome-nlprojects"
"theeluwin/pytorch-sgns" -> "fanglanting/skip-gram-pytorch"
"theeluwin/pytorch-sgns" -> "Adoni/word2vec_pytorch"
"theeluwin/pytorch-sgns" -> "Andras7/word2vec-pytorch"
"theeluwin/pytorch-sgns" -> "dthiagarajan/word2vec-pytorch"
"theeluwin/pytorch-sgns" -> "dalinvip/pytorch_word2vec"
"theeluwin/pytorch-sgns" -> "kefirski/pytorch_NEG_loss"
"theeluwin/pytorch-sgns" -> "blackredscarf/pytorch-SkipGram"
"theeluwin/pytorch-sgns" -> "ray1007/pytorch-word2vec"
"dedupeio/csvdedupe" -> "dedupeio/dedupe-examples"
"dedupeio/csvdedupe" -> "dedupeio/dedupe"
"dedupeio/csvdedupe" -> "datamade/data-making-guidelines"
"dedupeio/csvdedupe" -> "J535D165/recordlinkage"
"dedupeio/csvdedupe" -> "datamade/parserator"
"dedupeio/csvdedupe" -> "dataproofer/Dataproofer" ["e"=1]
"neulab/langrank" -> "aoncevay/multiview-langrep"
"neulab/langrank" -> "antonisa/lang2vec"
"oborchers/Fast_Sentence_Embeddings" -> "PrincetonML/SIF"
"oborchers/Fast_Sentence_Embeddings" -> "linkedin/detext"
"oborchers/Fast_Sentence_Embeddings" -> "kawine/usif"
"oborchers/Fast_Sentence_Embeddings" -> "epfml/sent2vec"
"oborchers/Fast_Sentence_Embeddings" -> "Separius/awesome-sentence-embedding"
"oborchers/Fast_Sentence_Embeddings" -> "rock3125/sentence2vec"
"oborchers/Fast_Sentence_Embeddings" -> "smujjiga/SIF"
"oborchers/Fast_Sentence_Embeddings" -> "TharinduDR/Simple-Sentence-Similarity"
"oborchers/Fast_Sentence_Embeddings" -> "MaartenGr/PolyFuzz"
"oborchers/Fast_Sentence_Embeddings" -> "plasticityai/magnitude"
"oborchers/Fast_Sentence_Embeddings" -> "kevinlu1248/pyate"
"oborchers/Fast_Sentence_Embeddings" -> "koursaros-ai/nboost" ["e"=1]
"oborchers/Fast_Sentence_Embeddings" -> "facebookresearch/SentAugment"
"Ezhil-Language-Foundation/Ezhil-Lang" -> "Ezhil-Language-Foundation/open-tamil"
"Ezhil-Language-Foundation/Ezhil-Lang" -> "AshokR/TamilNLP"
"Ezhil-Language-Foundation/Ezhil-Lang" -> "nithyadurai87/tamil-sandhi-checker"
"Ezhil-Language-Foundation/Ezhil-Lang" -> "rdamodharan/tamil-stemmer"
"Ezhil-Language-Foundation/Ezhil-Lang" -> "vasurenganathan/tamil-tts"
"Ezhil-Language-Foundation/Ezhil-Lang" -> "rprabhu/TamilDictionary"
"Ezhil-Language-Foundation/Ezhil-Lang" -> "vanangamudi/tamil-lm2"
"Ezhil-Language-Foundation/Ezhil-Lang" -> "srix/pytamil"
"Ezhil-Language-Foundation/Ezhil-Lang" -> "thangamani-arun/Tamil-NLP-Resources"
"Ezhil-Language-Foundation/Ezhil-Lang" -> "malaikannan/TamilSpellChecker"
"cjvnjde/google-translate-api-browser" -> "matheuss/google-translate-token"
"scoutbee/pytorch-nlp-notebooks" -> "delip/PyTorchNLPBook"
"scoutbee/pytorch-nlp-notebooks" -> "sotte/pytorch_tutorial"
"scoutbee/pytorch-nlp-notebooks" -> "ddelange/pipgrip"
"scoutbee/pytorch-nlp-notebooks" -> "dpressel/dliss-tutorial"
"UniversalDependencies/docs" -> "UniversalDependencies/tools"
"UniversalDependencies/docs" -> "udapi/udapi-python"
"UniversalDependencies/docs" -> "jonorthwash/ud-annotatrix"
"UniversalDependencies/docs" -> "ufal/udpipe"
"UniversalDependencies/docs" -> "hfst/hfst" ["e"=1]
"UniversalDependencies/docs" -> "Orange-OpenSource/conllueditor"
"UniversalDependencies/docs" -> "Arborator/arborator-server"
"UniversalDependencies/docs" -> "pyconll/pyconll"
"ElizaLo/NLP-Natural-Language-Processing" -> "ElizaLo/Data-Science" ["e"=1]
"ElizaLo/NLP-Natural-Language-Processing" -> "gaoisbest/NLP-Projects"
"ElizaLo/NLP-Natural-Language-Processing" -> "ElizaLo/Machine-Learning" ["e"=1]
"ElizaLo/NLP-Natural-Language-Processing" -> "costezki/awesome-nlprojects"
"ElizaLo/NLP-Natural-Language-Processing" -> "NirantK/NLP_Quickbook"
"ElizaLo/NLP-Natural-Language-Processing" -> "PacktPublishing/Advanced-Natural-Language-Processing-with-TensorFlow-2" ["e"=1]
"ElizaLo/NLP-Natural-Language-Processing" -> "anujvyas/Natural-Language-Processing-Projects" ["e"=1]
"ElizaLo/NLP-Natural-Language-Processing" -> "Storiesbyharshit/Natural-Language-Processing"
"ElizaLo/NLP-Natural-Language-Processing" -> "wasiahmad/paraphrase_identification" ["e"=1]
"ElizaLo/NLP-Natural-Language-Processing" -> "brianspiering/awesome-dl4nlp"
"ElizaLo/NLP-Natural-Language-Processing" -> "practical-nlp/practical-nlp-code"
"emorynlp/character-mining" -> "emorynlp/character-identification"
"emorynlp/character-mining" -> "emorynlp/emotion-detection"
"emorynlp/character-mining" -> "emorynlp/personality-detection"
"ibatra/BERT-Keyword-Extractor" -> "pranav-ust/BERT-keyphrase-extraction"
"ibatra/BERT-Keyword-Extractor" -> "thunlp/BERT-KPE"
"ibatra/BERT-Keyword-Extractor" -> "swisscom/ai-research-keyphrase-extraction"
"ibatra/BERT-Keyword-Extractor" -> "kenchan0226/keyphrase-generation-rl"
"ibatra/BERT-Keyword-Extractor" -> "memray/seq2seq-keyphrase"
"ibatra/BERT-Keyword-Extractor" -> "memray/OpenNMT-kpg-release"
"ibatra/BERT-Keyword-Extractor" -> "boudinfl/pke"
"ibatra/BERT-Keyword-Extractor" -> "DataTerminatorX/Keyword-BERT" ["e"=1]
"ibatra/BERT-Keyword-Extractor" -> "supercoderhawk/deep-keyphrase"
"ibatra/BERT-Keyword-Extractor" -> "sunyilgdx/SIFRank_zh"
"ibatra/BERT-Keyword-Extractor" -> "boudinfl/ake-datasets"
"yzhangcs/parser" -> "nikitakit/self-attentive-parser"
"yzhangcs/parser" -> "XuezheMax/NeuroNLP2"
"yzhangcs/parser" -> "yzhangcs/crfpar"
"yzhangcs/parser" -> "tdozat/Parser-v1"
"yzhangcs/parser" -> "zhangmeishan/BiaffineDParser"
"yzhangcs/parser" -> "hankcs/TreebankPreprocessing"
"yzhangcs/parser" -> "KhalilMrini/LAL-Parser"
"yzhangcs/parser" -> "NLPInBLCU/BiaffineDependencyParsing"
"yzhangcs/parser" -> "baidu/DDParser" ["e"=1]
"yzhangcs/parser" -> "harvardnlp/pytorch-struct" ["e"=1]
"yzhangcs/parser" -> "DoodleJZ/HPSG-Neural-Parser"
"yzhangcs/parser" -> "bamtercelboo/PyTorch_Biaffine_Dependency_Parsing"
"yzhangcs/parser" -> "elikip/bist-parser"
"yzhangcs/parser" -> "juntaoy/biaffine-ner" ["e"=1]
"yzhangcs/parser" -> "chantera/biaffineparser"
"globalwordnet/english-wordnet" -> "goodmami/wn"
"globalwordnet/english-wordnet" -> "globalwordnet/cili"
"globalwordnet/english-wordnet" -> "wordnet/wordnet"
"globalwordnet/english-wordnet" -> "argilla-io/spacy-wordnet"
"globalwordnet/english-wordnet" -> "hdaSprachtechnologie/odenet"
"globalwordnet/english-wordnet" -> "nltk/wordnet"
"globalwordnet/english-wordnet" -> "tatuylonen/wiktextract"
"globalwordnet/english-wordnet" -> "jmccrae/wordnet-angular"
"globalwordnet/english-wordnet" -> "ontolex/ontolex"
"nesl/nlp_adversarial_examples" -> "JHL-HUST/PWWS"
"nesl/nlp_adversarial_examples" -> "thunlp/SememePSO-Attack"
"nesl/nlp_adversarial_examples" -> "marcotcr/sears"
"nesl/nlp_adversarial_examples" -> "robinjia/certified-word-sub"
"nesl/nlp_adversarial_examples" -> "jind11/TextFooler"
"nesl/nlp_adversarial_examples" -> "pmichel31415/teapot-nlp"
"nesl/nlp_adversarial_examples" -> "nmrksic/counter-fitting"
"nesl/nlp_adversarial_examples" -> "lushleaf/Structure-free-certified-NLP"
"nesl/nlp_adversarial_examples" -> "miyyer/scpn" ["e"=1]
"nesl/nlp_adversarial_examples" -> "aonotas/interpretable-adv"
"nesl/nlp_adversarial_examples" -> "AnyiRao/WordAdver"
"nesl/nlp_adversarial_examples" -> "google-deepmind/interval-bound-propagation" ["e"=1]
"nesl/nlp_adversarial_examples" -> "cmhcbb/Seq2Sick"
"nesl/nlp_adversarial_examples" -> "RishabhMaheshwary/hard-label-attack"
"ojasphansekar/Zillow-Home-Value-Prediction" -> "A-safarji/Time-series-deep-learning"
"tlkh/text-emotion-classification" -> "sarnthil/unify-emotion-datasets"
"tlkh/text-emotion-classification" -> "JULIELab/EmoBank"
"tlkh/text-emotion-classification" -> "lukasgarbas/nlp-text-emotion"
"tlkh/text-emotion-classification" -> "nikicc/twitter-emotion-recognition"
"tlkh/text-emotion-classification" -> "ryubidragonfire/Emotion"
"tlkh/text-emotion-classification" -> "tpsatish95/emotion-detection-from-text"
"tlkh/text-emotion-classification" -> "sinmaniphel/py_isear_dataset"
"dalinvip/Word_Similarity_and_Word_Analogy" -> "HKUST-KnowComp/JWE"
"dalinvip/Word_Similarity_and_Word_Analogy" -> "dalinvip/corpus_process_script"
"HPI-Information-Systems/Metanome" -> "HPI-Information-Systems/metanome-algorithms"
"HPI-Information-Systems/Metanome" -> "HPI-Information-Systems/inclusion-dependency-algorithms"
"HPI-Information-Systems/Metanome" -> "nabihach/FD_CFD_extraction"
"dsfsi/textaugment" -> "jasonwei20/eda_nlp" ["e"=1]
"dsfsi/textaugment" -> "pfnet-research/contextual_augmentation"
"dsfsi/textaugment" -> "makcedward/nlpaug"
"dsfsi/textaugment" -> "styfeng/DataAug4NLP"
"dsfsi/textaugment" -> "1024er/cbert_aug"
"dsfsi/textaugment" -> "GEM-benchmark/NL-Augmenter"
"dsfsi/textaugment" -> "akkarimi/aeda_nlp"
"dsfsi/textaugment" -> "clovaai/ssmix"
"dsfsi/textaugment" -> "SanghunYun/UDA_pytorch" ["e"=1]
"sharmaroshan/Fraud-Detection-in-Online-Transactions" -> "sharmaroshan/Google-Job-Skills"
"sharmaroshan/Fraud-Detection-in-Online-Transactions" -> "sharmaroshan/Ads-Optimization"
"sharmaroshan/Fraud-Detection-in-Online-Transactions" -> "sharmaroshan/Percentage-of-Women-in-Bacelor-s-Degree"
"sharmaroshan/Fraud-Detection-in-Online-Transactions" -> "sharmaroshan/Avito-Demand-Prediction-Challenge"
"BlackHC/BatchBALD" -> "BlackHC/batchbald_redux"
"BlackHC/BatchBALD" -> "rpinsler/active-bayesian-coresets"
"BlackHC/BatchBALD" -> "dsgissin/DiscriminativeActiveLearning"
"BlackHC/BatchBALD" -> "sinhasam/vaal"
"BlackHC/BatchBALD" -> "ozansener/active_learning_coreset"
"BlackHC/BatchBALD" -> "Riashat/Deep-Bayesian-Active-Learning"
"BlackHC/BatchBALD" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"BlackHC/BatchBALD" -> "yongjin-shin/awesome-active-learning"
"BlackHC/BatchBALD" -> "ej0cl6/deep-active-learning"
"BlackHC/BatchBALD" -> "baal-org/baal"
"BlackHC/BatchBALD" -> "JordanAsh/badge"
"BlackHC/BatchBALD" -> "MrGiovanni/Active-Learning"
"BlackHC/BatchBALD" -> "asiddhant/Active-NLP"
"CambridgeUniversityPress/FirstCourseNetworkScience" -> "ericmjl/Network-Analysis-Made-Simple" ["e"=1]
"CambridgeUniversityPress/FirstCourseNetworkScience" -> "PacktPublishing/Network-Science-with-Python-and-NetworkX-Quick-Start-Guide"
"CambridgeUniversityPress/FirstCourseNetworkScience" -> "chatox/networks-science-course"
"CambridgeUniversityPress/FirstCourseNetworkScience" -> "junipertcy/bipartiteSBM"
"CambridgeUniversityPress/FirstCourseNetworkScience" -> "martingerlach/hSBM_Topicmodel"
"CambridgeUniversityPress/FirstCourseNetworkScience" -> "GiulioRossetti/dynetx" ["e"=1]
"CambridgeUniversityPress/FirstCourseNetworkScience" -> "yy/dviz-course"
"PacktPublishing/Network-Science-with-Python-and-NetworkX-Quick-Start-Guide" -> "rtidatascience/connected-nx-tutorial"
"jcl132/personality-prediction-from-text" -> "jkwieser/personality-prediction-from-text"
"jcl132/personality-prediction-from-text" -> "SenticNet/personality-detection"
"jcl132/personality-prediction-from-text" -> "yashsmehta/personality-prediction"
"jcl132/personality-prediction-from-text" -> "vishalbhalla/Twitter-User-Personality-Prediction"
"soskek/bookcorpus" -> "EleutherAI/the-pile" ["e"=1]
"soskek/bookcorpus" -> "nyu-mll/jiant"
"soskek/bookcorpus" -> "jcpeterson/openwebtext"
"soskek/bookcorpus" -> "facebookresearch/cc_net" ["e"=1]
"soskek/bookcorpus" -> "hplt-project/sacremoses" ["e"=1]
"soskek/bookcorpus" -> "attardi/wikiextractor"
"soskek/bookcorpus" -> "google-research-datasets/paws" ["e"=1]
"soskek/bookcorpus" -> "sgraaf/Replicate-Toronto-BookCorpus"
"soskek/bookcorpus" -> "mjpost/sacrebleu" ["e"=1]
"soskek/bookcorpus" -> "yet-another-account/openwebtext"
"soskek/bookcorpus" -> "vitutorial/VITutorial" ["e"=1]
"soskek/bookcorpus" -> "atcbosselut/comet-commonsense" ["e"=1]
"soskek/bookcorpus" -> "neulab/compare-mt" ["e"=1]
"soskek/bookcorpus" -> "ciprian-chelba/1-billion-word-language-modeling-benchmark" ["e"=1]
"soskek/bookcorpus" -> "openai/finetune-transformer-lm"
"rspeer/wordfreq" -> "LuminosoInsight/exquisite-corpus"
"rspeer/wordfreq" -> "hermitdave/FrequencyWords"
"rspeer/wordfreq" -> "tatuylonen/wiktextract"
"rspeer/wordfreq" -> "textstat/textstat"
"rspeer/wordfreq" -> "gutfeeling/word_forms" ["e"=1]
"rspeer/wordfreq" -> "JasonKessler/scattertext"
"rspeer/wordfreq" -> "cdimascio/py-readability-metrics"
"rspeer/wordfreq" -> "cisnlp/simalign" ["e"=1]
"rspeer/wordfreq" -> "oborchers/Fast_Sentence_Embeddings"
"rspeer/wordfreq" -> "commonsense/conceptnet5"
"rspeer/wordfreq" -> "IlyaSemenov/wikipedia-word-frequency"
"rspeer/wordfreq" -> "wolfgarbe/SymSpell" ["e"=1]
"rspeer/wordfreq" -> "proycon/pynlpl"
"rspeer/wordfreq" -> "chartbeat-labs/textacy"
"rspeer/wordfreq" -> "dmort27/epitran" ["e"=1]
"svn2github/word2vec" -> "zhezhaoa/ngram2vec" ["e"=1]
"svn2github/word2vec" -> "siegfang/word2vec" ["e"=1]
"svn2github/word2vec" -> "largelymfs/topical_word_embeddings" ["e"=1]
"svn2github/word2vec" -> "dav/word2vec"
"svn2github/word2vec" -> "jdeng/word2vec"
"svn2github/word2vec" -> "Leonard-Xu/CWE"
"facebookresearch/colorlessgreenRNNs" -> "BeckyMarvin/LM_syneval"
"facebookresearch/colorlessgreenRNNs" -> "TalLinzen/rnn_agreement"
"facebookresearch/colorlessgreenRNNs" -> "vansky/neural-complexity"
"microsoft/OpenKP" -> "ygorg/KPTimes"
"microsoft/OpenKP" -> "thunlp/BERT-KPE"
"microsoft/OpenKP" -> "sunyilgdx/SIFRank"
"MengtingWan/chainRec" -> "lzheng21/SpectralCF"
"yikangshen/Ordered-Neurons" -> "bojone/on-lstm"
"yikangshen/Ordered-Neurons" -> "yikangshen/PRPN"
"yikangshen/Ordered-Neurons" -> "harvardnlp/urnng"
"yikangshen/Ordered-Neurons" -> "iesl/diora"
"yikangshen/Ordered-Neurons" -> "yaushian/Tree-Transformer"
"yikangshen/Ordered-Neurons" -> "dasguptar/treelstm.pytorch"
"yikangshen/Ordered-Neurons" -> "salesforce/awd-lstm-lm"
"yikangshen/Ordered-Neurons" -> "nikitakit/self-attentive-parser"
"yikangshen/Ordered-Neurons" -> "harvardnlp/var-attn" ["e"=1]
"yikangshen/Ordered-Neurons" -> "qipeng/gcn-over-pruned-trees" ["e"=1]
"yikangshen/Ordered-Neurons" -> "jihunchoi/unsupervised-treelstm"
"yikangshen/Ordered-Neurons" -> "harvardnlp/compound-pcfg"
"yikangshen/Ordered-Neurons" -> "Smerity/sha-rnn" ["e"=1]
"yikangshen/Ordered-Neurons" -> "nyu-mll/spinn"
"yikangshen/Ordered-Neurons" -> "Cartus/AGGCN" ["e"=1]
"kenchan0226/keyphrase-generation-rl" -> "memray/seq2seq-keyphrase-pytorch"
"kenchan0226/keyphrase-generation-rl" -> "memray/OpenNMT-kpg-release"
"kenchan0226/keyphrase-generation-rl" -> "jiacheng-ye/kg_one2set"
"kenchan0226/keyphrase-generation-rl" -> "avinsit123/keyphrase-gan"
"kenchan0226/keyphrase-generation-rl" -> "Chen-Wang-CUHK/KG-KE-KR-M"
"kenchan0226/keyphrase-generation-rl" -> "Chen-Wang-CUHK/ExHiRD-DKG"
"kenchan0226/keyphrase-generation-rl" -> "yuewang-cuhk/TAKG"
"kenchan0226/keyphrase-generation-rl" -> "supercoderhawk/deep-keyphrase"
"nelson-liu/contextual-repr-analysis" -> "yoavg/bert-syntax"
"nelson-liu/contextual-repr-analysis" -> "john-hewitt/structural-probes"
"nelson-liu/contextual-repr-analysis" -> "vered1986/lexcomp"
"nelson-liu/contextual-repr-analysis" -> "swabhs/scaffolding"
"joshfraser/JavaScript-Name-Parser" -> "dschnelldavis/parse-full-name"
"fnielsen/awesome-danish" -> "alexandrainst/danlp"
"fnielsen/awesome-danish" -> "certainlyio/nordic_bert"
"fnielsen/awesome-danish" -> "centre-for-humanities-computing/DaCy"
"fnielsen/awesome-danish" -> "sarnikowski/danish_transformers"
"fnielsen/awesome-danish" -> "ebanalyse/senda"
"fnielsen/awesome-danish" -> "danspeech/danspeech"
"fnielsen/awesome-danish" -> "leondz/dagw_page"
"fnielsen/awesome-danish" -> "alvenirai/punctfix"
"fnielsen/awesome-danish" -> "Guscode/Sentida"
"sosedoff/goodreads" -> "sefakilic/goodreads"
"aonotas/adversarial_text" -> "enricivi/adversarial_training_methods"
"aonotas/adversarial_text" -> "aonotas/interpretable-adv"
"agermanidis/pigeon" -> "dennisbakhuis/pigeonXT"
"agermanidis/pigeon" -> "koaning/doubtlab" ["e"=1]
"agermanidis/pigeon" -> "koaning/human-learn" ["e"=1]
"agermanidis/pigeon" -> "koaning/embetter" ["e"=1]
"agermanidis/pigeon" -> "NorskRegnesentral/skweak"
"agermanidis/pigeon" -> "argilla-io/argilla"
"agermanidis/pigeon" -> "koaning/bulk" ["e"=1]
"agermanidis/pigeon" -> "cdpierse/transformers-interpret"
"agermanidis/pigeon" -> "CalculatedContent/WeightWatcher"
"agermanidis/pigeon" -> "koaning/scikit-lego" ["e"=1]
"agermanidis/pigeon" -> "ipyannotate/ipyannotate"
"agermanidis/pigeon" -> "NannyML/nannyml" ["e"=1]
"agermanidis/pigeon" -> "ideonate/jupyter-innotater"
"agermanidis/pigeon" -> "huggingface/setfit"
"agermanidis/pigeon" -> "MilaNLProc/contextualized-topic-models"
"NUAA-AL/ALiPy" -> "ntucllab/libact"
"NUAA-AL/ALiPy" -> "ej0cl6/deep-active-learning"
"NUAA-AL/ALiPy" -> "google/active-learning"
"NUAA-AL/ALiPy" -> "modAL-python/modAL"
"NUAA-AL/ALiPy" -> "rmunro/pytorch_active_learning"
"NUAA-AL/ALiPy" -> "dsgissin/DiscriminativeActiveLearning"
"NUAA-AL/ALiPy" -> "baifanxxx/awesome-active-learning"
"NUAA-AL/ALiPy" -> "ozansener/active_learning_coreset"
"NUAA-AL/ALiPy" -> "sinhasam/vaal"
"NUAA-AL/ALiPy" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"NUAA-AL/ALiPy" -> "baal-org/baal"
"NUAA-AL/ALiPy" -> "SupeRuier/awesome-active-learning"
"NUAA-AL/ALiPy" -> "SineZHAN/deepALplus"
"NUAA-AL/ALiPy" -> "yongjin-shin/awesome-active-learning"
"NUAA-AL/ALiPy" -> "JordanAsh/badge"
"ymym3412/position-rank" -> "yagays/embedrank"
"yikangshen/PRPN" -> "harvardnlp/urnng"
"yikangshen/PRPN" -> "nyu-mll/PRPN-Analysis"
"yikangshen/PRPN" -> "iesl/diora"
"yikangshen/PRPN" -> "hantek/distance-parser"
"yikangshen/PRPN" -> "eponvert/upparse"
"yikangshen/PRPN" -> "jihunchoi/unsupervised-treelstm"
"hantek/distance-parser" -> "yikangshen/Ordered-Memory"
"hantek/distance-parser" -> "yikangshen/PRPN"
"hantek/distance-parser" -> "ExplorerFreda/TreeEnc"
"nyu-mll/PRPN-Analysis" -> "yikangshen/PRPN"
"jxhe/struct-learning-with-flow" -> "davidswelt/dmvccm"
"jxhe/struct-learning-with-flow" -> "ketranm/neuralHMM"
"jxhe/struct-learning-with-flow" -> "shtechair/CRFAE-Dep-Parser"
"iesl/diora" -> "harvardnlp/urnng"
"iesl/diora" -> "yikangshen/PRPN"
"iesl/diora" -> "harvardnlp/compound-pcfg"
"iesl/diora" -> "hantek/distance-parser"
"iesl/diora" -> "FilippoC/diffdp" ["e"=1]
"harvardnlp/urnng" -> "yikangshen/PRPN"
"harvardnlp/urnng" -> "iesl/diora"
"harvardnlp/urnng" -> "harvardnlp/compound-pcfg"
"harvardnlp/urnng" -> "jihunchoi/unsupervised-treelstm"
"harvardnlp/urnng" -> "mingdachen/disentangle-semantics-syntax" ["e"=1]
"harvardnlp/urnng" -> "clab/rnng"
"harvardnlp/urnng" -> "nyu-mll/PRPN-Analysis"
"harvardnlp/urnng" -> "nyu-mll/spinn"
"harvardnlp/urnng" -> "yoonkim/neural-qcfg"
"harvardnlp/urnng" -> "hantek/distance-parser"
"harvardnlp/urnng" -> "jxhe/struct-learning-with-flow"
"harvardnlp/urnng" -> "vene/sparsemap" ["e"=1]
"NirantK/best-of-jupyter" -> "radekosmulski/quickdraw" ["e"=1]
"NirantK/best-of-jupyter" -> "NirantK/hindi2vec"
"NirantK/best-of-jupyter" -> "NirantK/NLP_Quickbook"
"dedupeio/dedupe-examples" -> "dedupeio/dedupe"
"dedupeio/dedupe-examples" -> "dedupeio/csvdedupe"
"dedupeio/dedupe-examples" -> "J535D165/recordlinkage"
"dedupeio/dedupe-examples" -> "J535D165/data-matching-software"
"dedupeio/dedupe-examples" -> "dice-group/LIMES" ["e"=1]
"dedupeio/dedupe-examples" -> "vintasoftware/deduplication-slides"
"dedupeio/dedupe-examples" -> "Lyonk71/pandas-dedupe"
"dedupeio/dedupe-examples" -> "datamade/probablepeople"
"dedupeio/dedupe-examples" -> "dedupeio/address-matching"
"benkrause/dynamic-evaluation" -> "zihangdai/mos"
"DongjunLee/transformer-tensorflow" -> "lilianweng/transformer-tensorflow"
"DongjunLee/transformer-tensorflow" -> "flrngel/Self-Attentive-tensorflow" ["e"=1]
"DongjunLee/transformer-tensorflow" -> "Kyubyong/transformer"
"DongjunLee/transformer-tensorflow" -> "tobyyouup/conv_seq2seq" ["e"=1]
"DongjunLee/transformer-tensorflow" -> "galsang/ABCNN" ["e"=1]
"adashofdata/muffin-cupcake" -> "adashofdata/intro-to-text-analytics"
"successar/AttentionExplanation" -> "serrano-s/attn-tests"
"successar/AttentionExplanation" -> "sarahwie/attention"
"successar/AttentionExplanation" -> "salesforce/cos-e"
"successar/AttentionExplanation" -> "nelson-liu/contextual-repr-analysis"
"successar/AttentionExplanation" -> "john-hewitt/structural-probes"
"marcotcr/sears" -> "JHL-HUST/PWWS"
"pyconll/pyconll" -> "EmilStenstrom/conllu"
"jfilter/clean-text" -> "MaartenGr/PolyFuzz"
"jfilter/clean-text" -> "chartbeat-labs/textacy"
"jfilter/clean-text" -> "jbesomi/texthero"
"jfilter/clean-text" -> "explosion/spacy-transformers"
"jfilter/clean-text" -> "ddangelov/Top2Vec"
"jfilter/clean-text" -> "linkedin/detext"
"jfilter/clean-text" -> "NorskRegnesentral/skweak"
"jfilter/clean-text" -> "PrithivirajDamodaran/Styleformer" ["e"=1]
"jfilter/clean-text" -> "textstat/textstat"
"jfilter/clean-text" -> "ICLRandD/Blackstone" ["e"=1]
"jfilter/clean-text" -> "LIAAD/yake"
"jfilter/clean-text" -> "nipunsadvilkar/pySBD"
"jfilter/clean-text" -> "artefactory/NLPretext" ["e"=1]
"jfilter/clean-text" -> "pudo/normality" ["e"=1]
"jfilter/clean-text" -> "kootenpv/contractions" ["e"=1]
"lilianweng/transformer-tensorflow" -> "DongjunLee/transformer-tensorflow"
"lilianweng/transformer-tensorflow" -> "Kyubyong/transformer"
"lilianweng/transformer-tensorflow" -> "ematvey/tensorflow-seq2seq-tutorials" ["e"=1]
"sindresorhus/word-list" -> "sindresorhus/random-word"
"sarnthil/unify-emotion-datasets" -> "JULIELab/EmoBank"
"sarnthil/unify-emotion-datasets" -> "sinmaniphel/py_isear_dataset"
"sarnthil/unify-emotion-datasets" -> "tlkh/text-emotion-classification"
"sarnthil/unify-emotion-datasets" -> "emorynlp/emotion-detection"
"sarnthil/unify-emotion-datasets" -> "lukasgarbas/nlp-text-emotion"
"sarnthil/unify-emotion-datasets" -> "cbaziotis/ntua-slp-semeval2018"
"sarnthil/unify-emotion-datasets" -> "monologg/GoEmotions-pytorch"
"sarnthil/unify-emotion-datasets" -> "DhruvDh/emocontext"
"GreenBuildingRegistry/usaddress-scourgify" -> "datamade/usaddress"
"GreenBuildingRegistry/usaddress-scourgify" -> "datamade/how-to"
"NathanDuran/Switchboard-Corpus" -> "cgpotts/swda"
"NathanDuran/Switchboard-Corpus" -> "NathanDuran/MRDA-Corpus"
"ak9250/gpt-2-colab" -> "lopuhin/transformer-lm"
"ak9250/gpt-2-colab" -> "nshepperd/gpt-2"
"ak9250/gpt-2-colab" -> "minimaxir/gpt-2-cloud-run"
"ak9250/gpt-2-colab" -> "ilopezfr/gpt-2"
"ak9250/gpt-2-colab" -> "CaptainValor/gpt-2-colab"
"HoloClean/holoclean" -> "dbunibas/BART"
"HoloClean/holoclean" -> "BigDaMa/raha"
"HoloClean/holoclean" -> "BigDaMa/ExampleDrivenErrorDetection"
"HoloClean/holoclean" -> "anhaidgroup/py_entitymatching"
"HoloClean/holoclean" -> "HoloClean/HoloClean-Legacy-deprecated"
"HoloClean/holoclean" -> "cpitclaudel/dBoost"
"HoloClean/holoclean" -> "sis-ethz/Profiler-Public"
"HoloClean/holoclean" -> "HPI-Information-Systems/Metanome"
"HoloClean/holoclean" -> "anhaidgroup/deepmatcher"
"cdimascio/py-readability-metrics" -> "textstat/textstat"
"jasonrig/address-net" -> "GRAAL-Research/deepparse"
"jasonrig/address-net" -> "matthaywardwebdesign/aus-search"
"hjian42/automatic-personality-prediction" -> "nlp-psych/personality"
"hjian42/automatic-personality-prediction" -> "Resh1992/User-profiling-in-social-media"
"ziyin-dl/word-embedding-dimensionality-selection" -> "nelson-liu/contextual-repr-analysis"
"leviswind/pytorch-transformer" -> "jayparks/transformer"
"leviswind/pytorch-transformer" -> "StillKeepTry/Transformer-PyTorch"
"foamliu/Transformer" -> "foamliu/Machine-Translation"
"foamliu/Transformer" -> "foamliu/Machine-Translation-v2"
"foamliu/Transformer" -> "carrie0307/attention-nmt"
"foamliu/Transformer" -> "DevilExileSu/transformer"
"asiddhant/Active-NLP" -> "AngusMonroe/Active-NER"
"LIAAD/KeywordExtractor-Datasets" -> "boudinfl/ake-datasets"
"LIAAD/KeywordExtractor-Datasets" -> "memray/OpenNMT-kpg-release"
"LIAAD/KeywordExtractor-Datasets" -> "thunlp/BERT-KPE"
"LIAAD/KeywordExtractor-Datasets" -> "SDuari/Keyword-Extraction-Datasets"
"LIAAD/KeywordExtractor-Datasets" -> "xnliang98/uke_ccrank"
"LIAAD/KeywordExtractor-Datasets" -> "LinhanZ/mderank"
"LIAAD/KeywordExtractor-Datasets" -> "boudinfl/pke"
"LIAAD/KeywordExtractor-Datasets" -> "swisscom/ai-research-keyphrase-extraction"
"LIAAD/KeywordExtractor-Datasets" -> "ygorg/KPTimes"
"LIAAD/KeywordExtractor-Datasets" -> "kenchan0226/keyphrase-generation-rl"
"LIAAD/KeywordExtractor-Datasets" -> "memray/seq2seq-keyphrase"
"LIAAD/KeywordExtractor-Datasets" -> "sunyilgdx/SIFRank"
"LIAAD/KeywordExtractor-Datasets" -> "hd10-iupui/AttentionRank"
"LIAAD/KeywordExtractor-Datasets" -> "microsoft/OpenKP"
"LIAAD/KeywordExtractor-Datasets" -> "asahi417/kex"
"mholtzscher/spacy_readability" -> "DeNeutoy/spacy-vis"
"sorenlind/lemmy" -> "centre-for-humanities-computing/DaCy"
"sorenlind/lemmy" -> "danish-foundation-models/site"
"sorenlind/lemmy" -> "alexandrainst/danlp"
"sorenlind/lemmy" -> "martincjespersen/DaAnonymization"
"YannBrrd/elasticsearch-entity-resolution" -> "larsga/Duke"
"HPI-Information-Systems/metanome-algorithms" -> "HPI-Information-Systems/Metanome"
"HPI-Information-Systems/metanome-algorithms" -> "HPI-Information-Systems/inclusion-dependency-algorithms"
"HPI-Information-Systems/metanome-algorithms" -> "nabihach/FD_CFD_extraction"
"mourga/affective-attention" -> "mourga/transformer-uncertainty"
"mourga/affective-attention" -> "mourga/variational-lstm"
"mourga/affective-attention" -> "mourga/awd-lstm-lm"
"mourga/affective-attention" -> "mourga/contrastive-active-learning"
"mourga/affective-attention" -> "alexandra-chron/ntua-slp-wassa-iest2018"
"minimaxir/gpt-2-keyword-generation" -> "minimaxir/gpt-2-cloud-run"
"minimaxir/gpt-2-keyword-generation" -> "minimaxir/ctrl-gce"
"minimaxir/gpt-2-keyword-generation" -> "uber-research/PPLM"
"minimaxir/gpt-2-keyword-generation" -> "minimaxir/reddit-gpt-2-cloud-run"
"snorkel-team/snorkel-tutorials" -> "snorkel-team/snorkel"
"snorkel-team/snorkel-tutorials" -> "snorkel-team/snorkel-extraction"
"snorkel-team/snorkel-tutorials" -> "HazyResearch/metal"
"snorkel-team/snorkel-tutorials" -> "HazyResearch/snorkel-superglue"
"snorkel-team/snorkel-tutorials" -> "HazyResearch/flyingsquid"
"snorkel-team/snorkel-tutorials" -> "HazyResearch/fonduer" ["e"=1]
"UKPLab/arxiv2018-xling-sentence-embeddings" -> "rock3125/sentence2vec"
"thunlp/Character-enhanced-Sememe-Prediction" -> "thunlp/sememe_prediction"
"yuewang-cuhk/TAKG" -> "kenchan0226/keyphrase-generation-rl"
"yuewang-cuhk/TAKG" -> "zengjichuan/TMN" ["e"=1]
"yuewang-cuhk/TAKG" -> "avinsit123/keyphrase-gan"
"yuewang-cuhk/TAKG" -> "yuewang-cuhk/HashtagGeneration"
"yuewang-cuhk/TAKG" -> "Chen-Wang-CUHK/KG-KE-KR-M"
"yuewang-cuhk/TAKG" -> "Chen-Wang-CUHK/ExHiRD-DKG"
"yuewang-cuhk/TAKG" -> "memray/OpenNMT-kpg-release"
"yuewang-cuhk/TAKG" -> "zengjichuan/Topic_Disc" ["e"=1]
"mpuig/spacy-lookup" -> "nickdavidhaynes/spacy-cld"
"mpuig/spacy-lookup" -> "DeNeutoy/spacy-vis"
"ganeshjawahar/interpret_bert" -> "yoavg/bert-syntax"
"AI-team-UoA/JedAI-WebApp" -> "scify/JedAI-Spark"
"dalinvip/corpus_process_script" -> "dalinvip/cw2vec"
"dalinvip/corpus_process_script" -> "dalinvip/Word_Similarity_and_Word_Analogy"
"dalinvip/corpus_process_script" -> "Luka0612/cw2vec"
"dalinvip/corpus_process_script" -> "zhang2010hao/cw2vec-pytorch"
"dalinvip/corpus_process_script" -> "HKUST-KnowComp/JWE"
"textpipe/textpipe" -> "msg-systems/holmes-extractor"
"textpipe/textpipe" -> "kootenpv/spacy_api"
"emorynlp/character-identification" -> "amore-upf/semeval2018-task4"
"emorynlp/character-identification" -> "emorynlp/semeval-2018-task4"
"IssamLaradji/sls" -> "IssamLaradji/sps"
"chinwuDebug/RAKE_improve" -> "mpk001/RAKE-keywordsExtraction"
"Luka0612/cw2vec" -> "noobiegz/cw2vec"
"Luka0612/cw2vec" -> "dalinvip/cw2vec"
"Luka0612/cw2vec" -> "zhang2010hao/cw2vec-pytorch"
"mattzheng/ChineseWiki" -> "dalinvip/corpus_process_script"
"mattzheng/ChineseWiki" -> "nocoolsandwich/iamQA"
"sharmaroshan/Drugs-Recommendation-using-Reviews" -> "sharmaroshan/Google-Job-Skills"
"sharmaroshan/Drugs-Recommendation-using-Reviews" -> "sharmaroshan/Percentage-of-Women-in-Bacelor-s-Degree"
"sharmaroshan/Drugs-Recommendation-using-Reviews" -> "sharmaroshan/Graduate-Admissions-Analysis"
"sharmaroshan/Drugs-Recommendation-using-Reviews" -> "sharmaroshan/Loan-Prediction"
"sharmaroshan/Drugs-Recommendation-using-Reviews" -> "sharmaroshan/Churn-Modelling-Dataset"
"sharmaroshan/Drugs-Recommendation-using-Reviews" -> "sharmaroshan/HR-Analytics"
"jiesutd/Text-Attention-Heatmap-Visualization" -> "cbaziotis/neat-vision"
"jiesutd/Text-Attention-Heatmap-Visualization" -> "yuewang-cuhk/TAKG"
"jiesutd/Text-Attention-Heatmap-Visualization" -> "GeneZC/ASGCN" ["e"=1]
"nickdavidhaynes/spacy-cld" -> "tokestermw/spacy_kenlm"
"nickdavidhaynes/spacy-cld" -> "tokestermw/spacy_hunspell"
"TakeLab/podium" -> "josipjukic/alanno"
"TakeLab/podium" -> "PetarMihalj/cpack"
"TakeLab/podium" -> "PetarMihalj/AGT"
"TakeLab/spacy-udpipe" -> "ufal/udpipe"
"TakeLab/spacy-udpipe" -> "TakeLab/podium"
"huggingface/torchMoji" -> "bfelbo/DeepMoji"
"huggingface/torchMoji" -> "huggingface/hmtl"
"huggingface/torchMoji" -> "huggingface/pytorch-openai-transformer-lm"
"huggingface/torchMoji" -> "NVIDIA/sentiment-discovery"
"huggingface/torchMoji" -> "facebookresearch/InferSent"
"huggingface/torchMoji" -> "openai/generating-reviews-discovering-sentiment"
"huggingface/torchMoji" -> "huggingface/neuralcoref"
"huggingface/torchMoji" -> "pytorch/text"
"huggingface/torchMoji" -> "EdGENetworks/attention-networks-for-classification" ["e"=1]
"huggingface/torchMoji" -> "PetrochukM/PyTorch-NLP"
"huggingface/torchMoji" -> "graykode/ALBERT-Pytorch" ["e"=1]
"huggingface/torchMoji" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"huggingface/torchMoji" -> "babylonhealth/fastText_multilingual"
"huggingface/torchMoji" -> "salesforce/awd-lstm-lm"
"huggingface/torchMoji" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"minimaxir/gpt-2-cloud-run" -> "minimaxir/twitter-cloud-run"
"minimaxir/gpt-2-cloud-run" -> "ak9250/gpt-2-colab"
"minimaxir/gpt-2-cloud-run" -> "minimaxir/gpt-2-simple"
"minimaxir/gpt-2-cloud-run" -> "minimaxir/gpt-2-keyword-generation"
"minimaxir/gpt-2-cloud-run" -> "kylemcdonald/gpt-2-poetry"
"vecto-ai/vecto" -> "undertherain/vsmlib"
"yifan0sun/DynamicWord2Vec" -> "valedica/twec"
"llhthinker/NLP-Papers" -> "llhthinker/BDCI2017-MingLue" ["e"=1]
"llhthinker/NLP-Papers" -> "PrincetonML/SIF"
"llhthinker/NLP-Papers" -> "mhagiwara/100-nlp-papers"
"llhthinker/NLP-Papers" -> "changwookjun/nlp-paper" ["e"=1]
"llhthinker/NLP-Papers" -> "NLPScott/bert-Chinese-classification-task" ["e"=1]
"drdhaval2785/SanskritSubanta" -> "drdhaval2785/SanskritVerb"
"sanskrit/ashtadhyayi" -> "sanskrit-kosha/kosha"
"ropeladder/record-linkage-resources" -> "J535D165/data-matching-software"
"ropeladder/record-linkage-resources" -> "usc-isi-i2/rltk"
"zentity-io/zentity" -> "scify/JedAIToolkit"
"NirantK/hindi2vec" -> "goru001/nlp-for-hindi"
"NirantK/hindi2vec" -> "anoopkunchukuttan/crowd-indic-transliteration-data"
"omarsar/pytorch_neural_machine_translation_attention" -> "omarsar/machine_learning_fundamentals"
"benathi/multisense-prob-fasttext" -> "benathi/word2gm"
"NiuTrans/MT-paper-lists" -> "NiuTrans/NiuTrans.SMT"
"NiuTrans/MT-paper-lists" -> "NiuTrans/NiuTensor"
"NiuTrans/MT-paper-lists" -> "NiuTrans/LanguageCodes"
"NiuTrans/MT-paper-lists" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/MT-paper-lists" -> "NiuTrans/MTVenues"
"NiuTrans/MT-paper-lists" -> "NiuTrans/NASPapers"
"fanglanting/skip-gram-pytorch" -> "theeluwin/pytorch-sgns"
"fanglanting/skip-gram-pytorch" -> "blackredscarf/pytorch-SkipGram"
"fanglanting/skip-gram-pytorch" -> "ray1007/pytorch-word2vec"
"fanglanting/skip-gram-pytorch" -> "deborausujono/word2vecpy"
"fanglanting/skip-gram-pytorch" -> "Adoni/word2vec_pytorch"
"fanglanting/skip-gram-pytorch" -> "n0obcoder/Skip-Gram-Model-PyTorch"
"memray/seq2seq-keyphrase-pytorch" -> "kenchan0226/keyphrase-generation-rl"
"memray/seq2seq-keyphrase-pytorch" -> "memray/seq2seq-keyphrase"
"memray/seq2seq-keyphrase-pytorch" -> "memray/OpenNMT-kpg-release"
"memray/seq2seq-keyphrase-pytorch" -> "whqwill/seq2seq-keyphrase-bert"
"memray/seq2seq-keyphrase-pytorch" -> "fudannlp16/KeyPhrase-Extraction"
"memray/seq2seq-keyphrase-pytorch" -> "avinsit123/keyphrase-gan"
"memray/seq2seq-keyphrase-pytorch" -> "jiacheng-ye/kg_one2set"
"pranav-ust/BERT-keyphrase-extraction" -> "ibatra/BERT-Keyword-Extractor"
"pranav-ust/BERT-keyphrase-extraction" -> "memray/OpenNMT-kpg-release"
"pranav-ust/BERT-keyphrase-extraction" -> "ymym3412/position-rank"
"agnusmaximus/Word2Bits" -> "alexandres/lexvec"
"agnusmaximus/Word2Bits" -> "orenmel/context2vec"
"ColingPaper2018/DialogueAct-Tagger" -> "NathanDuran/Probabilistic-RNN-DA-Classifier"
"ColingPaper2018/DialogueAct-Tagger" -> "cgpotts/swda"
"havanagrawal/GoodreadsScraper" -> "maria-antoniak/goodreads-scraper"
"havanagrawal/GoodreadsScraper" -> "havanagrawal/c2c2017"
"havanagrawal/GoodreadsScraper" -> "andre-st/goodreads-toolbox"
"andre-st/goodreads-toolbox" -> "OmarEinea/GoodReadsScraper"
"vgel/summarize.py" -> "xiaoxu193/PyTeaser"
"thunlp/Auto_CLIWC" -> "thunlp/sememe_prediction"
"thunlp/Auto_CLIWC" -> "chbrown/liwc-python"
"thunlp/Auto_CLIWC" -> "thunlp/SE-WRL"
"Boreaso/ALFramework" -> "shibing624/labelit"
"karlmoritz/bicvm" -> "shyamupa/biling-survey"
"BigDaMa/raha" -> "dbunibas/BART"
"BigDaMa/raha" -> "BigDaMa/ExampleDrivenErrorDetection"
"BigDaMa/raha" -> "chu-data-lab/CleanML"
"zishansami102/First-Impression" -> "yagguc/deep_impression"
"nikhgarg/EmbeddingDynamicStereotypes" -> "williamleif/histwords"
"nikhgarg/EmbeddingDynamicStereotypes" -> "KnowledgeLab/GeometryofCulture"
"1024er/cbert_aug" -> "pfnet-research/contextual_augmentation"
"1024er/cbert_aug" -> "varunkumar-dev/TransformersDataAugmentation"
"dair-ai/deep_learning_notations" -> "dair-ai/nlp_with_tensorflow"
"zhao1701/extending-deep-ER" -> "daqcri/DeepER"
"zhao1701/extending-deep-ER" -> "DistrictDataLabs/entity-resolution"
"ryanjgallagher/shifterator" -> "martingerlach/hSBM_Topicmodel"
"dhammack/Word2VecExample" -> "zseymour/phrase2vec"
"mitchellstern/minimal-span-parser" -> "dgaddy/parser-analysis"
"mitchellstern/minimal-span-parser" -> "cdg720/emnlp2016"
"hankcs/TreebankPreprocessing" -> "yzhangcs/crfpar"
"hankcs/TreebankPreprocessing" -> "tdozat/Parser-v1"
"hankcs/TreebankPreprocessing" -> "yzhangcs/parser"
"hankcs/TreebankPreprocessing" -> "mitchellstern/minimal-span-parser"
"hankcs/TreebankPreprocessing" -> "LouChao98/neural_based_dmv"
"hankcs/TreebankPreprocessing" -> "HIT-SCIR/SemEval-2016"
"hankcs/TreebankPreprocessing" -> "hantek/distance-parser"
"hankcs/TreebankPreprocessing" -> "chantera/biaffineparser"
"alexandrainst/danlp" -> "fnielsen/awesome-danish"
"alexandrainst/danlp" -> "centre-for-humanities-computing/DaCy"
"alexandrainst/danlp" -> "certainlyio/nordic_bert"
"alexandrainst/danlp" -> "MalteHB/-l-ctra"
"alexandrainst/danlp" -> "sorenlind/lemmy"
"alexandrainst/danlp" -> "danish-foundation-models/site"
"alexandrainst/danlp" -> "leondz/dagw_page"
"alexandrainst/danlp" -> "sarnikowski/danish_transformers"
"alexandrainst/danlp" -> "EuroEval/EuroEval"
"alexandrainst/danlp" -> "ebanalyse/NERDA"
"alexandrainst/danlp" -> "danspeech/danspeech"
"alexandrainst/danlp" -> "martincjespersen/DaAnonymization"
"alexandrainst/danlp" -> "ebanalyse/senda"
"alexandrainst/danlp" -> "ITUnlp/daner"
"OliverHellwig/sanskrit" -> "kmadathil/sanskrit_parser"
"OliverHellwig/sanskrit" -> "ashtadhyayi-com/data"
"OliverHellwig/sanskrit" -> "sarit/SARIT-corpus"
"OliverHellwig/sanskrit" -> "ambuda-org/ambuda"
"OliverHellwig/sanskrit" -> "shreevatsa/sanskrit"
"OliverHellwig/sanskrit" -> "drdhaval2785/SanskritVerb"
"OliverHellwig/sanskrit" -> "ihdia/sanskrit-ocr"
"OliverHellwig/sanskrit" -> "tylergneill/skrutable"
"OliverHellwig/sanskrit" -> "sanskrit/sanskrit"
"OliverHellwig/sanskrit" -> "sanskrit/data"
"OliverHellwig/sanskrit" -> "goru001/nlp-for-sanskrit"
"OliverHellwig/sanskrit" -> "wujastyk/GRETIL-mirror"
"OliverHellwig/sanskrit" -> "SushantDave/Sandhi_Prakarana"
"OliverHellwig/sanskrit" -> "cltk/sanskrit_text_gitasupersite"
"OliverHellwig/sanskrit" -> "avinashvarna/audio_alignment"
"antonisa/lang2vec" -> "neulab/langrank"
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "keon/seq2seq"
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "eladhoffer/seq2seq.pytorch"
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "IBM/pytorch-seq2seq"
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "mttk/rnn-classifier" ["e"=1]
"AuCson/PyTorch-Batch-Attention-Seq2seq" -> "MaximumEntropy/Seq2Seq-PyTorch"
"lajanugen/S2V" -> "coleridge72/quick_thoughts"
"lajanugen/S2V" -> "RottenFruits/quick-thought-in-pytorch"
"Apress/practical-web-scraping-for-data-science" -> "Apress/website-scraping-w-python"
"Ezhil-Language-Foundation/open-tamil" -> "AshokR/TamilNLP"
"Ezhil-Language-Foundation/open-tamil" -> "Ezhil-Language-Foundation/Ezhil-Lang"
"Ezhil-Language-Foundation/open-tamil" -> "INFITTOfficial/awesome-tamil"
"Ezhil-Language-Foundation/open-tamil" -> "narVidhai/tamil-nlp-catalog"
"Ezhil-Language-Foundation/open-tamil" -> "abhinand5/tamil-llama"
"Ezhil-Language-Foundation/open-tamil" -> "nithyadurai87/tamil-sandhi-checker"
"Ezhil-Language-Foundation/open-tamil" -> "KaniyamFoundation/ProjectIdeas"
"Ezhil-Language-Foundation/open-tamil" -> "tk120404/thirukkural"
"Ezhil-Language-Foundation/open-tamil" -> "rdamodharan/tamil-stemmer"
"Ezhil-Language-Foundation/open-tamil" -> "vanangamudi/tamil-lm2"
"Ezhil-Language-Foundation/open-tamil" -> "goru001/nlp-for-tamil"
"Ezhil-Language-Foundation/open-tamil" -> "srix/pytamil"
"Ezhil-Language-Foundation/open-tamil" -> "malaikannan/TamilSpellChecker"
"Ezhil-Language-Foundation/open-tamil" -> "nithyadurai87/machine_learning_examples"
"NiuTrans/NiuTrans.SMT" -> "NiuTrans/MT-paper-lists"
"NiuTrans/NiuTrans.SMT" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/NiuTrans.SMT" -> "NiuTrans/NiuTensor"
"NiuTrans/NiuTrans.SMT" -> "NiuTrans/LanguageCodes"
"NiuTrans/NiuTrans.SMT" -> "NiuTrans/MTVenues"
"Liebeck/spacy-sentiws" -> "Liebeck/spacy-iwnlp"
"serrano-s/attn-tests" -> "sarahwie/attention"
"ines/spacy-js" -> "kengz/spacy-nlp"
"ines/spacy-js" -> "ines/spacy-graphql"
"ines/spacy-js" -> "jgontrum/spacy-api-docker"
"bregydoc/gtranslate" -> "mind1949/googletrans"
"mmautner/readability" -> "wimmuskee/readability-score"
"mmautner/readability" -> "andreasvc/readability"
"inejc/paragraph-vectors" -> "jhlau/doc2vec"
"inejc/paragraph-vectors" -> "JonathanRaiman/PVDM"
"inejc/paragraph-vectors" -> "ibrahimsharaf/doc2vec"
"inejc/paragraph-vectors" -> "theeluwin/pytorch-sgns"
"inejc/paragraph-vectors" -> "facebookresearch/InferSent"
"boudinfl/ake-datasets" -> "LIAAD/KeywordExtractor-Datasets"
"boudinfl/ake-datasets" -> "ygorg/KPTimes"
"boudinfl/ake-datasets" -> "memray/OpenNMT-kpg-release"
"boudinfl/ake-datasets" -> "midas-research/keyphrase-extraction-as-sequence-labeling-data"
"boudinfl/ake-datasets" -> "sunyilgdx/SIFRank"
"boudinfl/ake-datasets" -> "LinhanZ/mderank"
"boudinfl/ake-datasets" -> "Jayshen0/Unsupervised-Deep-Keyphrase-Generation"
"boudinfl/ake-datasets" -> "hd10-iupui/AttentionRank"
"boudinfl/ake-datasets" -> "NKU-HLT/PromptRank"
"boudinfl/ake-datasets" -> "jiacheng-ye/kg_one2set"
"boudinfl/ake-datasets" -> "xnliang98/uke_ccrank"
"ltgoslo/norec" -> "ltgoslo/norec_fine"
"ltgoslo/norec" -> "noklesta/The-Oslo-Bergen-Tagger"
"ltgoslo/norec" -> "web64/norwegian-nlp-resources"
"daqcri/NADEEF" -> "cpitclaudel/dBoost"
"daqcri/NADEEF" -> "dbunibas/BART"
"sis-ethz/Profiler-Public" -> "BigDaMa/ExampleDrivenErrorDetection"
"explosion/spacymoji" -> "ines/spacy-graphql"
"explosion/spacymoji" -> "tokestermw/spacy_hunspell"
"itkach/mwscrape" -> "itkach/mw2slob"
"megemini/-_megemini-" -> "dimtxw/RJYY"
"ltgoslo/norne" -> "ltgoslo/NorBERT"
"ltgoslo/norne" -> "ljos/navnkjenner"
"ltgoslo/norne" -> "emanlapponi/norlem-norwegian-lemmatizer"
"ltgoslo/norne" -> "ohenrik/nb_dep_ud_sm"
"mchesterkadwell/intro-to-text-mining-with-python" -> "mchesterkadwell/intro-to-text-mining-with-python-2020"
"mfaruqui/crosslingual-cca" -> "shyamupa/biling-survey"
"mfaruqui/crosslingual-cca" -> "gouwsmeister/bilbowa"
"williamleif/social-lstm" -> "williamleif/redditnetwork"
"williamleif/social-lstm" -> "jacobeisenstein/probabilistic-lexicon-classification"
"williamleif/social-lstm" -> "williamleif/socialsent"
"williamleif/social-lstm" -> "ICML14MoMCompare/spectral-learn"
"UniversalDependencies/tools" -> "jonorthwash/ud-annotatrix"
"UniversalDependencies/tools" -> "UniversalDependencies/docs"
"UniversalDependencies/tools" -> "udapi/udapi-python"
"UniversalDependencies/tools" -> "Orange-OpenSource/conllueditor"
"UniversalDependencies/tools" -> "EmilStenstrom/conllu"
"UniversalDependencies/tools" -> "UniversalDependencies/UD_English-EWT"
"UniversalDependencies/tools" -> "amir-zeldes/gum" ["e"=1]
"noklesta/The-Oslo-Bergen-Tagger" -> "emanlapponi/norlem-norwegian-lemmatizer"
"thunlp/SCPapers" -> "thunlp/OpenHowNet" ["e"=1]
"thunlp/SCPapers" -> "thunlp/SE-WRL"
"thunlp/SCPapers" -> "thunlp/sememe_prediction"
"thunlp/SCPapers" -> "thunlp/RCPapers" ["e"=1]
"thunlp/SCPapers" -> "thunlp/Sememe-SC"
"thunlp/SCPapers" -> "thunlp/SE-WRL-SAT"
"thunlp/SCPapers" -> "thunlp/NREPapers" ["e"=1]
"adashofdata/intro-to-text-analytics" -> "adashofdata/muffin-cupcake"
"sahil711/AV" -> "sahil711/DHS-19"
"oaqa/suim" -> "EDS-APHP/UimaOnSpark"
"oaqa/suim" -> "apache/uima-uimafit"
"sharmaroshan/Students-Performance-Analytics" -> "sharmaroshan/Percentage-of-Women-in-Bacelor-s-Degree"
"pfnet-research/contextual_augmentation" -> "1024er/cbert_aug"
"pfnet-research/contextual_augmentation" -> "quincyliang/nlp-data-augmentation" ["e"=1]
"pfnet-research/contextual_augmentation" -> "malllabiisc/DiPS" ["e"=1]
"pfnet-research/contextual_augmentation" -> "varunkumar-dev/TransformersDataAugmentation"
"pfnet-research/contextual_augmentation" -> "noisemix/noisemix"
"vanangamudi/tamil-lm2" -> "AshokR/TamilNLP"
"chatox/data-mining-course" -> "chatox/networks-science-course"
"enricivi/adversarial_training_methods" -> "aonotas/adversarial_text"
"enricivi/adversarial_training_methods" -> "WangJiuniu/adversarial_training"
"minqi/hnatt" -> "cbaziotis/neat-vision"
"apache/uima-uimaj" -> "apache/uima-uimafit"
"apache/uima-uimaj" -> "apache/uima-addons"
"BeckyMarvin/LM_syneval" -> "facebookresearch/colorlessgreenRNNs"
"yoavg/bert-syntax" -> "TalLinzen/rnn_agreement"
"yoavg/bert-syntax" -> "nelson-liu/contextual-repr-analysis"
"yoavg/bert-syntax" -> "BeckyMarvin/LM_syneval"
"yoavg/bert-syntax" -> "boknilev/nlp-analysis-methods"
"openeventdata/phoenix_pipeline" -> "openeventdata/petrarch2"
"nickwalton/AI-DungeonMaster" -> "storybro/storybro"
"proycon/flat" -> "proycon/folia"
"tdozat/Parser-v3" -> "zhangmeishan/BiaffineDParser"
"tdozat/Parser-v3" -> "AntNLP/gnn-dep-parsing"
"tdozat/Parser-v3" -> "wangxinyu0922/Second_Order_SDP"
"tdozat/Parser-v3" -> "eelcovdw/Biaffine-Parser"
"bamtercelboo/PyTorch_Biaffine_Dependency_Parsing" -> "zhangmeishan/BiaffineDParser"
"bamtercelboo/PyTorch_Biaffine_Dependency_Parsing" -> "LiangsLi/LSTM_Biaffine_Dependency_Parser_PyTorch"
"MimiOnuoha/Impossible-Maps" -> "MimiOnuoha/Creative-Approaches"
"nithyadurai87/tamil-sandhi-checker" -> "vasurenganathan/tamil-tts"
"nithyadurai87/tamil-sandhi-checker" -> "AshokR/TamilNLP"
"openeventdata/petrarch" -> "openeventdata/petrarch2"
"chatopera/text-dependency-parser" -> "LiangsLi/LSTM_Biaffine_Dependency_Parser_PyTorch"
"daqcri/DeepER" -> "icip-cas/EntityMatcher"
"daqcri/DeepER" -> "brunnurs/entity-matching-transformer"
"outcastofmusic/quick-nlp" -> "PetrochukM/PyTorch-NLP"
"justinlittman/fb-ad-archive-scraper" -> "CybersecurityForDemocracy/FacebookApiPolAdsCollector"
"feedly/transfer-nlp" -> "alexandra-chron/siatl"
"Garrafao/LSCDetection" -> "akutuzov/semeval2020"
"Garrafao/LSCDetection" -> "Garrafao/TemporalReferencing"
"omarsar/deep_learning_notations" -> "omarsar/machine_learning_fundamentals"
"HIT-SCIR/SemEval-2016" -> "semantic-dependency-parsing/toolkit"
"HIT-SCIR/SemEval-2016" -> "NLPInBLCU/BiaffineDependencyParsing"
"HIT-SCIR/SemEval-2016" -> "bamtercelboo/PyTorch_Biaffine_Dependency_Parsing"
"HIT-SCIR/SemEval-2016" -> "LiangsLi/LSTM_Biaffine_Dependency_Parser_PyTorch"
"chatox/networks-science-course" -> "chatox/data-mining-course"
"KaiyuanGao/Kick_Algorithm" -> "KaiyuanGao/Kick_AI_Interview"
"MimiOnuoha/Philosophy-of-Data" -> "MimiOnuoha/Impossible-Maps"
"olgaliak/active-learning-detect" -> "nducthang/Active-learning-for-object-detection"
"olgaliak/active-learning-detect" -> "JappaB/Active_Learning_Object_Detection"
"sunlightlabs/name-cleaver" -> "openstates/name_tools"
"sharmaroshan/SECOM-Detecting-Defected-Items" -> "sharmaroshan/Car_Evaluation"
"JianGuanTHU/StoryEndGen" -> "lancopku/Skeleton-Based-Generation-Model"
"alexandra-chron/siatl" -> "alexandra-chron/lexical_xlm_relm"
"alexandra-chron/siatl" -> "alexandra-chron/hierarchical-domain-adaptation"
"alexandra-chron/siatl" -> "alexandra-chron/relm_unmt"
"alexandra-chron/siatl" -> "alexandra-chron/ntua-slp-wassa-iest2018"
"alexandra-chron/siatl" -> "mourga/affective-attention"
"t-systems-on-site-services-gmbh/german-wikipedia-text-corpus" -> "t-systems-on-site-services-gmbh/german-elmo-model"
"wangxinyu0922/Second_Order_SDP" -> "AntNLP/gnn-dep-parsing"
"whqwill/seq2seq-keyphrase-bert" -> "memray/seq2seq-keyphrase-pytorch"
"CybersecurityForDemocracy/FacebookApiPolAdsCollector" -> "justinlittman/fb-ad-archive-scraper"
"lancopku/Skeleton-Based-Generation-Model" -> "Hunter-DDM/sentimental-story-ending"
"lancopku/Skeleton-Based-Generation-Model" -> "JianGuanTHU/StoryEndGen"
"lancopku/Skeleton-Based-Generation-Model" -> "abisee/story-generation-eval"
"Chen-Wang-CUHK/KG-KE-KR-M" -> "kenchan0226/dual_view_review_sum"
"markpwoodward/active_osl" -> "rmunro/active_learning_class"
"akanyaani/Phrase_Extraction_Bi-LSTM" -> "akanyaani/Illustrated_GPT2_With_Code"
"ExplorerFreda/TreeEnc" -> "hantek/distance-parser"
"rdamodharan/tamil-stemmer" -> "thamizha/thamizha-solthiruthi"
"rdamodharan/tamil-stemmer" -> "AshokR/TamilNLP"
"rdamodharan/tamil-stemmer" -> "virtualvinodh/avalokitam"
"amirmohammadkz/personality-detection" -> "amirmohammadkz/personality_detection"
"dimtxw/RJYY" -> "megemini/-_megemini-"
"NathanDuran/MRDA-Corpus" -> "zihaohe123/speak-turn-emb-dialog-act-clf"
"thunlp/SE-WRL-SAT" -> "thunlp/SE-WRL"
"akjindal53244/dependency_parsing_tf" -> "SmartLi8/cs224n-assignment"
"akjindal53244/dependency_parsing_tf" -> "elikip/bist-parser"
"t-systems-on-site-services-gmbh/german-elmo-model" -> "t-systems-on-site-services-gmbh/german-wikipedia-text-corpus"
"pmichel31415/teapot-nlp" -> "pmichel31415/translate"
"apache/uima-ruta" -> "apache/uima-uimafit"
"tk120404/tamilproverbs" -> "tk120404/Aathichudi"
"alexandra-chron/ntua-slp-wassa-iest2018" -> "mourga/awd-lstm-lm"
"alexandra-chron/ntua-slp-wassa-iest2018" -> "alexandra-chron/lexical_xlm_relm"
"alexandra-chron/ntua-slp-wassa-iest2018" -> "mourga/affective-attention"
"alexandra-chron/ntua-slp-wassa-iest2018" -> "alexandra-chron/hierarchical-domain-adaptation"
"alexandra-chron/ntua-slp-wassa-iest2018" -> "mourga/transformer-uncertainty"
"alexandra-chron/ntua-slp-wassa-iest2018" -> "mourga/variational-lstm"
"alexandra-chron/ntua-slp-wassa-iest2018" -> "alexandra-chron/relm_unmt"
"foamliu/Machine-Translation-v2" -> "foamliu/Machine-Translation"
"DeNeutoy/spacy-vis" -> "mholtzscher/spacy_readability"
"DeNeutoy/spacy-vis" -> "boehm-e/spacy-raspberry"
"apache/uima-uimafit" -> "oaqa/suim"
"apache/uima-uimafit" -> "apache/uima-uimaj"
"zhangmeishan/BiaffineDParser" -> "bamtercelboo/PyTorch_Biaffine_Dependency_Parsing"
"zhangmeishan/BiaffineDParser" -> "tdozat/Parser-v3"
"zhangmeishan/BiaffineDParser" -> "yzhangcs/crfpar"
"zhangmeishan/BiaffineDParser" -> "aghie/tree2labels"
"brunnurs/entity-matching-transformer" -> "icip-cas/EntityMatcher"
"brunnurs/entity-matching-transformer" -> "daqcri/DeepER"
"sanskrit-kosha/kosha" -> "sanskrit/ashtadhyayi"
"sanskrit-kosha/kosha" -> "sanskrit/raw_etexts"
"sunnypatel165/c2c2018" -> "havanagrawal/c2c2017"
"sharmaroshan/Stock-Market-Predictions" -> "sharmaroshan/Graduate-Admissions-Analysis"
"sharmaroshan/Stock-Market-Predictions" -> "sharmaroshan/Social-Networks-Ads"
"sharmaroshan/Stock-Market-Predictions" -> "sharmaroshan/Percentage-of-Women-in-Bacelor-s-Degree"
"codocedo/tane" -> "nabihach/FD_CFD_extraction"
"zychen423/UHop" -> "lanyunshi/Multi-hopQA"
"virtualvinodh/avalokitam" -> "virtualvinodh/anunaadam"
"virtualvinodh/avalokitam" -> "thamizha/tawiktionary-offline"
"YanWenqiang/HBLSTM-CRF" -> "Franck-Dernoncourt/naacl2016"
"lzheng21/SpectralCF" -> "MengtingWan/chainRec"
"omarsar/nlp_pytorch_tensorflow_notebooks" -> "omarsar/machine_learning_fundamentals"
"dgaddy/parser-analysis" -> "cdg720/emnlp2016"
"vefthym/MinoanER" -> "scify/JedAI-Spark"
"rkfg/gpt-2" -> "CaptainValor/gpt-2-colab"
"yatsukha/double-pendulum" -> "PetarMihalj/cpack"
"yatsukha/double-pendulum" -> "PetarMihalj/AGT"
"emorynlp/semeval-2018-task4" -> "amore-upf/semeval2018-task4"
"dwyl/english-words" -> "first20hours/google-10000-english"
"dwyl/english-words" -> "skywind3000/ECDICT" ["e"=1]
"dwyl/english-words" -> "meetDeveloper/freeDictionaryAPI"
"dwyl/english-words" -> "dolph/dictionary"
"dwyl/english-words" -> "Textualize/textual" ["e"=1]
"dwyl/english-words" -> "Textualize/rich" ["e"=1]
"dwyl/english-words" -> "coding-horror/basic-computer-games" ["e"=1]
"dwyl/english-words" -> "adambom/dictionary"
"dwyl/english-words" -> "psf/black" ["e"=1]
"dwyl/english-words" -> "matthewreagan/WebstersEnglishDictionary"
"dwyl/english-words" -> "coqui-ai/TTS" ["e"=1]
"dwyl/english-words" -> "Rapptz/discord.py" ["e"=1]
"dwyl/english-words" -> "3b1b/manim" ["e"=1]
"dwyl/english-words" -> "tqdm/tqdm" ["e"=1]
"dwyl/english-words" -> "dylanaraps/neofetch" ["e"=1]
"elyase/awesome-gpt3" -> "shreyashankar/gpt3-sandbox"
"elyase/awesome-gpt3" -> "openai/gpt-3"
"elyase/awesome-gpt3" -> "EleutherAI/gpt-neo"
"elyase/awesome-gpt3" -> "humanloop/awesome-chatgpt" ["e"=1]
"elyase/awesome-gpt3" -> "jbesomi/texthero"
"elyase/awesome-gpt3" -> "minimaxir/gpt-3-experiments"
"elyase/awesome-gpt3" -> "karpathy/minGPT" ["e"=1]
"elyase/awesome-gpt3" -> "google-research/text-to-text-transfer-transformer"
"elyase/awesome-gpt3" -> "thunlp/PLMpapers" ["e"=1]
"elyase/awesome-gpt3" -> "visenger/awesome-mlops" ["e"=1]
"elyase/awesome-gpt3" -> "lucidrains/DALLE-pytorch" ["e"=1]
"elyase/awesome-gpt3" -> "PAIR-code/lit"
"elyase/awesome-gpt3" -> "allenai/allennlp"
"elyase/awesome-gpt3" -> "mrdbourke/machine-learning-roadmap" ["e"=1]
"elyase/awesome-gpt3" -> "facebookresearch/metaseq" ["e"=1]
"ddangelov/Top2Vec" -> "MaartenGr/BERTopic"
"ddangelov/Top2Vec" -> "MilaNLProc/contextualized-topic-models"
"ddangelov/Top2Vec" -> "MaartenGr/KeyBERT"
"ddangelov/Top2Vec" -> "MIND-Lab/OCTIS" ["e"=1]
"ddangelov/Top2Vec" -> "UKPLab/sentence-transformers"
"ddangelov/Top2Vec" -> "huggingface/setfit"
"ddangelov/Top2Vec" -> "PAIR-code/lit"
"ddangelov/Top2Vec" -> "JasonKessler/scattertext"
"ddangelov/Top2Vec" -> "ivan-bilan/The-NLP-Pandect"
"ddangelov/Top2Vec" -> "makcedward/nlpaug"
"ddangelov/Top2Vec" -> "jalammar/ecco"
"ddangelov/Top2Vec" -> "NorskRegnesentral/skweak"
"ddangelov/Top2Vec" -> "bmabey/pyLDAvis"
"ddangelov/Top2Vec" -> "flairNLP/flair"
"ddangelov/Top2Vec" -> "gregversteeg/corex_topic" ["e"=1]
"huggingface/datasets" -> "huggingface/tokenizers"
"huggingface/datasets" -> "Lightning-AI/pytorch-lightning" ["e"=1]
"huggingface/datasets" -> "huggingface/accelerate" ["e"=1]
"huggingface/datasets" -> "huggingface/transformers" ["e"=1]
"huggingface/datasets" -> "UKPLab/sentence-transformers"
"huggingface/datasets" -> "huggingface/peft" ["e"=1]
"huggingface/datasets" -> "huggingface/diffusers" ["e"=1]
"huggingface/datasets" -> "sebastianruder/NLP-progress"
"huggingface/datasets" -> "eugeneyan/applied-ml" ["e"=1]
"huggingface/datasets" -> "allenai/allennlp"
"huggingface/datasets" -> "explosion/spaCy"
"huggingface/datasets" -> "gradio-app/gradio" ["e"=1]
"huggingface/datasets" -> "deepspeedai/DeepSpeed" ["e"=1]
"huggingface/datasets" -> "jax-ml/jax" ["e"=1]
"huggingface/datasets" -> "facebookresearch/fairseq"
"MaartenGr/BERTopic" -> "ddangelov/Top2Vec"
"MaartenGr/BERTopic" -> "MaartenGr/KeyBERT"
"MaartenGr/BERTopic" -> "UKPLab/sentence-transformers"
"MaartenGr/BERTopic" -> "MilaNLProc/contextualized-topic-models"
"MaartenGr/BERTopic" -> "MIND-Lab/OCTIS" ["e"=1]
"MaartenGr/BERTopic" -> "flairNLP/flair"
"MaartenGr/BERTopic" -> "huggingface/setfit"
"MaartenGr/BERTopic" -> "makcedward/nlpaug"
"MaartenGr/BERTopic" -> "ThilinaRajapakse/simpletransformers"
"MaartenGr/BERTopic" -> "argilla-io/argilla"
"MaartenGr/BERTopic" -> "jessevig/bertviz"
"MaartenGr/BERTopic" -> "PAIR-code/lit"
"MaartenGr/BERTopic" -> "deepset-ai/haystack" ["e"=1]
"MaartenGr/BERTopic" -> "doccano/doccano" ["e"=1]
"MaartenGr/BERTopic" -> "piskvorky/gensim"
"commonsense/conceptnet5" -> "commonsense/conceptnet-numberbatch"
"commonsense/conceptnet5" -> "atcbosselut/comet-commonsense" ["e"=1]
"commonsense/conceptnet5" -> "allenai/allennlp"
"commonsense/conceptnet5" -> "thunlp/OpenKE" ["e"=1]
"commonsense/conceptnet5" -> "ryankiros/skip-thoughts" ["e"=1]
"commonsense/conceptnet5" -> "thunlp/KB2E" ["e"=1]
"commonsense/conceptnet5" -> "commonsense/conceptnet"
"commonsense/conceptnet5" -> "attardi/wikiextractor"
"commonsense/conceptnet5" -> "INK-USC/KagNet" ["e"=1]
"commonsense/conceptnet5" -> "facebookresearch/LAMA" ["e"=1]
"commonsense/conceptnet5" -> "facebookresearch/InferSent"
"commonsense/conceptnet5" -> "huggingface/neuralcoref"
"commonsense/conceptnet5" -> "thunlp/ERNIE" ["e"=1]
"commonsense/conceptnet5" -> "zihangdai/xlnet"
"commonsense/conceptnet5" -> "facebookresearch/SentEval"
"explosion/spaCy" -> "piskvorky/gensim"
"explosion/spaCy" -> "nltk/nltk"
"explosion/spaCy" -> "facebookresearch/fastText"
"explosion/spaCy" -> "allenai/allennlp"
"explosion/spaCy" -> "sebastianruder/NLP-progress"
"explosion/spaCy" -> "flairNLP/flair"
"explosion/spaCy" -> "keras-team/keras" ["e"=1]
"explosion/spaCy" -> "google-research/bert"
"explosion/spaCy" -> "scikit-learn/scikit-learn" ["e"=1]
"explosion/spaCy" -> "RasaHQ/rasa"
"explosion/spaCy" -> "keon/awesome-nlp"
"explosion/spaCy" -> "dmlc/xgboost" ["e"=1]
"explosion/spaCy" -> "huggingface/transformers" ["e"=1]
"explosion/spaCy" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"explosion/spaCy" -> "facebookresearch/faiss"
"openai/gpt-3" -> "openai/gpt-2"
"openai/gpt-3" -> "google-research/bert"
"openai/gpt-3" -> "karpathy/minGPT" ["e"=1]
"openai/gpt-3" -> "EleutherAI/gpt-neo"
"openai/gpt-3" -> "elyase/awesome-gpt3"
"openai/gpt-3" -> "openai/DALL-E" ["e"=1]
"openai/gpt-3" -> "deepspeedai/DeepSpeed" ["e"=1]
"openai/gpt-3" -> "huggingface/datasets"
"openai/gpt-3" -> "openai/gym" ["e"=1]
"openai/gpt-3" -> "google-research/text-to-text-transfer-transformer"
"openai/gpt-3" -> "google-research/google-research" ["e"=1]
"openai/gpt-3" -> "huggingface/transformers" ["e"=1]
"openai/gpt-3" -> "shreyashankar/gpt3-sandbox"
"openai/gpt-3" -> "meta-llama/llama" ["e"=1]
"openai/gpt-3" -> "tatsu-lab/stanford_alpaca" ["e"=1]
"google/trax" -> "tensorflow/tensor2tensor"
"google/trax" -> "google/flax" ["e"=1]
"google/trax" -> "jax-ml/jax" ["e"=1]
"google/trax" -> "google/sentencepiece"
"google/trax" -> "google-deepmind/dm-haiku" ["e"=1]
"google/trax" -> "zihangdai/xlnet"
"google/trax" -> "lucidrains/reformer-pytorch" ["e"=1]
"google/trax" -> "google-research/text-to-text-transfer-transformer"
"google/trax" -> "flairNLP/flair"
"google/trax" -> "allenai/allennlp"
"google/trax" -> "arogozhnikov/einops" ["e"=1]
"google/trax" -> "horovod/horovod" ["e"=1]
"google/trax" -> "google-research/google-research" ["e"=1]
"google/trax" -> "huggingface/tokenizers"
"google/trax" -> "sebastianruder/NLP-progress"
"datamade/usaddress" -> "datamade/probablepeople"
"datamade/usaddress" -> "GreenBuildingRegistry/usaddress-scourgify"
"datamade/usaddress" -> "datamade/parserator"
"datamade/usaddress" -> "openvenues/pypostal"
"datamade/usaddress" -> "dedupeio/dedupe"
"datamade/usaddress" -> "openvenues/libpostal" ["e"=1]
"datamade/usaddress" -> "datamade/census" ["e"=1]
"datamade/usaddress" -> "scaleway/postal-address"
"datamade/usaddress" -> "SwoopSearch/pyaddress"
"datamade/usaddress" -> "derek73/python-nameparser"
"datamade/usaddress" -> "jamesturk/jellyfish"
"datamade/usaddress" -> "datamade/data-making-guidelines"
"datamade/usaddress" -> "J535D165/recordlinkage"
"datamade/usaddress" -> "dedupeio/dedupe-examples"
"datamade/usaddress" -> "rhiever/datacleaner" ["e"=1]
"huggingface/awesome-papers" -> "dair-ai/nlp_paper_summaries"
"huggingface/awesome-papers" -> "huggingface/tokenizers"
"huggingface/awesome-papers" -> "tomohideshibata/BERT-related-papers" ["e"=1]
"huggingface/awesome-papers" -> "marcotcr/checklist"
"huggingface/awesome-papers" -> "huggingface/knockknock"
"huggingface/awesome-papers" -> "PAIR-code/lit"
"huggingface/awesome-papers" -> "facebookresearch/XLM"
"huggingface/awesome-papers" -> "microsoft/nlp-recipes"
"huggingface/awesome-papers" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"huggingface/awesome-papers" -> "neubig/lowresource-nlp-bootcamp-2020"
"huggingface/awesome-papers" -> "google-research/electra" ["e"=1]
"huggingface/awesome-papers" -> "thunlp/PLMpapers" ["e"=1]
"huggingface/awesome-papers" -> "QData/TextAttack"
"huggingface/awesome-papers" -> "allenai/longformer" ["e"=1]
"huggingface/awesome-papers" -> "utterworks/fast-bert"
"hyunwoongko/transformer" -> "jadore801120/attention-is-all-you-need-pytorch"
"hyunwoongko/transformer" -> "SamLynnEvans/Transformer"
"hyunwoongko/transformer" -> "harvardnlp/annotated-transformer"
"hyunwoongko/transformer" -> "Kyubyong/transformer"
"hyunwoongko/transformer" -> "lucidrains/vit-pytorch" ["e"=1]
"hyunwoongko/transformer" -> "codertimo/BERT-pytorch"
"hyunwoongko/transformer" -> "lucidrains/denoising-diffusion-pytorch" ["e"=1]
"hyunwoongko/transformer" -> "google-research/vision_transformer" ["e"=1]
"hyunwoongko/transformer" -> "microsoft/LoRA" ["e"=1]
"hyunwoongko/transformer" -> "bentrevett/pytorch-seq2seq"
"hyunwoongko/transformer" -> "microsoft/Swin-Transformer" ["e"=1]
"hyunwoongko/transformer" -> "hojonathanho/diffusion" ["e"=1]
"hyunwoongko/transformer" -> "AntixK/PyTorch-VAE" ["e"=1]
"hyunwoongko/transformer" -> "BradyFU/Awesome-Multimodal-Large-Language-Models" ["e"=1]
"hyunwoongko/transformer" -> "facebookresearch/DiT" ["e"=1]
"graykode/nlp-roadmap" -> "graykode/nlp-tutorial"
"graykode/nlp-roadmap" -> "thunlp/PLMpapers" ["e"=1]
"graykode/nlp-roadmap" -> "microsoft/nlp-recipes"
"graykode/nlp-roadmap" -> "graykode/distribution-is-all-you-need" ["e"=1]
"graykode/nlp-roadmap" -> "yandexdataschool/nlp_course"
"graykode/nlp-roadmap" -> "sebastianruder/NLP-progress"
"graykode/nlp-roadmap" -> "mhagiwara/100-nlp-papers"
"graykode/nlp-roadmap" -> "FudanNLP/nlp-beginner" ["e"=1]
"graykode/nlp-roadmap" -> "keon/awesome-nlp"
"graykode/nlp-roadmap" -> "instillai/deep-learning-roadmap" ["e"=1]
"graykode/nlp-roadmap" -> "ChineseGLUE/ChineseGLUE" ["e"=1]
"graykode/nlp-roadmap" -> "songyingxin/NLPer-Interview" ["e"=1]
"graykode/nlp-roadmap" -> "zihangdai/xlnet"
"graykode/nlp-roadmap" -> "crownpku/Awesome-Chinese-NLP" ["e"=1]
"graykode/nlp-roadmap" -> "zhpmatrix/nlp-competitions-list-review" ["e"=1]
"jeffreybreen/twitter-sentiment-analysis-tutorial-201107" -> "mjhea0/twitter-sentiment-analysis"
"jeffreybreen/twitter-sentiment-analysis-tutorial-201107" -> "abromberg/sentiment_analysis_python"
"jeffreybreen/twitter-sentiment-analysis-tutorial-201107" -> "abromberg/sentiment_analysis"
"jeffreybreen/twitter-sentiment-analysis-tutorial-201107" -> "vivekn/sentiment"
"jeffreybreen/twitter-sentiment-analysis-tutorial-201107" -> "ravikiranj/twitter-sentiment-analyzer"
"JohnSnowLabs/nlu" -> "explosion/spacy-streamlit" ["e"=1]
"JohnSnowLabs/nlu" -> "JohnSnowLabs/spark-nlp-workshop"
"JohnSnowLabs/nlu" -> "JohnSnowLabs/spark-nlp-models"
"JohnSnowLabs/nlu" -> "JohnSnowLabs/spark-nlp" ["e"=1]
"JohnSnowLabs/nlu" -> "NorskRegnesentral/skweak"
"JohnSnowLabs/nlu" -> "MaartenGr/PolyFuzz"
"JohnSnowLabs/nlu" -> "allenai/pawls"
"JohnSnowLabs/nlu" -> "tvst/st-annotated-text" ["e"=1]
"JohnSnowLabs/nlu" -> "okld/streamlit-elements" ["e"=1]
"JohnSnowLabs/nlu" -> "JohnSnowLabs/johnsnowlabs"
"JohnSnowLabs/nlu" -> "PrithivirajDamodaran/Gramformer" ["e"=1]
"JohnSnowLabs/nlu" -> "ddangelov/Top2Vec"
"JohnSnowLabs/nlu" -> "MIND-Lab/OCTIS" ["e"=1]
"JohnSnowLabs/nlu" -> "davidberenstein1957/concise-concepts"
"JohnSnowLabs/nlu" -> "JohnSnowLabs/visual-nlp-workshop"
"cjhutto/vaderSentiment" -> "sloria/TextBlob"
"cjhutto/vaderSentiment" -> "flairNLP/flair"
"cjhutto/vaderSentiment" -> "clips/pattern"
"cjhutto/vaderSentiment" -> "piskvorky/gensim"
"cjhutto/vaderSentiment" -> "nltk/nltk"
"cjhutto/vaderSentiment" -> "MaartenGr/BERTopic"
"cjhutto/vaderSentiment" -> "bentrevett/pytorch-sentiment-analysis"
"cjhutto/vaderSentiment" -> "explosion/spaCy"
"cjhutto/vaderSentiment" -> "facebookresearch/fastText"
"cjhutto/vaderSentiment" -> "xiamx/awesome-sentiment-analysis"
"cjhutto/vaderSentiment" -> "abdulfatir/twitter-sentiment-analysis"
"cjhutto/vaderSentiment" -> "allenai/allennlp"
"cjhutto/vaderSentiment" -> "bmabey/pyLDAvis"
"cjhutto/vaderSentiment" -> "marcotcr/lime" ["e"=1]
"cjhutto/vaderSentiment" -> "niderhoff/nlp-datasets"
"nltk/nltk" -> "explosion/spaCy"
"nltk/nltk" -> "piskvorky/gensim"
"nltk/nltk" -> "stanfordnlp/CoreNLP"
"nltk/nltk" -> "sloria/TextBlob"
"nltk/nltk" -> "facebookresearch/fastText"
"nltk/nltk" -> "allenai/allennlp"
"nltk/nltk" -> "scikit-learn/scikit-learn" ["e"=1]
"nltk/nltk" -> "stanfordnlp/GloVe"
"nltk/nltk" -> "keon/awesome-nlp"
"nltk/nltk" -> "clips/pattern"
"nltk/nltk" -> "sebastianruder/NLP-progress"
"nltk/nltk" -> "stanfordnlp/stanza"
"nltk/nltk" -> "numpy/numpy" ["e"=1]
"nltk/nltk" -> "google-research/bert"
"nltk/nltk" -> "flairNLP/flair"
"google-research/text-to-text-transfer-transformer" -> "zihangdai/xlnet"
"google-research/text-to-text-transfer-transformer" -> "google-research/t5x" ["e"=1]
"google-research/text-to-text-transfer-transformer" -> "google/sentencepiece"
"google-research/text-to-text-transfer-transformer" -> "kimiyoung/transformer-xl"
"google-research/text-to-text-transfer-transformer" -> "google-research/albert" ["e"=1]
"google-research/text-to-text-transfer-transformer" -> "PaddlePaddle/ERNIE" ["e"=1]
"google-research/text-to-text-transfer-transformer" -> "facebookresearch/XLM"
"google-research/text-to-text-transfer-transformer" -> "allenai/allennlp"
"google-research/text-to-text-transfer-transformer" -> "google-research/electra" ["e"=1]
"google-research/text-to-text-transfer-transformer" -> "google-research/multilingual-t5" ["e"=1]
"google-research/text-to-text-transfer-transformer" -> "brightmart/albert_zh" ["e"=1]
"google-research/text-to-text-transfer-transformer" -> "UKPLab/sentence-transformers"
"google-research/text-to-text-transfer-transformer" -> "jina-ai/clip-as-service"
"google-research/text-to-text-transfer-transformer" -> "NVIDIA/Megatron-LM" ["e"=1]
"google-research/text-to-text-transfer-transformer" -> "princeton-nlp/SimCSE" ["e"=1]
"EleutherAI/gpt-neo" -> "EleutherAI/gpt-neox" ["e"=1]
"EleutherAI/gpt-neo" -> "kingoflolz/mesh-transformer-jax" ["e"=1]
"EleutherAI/gpt-neo" -> "facebookresearch/metaseq" ["e"=1]
"EleutherAI/gpt-neo" -> "lucidrains/DALLE-pytorch" ["e"=1]
"EleutherAI/gpt-neo" -> "openai/gpt-3"
"EleutherAI/gpt-neo" -> "openai/gpt-2"
"EleutherAI/gpt-neo" -> "google-research/text-to-text-transfer-transformer"
"EleutherAI/gpt-neo" -> "karpathy/minGPT" ["e"=1]
"EleutherAI/gpt-neo" -> "elyase/awesome-gpt3"
"EleutherAI/gpt-neo" -> "UKPLab/sentence-transformers"
"EleutherAI/gpt-neo" -> "CarperAI/trlx" ["e"=1]
"EleutherAI/gpt-neo" -> "facebookresearch/ParlAI"
"EleutherAI/gpt-neo" -> "minimaxir/gpt-2-simple"
"EleutherAI/gpt-neo" -> "lucidrains/deep-daze" ["e"=1]
"EleutherAI/gpt-neo" -> "NVIDIA/Megatron-LM" ["e"=1]
"axa-group/Parsr" -> "argilla-io/argilla"
"axa-group/Parsr" -> "Layout-Parser/layout-parser" ["e"=1]
"axa-group/Parsr" -> "MaartenGr/BERTopic"
"axa-group/Parsr" -> "ddangelov/Top2Vec"
"axa-group/Parsr" -> "deepset-ai/haystack" ["e"=1]
"axa-group/Parsr" -> "deepchecks/deepchecks" ["e"=1]
"axa-group/Parsr" -> "neuml/txtai" ["e"=1]
"axa-group/Parsr" -> "flairNLP/flair"
"axa-group/Parsr" -> "jbesomi/texthero"
"axa-group/Parsr" -> "mindee/doctr" ["e"=1]
"axa-group/Parsr" -> "online-ml/river" ["e"=1]
"axa-group/Parsr" -> "huggingface/setfit"
"axa-group/Parsr" -> "pdfminer/pdfminer.six" ["e"=1]
"axa-group/Parsr" -> "kermitt2/grobid" ["e"=1]
"axa-group/Parsr" -> "Unstructured-IO/unstructured" ["e"=1]
"dair-ai/ml-nlp-paper-discussions" -> "dair-ai/nlp_newsletter"
"dair-ai/ml-nlp-paper-discussions" -> "dair-ai/nlp_fundamentals"
"dair-ai/ml-nlp-paper-discussions" -> "dair-ai/keep-learning-ml"
"neubig/nlptutorial" -> "neubig/nn4nlp-code"
"neubig/nlptutorial" -> "neubig/nmt-tips" ["e"=1]
"neubig/nlptutorial" -> "neubig/kytea" ["e"=1]
"neubig/nlptutorial" -> "clab/dynet_tutorial_examples"
"neubig/nlptutorial" -> "ymym3412/acl-papers" ["e"=1]
"aboSamoor/polyglot" -> "chartbeat-labs/textacy"
"aboSamoor/polyglot" -> "saffsd/langid.py" ["e"=1]
"aboSamoor/polyglot" -> "Mimino666/langdetect" ["e"=1]
"aboSamoor/polyglot" -> "facebookresearch/MUSE"
"aboSamoor/polyglot" -> "explosion/sense2vec"
"aboSamoor/polyglot" -> "facebookresearch/LASER"
"aboSamoor/polyglot" -> "babylonhealth/fastText_multilingual"
"aboSamoor/polyglot" -> "sloria/TextBlob"
"aboSamoor/polyglot" -> "cemoody/lda2vec"
"aboSamoor/polyglot" -> "huggingface/neuralcoref"
"aboSamoor/polyglot" -> "allenai/allennlp"
"aboSamoor/polyglot" -> "facebookresearch/XLM"
"aboSamoor/polyglot" -> "stanfordnlp/stanza"
"aboSamoor/polyglot" -> "Kyubyong/wordvectors"
"aboSamoor/polyglot" -> "flairNLP/flair"
"PAIR-code/lit" -> "jalammar/ecco"
"PAIR-code/lit" -> "marcotcr/checklist"
"PAIR-code/lit" -> "makcedward/nlpaug"
"PAIR-code/lit" -> "QData/TextAttack"
"PAIR-code/lit" -> "jessevig/bertviz"
"PAIR-code/lit" -> "ivan-bilan/The-NLP-Pandect"
"PAIR-code/lit" -> "huggingface/awesome-papers"
"PAIR-code/lit" -> "ddangelov/Top2Vec"
"PAIR-code/lit" -> "MaartenGr/BERTopic"
"PAIR-code/lit" -> "pytorch/captum" ["e"=1]
"PAIR-code/lit" -> "nyu-mll/jiant"
"PAIR-code/lit" -> "flairNLP/flair"
"PAIR-code/lit" -> "ThilinaRajapakse/simpletransformers"
"PAIR-code/lit" -> "allenai/allennlp"
"PAIR-code/lit" -> "linkedin/detext"
"jkwieser/personality-prediction-from-text" -> "jcl132/personality-prediction-from-text"
"jkwieser/personality-prediction-from-text" -> "yashsmehta/personality-prediction"
"jkwieser/personality-prediction-from-text" -> "SenticNet/personality-detection"
"jkwieser/personality-prediction-from-text" -> "automoto/big-five-data"
"seatgeek/fuzzywuzzy" -> "seatgeek/thefuzz"
"seatgeek/fuzzywuzzy" -> "dedupeio/dedupe"
"seatgeek/fuzzywuzzy" -> "explosion/spaCy"
"seatgeek/fuzzywuzzy" -> "rapidfuzz/RapidFuzz"
"seatgeek/fuzzywuzzy" -> "piskvorky/gensim"
"seatgeek/fuzzywuzzy" -> "arrow-py/arrow" ["e"=1]
"seatgeek/fuzzywuzzy" -> "ydataai/ydata-profiling" ["e"=1]
"seatgeek/fuzzywuzzy" -> "jamesturk/jellyfish"
"seatgeek/fuzzywuzzy" -> "flairNLP/flair"
"seatgeek/fuzzywuzzy" -> "ztane/python-Levenshtein"
"seatgeek/fuzzywuzzy" -> "modin-project/modin" ["e"=1]
"seatgeek/fuzzywuzzy" -> "spotify/luigi" ["e"=1]
"seatgeek/fuzzywuzzy" -> "sloria/TextBlob"
"seatgeek/fuzzywuzzy" -> "facebookresearch/fastText"
"seatgeek/fuzzywuzzy" -> "joke2k/faker" ["e"=1]
"rapidfuzz/RapidFuzz" -> "seatgeek/thefuzz"
"rapidfuzz/RapidFuzz" -> "MaartenGr/PolyFuzz"
"rapidfuzz/RapidFuzz" -> "seatgeek/fuzzywuzzy"
"rapidfuzz/RapidFuzz" -> "jamesturk/jellyfish"
"rapidfuzz/RapidFuzz" -> "life4/textdistance"
"rapidfuzz/RapidFuzz" -> "moj-analytical-services/splink" ["e"=1]
"rapidfuzz/RapidFuzz" -> "dedupeio/dedupe"
"rapidfuzz/RapidFuzz" -> "J535D165/recordlinkage"
"rapidfuzz/RapidFuzz" -> "more-itertools/more-itertools" ["e"=1]
"rapidfuzz/RapidFuzz" -> "rapidfuzz/rapidfuzz-cpp"
"rapidfuzz/RapidFuzz" -> "unionai-oss/pandera" ["e"=1]
"rapidfuzz/RapidFuzz" -> "ddangelov/Top2Vec"
"rapidfuzz/RapidFuzz" -> "huggingface/setfit"
"rapidfuzz/RapidFuzz" -> "nalepae/pandarallel" ["e"=1]
"rapidfuzz/RapidFuzz" -> "skrub-data/skrub" ["e"=1]
"huggingface/tokenizers" -> "google/sentencepiece"
"huggingface/tokenizers" -> "huggingface/datasets"
"huggingface/tokenizers" -> "huggingface/accelerate" ["e"=1]
"huggingface/tokenizers" -> "allenai/allennlp"
"huggingface/tokenizers" -> "UKPLab/sentence-transformers"
"huggingface/tokenizers" -> "huggingface/awesome-papers"
"huggingface/tokenizers" -> "flairNLP/flair"
"huggingface/tokenizers" -> "google-research/text-to-text-transfer-transformer"
"huggingface/tokenizers" -> "zihangdai/xlnet"
"huggingface/tokenizers" -> "guillaume-be/rust-bert" ["e"=1]
"huggingface/tokenizers" -> "sebastianruder/NLP-progress"
"huggingface/tokenizers" -> "huggingface/knockknock"
"huggingface/tokenizers" -> "jina-ai/clip-as-service"
"huggingface/tokenizers" -> "huggingface/candle" ["e"=1]
"huggingface/tokenizers" -> "stanfordnlp/stanza"
"SupeRuier/awesome-active-learning" -> "baifanxxx/awesome-active-learning"
"SupeRuier/awesome-active-learning" -> "ej0cl6/deep-active-learning"
"SupeRuier/awesome-active-learning" -> "rmunro/pytorch_active_learning"
"SupeRuier/awesome-active-learning" -> "SineZHAN/deepALplus"
"SupeRuier/awesome-active-learning" -> "google/active-learning"
"SupeRuier/awesome-active-learning" -> "modAL-python/modAL"
"SupeRuier/awesome-active-learning" -> "NUAA-AL/ALiPy"
"SupeRuier/awesome-active-learning" -> "yongjin-shin/awesome-active-learning"
"SupeRuier/awesome-active-learning" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"SupeRuier/awesome-active-learning" -> "JordanAsh/badge"
"SupeRuier/awesome-active-learning" -> "microsoft/Semi-supervised-learning" ["e"=1]
"SupeRuier/awesome-active-learning" -> "ozansener/active_learning_coreset"
"SupeRuier/awesome-active-learning" -> "yuantn/MI-AOD"
"SupeRuier/awesome-active-learning" -> "AminParvaneh/alpha_mix_active_learning"
"SupeRuier/awesome-active-learning" -> "yassouali/awesome-semi-supervised-learning" ["e"=1]
"lukasgarbas/nlp-text-emotion" -> "sarnthil/unify-emotion-datasets"
"lukasgarbas/nlp-text-emotion" -> "tlkh/text-emotion-classification"
"lukasgarbas/nlp-text-emotion" -> "kanchitank/Text-Emotion-Analysis"
"Chulong-Li/Real-time-Sentiment-Tracking-on-Twitter-for-Brand-Improvement-and-Trend-Recognition" -> "agrawal-rohit/tweet-sense"
"Chulong-Li/Real-time-Sentiment-Tracking-on-Twitter-for-Brand-Improvement-and-Trend-Recognition" -> "geekquad/Fraud-Detection"
"Chulong-Li/Real-time-Sentiment-Tracking-on-Twitter-for-Brand-Improvement-and-Trend-Recognition" -> "the-javapocalypse/Twitter-Sentiment-Analysis"
"Chulong-Li/Real-time-Sentiment-Tracking-on-Twitter-for-Brand-Improvement-and-Trend-Recognition" -> "SouravG/Housing-price-prediction-using-Regularised-linear-regression"
"Chulong-Li/Real-time-Sentiment-Tracking-on-Twitter-for-Brand-Improvement-and-Trend-Recognition" -> "MelihGulum/Comprehensive-Data-Science-AI-Project-Portfolio"
"HiteshAgarwal1/Personality-Prediction-Through-CV" -> "philkam/AI_Personality-Prediction-System-Through-CV-Analysis"
"HiteshAgarwal1/Personality-Prediction-Through-CV" -> "Bharath-K3/Next-Word-Prediction-with-NLP-and-Deep-Learning"
"nidhaloff/deep-translator" -> "UlionTse/translators" ["e"=1]
"nidhaloff/deep-translator" -> "ssut/py-googletrans"
"nidhaloff/deep-translator" -> "argosopentech/argos-translate"
"nidhaloff/deep-translator" -> "Animenosekai/translate"
"nidhaloff/deep-translator" -> "terryyin/translate-python"
"nidhaloff/deep-translator" -> "DeepLcom/deepl-python"
"nidhaloff/deep-translator" -> "xhluca/dl-translate" ["e"=1]
"nidhaloff/deep-translator" -> "nidhaloff/Translator-pp"
"nidhaloff/deep-translator" -> "UKPLab/EasyNMT"
"nidhaloff/deep-translator" -> "LibreTranslate/LibreTranslate" ["e"=1]
"nidhaloff/deep-translator" -> "ShadowMusk/QingLong-framework" ["e"=1]
"nidhaloff/deep-translator" -> "zhensherlock/watermark-js-plus" ["e"=1]
"nidhaloff/deep-translator" -> "LujiaJin/Basis-Prediction-Networks-PyTorch" ["e"=1]
"nidhaloff/deep-translator" -> "ordylan/OrdylanNote" ["e"=1]
"nidhaloff/deep-translator" -> "zhensherlock/intellij-platform-git-stats-plugin" ["e"=1]
"baal-org/baal" -> "rmunro/pytorch_active_learning"
"baal-org/baal" -> "ej0cl6/deep-active-learning"
"baal-org/baal" -> "modAL-python/modAL"
"baal-org/baal" -> "BlackHC/BatchBALD"
"baal-org/baal" -> "NUAA-AL/ALiPy"
"baal-org/baal" -> "baifanxxx/awesome-active-learning"
"baal-org/baal" -> "dsgissin/DiscriminativeActiveLearning"
"baal-org/baal" -> "ServiceNow/azimuth"
"baal-org/baal" -> "webis-de/small-text"
"baal-org/baal" -> "google/active-learning"
"baal-org/baal" -> "SineZHAN/deepALplus"
"baal-org/baal" -> "BlackHC/batchbald_redux"
"baal-org/baal" -> "yongjin-shin/awesome-active-learning"
"baal-org/baal" -> "ntucllab/libact"
"baal-org/baal" -> "JordanAsh/badge"
"practical-nlp/practical-nlp-code" -> "nlp-with-transformers/notebooks" ["e"=1]
"practical-nlp/practical-nlp-code" -> "ivan-bilan/The-NLP-Pandect"
"practical-nlp/practical-nlp-code" -> "dair-ai/nlp_paper_summaries"
"practical-nlp/practical-nlp-code" -> "PacktPublishing/Transformers-for-Natural-Language-Processing" ["e"=1]
"practical-nlp/practical-nlp-code" -> "blueprints-for-text-analytics-python/blueprints-text"
"practical-nlp/practical-nlp-code" -> "fastai/course-nlp"
"practical-nlp/practical-nlp-code" -> "totalgood/nlpia" ["e"=1]
"practical-nlp/practical-nlp-code" -> "ElizaLo/NLP-Natural-Language-Processing"
"practical-nlp/practical-nlp-code" -> "delip/PyTorchNLPBook"
"practical-nlp/practical-nlp-code" -> "GoogleCloudPlatform/practical-ml-vision-book" ["e"=1]
"practical-nlp/practical-nlp-code" -> "NiuTrans/ABigSurvey"
"practical-nlp/practical-nlp-code" -> "NirantK/NLP_Quickbook"
"practical-nlp/practical-nlp-code" -> "GoogleCloudPlatform/ml-design-patterns" ["e"=1]
"practical-nlp/practical-nlp-code" -> "dair-ai/d2l-study-group"
"practical-nlp/practical-nlp-code" -> "susanli2016/NLP-with-Python"
"marcotcr/checklist" -> "QData/TextAttack"
"marcotcr/checklist" -> "PAIR-code/lit"
"marcotcr/checklist" -> "makcedward/nlpaug"
"marcotcr/checklist" -> "timoschick/pet" ["e"=1]
"marcotcr/checklist" -> "huggingface/awesome-papers"
"marcotcr/checklist" -> "facebookresearch/SentEval"
"marcotcr/checklist" -> "nyu-mll/jiant"
"marcotcr/checklist" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"marcotcr/checklist" -> "GEM-benchmark/NL-Augmenter"
"marcotcr/checklist" -> "namisan/mt-dnn" ["e"=1]
"marcotcr/checklist" -> "jalammar/ecco"
"marcotcr/checklist" -> "thunlp/TAADpapers"
"marcotcr/checklist" -> "allenai/longformer" ["e"=1]
"marcotcr/checklist" -> "facebookresearch/XLM"
"marcotcr/checklist" -> "google-research/language" ["e"=1]
"NiuTrans/MTBook" -> "NiuTrans/NiuTensor"
"NiuTrans/MTBook" -> "NiuTrans/MT-paper-lists"
"NiuTrans/MTBook" -> "THUNLP-MT/MT-Reading-List" ["e"=1]
"NiuTrans/MTBook" -> "NiuTrans/ABigSurvey"
"NiuTrans/MTBook" -> "NiuTrans/NiuTrans.SMT"
"NiuTrans/MTBook" -> "NiuTrans/CNSurvey"
"NiuTrans/MTBook" -> "rsennrich/subword-nmt" ["e"=1]
"NiuTrans/MTBook" -> "OpenNMT/OpenNMT-py"
"NiuTrans/MTBook" -> "MLNLP-World/Top-AI-Conferences-Paper-with-Code" ["e"=1]
"NiuTrans/MTBook" -> "clab/fast_align" ["e"=1]
"NiuTrans/MTBook" -> "km1994/nlp_paper_study" ["e"=1]
"NiuTrans/MTBook" -> "songyingxin/NLPer-Interview" ["e"=1]
"NiuTrans/MTBook" -> "THUNLP-MT/THUMT" ["e"=1]
"NiuTrans/MTBook" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/MTBook" -> "CLUEbenchmark/CLUEDatasetSearch" ["e"=1]
"dair-ai/nlp_newsletter" -> "dair-ai/ml-nlp-paper-discussions"
"dair-ai/nlp_newsletter" -> "dair-ai/nlp_fundamentals"
"dair-ai/nlp_newsletter" -> "dair-ai/nlp_paper_summaries"
"dair-ai/nlp_newsletter" -> "dair-ai/d2l-study-group"
"dair-ai/nlp_newsletter" -> "dair-ai/keep-learning-ml"
"neubig/lowresource-nlp-bootcamp-2020" -> "harvardnlp/pytorch-struct" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "roomylee/nlp-papers-with-arxiv" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "huggingface/awesome-papers"
"neubig/lowresource-nlp-bootcamp-2020" -> "marcotcr/checklist"
"neubig/lowresource-nlp-bootcamp-2020" -> "joeynmt/joeynmt" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "neulab/compare-mt" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "ivan-bilan/The-NLP-Pandect"
"neubig/lowresource-nlp-bootcamp-2020" -> "neubig/nn4nlp-code"
"neubig/lowresource-nlp-bootcamp-2020" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "facebookresearch/flores" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "facebookresearch/KILT" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "neulab/langrank"
"neubig/lowresource-nlp-bootcamp-2020" -> "clab/fast_align" ["e"=1]
"neubig/lowresource-nlp-bootcamp-2020" -> "dair-ai/nlp_paper_summaries"
"ThilinaRajapakse/simpletransformers" -> "UKPLab/sentence-transformers"
"ThilinaRajapakse/simpletransformers" -> "utterworks/fast-bert"
"ThilinaRajapakse/simpletransformers" -> "makcedward/nlpaug"
"ThilinaRajapakse/simpletransformers" -> "flairNLP/flair"
"ThilinaRajapakse/simpletransformers" -> "MaartenGr/BERTopic"
"ThilinaRajapakse/simpletransformers" -> "huggingface/tokenizers"
"ThilinaRajapakse/simpletransformers" -> "jessevig/bertviz"
"ThilinaRajapakse/simpletransformers" -> "deepset-ai/FARM"
"ThilinaRajapakse/simpletransformers" -> "allenai/allennlp"
"ThilinaRajapakse/simpletransformers" -> "google-research/text-to-text-transfer-transformer"
"ThilinaRajapakse/simpletransformers" -> "amaiya/ktrain"
"ThilinaRajapakse/simpletransformers" -> "QData/TextAttack"
"ThilinaRajapakse/simpletransformers" -> "PAIR-code/lit"
"ThilinaRajapakse/simpletransformers" -> "jina-ai/clip-as-service"
"ThilinaRajapakse/simpletransformers" -> "google-research/electra" ["e"=1]
"uber-research/PPLM" -> "salesforce/ctrl"
"uber-research/PPLM" -> "salesforce/GeDi"
"uber-research/PPLM" -> "THUNLP-MT/TG-Reading-List" ["e"=1]
"uber-research/PPLM" -> "fuzhenxin/Style-Transfer-in-Text" ["e"=1]
"uber-research/PPLM" -> "XiangLi1999/Diffusion-LM" ["e"=1]
"uber-research/PPLM" -> "Maluuba/nlg-eval" ["e"=1]
"uber-research/PPLM" -> "yangkevin2/naacl-2021-fudge-controlled-generation"
"uber-research/PPLM" -> "rikdz/GraphWriter" ["e"=1]
"uber-research/PPLM" -> "yxuansu/SimCTG"
"uber-research/PPLM" -> "ChunyuanLI/Optimus" ["e"=1]
"uber-research/PPLM" -> "XiangLi1999/PrefixTuning" ["e"=1]
"uber-research/PPLM" -> "Tiiiger/bert_score" ["e"=1]
"uber-research/PPLM" -> "huggingface/transfer-learning-conv-ai" ["e"=1]
"uber-research/PPLM" -> "facebookresearch/unlikelihood_training"
"uber-research/PPLM" -> "huggingface/awesome-papers"
"argosopentech/argos-translate" -> "LibreTranslate/LibreTranslate" ["e"=1]
"argosopentech/argos-translate" -> "dialect-app/dialect" ["e"=1]
"argosopentech/argos-translate" -> "Helsinki-NLP/Opus-MT" ["e"=1]
"argosopentech/argos-translate" -> "thedaviddelta/lingva-translate" ["e"=1]
"argosopentech/argos-translate" -> "argosopentech/argos-train" ["e"=1]
"argosopentech/argos-translate" -> "nidhaloff/deep-translator"
"argosopentech/argos-translate" -> "OpenNMT/OpenNMT-py"
"argosopentech/argos-translate" -> "OpenNMT/CTranslate2" ["e"=1]
"argosopentech/argos-translate" -> "UlionTse/translators" ["e"=1]
"argosopentech/argos-translate" -> "chinesehuazhou/python-weekly" ["e"=1]
"argosopentech/argos-translate" -> "Danily07/Translumo" ["e"=1]
"argosopentech/argos-translate" -> "ssut/py-googletrans"
"argosopentech/argos-translate" -> "niedev/RTranslator" ["e"=1]
"argosopentech/argos-translate" -> "SYSTRAN/faster-whisper" ["e"=1]
"argosopentech/argos-translate" -> "alphacep/vosk-api" ["e"=1]
"dair-ai/pytorch_notebooks" -> "dair-ai/nlp_fundamentals"
"dair-ai/pytorch_notebooks" -> "dair-ai/nlp_paper_summaries"
"dair-ai/pytorch_notebooks" -> "omarsar/pytorch_notebooks"
"dair-ai/pytorch_notebooks" -> "dair-ai/d2l-study-group"
"dair-ai/pytorch_notebooks" -> "dair-ai/nlp_newsletter"
"dair-ai/pytorch_notebooks" -> "dair-ai/nlp_overview"
"dair-ai/pytorch_notebooks" -> "dair-ai/ml-nlp-paper-discussions"
"dair-ai/pytorch_notebooks" -> "dair-ai/notebooks"
"dair-ai/pytorch_notebooks" -> "dair-ai/awesome-ML-projects-guide"
"dair-ai/pytorch_notebooks" -> "dair-ai/data_science_writing_primer"
"dair-ai/pytorch_notebooks" -> "vahidk/EffectivePyTorch" ["e"=1]
"dair-ai/pytorch_notebooks" -> "omarsar/nlp_overview"
"dair-ai/pytorch_notebooks" -> "rasbt/stat453-deep-learning-ss20" ["e"=1]
"dair-ai/pytorch_notebooks" -> "dair-ai/awesome-research-proposals-guide"
"dair-ai/pytorch_notebooks" -> "dair-ai/keep-learning-ml"
"sudhof/politeness" -> "myeomans/politeness" ["e"=1]
"sudhof/politeness" -> "tag-and-generate/politeness-dataset"
"sudhof/politeness" -> "CornellNLP/ConvoKit"
"sudhof/politeness" -> "tslmy/politeness-estimator"
"cdpierse/transformers-interpret" -> "jalammar/ecco"
"cdpierse/transformers-interpret" -> "huggingface/setfit"
"cdpierse/transformers-interpret" -> "pytorch/captum" ["e"=1]
"cdpierse/transformers-interpret" -> "NorskRegnesentral/skweak"
"cdpierse/transformers-interpret" -> "GEM-benchmark/NL-Augmenter"
"cdpierse/transformers-interpret" -> "PAIR-code/lit"
"cdpierse/transformers-interpret" -> "hila-chefer/Transformer-Explainability" ["e"=1]
"cdpierse/transformers-interpret" -> "makcedward/nlpaug"
"cdpierse/transformers-interpret" -> "jessevig/bertviz"
"cdpierse/transformers-interpret" -> "MilaNLProc/contextualized-topic-models"
"cdpierse/transformers-interpret" -> "CalculatedContent/WeightWatcher"
"cdpierse/transformers-interpret" -> "g8a9/ferret" ["e"=1]
"cdpierse/transformers-interpret" -> "ddangelov/Top2Vec"
"cdpierse/transformers-interpret" -> "webis-de/small-text"
"cdpierse/transformers-interpret" -> "georgian-io/Multimodal-Toolkit" ["e"=1]
"NiuTrans/ABigSurvey" -> "NiuTrans/CNSurvey"
"NiuTrans/ABigSurvey" -> "eugeneyan/ml-surveys" ["e"=1]
"NiuTrans/ABigSurvey" -> "mhagiwara/100-nlp-papers"
"NiuTrans/ABigSurvey" -> "THUNLP-MT/MT-Reading-List" ["e"=1]
"NiuTrans/ABigSurvey" -> "dair-ai/nlp_paper_summaries"
"NiuTrans/ABigSurvey" -> "NiuTrans/MTBook"
"NiuTrans/ABigSurvey" -> "thunlp/PLMpapers" ["e"=1]
"NiuTrans/ABigSurvey" -> "ivan-bilan/The-NLP-Pandect"
"NiuTrans/ABigSurvey" -> "thunlp/PromptPapers" ["e"=1]
"NiuTrans/ABigSurvey" -> "xcfcode/Summarization-Papers" ["e"=1]
"NiuTrans/ABigSurvey" -> "MLNLP-World/Top-AI-Conferences-Paper-with-Code" ["e"=1]
"NiuTrans/ABigSurvey" -> "NiuTrans/NiuTensor"
"NiuTrans/ABigSurvey" -> "tomohideshibata/BERT-related-papers" ["e"=1]
"NiuTrans/ABigSurvey" -> "km1994/nlp_paper_study" ["e"=1]
"NiuTrans/ABigSurvey" -> "styfeng/DataAug4NLP"
"dair-ai/d2l-study-group" -> "dair-ai/keep-learning-ml"
"dair-ai/d2l-study-group" -> "dair-ai/nlp_fundamentals"
"dair-ai/d2l-study-group" -> "dair-ai/nlp_paper_summaries"
"dair-ai/d2l-study-group" -> "dair-ai/ml-nlp-paper-discussions"
"dair-ai/d2l-study-group" -> "dair-ai/nlp_newsletter"
"dair-ai/d2l-study-group" -> "dair-ai/pytorch_notebooks"
"dair-ai/d2l-study-group" -> "dair-ai/notebooks"
"dair-ai/d2l-study-group" -> "dair-ai/awesome-ML-projects-guide"
"dair-ai/d2l-study-group" -> "omarsar/nlp_overview"
"dair-ai/d2l-study-group" -> "dair-ai/awesome-research-proposals-guide"
"dair-ai/d2l-study-group" -> "dair-ai/GNNs-Recipe" ["e"=1]
"maciejkula/glove-python" -> "hans/glove.py"
"maciejkula/glove-python" -> "stanfordnlp/GloVe"
"maciejkula/glove-python" -> "GradySimon/tensorflow-glove"
"maciejkula/glove-python" -> "ryankiros/skip-thoughts" ["e"=1]
"maciejkula/glove-python" -> "danielfrg/word2vec"
"maciejkula/glove-python" -> "allenai/bilm-tf"
"maciejkula/glove-python" -> "HIT-SCIR/ELMoForManyLangs"
"maciejkula/glove-python" -> "IndicoDataSolutions/Passage" ["e"=1]
"maciejkula/glove-python" -> "harvardnlp/seq2seq-attn" ["e"=1]
"maciejkula/glove-python" -> "yoonkim/CNN_sentence" ["e"=1]
"maciejkula/glove-python" -> "zhezhaoa/ngram2vec" ["e"=1]
"maciejkula/glove-python" -> "idio/wiki2vec" ["e"=1]
"maciejkula/glove-python" -> "JonathanRaiman/glove"
"maciejkula/glove-python" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" ["e"=1]
"maciejkula/glove-python" -> "stanfordnlp/treelstm" ["e"=1]
"rapidfuzz/rapidfuzz-cpp" -> "tmplt/fuzzywuzzy"
"OpenCageData/address-formatting" -> "fragaria/address-formatter"
"OpenCageData/address-formatting" -> "openvenues/libpostal" ["e"=1]
"OpenCageData/address-formatting" -> "johnlonganecker/libpostal-rest"
"OpenCageData/address-formatting" -> "openvenues/pypostal"
"OpenCageData/address-formatting" -> "openvenues/php-postal"
"OpenCageData/address-formatting" -> "predicthq/address-formatter-php"
"OpenCageData/address-formatting" -> "pelias/pelias" ["e"=1]
"OpenCageData/address-formatting" -> "kartotherian/kartotherian" ["e"=1]
"AI4Bharat/indicnlp_corpus" -> "AI4Bharat/indicnlp_catalog"
"AI4Bharat/indicnlp_corpus" -> "anoopkunchukuttan/indic_nlp_library"
"AI4Bharat/indicnlp_corpus" -> "goru001/nlp-for-hindi"
"AI4Bharat/indicnlp_corpus" -> "AI4Bharat/Indic-BERT-v1"
"AI4Bharat/indicnlp_corpus" -> "anoopkunchukuttan/indic_nlp_resources"
"sunyilgdx/SIFRank_zh" -> "dongrixinyu/chinese_keyphrase_extractor" ["e"=1]
"sunyilgdx/SIFRank_zh" -> "sunyilgdx/SIFRank"
"sunyilgdx/SIFRank_zh" -> "DataTerminatorX/Keyword-BERT" ["e"=1]
"sunyilgdx/SIFRank_zh" -> "JackHCC/Chinese-Keyphrase-Extraction"
"sunyilgdx/SIFRank_zh" -> "bigzhao/Keyword_Extraction" ["e"=1]
"sunyilgdx/SIFRank_zh" -> "thunlp/BERT-KPE"
"sunyilgdx/SIFRank_zh" -> "zzy99/epidemic-sentence-pair" ["e"=1]
"sunyilgdx/SIFRank_zh" -> "ibatra/BERT-Keyword-Extractor"
"sunyilgdx/SIFRank_zh" -> "LinhanZ/mderank"
"sunyilgdx/SIFRank_zh" -> "luozhouyang/AutoPhraseX" ["e"=1]
"sunyilgdx/SIFRank_zh" -> "boudinfl/pke"
"sunyilgdx/SIFRank_zh" -> "bojone/word-discovery" ["e"=1]
"minimaxir/aitextgen" -> "minimaxir/gpt-2-simple"
"minimaxir/aitextgen" -> "minimaxir/textgenrnn"
"minimaxir/aitextgen" -> "minimaxir/gpt-2-cloud-run"
"minimaxir/aitextgen" -> "Xirider/finetune-gpt2xl"
"minimaxir/aitextgen" -> "nshepperd/gpt-2"
"minimaxir/aitextgen" -> "EleutherAI/gpt-neo"
"minimaxir/aitextgen" -> "minimaxir/gpt-3-experiments"
"minimaxir/aitextgen" -> "kingoflolz/mesh-transformer-jax" ["e"=1]
"minimaxir/aitextgen" -> "EleutherAI/gpt-neox" ["e"=1]
"minimaxir/aitextgen" -> "microsoft/DialoGPT" ["e"=1]
"minimaxir/aitextgen" -> "minimaxir/download-tweets-ai-text-gen"
"minimaxir/aitextgen" -> "rish-16/gpt2client"
"minimaxir/aitextgen" -> "EricFillion/happy-transformer" ["e"=1]
"minimaxir/aitextgen" -> "uber-research/PPLM"
"minimaxir/aitextgen" -> "minimaxir/gpt-2-keyword-generation"
"robustness-gym/robustness-gym" -> "GEM-benchmark/NL-Augmenter"
"robustness-gym/robustness-gym" -> "marcotcr/checklist"
"robustness-gym/robustness-gym" -> "microsoft/fastformers"
"robustness-gym/robustness-gym" -> "robustness-gym/summvis" ["e"=1]
"robustness-gym/robustness-gym" -> "neulab/InterpretEval" ["e"=1]
"robustness-gym/robustness-gym" -> "timoschick/dino"
"salesforce/ctrl" -> "uber-research/PPLM"
"salesforce/ctrl" -> "salesforce/progen" ["e"=1]
"salesforce/ctrl" -> "facebookresearch/XLM"
"salesforce/ctrl" -> "kimiyoung/transformer-xl"
"salesforce/ctrl" -> "namisan/mt-dnn" ["e"=1]
"salesforce/ctrl" -> "rowanz/grover"
"salesforce/ctrl" -> "fuzhenxin/Style-Transfer-in-Text" ["e"=1]
"salesforce/ctrl" -> "google-research/text-to-text-transfer-transformer"
"salesforce/ctrl" -> "zihangdai/xlnet"
"salesforce/ctrl" -> "imcaspar/gpt2-ml" ["e"=1]
"salesforce/ctrl" -> "google-research/electra" ["e"=1]
"salesforce/ctrl" -> "microsoft/MASS" ["e"=1]
"salesforce/ctrl" -> "THUNLP-MT/TG-Reading-List" ["e"=1]
"salesforce/ctrl" -> "asyml/texar" ["e"=1]
"salesforce/ctrl" -> "openai/finetune-transformer-lm"
"thunlp/OpenAttack" -> "thunlp/TAADpapers"
"thunlp/OpenAttack" -> "QData/TextAttack"
"thunlp/OpenAttack" -> "jind11/TextFooler"
"thunlp/OpenAttack" -> "thunlp/SememePSO-Attack"
"thunlp/OpenAttack" -> "thunlp/OpenBackdoor" ["e"=1]
"thunlp/OpenAttack" -> "JHL-HUST/PWWS"
"thunlp/OpenAttack" -> "textflint/textflint"
"thunlp/OpenAttack" -> "LinyangLee/BERT-Attack"
"thunlp/OpenAttack" -> "nesl/nlp_adversarial_examples"
"thunlp/OpenAttack" -> "facebookresearch/text-adversarial-attack"
"thunlp/OpenAttack" -> "RishabhMaheshwary/hard-label-attack"
"thunlp/OpenAttack" -> "fra31/auto-attack" ["e"=1]
"thunlp/OpenAttack" -> "THUYimingLi/backdoor-learning-resources" ["e"=1]
"thunlp/OpenAttack" -> "neulab/RIPPLe" ["e"=1]
"thunlp/OpenAttack" -> "thunlp/HiddenKiller" ["e"=1]
"summanlp/textrank" -> "davidadamojr/TextRank"
"summanlp/textrank" -> "DerwenAI/pytextrank"
"summanlp/textrank" -> "miso-belica/sumy"
"summanlp/textrank" -> "icoxfog417/awesome-text-summarization" ["e"=1]
"summanlp/textrank" -> "aneesha/RAKE"
"summanlp/textrank" -> "csurfer/rake-nltk"
"summanlp/textrank" -> "boudinfl/pke"
"summanlp/textrank" -> "mathsyouth/awesome-text-summarization" ["e"=1]
"summanlp/textrank" -> "facebookarchive/NAMAS" ["e"=1]
"summanlp/textrank" -> "IndigoResearch/textteaser"
"summanlp/textrank" -> "dongjun-Lee/text-summarization-tensorflow" ["e"=1]
"summanlp/textrank" -> "abisee/pointer-generator" ["e"=1]
"summanlp/textrank" -> "pltrdy/rouge" ["e"=1]
"summanlp/textrank" -> "letiantian/TextRank4ZH" ["e"=1]
"summanlp/textrank" -> "nlpyang/PreSumm" ["e"=1]
"SouravG/Housing-price-prediction-using-Regularised-linear-regression" -> "geekquad/Fraud-Detection"
"SouravG/Housing-price-prediction-using-Regularised-linear-regression" -> "MelihGulum/Comprehensive-Data-Science-AI-Project-Portfolio"
"geekquad/Fraud-Detection" -> "SouravG/Housing-price-prediction-using-Regularised-linear-regression"
"geekquad/Fraud-Detection" -> "MelihGulum/Comprehensive-Data-Science-AI-Project-Portfolio"
"Bharath-K3/Next-Word-Prediction-with-NLP-and-Deep-Learning" -> "LaxmiChaudhary/Amzon-Product-Recommendation"
"Bharath-K3/Next-Word-Prediction-with-NLP-and-Deep-Learning" -> "HiteshAgarwal1/Personality-Prediction-Through-CV"
"jsvine/markovify" -> "minimaxir/textgenrnn"
"jsvine/markovify" -> "Deimos/SubredditSimulator"
"jsvine/markovify" -> "riccardoscalco/Pykov"
"jsvine/markovify" -> "minimaxir/gpt-2-simple"
"jsvine/markovify" -> "bear/python-twitter" ["e"=1]
"jsvine/markovify" -> "karpathy/char-rnn" ["e"=1]
"jsvine/markovify" -> "dariusk/corpora" ["e"=1]
"jsvine/markovify" -> "jmschrei/pomegranate" ["e"=1]
"jsvine/markovify" -> "codebox/markov-text"
"jsvine/markovify" -> "hmmlearn/hmmlearn" ["e"=1]
"jsvine/markovify" -> "cordx56/tweet-generator" ["e"=1]
"jsvine/markovify" -> "tweepy/tweepy" ["e"=1]
"jsvine/markovify" -> "galaxykate/tracery" ["e"=1]
"jsvine/markovify" -> "robbiebarrat/rapping-neural-network" ["e"=1]
"jsvine/markovify" -> "chartbeat-labs/textacy"
"zelandiya/RAKE-tutorial" -> "aneesha/RAKE"
"zelandiya/RAKE-tutorial" -> "csurfer/rake-nltk"
"zelandiya/RAKE-tutorial" -> "mpk001/RAKE-keywordsExtraction"
"zelandiya/RAKE-tutorial" -> "fabianvf/python-rake"
"zelandiya/RAKE-tutorial" -> "zelandiya/keyword-extraction-datasets"
"zelandiya/RAKE-tutorial" -> "chinwuDebug/RAKE_improve"
"zelandiya/RAKE-tutorial" -> "memray/seq2seq-keyphrase"
"zelandiya/RAKE-tutorial" -> "memray/seq2seq-keyphrase-pytorch"
"zelandiya/RAKE-tutorial" -> "zelandiya/maui"
"zelandiya/RAKE-tutorial" -> "boudinfl/pke"
"zelandiya/RAKE-tutorial" -> "laserwave/keywords_extraction_rake"
"zelandiya/RAKE-tutorial" -> "summanlp/textrank"
"zelandiya/RAKE-tutorial" -> "snkim/AutomaticKeyphraseExtraction"
"zelandiya/RAKE-tutorial" -> "boudinfl/ake-datasets"
"explosion/projects" -> "explosion/spacy-transformers"
"explosion/projects" -> "explosion/prodigy-recipes"
"explosion/projects" -> "explosion/sense2vec"
"explosion/projects" -> "explosion/spacy-course"
"explosion/projects" -> "allenai/scispacy" ["e"=1]
"explosion/projects" -> "explosion/spacy-streamlit" ["e"=1]
"explosion/projects" -> "explosion/thinc"
"explosion/projects" -> "chartbeat-labs/textacy"
"explosion/projects" -> "explosion/spacy-models"
"explosion/projects" -> "msg-systems/holmes-extractor"
"explosion/projects" -> "NorskRegnesentral/skweak"
"explosion/projects" -> "ICLRandD/Blackstone" ["e"=1]
"explosion/projects" -> "explosion/spacy-stanza"
"explosion/projects" -> "explosion/spacy-llm" ["e"=1]
"explosion/projects" -> "tecoholic/ner-annotator"
"shreyashankar/gpt3-sandbox" -> "elyase/awesome-gpt3"
"shreyashankar/gpt3-sandbox" -> "bhattbhavesh91/gpt-3-simple-tutorial"
"shreyashankar/gpt3-sandbox" -> "openai/gpt-3"
"shreyashankar/gpt3-sandbox" -> "minimaxir/gpt-3-experiments"
"shreyashankar/gpt3-sandbox" -> "EleutherAI/gpt-neo"
"shreyashankar/gpt3-sandbox" -> "surya-veer/movement-tracking" ["e"=1]
"shreyashankar/gpt3-sandbox" -> "mrdbourke/machine-learning-roadmap" ["e"=1]
"shreyashankar/gpt3-sandbox" -> "bkane1/gpt3-instruct-sandbox"
"shreyashankar/gpt3-sandbox" -> "minimaxir/gpt-2-simple"
"shreyashankar/gpt3-sandbox" -> "kingoflolz/mesh-transformer-jax" ["e"=1]
"shreyashankar/gpt3-sandbox" -> "mikhail-bot/awesome-gpt3"
"shreyashankar/gpt3-sandbox" -> "jbesomi/texthero"
"shreyashankar/gpt3-sandbox" -> "EleutherAI/gpt-neox" ["e"=1]
"shreyashankar/gpt3-sandbox" -> "WebDevSimplified/Zoom-Clone-With-WebRTC" ["e"=1]
"shreyashankar/gpt3-sandbox" -> "openai/gpt-2"
"Eigenbahn/ai-dungeon-cli" -> "mkualquiera/AIDungeonAPI"
"Eigenbahn/ai-dungeon-cli" -> "nickwalton/AI-DungeonMaster"
"Eigenbahn/ai-dungeon-cli" -> "SoptikHa2/aidungeon2-cli"
"textstat/textstat" -> "cdimascio/py-readability-metrics"
"textstat/textstat" -> "mmautner/readability"
"textstat/textstat" -> "R1j1t/contextualSpellCheck" ["e"=1]
"textstat/textstat" -> "jfilter/clean-text"
"textstat/textstat" -> "chartbeat-labs/textacy"
"textstat/textstat" -> "HLasse/TextDescriptives"
"textstat/textstat" -> "boudinfl/pke"
"textstat/textstat" -> "life4/textdistance"
"textstat/textstat" -> "plasticityai/magnitude"
"textstat/textstat" -> "booknlp/booknlp"
"textstat/textstat" -> "makcedward/nlpaug"
"textstat/textstat" -> "bjascob/LemmInflect" ["e"=1]
"textstat/textstat" -> "JasonKessler/scattertext"
"textstat/textstat" -> "jbesomi/texthero"
"textstat/textstat" -> "aboSamoor/polyglot"
"jbesomi/texthero" -> "fbdesignpro/sweetviz" ["e"=1]
"jbesomi/texthero" -> "JasonKessler/scattertext"
"jbesomi/texthero" -> "alfiopuglisi/guietta" ["e"=1]
"jbesomi/texthero" -> "ivan-bilan/The-NLP-Pandect"
"jbesomi/texthero" -> "PAIR-code/lit"
"jbesomi/texthero" -> "jfilter/clean-text"
"jbesomi/texthero" -> "microsoft/nlp-recipes"
"jbesomi/texthero" -> "chartbeat-labs/textacy"
"jbesomi/texthero" -> "sfu-db/dataprep" ["e"=1]
"jbesomi/texthero" -> "QData/TextAttack"
"jbesomi/texthero" -> "makcedward/nlpaug"
"jbesomi/texthero" -> "flairNLP/flair"
"jbesomi/texthero" -> "ddangelov/Top2Vec"
"jbesomi/texthero" -> "MaartenGr/BERTopic"
"jbesomi/texthero" -> "DerwenAI/pytextrank"
"akanyaani/gpt-2-tensorflow2.0" -> "akanyaani/Illustrated_GPT2_With_Code"
"akanyaani/gpt-2-tensorflow2.0" -> "akanyaani/ranknet-tensorflow2.0"
"akanyaani/gpt-2-tensorflow2.0" -> "akanyaani/Phrase_Extraction_Bi-LSTM"
"akanyaani/gpt-2-tensorflow2.0" -> "prakhar21/TextAugmentation-GPT2"
"akanyaani/gpt-2-tensorflow2.0" -> "rish-16/gpt2client"
"akanyaani/gpt-2-tensorflow2.0" -> "yet-another-account/openwebtext"
"yashsmehta/personality-prediction" -> "SenticNet/personality-detection"
"yashsmehta/personality-prediction" -> "jkwieser/personality-prediction-from-text"
"yashsmehta/personality-prediction" -> "jcl132/personality-prediction-from-text"
"yashsmehta/personality-prediction" -> "amirmohammadkz/personality_detection"
"yashsmehta/personality-prediction" -> "djz233/D-DGCN"
"yashsmehta/personality-prediction" -> "hjian42/automatic-personality-prediction"
"ddelange/pipgrip" -> "sdispater/mixology"
"ddelange/pipgrip" -> "FFY00/python-resolver"
"minimaxir/gpt-3-experiments" -> "OvidijusParsiunas/myvision"
"minimaxir/gpt-3-experiments" -> "maraoz/gpt-scrolls"
"minimaxir/gpt-3-experiments" -> "mikhail-bot/awesome-gpt3"
"minimaxir/gpt-3-experiments" -> "swyxio/gpt3-list"
"minimaxir/gpt-3-experiments" -> "sevazhidkov/prompts-ai" ["e"=1]
"minimaxir/gpt-3-experiments" -> "shreyashankar/gpt3-sandbox"
"minimaxir/gpt-3-experiments" -> "minimaxir/gpt-3-client"
"minimaxir/gpt-3-experiments" -> "minimaxir/aitextgen"
"minimaxir/gpt-3-experiments" -> "elyase/awesome-gpt3"
"minimaxir/gpt-3-experiments" -> "minimaxir/download-tweets-ai-text-gen"
"minimaxir/gpt-3-experiments" -> "semiosis/prompts"
"3Top/word2vec-api" -> "Kyubyong/wordvectors"
"3Top/word2vec-api" -> "idio/wiki2vec" ["e"=1]
"3Top/word2vec-api" -> "yoonkim/CNN_sentence" ["e"=1]
"3Top/word2vec-api" -> "danielfrg/word2vec"
"3Top/word2vec-api" -> "cemoody/lda2vec"
"3Top/word2vec-api" -> "ryankiros/skip-thoughts" ["e"=1]
"3Top/word2vec-api" -> "farizrahman4u/seq2seq" ["e"=1]
"3Top/word2vec-api" -> "facebookresearch/InferSent"
"3Top/word2vec-api" -> "facebookresearch/StarSpace"
"3Top/word2vec-api" -> "stanfordnlp/GloVe"
"3Top/word2vec-api" -> "facebookarchive/MemNN" ["e"=1]
"3Top/word2vec-api" -> "andrewt3000/DL4NLP"
"3Top/word2vec-api" -> "facebookarchive/NAMAS" ["e"=1]
"3Top/word2vec-api" -> "Hironsan/awesome-embedding-models"
"3Top/word2vec-api" -> "dennybritz/cnn-text-classification-tf"
"zelandiya/maui" -> "zelandiya/keyword-extraction-datasets"
"zelandiya/maui" -> "zelandiya/maui-standalone"
"zelandiya/maui" -> "HIIT/maui-2"
"explosion/thinc" -> "explosion/spacy-transformers"
"explosion/thinc" -> "explosion/sense2vec"
"explosion/thinc" -> "chartbeat-labs/textacy"
"explosion/thinc" -> "huggingface/neuralcoref"
"explosion/thinc" -> "explosion/spacy-models"
"explosion/thinc" -> "explosion/projects"
"explosion/thinc" -> "explosion/spacy-course"
"explosion/thinc" -> "explosion/spaCy"
"explosion/thinc" -> "facebookresearch/StarSpace"
"explosion/thinc" -> "snorkel-team/snorkel"
"explosion/thinc" -> "pytorch/text"
"explosion/thinc" -> "explosion/prodigy-recipes"
"explosion/thinc" -> "allenai/allennlp"
"explosion/thinc" -> "explosion/spacy-stanza"
"explosion/thinc" -> "flairNLP/flair"
"QData/TextAttack" -> "thunlp/TAADpapers"
"QData/TextAttack" -> "makcedward/nlpaug"
"QData/TextAttack" -> "thunlp/OpenAttack"
"QData/TextAttack" -> "jind11/TextFooler"
"QData/TextAttack" -> "marcotcr/checklist"
"QData/TextAttack" -> "Trusted-AI/adversarial-robustness-toolbox" ["e"=1]
"QData/TextAttack" -> "PAIR-code/lit"
"QData/TextAttack" -> "jasonwei20/eda_nlp" ["e"=1]
"QData/TextAttack" -> "GEM-benchmark/NL-Augmenter"
"QData/TextAttack" -> "princeton-nlp/SimCSE" ["e"=1]
"QData/TextAttack" -> "bethgelab/foolbox" ["e"=1]
"QData/TextAttack" -> "allenai/allennlp"
"QData/TextAttack" -> "jessevig/bertviz"
"QData/TextAttack" -> "llm-attacks/llm-attacks" ["e"=1]
"QData/TextAttack" -> "jalammar/ecco"
"KhalilMrini/LAL-Parser" -> "DoodleJZ/HPSG-Neural-Parser"
"KhalilMrini/LAL-Parser" -> "yzhangcs/crfpar"
"KhalilMrini/LAL-Parser" -> "CCChenhao997/DualGCN-ABSA" ["e"=1]
"davidmcclure/textplot" -> "tedunderwood/paceofchange"
"thu-coai/UNION" -> "thu-coai/OpenMEVA"
"thu-coai/UNION" -> "PlusLabNLP/Plot-guided-Coherence-Evaluation"
"thu-coai/UNION" -> "thu-coai/CommonsenseStoryGen"
"GRAAL-Research/deepparse" -> "GRAAL-Research/deepparse-address-data"
"GRAAL-Research/deepparse" -> "openvenues/pypostal"
"GRAAL-Research/deepparse" -> "jasonrig/address-net"
"LaxmiChaudhary/Amzon-Product-Recommendation" -> "Bharath-K3/Next-Word-Prediction-with-NLP-and-Deep-Learning"
"words/an-array-of-english-words" -> "sindresorhus/word-list"
"MilaNLProc/contextualized-topic-models" -> "MIND-Lab/OCTIS" ["e"=1]
"MilaNLProc/contextualized-topic-models" -> "ddangelov/Top2Vec"
"MilaNLProc/contextualized-topic-models" -> "adjidieng/ETM" ["e"=1]
"MilaNLProc/contextualized-topic-models" -> "bab2min/tomotopy" ["e"=1]
"MilaNLProc/contextualized-topic-models" -> "MaartenGr/BERTopic"
"MilaNLProc/contextualized-topic-models" -> "gregversteeg/corex_topic" ["e"=1]
"MilaNLProc/contextualized-topic-models" -> "zll17/Neural_Topic_Models" ["e"=1]
"MilaNLProc/contextualized-topic-models" -> "NorskRegnesentral/skweak"
"MilaNLProc/contextualized-topic-models" -> "MaartenGr/KeyBERT"
"MilaNLProc/contextualized-topic-models" -> "akashgit/autoencoding_vi_for_topic_models" ["e"=1]
"MilaNLProc/contextualized-topic-models" -> "MaartenGr/PolyFuzz"
"MilaNLProc/contextualized-topic-models" -> "cdpierse/transformers-interpret"
"MilaNLProc/contextualized-topic-models" -> "PAIR-code/lit"
"MilaNLProc/contextualized-topic-models" -> "booknlp/booknlp"
"MilaNLProc/contextualized-topic-models" -> "argilla-io/argilla"
"ivan-bilan/The-NLP-Pandect" -> "dair-ai/nlp_paper_summaries"
"ivan-bilan/The-NLP-Pandect" -> "PAIR-code/lit"
"ivan-bilan/The-NLP-Pandect" -> "microsoft/nlp-recipes"
"ivan-bilan/The-NLP-Pandect" -> "makcedward/nlpaug"
"ivan-bilan/The-NLP-Pandect" -> "jalammar/ecco"
"ivan-bilan/The-NLP-Pandect" -> "ddangelov/Top2Vec"
"ivan-bilan/The-NLP-Pandect" -> "mhagiwara/100-nlp-papers"
"ivan-bilan/The-NLP-Pandect" -> "practical-nlp/practical-nlp-code"
"ivan-bilan/The-NLP-Pandect" -> "fastai/course-nlp"
"ivan-bilan/The-NLP-Pandect" -> "huggingface/awesome-papers"
"ivan-bilan/The-NLP-Pandect" -> "QData/TextAttack"
"ivan-bilan/The-NLP-Pandect" -> "neubig/lowresource-nlp-bootcamp-2020"
"ivan-bilan/The-NLP-Pandect" -> "NiuTrans/ABigSurvey"
"ivan-bilan/The-NLP-Pandect" -> "Machine-Learning-Tokyo/AI_Curriculum" ["e"=1]
"ivan-bilan/The-NLP-Pandect" -> "eugeneyan/ml-surveys" ["e"=1]
"ujjwalkarn/Twitter-Sentiment-Analysis" -> "mayank93/Twitter-Sentiment-Analysis"
"rish-16/gpt2client" -> "Morizeyao/Decoders-Chinese-TF2.0" ["e"=1]
"rish-16/gpt2client" -> "akanyaani/gpt-2-tensorflow2.0"
"rish-16/gpt2client" -> "rish-16/sight"
"rish-16/gpt2client" -> "prakhar21/TextAugmentation-GPT2"
"rish-16/gpt2client" -> "ConnorJL/GPT2" ["e"=1]
"rish-16/gpt2client" -> "minimaxir/gpt-2-simple"
"datamade/probablepeople" -> "datamade/usaddress"
"datamade/probablepeople" -> "datamade/parserator"
"datamade/probablepeople" -> "derek73/python-nameparser"
"datamade/probablepeople" -> "opensanctions/fingerprints" ["e"=1]
"datamade/probablepeople" -> "dedupeio/dedupe"
"datamade/probablepeople" -> "GreenBuildingRegistry/usaddress-scourgify"
"datamade/probablepeople" -> "openvenues/pypostal"
"datamade/probablepeople" -> "J535D165/recordlinkage"
"datamade/probablepeople" -> "jamesturk/jellyfish"
"datamade/probablepeople" -> "dedupeio/dedupe-examples"
"datamade/probablepeople" -> "sunlightlabs/name-cleaver"
"datamade/probablepeople" -> "dedupeio/csvdedupe"
"datamade/probablepeople" -> "Gaglia88/sparker"
"itkach/aard2-android" -> "itkach/slob"
"itkach/aard2-android" -> "itkach/aard2-web"
"itkach/aard2-android" -> "rdoeffinger/Dictionary"
"itkach/aard2-android" -> "namndev/QDict"
"itkach/aard2-android" -> "aarddict/android"
"itkach/aard2-android" -> "farfromrefug/OSS-Dict"
"itkach/aard2-android" -> "TachibanaGeneralLaboratories/download-navi" ["e"=1]
"itkach/aard2-android" -> "daimajia/little-bear-dictionary"
"itkach/aard2-android" -> "SufficientlySecure/document-viewer" ["e"=1]
"renatoviolin/next_word_prediction" -> "renatoviolin/Question-Answering-Albert-Electra"
"renatoviolin/next_word_prediction" -> "renatoviolin/Semantic-Search"
"renatoviolin/next_word_prediction" -> "goru001/inltk"
"renatoviolin/next_word_prediction" -> "dair-ai/nlp_paper_summaries"
"renatoviolin/next_word_prediction" -> "renatoviolin/Bart_T5-summarization"
"renatoviolin/next_word_prediction" -> "timoschick/pet" ["e"=1]
"renatoviolin/next_word_prediction" -> "huggingface/awesome-papers"
"renatoviolin/next_word_prediction" -> "Bharath-K3/Next-Word-Prediction-with-NLP-and-Deep-Learning"
"renatoviolin/next_word_prediction" -> "renatoviolin/Multiple-Choice-Question-Generation-T5-and-Text2Text"
"renatoviolin/next_word_prediction" -> "renatoviolin/T5-paraphrase-generation" ["e"=1]
"renatoviolin/next_word_prediction" -> "labteral/ernie"
"renatoviolin/next_word_prediction" -> "jalammar/ecco"
"renatoviolin/next_word_prediction" -> "EricFillion/happy-transformer" ["e"=1]
"renatoviolin/next_word_prediction" -> "craffel/dl3d-seminar" ["e"=1]
"renatoviolin/next_word_prediction" -> "neubig/lowresource-nlp-bootcamp-2020"
"allenai/pawls" -> "Layout-Parser/layout-model-training" ["e"=1]
"allenai/pawls" -> "doc-analysis/DocBank" ["e"=1]
"allenai/pawls" -> "allenai/mmda" ["e"=1]
"allenai/pawls" -> "BobLd/DocumentLayoutAnalysis" ["e"=1]
"allenai/pawls" -> "MaartenGr/PolyFuzz"
"allenai/pawls" -> "webis-de/small-text"
"allenai/pawls" -> "jpWang/LiLT" ["e"=1]
"allenai/pawls" -> "samueldobbie/markup"
"allenai/pawls" -> "allenai/vila" ["e"=1]
"SKRohit/Generating_Text_Summary_With_GPT2" -> "VincentK1991/BERT_summarization_1"
"tanyuqian/progressive-generation" -> "thu-coai/HINT"
"tanyuqian/progressive-generation" -> "thu-coai/OpenMEVA"
"tanyuqian/progressive-generation" -> "hrashkin/plotmachines"
"tanyuqian/progressive-generation" -> "WHUIR/PPVAE" ["e"=1]
"kw-service/klas-helper-userscript" -> "kw-service/klas-helper-extension"
"kw-service/klas-helper-userscript" -> "kw-service/kw-notice-v1"
"kw-service/klas-helper-userscript" -> "SoYoungCho/Today-I-Learned"
"kw-service/klas-helper-userscript" -> "kw-service/kw-notice-android-v2"
"dipanjanS/convolutional_neural_networks_essentials" -> "dipanjanS/adversarial_learning_tfug2020"
"mfaruqui/retrofitting" -> "nmrksic/counter-fitting"
"mfaruqui/retrofitting" -> "mfaruqui/non-distributional"
"mfaruqui/retrofitting" -> "iunderstand/SWE"
"mfaruqui/retrofitting" -> "mfaruqui/eval-word-vectors"
"mfaruqui/retrofitting" -> "commonsense/conceptnet-numberbatch"
"mfaruqui/retrofitting" -> "wlin12/wang2vec"
"mfaruqui/retrofitting" -> "yiyang-gt/feat2vec"
"mfaruqui/retrofitting" -> "kudkudak/word-embeddings-benchmarks"
"mfaruqui/retrofitting" -> "orenmel/context2vec"
"mfaruqui/retrofitting" -> "Leonard-Xu/CWE"
"mfaruqui/retrofitting" -> "ytsvetko/qvec"
"dair-ai/nlp_paper_summaries" -> "huggingface/awesome-papers"
"dair-ai/nlp_paper_summaries" -> "dair-ai/nlp_fundamentals"
"dair-ai/nlp_paper_summaries" -> "ivan-bilan/The-NLP-Pandect"
"dair-ai/nlp_paper_summaries" -> "dair-ai/nlp_newsletter"
"dair-ai/nlp_paper_summaries" -> "dair-ai/pytorch_notebooks"
"dair-ai/nlp_paper_summaries" -> "dair-ai/d2l-study-group"
"dair-ai/nlp_paper_summaries" -> "tomohideshibata/BERT-related-papers" ["e"=1]
"dair-ai/nlp_paper_summaries" -> "dair-ai/ml-nlp-paper-discussions"
"dair-ai/nlp_paper_summaries" -> "microsoft/nlp-recipes"
"dair-ai/nlp_paper_summaries" -> "mhagiwara/100-nlp-papers"
"dair-ai/nlp_paper_summaries" -> "omarsar/nlp_overview"
"dair-ai/nlp_paper_summaries" -> "NiuTrans/ABigSurvey"
"dair-ai/nlp_paper_summaries" -> "mihail911/nlp-library" ["e"=1]
"dair-ai/nlp_paper_summaries" -> "Machine-Learning-Tokyo/AI_Curriculum" ["e"=1]
"dair-ai/nlp_paper_summaries" -> "deepset-ai/FARM"
"awslabs/mlm-scoring" -> "alexwarstadt/blimp"
"awslabs/mlm-scoring" -> "simonepri/lm-scorer"
"Eric-Wallace/universal-triggers" -> "Hsuan-Tung/universal_attack_natural_trigger"
"Eric-Wallace/universal-triggers" -> "thunlp/TAADpapers"
"Eric-Wallace/universal-triggers" -> "lushleaf/Structure-free-certified-NLP"
"Eric-Wallace/universal-triggers" -> "ucinlp/autoprompt" ["e"=1]
"Eric-Wallace/universal-triggers" -> "pmichel31415/teapot-nlp"
"Eric-Wallace/universal-triggers" -> "nesl/nlp_adversarial_examples"
"Eric-Wallace/universal-triggers" -> "jind11/TextFooler"
"Eric-Wallace/universal-triggers" -> "JHL-HUST/PWWS"
"Eric-Wallace/universal-triggers" -> "Eric-Wallace/interpretability-tutorial-emnlp2020" ["e"=1]
"JordanAsh/badge" -> "avihu111/TypiClust"
"JordanAsh/badge" -> "ej0cl6/deep-active-learning"
"JordanAsh/badge" -> "decile-team/distil"
"JordanAsh/badge" -> "sinhasam/vaal"
"JordanAsh/badge" -> "ozansener/active_learning_coreset"
"JordanAsh/badge" -> "yongjin-shin/awesome-active-learning"
"JordanAsh/badge" -> "AminParvaneh/alpha_mix_active_learning"
"JordanAsh/badge" -> "cure-lab/deep-active-learning"
"JordanAsh/badge" -> "dsgissin/DiscriminativeActiveLearning"
"JordanAsh/badge" -> "cjshui/WAAL"
"JordanAsh/badge" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"JordanAsh/badge" -> "baifanxxx/awesome-active-learning"
"JordanAsh/badge" -> "BlackHC/batchbald_redux"
"JordanAsh/badge" -> "forest-snow/alps"
"JordanAsh/badge" -> "virajprabhu/CLUE" ["e"=1]
"NiuTrans/NASPapers" -> "NiuTrans/LanguageCodes"
"NiuTrans/NASPapers" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/NASPapers" -> "NiuTrans/MTVenues"
"NiuTrans/NASPapers" -> "NiuTrans/MT-paper-lists"
"klb3713/sentence2vec" -> "JonathanRaiman/PVDM"
"klb3713/sentence2vec" -> "largelymfs/paragraph2vec"
"klb3713/sentence2vec" -> "ryankiros/skip-thoughts" ["e"=1]
"klb3713/sentence2vec" -> "zseymour/phrase2vec"
"klb3713/sentence2vec" -> "yoonkim/CNN_sentence" ["e"=1]
"klb3713/sentence2vec" -> "largelymfs/topical_word_embeddings" ["e"=1]
"klb3713/sentence2vec" -> "airalcorn2/Deep-Semantic-Similarity-Model" ["e"=1]
"klb3713/sentence2vec" -> "rock3125/sentence2vec"
"klb3713/sentence2vec" -> "licstar/compare"
"klb3713/sentence2vec" -> "ryankiros/visual-semantic-embedding" ["e"=1]
"klb3713/sentence2vec" -> "mesnilgr/iclr15"
"klb3713/sentence2vec" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"klb3713/sentence2vec" -> "attardi/deepnl"
"klb3713/sentence2vec" -> "hassyGo/paragraph-vector"
"klb3713/sentence2vec" -> "codekansas/keras-language-modeling" ["e"=1]
"jind11/TextFooler" -> "LinyangLee/BERT-Attack"
"jind11/TextFooler" -> "thunlp/OpenAttack"
"jind11/TextFooler" -> "nesl/nlp_adversarial_examples"
"jind11/TextFooler" -> "JHL-HUST/PWWS"
"jind11/TextFooler" -> "thunlp/TAADpapers"
"jind11/TextFooler" -> "QData/TextAttack"
"jind11/TextFooler" -> "zhuchen03/FreeLB"
"jind11/TextFooler" -> "thunlp/SememePSO-Attack"
"jind11/TextFooler" -> "Eric-Wallace/universal-triggers"
"jind11/TextFooler" -> "RishabhMaheshwary/hard-label-attack"
"jind11/TextFooler" -> "robinjia/certified-word-sub"
"jind11/TextFooler" -> "AI-secure/InfoBERT"
"jind11/TextFooler" -> "miyyer/scpn" ["e"=1]
"jind11/TextFooler" -> "marcotcr/sears"
"jind11/TextFooler" -> "nmrksic/counter-fitting"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "sinhasam/vaal"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "ozansener/active_learning_coreset"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "SineZHAN/deepALplus"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "seominseok0429/Learning-Loss-for-Active-Learning-Pytorch"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "yuantn/MI-AOD"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "dsgissin/DiscriminativeActiveLearning"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "cubeyoung/TA-VAAL"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "NVlabs/AL-MDN"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "ej0cl6/deep-active-learning"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "avihu111/TypiClust"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "euphoria0-0/Learning-Loss-for-Active-Learning"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "johnsk95/PT4AL"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "PrateekMunjal/TorchAL"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "sharat29ag/CDAL"
"Mephisto405/Learning-Loss-for-Active-Learning" -> "yongjin-shin/awesome-active-learning"
"yhat/python-naive-bayes" -> "muatik/naive-bayes-classifier"
"datamade/parserator" -> "datamade/probablepeople"
"datamade/parserator" -> "datamade/usaddress"
"datamade/parserator" -> "datamade/data-making-guidelines"
"datamade/parserator" -> "dedupeio/dedupe"
"datamade/parserator" -> "GreenBuildingRegistry/usaddress-scourgify"
"datamade/parserator" -> "dedupeio/csvdedupe"
"datamade/parserator" -> "openvenues/pypostal"
"datamade/parserator" -> "jamesturk/jellyfish"
"datamade/parserator" -> "dedupeio/dedupe-examples"
"datamade/parserator" -> "derek73/python-nameparser"
"datamade/parserator" -> "engarde-dev/engarde" ["e"=1]
"datamade/parserator" -> "walkr/oi" ["e"=1]
"datamade/parserator" -> "LeapBeyond/scrubadub" ["e"=1]
"datamade/parserator" -> "wireservice/agate" ["e"=1]
"datamade/parserator" -> "J535D165/recordlinkage"
"indic-dict/stardict-sanskrit" -> "sanskrit-kosha/kosha"
"indic-dict/stardict-sanskrit" -> "indic-dict/stardict-pali"
"indic-dict/stardict-sanskrit" -> "drdhaval2785/SanskritVerb"
"indic-dict/stardict-sanskrit" -> "kmadathil/sanskrit_parser"
"indic-dict/stardict-sanskrit" -> "sanskrit/raw_etexts"
"indic-dict/stardict-sanskrit" -> "sanskrit/ashtadhyayi"
"thunlp/BERT-KPE" -> "memray/OpenNMT-kpg-release"
"thunlp/BERT-KPE" -> "ibatra/BERT-Keyword-Extractor"
"thunlp/BERT-KPE" -> "microsoft/OpenKP"
"thunlp/BERT-KPE" -> "swisscom/ai-research-keyphrase-extraction"
"thunlp/BERT-KPE" -> "LIAAD/KeywordExtractor-Datasets"
"thunlp/BERT-KPE" -> "boudinfl/pke"
"thunlp/BERT-KPE" -> "boudinfl/ake-datasets"
"thunlp/BERT-KPE" -> "sunyilgdx/SIFRank"
"thunlp/BERT-KPE" -> "kenchan0226/keyphrase-generation-rl"
"thunlp/BERT-KPE" -> "sunyilgdx/SIFRank_zh"
"thunlp/BERT-KPE" -> "memray/seq2seq-keyphrase"
"thunlp/BERT-KPE" -> "xgeric/UCPhrase-exp" ["e"=1]
"thunlp/BERT-KPE" -> "memray/seq2seq-keyphrase-pytorch"
"thunlp/BERT-KPE" -> "LinhanZ/mderank"
"thunlp/BERT-KPE" -> "ygorg/KPTimes"
"hinesboy/transformer-simple" -> "DevilExileSu/transformer"
"minimaxir/download-tweets-ai-text-gen" -> "minimaxir/twitter-cloud-run"
"minimaxir/download-tweets-ai-text-gen" -> "sdelgadoc/download-tweets-ai-text-gen-plus"
"IssamLaradji/sps" -> "IssamLaradji/sls"
"mesnilgr/nbsvm" -> "sidaw/nbsvm"
"mesnilgr/nbsvm" -> "lrei/nbsvm"
"mesnilgr/nbsvm" -> "mesnilgr/iclr15"
"mesnilgr/nbsvm" -> "vinhkhuc/kaggle-sentiment-popcorn"
"mesnilgr/nbsvm" -> "yhat/python-naive-bayes"
"mesnilgr/nbsvm" -> "dhammack/Word2VecExample"
"goodmami/wn" -> "omwn/omw-data"
"goodmami/wn" -> "globalwordnet/english-wordnet"
"goodmami/wn" -> "nltk/wordnet"
"goodmami/wn" -> "argilla-io/spacy-wordnet"
"JonathanRaiman/PVDM" -> "klb3713/sentence2vec"
"JonathanRaiman/PVDM" -> "zseymour/phrase2vec"
"JonathanRaiman/PVDM" -> "inejc/paragraph-vectors"
"JonathanRaiman/PVDM" -> "mesnilgr/iclr15"
"JonathanRaiman/PVDM" -> "largelymfs/paragraph2vec"
"JonathanRaiman/PVDM" -> "attardi/deepnl"
"cloveranon/Clover-Edition" -> "VBPXKSMI/Open-CYOAI-Project"
"cloveranon/Clover-Edition" -> "thadunge2/AIDungeon"
"cloveranon/Clover-Edition" -> "AIDungeonWiXAnon/AID2-Installer-Project"
"cloveranon/Clover-Edition" -> "storybro/storybro"
"cloveranon/Clover-Edition" -> "AetherDevSecOps/aid_adventure_vulnerability_report"
"cloveranon/Clover-Edition" -> "valahraban/AID-World-Info-research-sheet"
"cloveranon/Clover-Edition" -> "finetunej/gpt-neo_dungeon"
"gandersen101/spaczz" -> "kevinlu1248/pyate"
"gandersen101/spaczz" -> "doccano/doccano-transformer"
"gandersen101/spaczz" -> "KennethEnevoldsen/augmenty"
"Bergvca/string_grouper" -> "ing-bank/sparse_dot_topn"
"Bergvca/string_grouper" -> "MaartenGr/PolyFuzz"
"Bergvca/string_grouper" -> "psolin/cleanco"
"Bergvca/string_grouper" -> "LouisTsiattalou/tfidf_matcher"
"affjljoo3581/GPT2" -> "affjljoo3581/Expanda"
"affjljoo3581/GPT2" -> "graykode/gpt-2-Pytorch"
"affjljoo3581/GPT2" -> "affjljoo3581/canrevan"
"affjljoo3581/GPT2" -> "ds-wook/predict-delinquency"
"affjljoo3581/GPT2" -> "ds-wook/BOJ"
"affjljoo3581/GPT2" -> "ds-wook/ml-project"
"affjljoo3581/GPT2" -> "affjljoo3581/Differentiable-RandAugment"
"affjljoo3581/GPT2" -> "affjljoo3581/Job-Recommend-Competition"
"affjljoo3581/GPT2" -> "affjljoo3581/Samsung-AI-Challenge-for-Scientific-Discovery"
"affjljoo3581/GPT2" -> "ds-wook/ds-wook"
"affjljoo3581/GPT2" -> "ds-wook/final-industry-university"
"IndigoResearch/textteaser" -> "MojoJolo/textteaser"
"IndigoResearch/textteaser" -> "xiaoxu193/PyTeaser"
"IndigoResearch/textteaser" -> "miso-belica/sumy"
"IndigoResearch/textteaser" -> "summanlp/textrank"
"IndigoResearch/textteaser" -> "davidadamojr/TextRank"
"IndigoResearch/textteaser" -> "lipiji/App-DL" ["e"=1]
"IndigoResearch/textteaser" -> "jbrooksuk/node-summary"
"IndigoResearch/textteaser" -> "thavelick/summarize"
"IndigoResearch/textteaser" -> "rockingdingo/deepnlp" ["e"=1]
"IndigoResearch/textteaser" -> "jannson/yaha" ["e"=1]
"IndigoResearch/textteaser" -> "dongjun-Lee/text-summarization-tensorflow" ["e"=1]
"IndigoResearch/textteaser" -> "neopunisher/Open-Text-Summarizer"
"IndigoResearch/textteaser" -> "facebookarchive/NAMAS" ["e"=1]
"IndigoResearch/textteaser" -> "carpedm20/neural-summary-tensorflow" ["e"=1]
"IndigoResearch/textteaser" -> "jjangsangy/ExplainToMe"
"oliverguhr/german-sentiment-lib" -> "oliverguhr/german-sentiment"
"linkedin/detext" -> "linkedin/gdmix"
"linkedin/detext" -> "deepset-ai/FARM"
"linkedin/detext" -> "PAIR-code/lit"
"linkedin/detext" -> "oborchers/Fast_Sentence_Embeddings"
"linkedin/detext" -> "ivan-bilan/The-NLP-Pandect"
"linkedin/detext" -> "DerwenAI/pytextrank"
"linkedin/detext" -> "ddangelov/Top2Vec"
"linkedin/detext" -> "facebookresearch/TransCoder" ["e"=1]
"linkedin/detext" -> "jfilter/clean-text"
"linkedin/detext" -> "NorskRegnesentral/skweak"
"linkedin/detext" -> "uber/manifold" ["e"=1]
"linkedin/detext" -> "tensorflow/ranking" ["e"=1]
"linkedin/detext" -> "ULTR-Community/ULTRA" ["e"=1]
"linkedin/detext" -> "nlp-uoregon/trankit"
"linkedin/detext" -> "microsoft/fastformers"
"AI4Bharat/indicnlp_catalog" -> "anoopkunchukuttan/indic_nlp_library"
"AI4Bharat/indicnlp_catalog" -> "AI4Bharat/indicnlp_corpus"
"AI4Bharat/indicnlp_catalog" -> "AI4Bharat/Indic-BERT-v1"
"AI4Bharat/indicnlp_catalog" -> "goru001/inltk"
"AI4Bharat/indicnlp_catalog" -> "libindic/indic-trans"
"AI4Bharat/indicnlp_catalog" -> "AI4Bharat/indicTrans"
"AI4Bharat/indicnlp_catalog" -> "AI4Bharat/IndicTrans2"
"AI4Bharat/indicnlp_catalog" -> "google-research-datasets/dakshina"
"AI4Bharat/indicnlp_catalog" -> "indic-transliteration/indic_transliteration_py"
"AI4Bharat/indicnlp_catalog" -> "prajdabre/yanmtt"
"AI4Bharat/indicnlp_catalog" -> "Open-Speech-EkStep/vakyansh-models"
"AI4Bharat/indicnlp_catalog" -> "anoopkunchukuttan/indic_nlp_resources"
"AI4Bharat/indicnlp_catalog" -> "AI4Bharat/IndicBERT"
"AI4Bharat/indicnlp_catalog" -> "AI4Bharat/IndicNLP-Transliteration"
"AI4Bharat/indicnlp_catalog" -> "goru001/nlp-for-hindi"
"anoopkunchukuttan/indic_nlp_library" -> "AI4Bharat/indicnlp_catalog"
"anoopkunchukuttan/indic_nlp_library" -> "libindic/indic-trans"
"anoopkunchukuttan/indic_nlp_library" -> "goru001/inltk"
"anoopkunchukuttan/indic_nlp_library" -> "anoopkunchukuttan/indic_nlp_resources"
"anoopkunchukuttan/indic_nlp_library" -> "AI4Bharat/indicnlp_corpus"
"anoopkunchukuttan/indic_nlp_library" -> "AI4Bharat/Indic-BERT-v1"
"anoopkunchukuttan/indic_nlp_library" -> "indic-transliteration/indic_transliteration_py"
"anoopkunchukuttan/indic_nlp_library" -> "AI4Bharat/IndicTrans2"
"anoopkunchukuttan/indic_nlp_library" -> "taranjeet/hindi-tokenizer"
"anoopkunchukuttan/indic_nlp_library" -> "AI4Bharat/indicTrans"
"anoopkunchukuttan/indic_nlp_library" -> "google-research-datasets/dakshina"
"anoopkunchukuttan/indic_nlp_library" -> "prajdabre/yanmtt"
"anoopkunchukuttan/indic_nlp_library" -> "libindic/Transliteration"
"anoopkunchukuttan/indic_nlp_library" -> "Open-Speech-EkStep/vakyansh-models"
"anoopkunchukuttan/indic_nlp_library" -> "thammegowda/mtdata" ["e"=1]
"alexwarstadt/blimp" -> "cpllab/syntactic-generalization"
"alexwarstadt/blimp" -> "alexwarstadt/data_generation"
"HazyResearch/flyingsquid" -> "autonlab/weasel"
"HazyResearch/flyingsquid" -> "microsoft/ASTRA" ["e"=1]
"HazyResearch/flyingsquid" -> "HazyResearch/epoxy"
"HazyResearch/flyingsquid" -> "NorskRegnesentral/skweak"
"HazyResearch/flyingsquid" -> "JieyuZ2/wrench"
"microsoft/fastformers" -> "facebookresearch/SentAugment"
"microsoft/fastformers" -> "microsoft/fastseq" ["e"=1]
"microsoft/fastformers" -> "robustness-gym/robustness-gym"
"microsoft/fastformers" -> "huggingface/nn_pruning" ["e"=1]
"microsoft/fastformers" -> "Tencent/TurboTransformers" ["e"=1]
"microsoft/fastformers" -> "laiguokun/Funnel-Transformer" ["e"=1]
"microsoft/fastformers" -> "princeton-nlp/DensePhrases" ["e"=1]
"microsoft/fastformers" -> "ELS-RD/transformer-deploy" ["e"=1]
"microsoft/fastformers" -> "cliang1453/BOND" ["e"=1]
"microsoft/fastformers" -> "zhihu/cuBERT" ["e"=1]
"microsoft/fastformers" -> "studio-ousia/bpr" ["e"=1]
"microsoft/fastformers" -> "facebookresearch/KILT" ["e"=1]
"BlackHC/batchbald_redux" -> "BlackHC/BatchBALD"
"gtolomei/big-data-computing" -> "erodola/DLAI-s2-2022"
"gtolomei/big-data-computing" -> "erodola/DLAI-s2-2021"
"gtolomei/big-data-computing" -> "erodola/DLAI-s2-2020"
"gtolomei/big-data-computing" -> "andrea-gasparini/sapienza-beamer-template"
"gtolomei/big-data-computing" -> "bardhprenkaj/ML_labs"
"gtolomei/big-data-computing" -> "andrea-gasparini/cloud-computing-exam-simulator"
"storybro/storybro" -> "VBPXKSMI/Open-CYOAI-Project"
"yaushian/Tree-Transformer" -> "zychen423/UHop"
"yaushian/Tree-Transformer" -> "iesl/diora"
"yaushian/Tree-Transformer" -> "nxphi47/tree_transformer" ["e"=1]
"yaushian/Tree-Transformer" -> "harvardnlp/compound-pcfg"
"yaushian/Tree-Transformer" -> "harvardnlp/urnng"
"yaushian/Tree-Transformer" -> "yikangshen/Ordered-Neurons"
"yaushian/Tree-Transformer" -> "bwang514/PerformanceNet" ["e"=1]
"yaushian/Tree-Transformer" -> "jihunchoi/unsupervised-treelstm"
"yaushian/Tree-Transformer" -> "zysszy/TreeGen" ["e"=1]
"yaushian/Tree-Transformer" -> "facebookresearch/code-prediction-transformer" ["e"=1]
"VincentK1991/BERT_summarization_1" -> "yahah100/text_summarization"
"scaleway/postal-address" -> "SwoopSearch/pyaddress"
"prakhar21/TextAugmentation-GPT2" -> "varunkumar-dev/TransformersDataAugmentation"
"maria-antoniak/goodreads-scraper" -> "havanagrawal/GoodreadsScraper"
"maria-antoniak/goodreads-scraper" -> "MengtingWan/goodreads"
"maria-antoniak/goodreads-scraper" -> "melaniewalsh/Intro-Cultural-Analytics"
"maria-antoniak/goodreads-scraper" -> "maria-antoniak/little-mallet-wrapper"
"dair-ai/emotion_dataset" -> "dair-ai/notebooks"
"dair-ai/emotion_dataset" -> "dair-ai/research_emotion_analysis"
"njerschow/openai-api" -> "poteat/gpt3-cli"
"njerschow/openai-api" -> "erlapso/openai-api-node"
"njerschow/openai-api" -> "ceifa/openai"
"ziqizhang/jate" -> "ispras/atr4s"
"UDAAN-LEAP/leap-pe-tool" -> "rohitsaluja22/OpenOCRCorrect"
"thu-coai/CommonsenseStoryGen" -> "thu-coai/UNION"
"thu-coai/CommonsenseStoryGen" -> "JianGuanTHU/StoryEndGen"
"lonePatient/TorchBlocks" -> "geyingli/unif"
"lonePatient/TorchBlocks" -> "suolyer/PyTorch_BERT_Biaffine_NER" ["e"=1]
"mikhail-bot/awesome-gpt3" -> "swyxio/gpt3-list"
"mikhail-bot/awesome-gpt3" -> "minimaxir/gpt-3-experiments"
"bhoov/exbert" -> "clarkkev/attention-analysis" ["e"=1]
"bhoov/exbert" -> "deepset-ai/FARM"
"bhoov/exbert" -> "huggingface/naacl_transfer_learning_tutorial" ["e"=1]
"bhoov/exbert" -> "bhoov/spacyface"
"bhoov/exbert" -> "nyu-mll/jiant"
"bhoov/exbert" -> "facebookresearch/LAMA" ["e"=1]
"megagonlabs/ditto" -> "anhaidgroup/deepmatcher"
"megagonlabs/ditto" -> "anhaidgroup/py_entitymatching"
"megagonlabs/ditto" -> "zhao1701/extending-deep-ER"
"megagonlabs/ditto" -> "chu-data-lab/zeroer"
"megagonlabs/ditto" -> "vintasoftware/entity-embed"
"megagonlabs/ditto" -> "brunnurs/entity-matching-transformer"
"megagonlabs/ditto" -> "scify/JedAIToolkit"
"megagonlabs/ditto" -> "delftdata/valentine" ["e"=1]
"megagonlabs/ditto" -> "anhaidgroup/py_stringmatching"
"megagonlabs/ditto" -> "qcri/DeepBlocker"
"megagonlabs/ditto" -> "ruc-datalab/Unicorn"
"megagonlabs/ditto" -> "wbsg-uni-mannheim/MatchGPT"
"megagonlabs/ditto" -> "CGCL-codes/HierGAT"
"megagonlabs/ditto" -> "megagonlabs/rotom" ["e"=1]
"megagonlabs/ditto" -> "wbsg-uni-mannheim/contrastive-product-matching"
"kevinlu1248/pyate" -> "jenojp/negspacy" ["e"=1]
"kevinlu1248/pyate" -> "NIHOPA/NLPre"
"kevinlu1248/pyate" -> "gandersen101/spaczz"
"kevinlu1248/pyate" -> "graphbrain/graphbrain"
"kevinlu1248/pyate" -> "ispras/atr4s"
"kevinlu1248/pyate" -> "KennethEnevoldsen/augmenty"
"sarahwie/attention" -> "serrano-s/attn-tests"
"facebookresearch/Ad-Library-API-Script-Repository" -> "minimaxir/facebook-ad-library-scraper"
"facebookresearch/Ad-Library-API-Script-Repository" -> "facebookresearch/Radlibrary" ["e"=1]
"minimaxir/facebook-ad-library-scraper" -> "facebookresearch/Ad-Library-API-Script-Repository"
"minimaxir/facebook-ad-library-scraper" -> "justinlittman/fb-ad-archive-scraper"
"minimaxir/facebook-ad-library-scraper" -> "Ashish-Github193/Facebook-Ads-Library"
"minimaxir/facebook-ad-library-scraper" -> "minimaxir/autotweet-from-googlesheet"
"glnmario/cwr4lsc" -> "akutuzov/semeval2020"
"google-research-datasets/dakshina" -> "libindic/indic-trans"
"google-research-datasets/dakshina" -> "AI4Bharat/indicnlp_catalog"
"google-research-datasets/dakshina" -> "AI4Bharat/indicTrans"
"CtfChan/pytorch_ssd_active_learning" -> "JappaB/Active_Learning_Object_Detection"
"erre-quadro/spikex" -> "KennethEnevoldsen/augmenty"
"erre-quadro/spikex" -> "NorskRegnesentral/skweak"
"erre-quadro/spikex" -> "kabirkhan/recon"
"erre-quadro/spikex" -> "mmxgn/spacy-clausie" ["e"=1]
"erre-quadro/spikex" -> "jenojp/negspacy" ["e"=1]
"erre-quadro/spikex" -> "DerwenAI/kglab" ["e"=1]
"erre-quadro/spikex" -> "graphbrain/graphbrain"
"erre-quadro/spikex" -> "richardpaulhudson/holmes-extractor"
"avinsit123/keyphrase-gan" -> "kenchan0226/keyphrase-generation-rl"
"avinsit123/keyphrase-gan" -> "Chen-Wang-CUHK/ExHiRD-DKG"
"avinsit123/keyphrase-gan" -> "Chen-Wang-CUHK/KG-KE-KR-M"
"dmmiller612/sparktorch" -> "lifeomic/sparkflow"
"sgsinclair/alta" -> "sgsinclair/VoyantServer" ["e"=1]
"sgsinclair/alta" -> "DH-Box/corpus-downloader"
"sgsinclair/alta" -> "cu-nil/chnotes"
"sgsinclair/alta" -> "tedunderwood/DataMunging"
"sgsinclair/alta" -> "curateteaching/digitalpedagogy" ["e"=1]
"sgsinclair/alta" -> "tedunderwood/paceofchange"
"aiplanethub/Datasets" -> "aiplanethub/Machine_Learning_Bootcamp"
"aiplanethub/Datasets" -> "aiplanethub/live_sessions"
"certainlyio/nordic_bert" -> "alexandrainst/danlp"
"certainlyio/nordic_bert" -> "sarnikowski/danish_transformers"
"certainlyio/nordic_bert" -> "NbAiLab/notram"
"certainlyio/nordic_bert" -> "MalteHB/-l-ctra"
"certainlyio/nordic_bert" -> "mollerhoj/Scandinavian-ULMFiT"
"certainlyio/nordic_bert" -> "fnielsen/awesome-danish"
"certainlyio/nordic_bert" -> "centre-for-humanities-computing/DaCy"
"certainlyio/nordic_bert" -> "danish-foundation-models/site"
"certainlyio/nordic_bert" -> "EuroEval/EuroEval"
"certainlyio/nordic_bert" -> "KennethEnevoldsen/scandinavian-embedding-benchmark"
"certainlyio/nordic_bert" -> "martincjespersen/DaAnonymization"
"certainlyio/nordic_bert" -> "web64/norwegian-nlp-resources"
"certainlyio/nordic_bert" -> "leondz/dagw_page"
"FailedSave/storytelling-guide" -> "gimzani/ai-dungeon-worldbuilder"
"ithaka/constellate-notebooks" -> "wjbmattingly/tap-2023-spacy-01"
"ithaka/constellate-notebooks" -> "erikfredner/tap-2024"
"ithaka/constellate-notebooks" -> "jdportercode/TAP23"
"ithaka/constellate-notebooks" -> "elliewix/tapi-2023-webscraping"
"ithaka/constellate-notebooks" -> "wjbmattingly/tap-2024-vector-databases"
"ithaka/constellate-notebooks" -> "melaniewalsh/Intro-Cultural-Analytics"
"dennisbakhuis/pigeonXT" -> "agermanidis/pigeon"
"primaryobjects/lda" -> "awaisathar/lda.js"
"primaryobjects/lda" -> "mimno/jsLDA"
"VBPXKSMI/Open-CYOAI-Project" -> "cloveranon/Clover-Edition"
"VBPXKSMI/Open-CYOAI-Project" -> "storybro/storybro"
"VBPXKSMI/Open-CYOAI-Project" -> "thadunge2/AIDungeon"
"KaiyuanGao/AI-Surveys" -> "eugeneyan/ml-surveys" ["e"=1]
"KaiyuanGao/AI-Surveys" -> "NiuTrans/CNSurvey"
"KaiyuanGao/AI-Surveys" -> "loujie0822/Pre-trained-Models" ["e"=1]
"KaiyuanGao/AI-Surveys" -> "KaiyuanGao/Kick_AI_Interview"
"KaiyuanGao/AI-Surveys" -> "liushulinle/PLOME" ["e"=1]
"UniversalDependencies/UD_English-EWT" -> "UniversalDependencies/tools"
"UniversalDependencies/UD_English-EWT" -> "UniversalDependencies/UD_English-GUM"
"UniversalDependencies/UD_English-EWT" -> "decompositional-semantics-initiative/decomp"
"sefakilic/goodreads" -> "sosedoff/goodreads"
"sefakilic/goodreads" -> "mdzhang/goodreads-api-client-python"
"sefakilic/goodreads" -> "bdickason/node-goodreads"
"sefakilic/goodreads" -> "mon95/Goodreads-Quotes-Extractor"
"sefakilic/goodreads" -> "philippbayer/Goodreads_visualization"
"sefakilic/goodreads" -> "MengtingWan/goodreads"
"AI4Bharat/Indic-BERT-v1" -> "AI4Bharat/indicnlp_catalog"
"AI4Bharat/Indic-BERT-v1" -> "libindic/indic-trans"
"AI4Bharat/Indic-BERT-v1" -> "anoopkunchukuttan/indic_nlp_library"
"AI4Bharat/Indic-BERT-v1" -> "AI4Bharat/indicnlp_corpus"
"AI4Bharat/Indic-BERT-v1" -> "AI4Bharat/IndicNLP-Transliteration"
"AI4Bharat/Indic-BERT-v1" -> "goru001/inltk"
"AI4Bharat/Indic-BERT-v1" -> "AI4Bharat/indicTrans"
"AI4Bharat/Indic-BERT-v1" -> "AI4Bharat/indic-bart"
"AI4Bharat/Indic-BERT-v1" -> "AI4Bharat/IndicTrans2"
"AI4Bharat/Indic-BERT-v1" -> "google-research-datasets/dakshina"
"AI4Bharat/Indic-BERT-v1" -> "anoopkunchukuttan/indic_nlp_resources"
"AI4Bharat/Indic-BERT-v1" -> "prajdabre/yanmtt"
"AI4Bharat/Indic-BERT-v1" -> "SforAiDl/decepticonlp" ["e"=1]
"drdhaval2785/SanskritVerb" -> "drdhaval2785/SanskritSubanta"
"drdhaval2785/SanskritVerb" -> "drdhaval2785/prakriya"
"ashtadhyayi-com/data" -> "sanskrit/ashtadhyayi"
"ashtadhyayi-com/data" -> "samsaadhanii/scl"
"ashtadhyayi-com/data" -> "ambuda-org/ambuda"
"ashtadhyayi-com/data" -> "sanskrit/raw_etexts"
"ashtadhyayi-com/data" -> "sarit/SARIT-corpus"
"ashtadhyayi-com/data" -> "kmadathil/sanskrit_parser"
"ashtadhyayi-com/data" -> "ambuda-org/vidyut"
"xiaohan2012/twitter-sent-dnn" -> "uclatommy/tweetfeels"
"xiaohan2012/twitter-sent-dnn" -> "ravikiranj/twitter-sentiment-analyzer"
"xiaohan2012/twitter-sent-dnn" -> "cyhex/streamcrab"
"xiaohan2012/twitter-sent-dnn" -> "Poyuli/sentiment.analysis"
"xiaohan2012/twitter-sent-dnn" -> "pthrasher/sentiment"
"xiaohan2012/twitter-sent-dnn" -> "jasti/Stock-Predictor" ["e"=1]
"xiaohan2012/twitter-sent-dnn" -> "awni/semantic-rntn"
"xiaohan2012/twitter-sent-dnn" -> "danielegrattarola/twitter-sentiment-cnn"
"Zynj-git/AIDungeon" -> "Gnurro/AIDscripts"
"Zynj-git/AIDungeon" -> "gimzani/ai-dungeon-worldbuilder"
"Zynj-git/AIDungeon" -> "valahraban/AID-World-Info-research-sheet"
"simonepri/lm-scorer" -> "writerai/fitbert"
"aiplanethub/Deep_Learning_Bootcamp" -> "aiplanethub/Machine_Learning_Bootcamp"
"aiplanethub/Deep_Learning_Bootcamp" -> "aiplanethub/Data_Science_Bootcamp"
"aiplanethub/Deep_Learning_Bootcamp" -> "aiplanethub/nlp_essentials"
"aiplanethub/Data_Science_Bootcamp" -> "aiplanethub/Machine_Learning_Bootcamp"
"aiplanethub/Data_Science_Bootcamp" -> "aiplanethub/Deep_Learning_Bootcamp"
"aiplanethub/Data_Science_Bootcamp" -> "pycaret/pycaret-demo-dphi"
"aiplanethub/Data_Science_Bootcamp" -> "aiplanethub/Datasets"
"aiplanethub/Data_Science_Bootcamp" -> "aiplanethub/ML_Models"
"aiplanethub/Data_Science_Bootcamp" -> "aiplanethub/Datathons"
"mesnilgr/iclr15" -> "mesnilgr/nbsvm"
"mesnilgr/iclr15" -> "vinhkhuc/kaggle-sentiment-popcorn"
"melaniewalsh/Intro-Cultural-Analytics" -> "melaniewalsh/responsible-datasets-in-context"
"melaniewalsh/Intro-Cultural-Analytics" -> "ithaka/constellate-notebooks"
"melaniewalsh/Intro-Cultural-Analytics" -> "maria-antoniak/little-mallet-wrapper"
"melaniewalsh/Intro-Cultural-Analytics" -> "maria-antoniak/goodreads-scraper"
"melaniewalsh/Intro-Cultural-Analytics" -> "CLARIAH/awesome-humanities-ontologies" ["e"=1]
"melaniewalsh/Intro-Cultural-Analytics" -> "laurenfklein/emory-qtm340"
"melaniewalsh/Intro-Cultural-Analytics" -> "dbamman/book-nlp"
"melaniewalsh/Intro-Cultural-Analytics" -> "cu-nil/chnotes"
"melaniewalsh/Intro-Cultural-Analytics" -> "maehr/awesome-digital-history" ["e"=1]
"varunkumar-dev/TransformersDataAugmentation" -> "amazon-science/transformers-data-augmentation"
"varunkumar-dev/TransformersDataAugmentation" -> "1024er/cbert_aug"
"labteral/ernie" -> "catenae/catenae-kafka"
"facebookresearch/unlikelihood_training" -> "ari-holtzman/degen"
"facebookresearch/unlikelihood_training" -> "yxuansu/SimCTG"
"facebookresearch/unlikelihood_training" -> "facebookresearch/DisCo" ["e"=1]
"wendykan/DeepLearningMovies" -> "linanqiu/word2vec-sentiments"
"wendykan/DeepLearningMovies" -> "rafacarrascosa/samr"
"wendykan/DeepLearningMovies" -> "dhammack/Word2VecExample"
"wendykan/DeepLearningMovies" -> "jiegzhan/multi-class-text-classification-cnn-rnn" ["e"=1]
"wendykan/DeepLearningMovies" -> "attardi/deepnl"
"wendykan/DeepLearningMovies" -> "nitishsrivastava/deepnet" ["e"=1]
"wendykan/DeepLearningMovies" -> "dennybritz/chatbot-retrieval" ["e"=1]
"wendykan/DeepLearningMovies" -> "Theo-/sentiment-analysis-keras-conv"
"wendykan/DeepLearningMovies" -> "yoonkim/CNN_sentence" ["e"=1]
"wendykan/DeepLearningMovies" -> "Poyuli/sentiment.analysis"
"wendykan/DeepLearningMovies" -> "vivekn/sentiment"
"wendykan/DeepLearningMovies" -> "mkusner/wmd"
"wendykan/DeepLearningMovies" -> "Lab41/sunny-side-up"
"wendykan/DeepLearningMovies" -> "Yelp/dataset-examples" ["e"=1]
"wendykan/DeepLearningMovies" -> "dennybritz/rnn-tutorial-rnnlm" ["e"=1]
"maraoz/gpt-scrolls" -> "DNE-Digital/dolores"
"maraoz/gpt-scrolls" -> "semiosis/prompts"
"maraoz/gpt-scrolls" -> "minimaxir/gpt-3-experiments"
"NbAiLab/notram" -> "web64/norwegian-nlp-resources"
"NbAiLab/notram" -> "certainlyio/nordic_bert"
"NbAiLab/notram" -> "ltgoslo/NorBERT"
"NbAiLab/notram" -> "EuroEval/EuroEval"
"NbAiLab/notram" -> "ltgoslo/norec_fine"
"NbAiLab/notram" -> "KennethEnevoldsen/scandinavian-embedding-benchmark"
"hans/glove.py" -> "GradySimon/tensorflow-glove"
"hans/glove.py" -> "maciejkula/glove-python"
"hans/glove.py" -> "JonathanRaiman/glove"
"Huffon/sentence-similarity" -> "TharinduDR/Simple-Sentence-Similarity"
"deepset-ai/COVID-QA" -> "deepset-ai/FARM"
"deepset-ai/COVID-QA" -> "cdqa-suite/cdQA" ["e"=1]
"deepset-ai/COVID-QA" -> "elcronos/COVID-19"
"deepset-ai/COVID-QA" -> "paper2code/telegram-qa-with-arxiv-papers"
"deepset-ai/COVID-QA" -> "renatoviolin/Question-Answering-Albert-Electra"
"deepset-ai/COVID-QA" -> "gsarti/covid-papers-browser"
"deepset-ai/COVID-QA" -> "dmis-lab/bioasq-biobert" ["e"=1]
"2006pmach/awesome-active-learning" -> "yongjin-shin/awesome-active-learning"
"dair-ai/nlp_fundamentals" -> "dair-ai/nlp_newsletter"
"dair-ai/nlp_fundamentals" -> "dair-ai/ml-nlp-paper-discussions"
"dair-ai/nlp_fundamentals" -> "dair-ai/nlp_overview"
"dair-ai/nlp_fundamentals" -> "dair-ai/pytorch_notebooks"
"dair-ai/nlp_fundamentals" -> "dair-ai/nlp_paper_summaries"
"dair-ai/nlp_fundamentals" -> "dair-ai/d2l-study-group"
"dair-ai/nlp_fundamentals" -> "dair-ai/keep-learning-ml"
"dair-ai/nlp_fundamentals" -> "dair-ai/notebooks"
"dair-ai/nlp_fundamentals" -> "dair-ai/awesome-research-proposals-guide"
"dair-ai/nlp_fundamentals" -> "dair-ai/deep_learning_notations"
"dair-ai/nlp_fundamentals" -> "dair-ai/awesome-ML-projects-guide"
"dair-ai/nlp_fundamentals" -> "Machine-Learning-Tokyo/Math_resources" ["e"=1]
"JappaB/Active_Learning_Object_Detection" -> "CtfChan/pytorch_ssd_active_learning"
"JappaB/Active_Learning_Object_Detection" -> "lolipopshock/Detectron2_AL"
"LinyangLee/BERT-Attack" -> "jind11/TextFooler"
"LinyangLee/BERT-Attack" -> "facebookresearch/text-adversarial-attack"
"LinyangLee/BERT-Attack" -> "adversarial-for-goodness/Co-Attack" ["e"=1]
"LinyangLee/BERT-Attack" -> "JHL-HUST/PWWS"
"LinyangLee/BERT-Attack" -> "thunlp/SememePSO-Attack"
"LinyangLee/BERT-Attack" -> "zhuchen03/FreeLB"
"LinyangLee/BERT-Attack" -> "thunlp/OpenAttack"
"elcronos/COVID-19" -> "deepset-ai/COVID-QA"
"elcronos/COVID-19" -> "FightCOVID19/webapp"
"dair-ai/nlp_with_tensorflow" -> "dair-ai/deep_learning_notations"
"latitudegames/Scripting" -> "Zynj-git/AIDungeon"
"latitudegames/Scripting" -> "valahraban/AID-World-Info-research-sheet"
"biplab-iitb/practNLPTools" -> "mfaruqui/non-distributional"
"affjljoo3581/canrevan" -> "affjljoo3581/Expanda"
"affjljoo3581/canrevan" -> "ds-wook/predict-delinquency"
"affjljoo3581/canrevan" -> "ds-wook/BOJ"
"awni/semantic-rntn" -> "fanfannothing/RNTN"
"awni/semantic-rntn" -> "rksltnl/RNTN"
"ari-holtzman/degen" -> "facebookresearch/unlikelihood_training"
"NLPInBLCU/BiaffineDependencyParsing" -> "LiangsLi/LSTM_Biaffine_Dependency_Parser_PyTorch"
"NLPInBLCU/BiaffineDependencyParsing" -> "wangxinyu0922/Second_Order_SDP"
"raghavbali/appliedml_workshop_dhs_av_2019" -> "sahil711/DHS-19"
"raghavbali/appliedml_workshop_dhs_av_2019" -> "nikhilmishradevelop/MachineHack-Chartbursters" ["e"=1]
"lolipopshock/Detectron2_AL" -> "JappaB/Active_Learning_Object_Detection"
"vector-ai/vectorai" -> "RelevanceAI/vectorhub"
"vector-ai/vectorai" -> "MiuLab/DuaLUG"
"vector-ai/vectorai" -> "sibbsnb/jina_hack_2020_search_stories"
"SudalaiRajkumar/DHS2019_HackSession_NLP" -> "dipanjanS/deep_transfer_learning_nlp_dhs2019"
"SudalaiRajkumar/DHS2019_HackSession_NLP" -> "sahil711/DHS-19"
"SudalaiRajkumar/DHS2019_HackSession_NLP" -> "raghavbali/appliedml_workshop_dhs_av_2019"
"renatoviolin/Multiple-Choice-Question-Generation-T5-and-Text2Text" -> "KristiyanVachev/Leaf-Question-Generation" ["e"=1]
"xiaoiker/NAS-With-Code" -> "NiuTrans/NASPapers"
"xiaoiker/NAS-With-Code" -> "automl/NASLib" ["e"=1]
"neulab/nn4nlp-concepts" -> "neulab/Text-Summarization-Papers" ["e"=1]
"neulab/nn4nlp-concepts" -> "neubig/nn4nlp-code"
"neulab/nn4nlp-concepts" -> "pfliu-nlp/Named-Entity-Recognition-NER-Papers" ["e"=1]
"neulab/nn4nlp-concepts" -> "roomylee/EMNLP-2019-Papers" ["e"=1]
"neulab/nn4nlp-concepts" -> "allenai/acl2018-semantic-parsing-tutorial" ["e"=1]
"neulab/nn4nlp-concepts" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"salesforce/GeDi" -> "alisawuffles/DExperts"
"salesforce/GeDi" -> "yangkevin2/naacl-2021-fudge-controlled-generation"
"salesforce/GeDi" -> "alvinchangw/COCON_ICLR2021"
"salesforce/GeDi" -> "uber-research/PPLM"
"alexandra-chron/relm_unmt" -> "alexandra-chron/lexical_xlm_relm"
"alexandra-chron/relm_unmt" -> "alexandra-chron/hierarchical-domain-adaptation"
"zhuchen03/FreeLB" -> "AI-secure/InfoBERT"
"zhuchen03/FreeLB" -> "geyingli/unif"
"zhuchen03/FreeLB" -> "PierreGtch/AMAL-project"
"zhuchen03/FreeLB" -> "jind11/TextFooler"
"zhuchen03/FreeLB" -> "LinyangLee/BERT-Attack"
"haven-ai/haven-ai" -> "ElementAI/haven_old"
"haven-ai/haven-ai" -> "IssamLaradji/sls"
"iAyon/DataHackSummit2019" -> "SudalaiRajkumar/DHS2019_HackSession_NLP"
"iAyon/DataHackSummit2019" -> "raghavbali/appliedml_workshop_dhs_av_2019"
"iAyon/DataHackSummit2019" -> "sahil711/DHS-19"
"nihalsid/ViewAL" -> "ArantxaCasanova/ralis"
"nihalsid/ViewAL" -> "wannature/BoostMIS"
"itkach/aard2-web" -> "itkach/mw2slob"
"sunyilgdx/SIFRank" -> "LinhanZ/mderank"
"sunyilgdx/SIFRank" -> "MySong7NLPer/HyperMatch"
"sunyilgdx/SIFRank" -> "hd10-iupui/AttentionRank"
"sunyilgdx/SIFRank" -> "boudinfl/ake-datasets"
"sunyilgdx/SIFRank" -> "memray/OpenNMT-kpg-release"
"thadunge2/AIDungeon" -> "cloveranon/Clover-Edition"
"thadunge2/AIDungeon" -> "VBPXKSMI/Open-CYOAI-Project"
"bhattbhavesh91/gpt-3-simple-tutorial" -> "dair-ai/notebooks"
"itkach/mw2slob" -> "itkach/mwscrape"
"dipanjanS/nlp_workshop_odsc_europe20" -> "dipanjanS/nlp_essentials"
"omarsar/pytorch_notebooks" -> "omarsar/nlp_pytorch_tensorflow_notebooks"
"mourga/variational-lstm" -> "mourga/transformer-uncertainty"
"mourga/variational-lstm" -> "mourga/affective-attention"
"mourga/variational-lstm" -> "mourga/awd-lstm-lm"
"mourga/variational-lstm" -> "mourga/contrastive-active-learning"
"mourga/variational-lstm" -> "alexandra-chron/ntua-slp-wassa-iest2018"
"oliverguhr/german-sentiment" -> "oliverguhr/german-sentiment-lib"
"pradeeppathak9/ml-hackathons" -> "sahil711/DHS-19"
"sahil711/DHS-19" -> "raghavbali/appliedml_workshop_dhs_av_2019"
"renatoviolin/Question-Answering-Albert-Electra" -> "renatoviolin/Bart_T5-summarization"
"renatoviolin/Question-Answering-Albert-Electra" -> "renatoviolin/Semantic-Search"
"dbmdz/berts" -> "stefan-it/europeana-bert"
"dbmdz/berts" -> "stefan-it/german-gpt2"
"dbmdz/berts" -> "tsproisl/SoMaJo"
"dbmdz/berts" -> "t-systems-on-site-services-gmbh/german-wikipedia-text-corpus"
"kenchan0226/dual_view_review_sum" -> "wxjiao/WMT2022-Large-Scale-African"
"HLasse/TextDescriptives" -> "centre-for-humanities-computing/DaCy"
"HLasse/TextDescriptives" -> "KennethEnevoldsen/augmenty"
"HLasse/TextDescriptives" -> "jenojp/negspacy" ["e"=1]
"HLasse/TextDescriptives" -> "KennethEnevoldsen/scandinavian-embedding-benchmark"
"HLasse/TextDescriptives" -> "davidberenstein1957/crosslingual-coreference"
"HLasse/TextDescriptives" -> "brucewlee/lingfeat" ["e"=1]
"HLasse/TextDescriptives" -> "mmxgn/spacy-clausie" ["e"=1]
"HLasse/TextDescriptives" -> "kevinlu1248/pyate"
"HLasse/TextDescriptives" -> "danish-foundation-models/site"
"ytsvetko/qvec" -> "mfaruqui/non-distributional"
"renatoviolin/Bart_T5-summarization" -> "renatoviolin/Question-Answering-Albert-Electra"
"renatoviolin/Bart_T5-summarization" -> "renatoviolin/Semantic-Search"
"robinjia/certified-word-sub" -> "shizhouxing/Robustness-Verification-for-Transformers"
"robinjia/certified-word-sub" -> "lushleaf/Structure-free-certified-NLP"
"robinjia/certified-word-sub" -> "dongxinshuai/ASCC"
"robinjia/certified-word-sub" -> "dugu9sword/dne"
"robinjia/certified-word-sub" -> "RockyLzy/TextDefender"
"linkedin/gdmix" -> "linkedin/lambda-learner"
"monologg/GoEmotions-pytorch" -> "monologg/GoEmotions-Korean"
"dipanjanS/nlp_workshop_odsc19" -> "dipanjanS/explainable_artificial_intelligence"
"dipanjanS/nlp_workshop_odsc19" -> "dipanjanS/nlp_workshop_iisc19"
"dipanjanS/nlp_workshop_odsc19" -> "dipanjanS/deep_transfer_learning_nlp_dhs2019"
"dipanjanS/deep_transfer_learning_nlp_dhs2019" -> "SudalaiRajkumar/DHS2019_HackSession_NLP"
"dipanjanS/deep_transfer_learning_nlp_dhs2019" -> "raghavbali/appliedml_workshop_dhs_av_2019"
"dipanjanS/deep_transfer_learning_nlp_dhs2019" -> "dipanjanS/nlp_workshop_odsc19"
"dipanjanS/deep_transfer_learning_nlp_dhs2019" -> "dipanjanS/transformers_nlp_essentials"
"dipanjanS/deep_transfer_learning_nlp_dhs2019" -> "sahil711/DHS-19"
"dipanjanS/deep_transfer_learning_nlp_dhs2019" -> "dipanjanS/nlp_workshop_iisc19"
"anoopkunchukuttan/crowd-indic-transliteration-data" -> "chsasank/indic-transliteration"
"ArantxaCasanova/ralis" -> "nihalsid/ViewAL"
"ArantxaCasanova/ralis" -> "ksenia-konyushkova/LAL-RL"
"NiuTrans/NiuTrans.NMT" -> "NiuTrans/LanguageCodes"
"NiuTrans/NiuTrans.NMT" -> "NiuTrans/NiuTrans.SMT"
"NiuTrans/NiuTrans.NMT" -> "NiuTrans/MTVenues"
"NiuTrans/NiuTrans.NMT" -> "NiuTrans/MT-paper-lists"
"NiuTrans/NiuTrans.NMT" -> "NiuTrans/NASPapers"
"HIT-ICES/AL-NER" -> "bqw18744018044/Active-Learning-for-NER"
"dipanjanS/nlp_essentials" -> "dipanjanS/transformers_nlp_essentials"
"dipanjanS/nlp_essentials" -> "dipanjanS/art_of_data_visualization"
"dipanjanS/nlp_essentials" -> "dipanjanS/data_science_for_all"
"dipanjanS/nlp_essentials" -> "dipanjanS/nlp_crash_course_plugin20"
"dipanjanS/nlp_essentials" -> "dipanjanS/deep_transfer_learning_nlp_dhs2019"
"dipanjanS/nlp_essentials" -> "dipanjanS/convolutional_neural_networks_essentials"
"dipanjanS/nlp_essentials" -> "dipanjanS/practical_nlp_workshop_gids20"
"dipanjanS/nlp_essentials" -> "dipanjanS/nlp_workshop_odsc_europe20"
"dipanjanS/nlp_essentials" -> "aiplanethub/nlp_essentials"
"memray/OpenNMT-kpg-release" -> "kenchan0226/keyphrase-generation-rl"
"memray/OpenNMT-kpg-release" -> "memray/seq2seq-keyphrase-pytorch"
"memray/OpenNMT-kpg-release" -> "jiacheng-ye/kg_one2set"
"memray/OpenNMT-kpg-release" -> "memray/seq2seq-keyphrase"
"memray/OpenNMT-kpg-release" -> "LIAAD/KeywordExtractor-Datasets"
"memray/OpenNMT-kpg-release" -> "boudinfl/ake-datasets"
"memray/OpenNMT-kpg-release" -> "Chen-Wang-CUHK/ExHiRD-DKG"
"memray/OpenNMT-kpg-release" -> "supercoderhawk/deep-keyphrase"
"memray/OpenNMT-kpg-release" -> "thunlp/BERT-KPE"
"memray/OpenNMT-kpg-release" -> "pranav-ust/BERT-keyphrase-extraction"
"memray/OpenNMT-kpg-release" -> "avinsit123/keyphrase-gan"
"memray/OpenNMT-kpg-release" -> "sunyilgdx/SIFRank"
"memray/OpenNMT-kpg-release" -> "LinhanZ/mderank"
"memray/OpenNMT-kpg-release" -> "HqWu-HITCS/Awesome-Keyphrase-Prediction"
"memray/OpenNMT-kpg-release" -> "yuewang-cuhk/TAKG"
"thunlp/SememePSO-Attack" -> "RishabhMaheshwary/hard-label-attack"
"thunlp/SememePSO-Attack" -> "nesl/nlp_adversarial_examples"
"thunlp/SememePSO-Attack" -> "JHL-HUST/PWWS"
"doccano/doccano-transformer" -> "doccano/doccano-client"
"rafacarrascosa/samr" -> "yehiahesham/Movie_Sentiment_Analysis"
"rafacarrascosa/samr" -> "vsl9/Sentiment-Analysis-with-Convolutional-Networks"
"icip-cas/EntityMatcher" -> "ArjitJ/DIAL"
"bdickason/node-goodreads" -> "baahrens/goodreads-api-node"
"AntNLP/gnn-dep-parsing" -> "wangxinyu0922/Second_Order_SDP"
"tag-and-generate/tagger-generator" -> "tag-and-generate/politeness-dataset"
"hrashkin/plotmachines" -> "PlusLabNLP/story-gen-BART"
"hrashkin/plotmachines" -> "thu-coai/OpenMEVA"
"hrashkin/plotmachines" -> "tanyuqian/progressive-generation"
"BahramJannesar/GoodreadsBookDataset" -> "BahramJannesar/ArchdailyProjectDownloader"
"erodola/DLAI-s2-2020" -> "Riccorl/transformers-embedder"
"sanskrit/raw_etexts" -> "sanskrit-kosha/kosha"
"sanskrit/raw_etexts" -> "sarit/SARIT-corpus"
"sanskrit/raw_etexts" -> "sanskrit-lexicon/csl-orig"
"sanskrit/raw_etexts" -> "ashtadhyayi-com/data"
"swyxio/gpt3-list" -> "mikhail-bot/awesome-gpt3"
"dipanjanS/nlp_crash_course_plugin20" -> "equester/mlops-plugin_2020"
"dipanjanS/nlp_crash_course_plugin20" -> "dipanjanS/transformers_nlp_essentials"
"yongjin-shin/awesome-active-learning" -> "2006pmach/awesome-active-learning"
"yongjin-shin/awesome-active-learning" -> "JordanAsh/badge"
"yongjin-shin/awesome-active-learning" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"yongjin-shin/awesome-active-learning" -> "decile-team/distil"
"yongjin-shin/awesome-active-learning" -> "acl21/deep-active-learning-pytorch"
"yongjin-shin/awesome-active-learning" -> "ozansener/active_learning_coreset"
"emorynlp/personality-detection" -> "djz233/D-DGCN"
"BahramJannesar/DiamondsMachineLearning" -> "BahramJannesar/ArchdailyProjectDownloader"
"akanyaani/Illustrated_GPT2_With_Code" -> "akanyaani/Phrase_Extraction_Bi-LSTM"
"akanyaani/ranknet-tensorflow2.0" -> "akanyaani/Illustrated_GPT2_With_Code"
"akanyaani/ranknet-tensorflow2.0" -> "akanyaani/Phrase_Extraction_Bi-LSTM"
"tag-and-generate/politeness-dataset" -> "tag-and-generate/tagger-generator"
"tag-and-generate/politeness-dataset" -> "suzgunmirac/prompt-and-rerank"
"Chen-Wang-CUHK/ExHiRD-DKG" -> "kenchan0226/dual_view_review_sum"
"Chen-Wang-CUHK/ExHiRD-DKG" -> "avinsit123/keyphrase-gan"
"Chen-Wang-CUHK/ExHiRD-DKG" -> "Chen-Wang-CUHK/KG-KE-KR-M"
"Chen-Wang-CUHK/ExHiRD-DKG" -> "kenchan0226/keyphrase-generation-rl"
"huanghuidmml/tfbert" -> "geyingli/unif"
"LouChao98/neural_based_dmv" -> "sustcsonglin/second-order-neural-dmv"
"LouChao98/neural_based_dmv" -> "WinnieHAN/mndmv"
"AngusMonroe/Active-NER" -> "bqw18744018044/Active-Learning-for-NER"
"abisee/story-generation-eval" -> "lancopku/Skeleton-Based-Generation-Model"
"lushleaf/Structure-free-certified-NLP" -> "robinjia/certified-word-sub"
"lushleaf/Structure-free-certified-NLP" -> "zjiehang/RanMASK"
"ds-wook/BOJ" -> "ds-wook/Python-Machine-Learning"
"ds-wook/BOJ" -> "ds-wook/final-industry-university"
"ds-wook/BOJ" -> "ds-wook/DsProject"
"ds-wook/BOJ" -> "ds-wook/humain-computing-experiment"
"ds-wook/BOJ" -> "ds-wook/ml-project"
"ds-wook/BOJ" -> "ds-wook/ds-wook"
"stefan-it/europeana-bert" -> "dbmdz/historic-ner"
"yzhangcs/crfpar" -> "KhalilMrini/LAL-Parser"
"yzhangcs/crfpar" -> "sustcsonglin/second-order-neural-dmv"
"dipanjanS/nlp_workshop_iisc19" -> "dipanjanS/explainable_artificial_intelligence"
"sarit/SARIT-corpus" -> "sanskrit/raw_etexts"
"sarit/SARIT-corpus" -> "wujastyk/GRETIL-mirror"
"scify/JedAI-Spark" -> "gpapadis/ContinuousFilteringBenchmark"
"scify/JedAI-Spark" -> "AI-team-UoA/JedAI-WebApp"
"bqw18744018044/Active-Learning-for-NER" -> "HIT-ICES/AL-NER"
"bqw18744018044/Active-Learning-for-NER" -> "AngusMonroe/Active-NER"
"dipanjanS/explainable_artificial_intelligence" -> "dipanjanS/nlp_workshop_iisc19"
"dipanjanS/explainable_artificial_intelligence" -> "dipanjanS/nlp_workshop_odsc19"
"mchesterkadwell/intro-to-text-mining-with-python-2020" -> "mchesterkadwell/intro-to-text-mining-with-python"
"BahramJannesar/ArchdailyProjectDownloader" -> "BahramJannesar/DiamondsMachineLearning"
"leondz/dagw_page" -> "martincjespersen/DaAnonymization"
"mourga/awd-lstm-lm" -> "mourga/transformer-uncertainty"
"mourga/awd-lstm-lm" -> "mourga/affective-attention"
"mourga/awd-lstm-lm" -> "mourga/variational-lstm"
"mourga/awd-lstm-lm" -> "alexandra-chron/ntua-slp-wassa-iest2018"
"shizhouxing/Robustness-Verification-for-Transformers" -> "robinjia/certified-word-sub"
"affjljoo3581/Expanda" -> "ds-wook/BOJ"
"affjljoo3581/Expanda" -> "ds-wook/ds-wook"
"affjljoo3581/Expanda" -> "ds-wook/ml-project"
"affjljoo3581/Expanda" -> "affjljoo3581/Differentiable-RandAugment"
"affjljoo3581/Expanda" -> "ds-wook/predict-delinquency"
"dugu9sword/dne" -> "RockyLzy/TextDefender"
"ds-wook/Python-Machine-Learning" -> "ds-wook/ds-wook"
"ds-wook/Python-Machine-Learning" -> "ds-wook/BOJ"
"ds-wook/ds-wook" -> "ds-wook/humain-computing-experiment"
"ds-wook/DsProject" -> "ds-wook/humain-computing-experiment"
"ds-wook/DsProject" -> "ds-wook/final-industry-university"
"ds-wook/DsProject" -> "ds-wook/BOJ"
"ds-wook/DsProject" -> "ds-wook/Python-Machine-Learning"
"ds-wook/DsProject" -> "ds-wook/ds-wook"
"MaartenGr/KeyBERT" -> "MaartenGr/BERTopic"
"MaartenGr/KeyBERT" -> "LIAAD/yake"
"MaartenGr/KeyBERT" -> "boudinfl/pke"
"MaartenGr/KeyBERT" -> "ddangelov/Top2Vec"
"MaartenGr/KeyBERT" -> "UKPLab/sentence-transformers"
"MaartenGr/KeyBERT" -> "huggingface/setfit"
"MaartenGr/KeyBERT" -> "makcedward/nlpaug"
"MaartenGr/KeyBERT" -> "MaartenGr/PolyFuzz"
"MaartenGr/KeyBERT" -> "MilaNLProc/contextualized-topic-models"
"MaartenGr/KeyBERT" -> "flairNLP/flair"
"MaartenGr/KeyBERT" -> "thunlp/BERT-KPE"
"MaartenGr/KeyBERT" -> "ThilinaRajapakse/simpletransformers"
"MaartenGr/KeyBERT" -> "argilla-io/argilla"
"MaartenGr/KeyBERT" -> "princeton-nlp/SimCSE" ["e"=1]
"MaartenGr/KeyBERT" -> "stanford-futuredata/ColBERT" ["e"=1]
"ssut/py-googletrans" -> "matheuss/google-translate-api"
"ssut/py-googletrans" -> "terryyin/translate-python"
"ssut/py-googletrans" -> "lushan88a/google_trans_new"
"ssut/py-googletrans" -> "nidhaloff/deep-translator"
"ssut/py-googletrans" -> "UlionTse/translators" ["e"=1]
"ssut/py-googletrans" -> "Mimino666/langdetect" ["e"=1]
"ssut/py-googletrans" -> "Animenosekai/translate"
"ssut/py-googletrans" -> "pndurette/gTTS" ["e"=1]
"ssut/py-googletrans" -> "OpenNMT/OpenNMT-py"
"ssut/py-googletrans" -> "argosopentech/argos-translate"
"ssut/py-googletrans" -> "allenai/allennlp"
"ssut/py-googletrans" -> "UKPLab/sentence-transformers"
"ssut/py-googletrans" -> "saffsd/langid.py" ["e"=1]
"ssut/py-googletrans" -> "Uberi/speech_recognition" ["e"=1]
"ssut/py-googletrans" -> "stanfordnlp/stanza"
"argilla-io/argilla" -> "argilla-io/distilabel" ["e"=1]
"argilla-io/argilla" -> "huggingface/setfit"
"argilla-io/argilla" -> "NorskRegnesentral/skweak"
"argilla-io/argilla" -> "MaartenGr/BERTopic"
"argilla-io/argilla" -> "makcedward/nlpaug"
"argilla-io/argilla" -> "deepset-ai/haystack" ["e"=1]
"argilla-io/argilla" -> "neuml/txtai" ["e"=1]
"argilla-io/argilla" -> "deepchecks/deepchecks" ["e"=1]
"argilla-io/argilla" -> "Unstructured-IO/unstructured" ["e"=1]
"argilla-io/argilla" -> "snorkel-team/snorkel"
"argilla-io/argilla" -> "huggingface/text-generation-inference" ["e"=1]
"argilla-io/argilla" -> "guardrails-ai/guardrails" ["e"=1]
"argilla-io/argilla" -> "AnswerDotAI/RAGatouille" ["e"=1]
"argilla-io/argilla" -> "huggingface/alignment-handbook" ["e"=1]
"argilla-io/argilla" -> "webis-de/small-text"
"cgpotts/cs224u" -> "stanfordnlp/cs224n-winter17-notes"
"cgpotts/cs224u" -> "jacobeisenstein/gt-nlp-class"
"cgpotts/cs224u" -> "delip/PyTorchNLPBook"
"cgpotts/cs224u" -> "fastai/course-nlp"
"cgpotts/cs224u" -> "wcmac/sippycup" ["e"=1]
"cgpotts/cs224u" -> "zhanlaoban/CS224N-Stanford-Winter-2019" ["e"=1]
"cgpotts/cs224u" -> "neubig/nn4nlp-code"
"cgpotts/cs224u" -> "ZacBi/CS224n-2019-solutions" ["e"=1]
"cgpotts/cs224u" -> "makcedward/nlpaug"
"cgpotts/cs224u" -> "thunlp/ERNIE" ["e"=1]
"cgpotts/cs224u" -> "marcotcr/checklist"
"cgpotts/cs224u" -> "microsoft/nlp-recipes"
"cgpotts/cs224u" -> "allenai/allennlp"
"cgpotts/cs224u" -> "zihangdai/xlnet"
"cgpotts/cs224u" -> "nyu-mll/jiant"
"clab/dynet" -> "clab/dynet_tutorial_examples"
"clab/dynet" -> "tensorflow/fold" ["e"=1]
"clab/dynet" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"clab/dynet" -> "facebookresearch/fairseq-lua"
"clab/dynet" -> "google/seq2seq"
"clab/dynet" -> "allenai/allennlp"
"clab/dynet" -> "OpenNMT/OpenNMT-py"
"clab/dynet" -> "ryankiros/skip-thoughts" ["e"=1]
"clab/dynet" -> "blei-lab/edward" ["e"=1]
"clab/dynet" -> "kjw0612/awesome-rnn" ["e"=1]
"clab/dynet" -> "harvardnlp/seq2seq-attn" ["e"=1]
"clab/dynet" -> "facebookarchive/MemNN" ["e"=1]
"clab/dynet" -> "rsennrich/subword-nmt" ["e"=1]
"clab/dynet" -> "chainer/chainer" ["e"=1]
"clab/dynet" -> "pytorch/text"
"DevilExileSu/transformer" -> "taoztw/Transformer"
"DevilExileSu/transformer" -> "DevilExileSu/pytorch-template"
"valahraban/AID-World-Info-research-sheet" -> "Gnurro/AIDscripts"
"valahraban/AID-World-Info-research-sheet" -> "Zynj-git/AIDungeon"
"valahraban/AID-World-Info-research-sheet" -> "thaalesalves/ai-games-research"
"valahraban/AID-World-Info-research-sheet" -> "l-io-n/AI-Resources"
"valahraban/AID-World-Info-research-sheet" -> "gimzani/ai-dungeon-worldbuilder"
"bmabey/pyLDAvis" -> "cemoody/lda2vec"
"bmabey/pyLDAvis" -> "cpsievert/LDAvis" ["e"=1]
"bmabey/pyLDAvis" -> "JasonKessler/scattertext"
"bmabey/pyLDAvis" -> "lda-project/lda" ["e"=1]
"bmabey/pyLDAvis" -> "ddangelov/Top2Vec"
"bmabey/pyLDAvis" -> "TeamHG-Memex/eli5" ["e"=1]
"bmabey/pyLDAvis" -> "chartbeat-labs/textacy"
"bmabey/pyLDAvis" -> "piskvorky/gensim"
"bmabey/pyLDAvis" -> "MaartenGr/BERTopic"
"bmabey/pyLDAvis" -> "bigartm/bigartm" ["e"=1]
"bmabey/pyLDAvis" -> "DerwenAI/pytextrank"
"bmabey/pyLDAvis" -> "DistrictDataLabs/yellowbrick" ["e"=1]
"bmabey/pyLDAvis" -> "blei-lab/edward" ["e"=1]
"bmabey/pyLDAvis" -> "vi3k6i5/GuidedLDA" ["e"=1]
"bmabey/pyLDAvis" -> "shuyo/iir" ["e"=1]
"Lab41/sunny-side-up" -> "zhangxiangxiao/Crepe" ["e"=1]
"Lab41/sunny-side-up" -> "attardi/deepnl"
"Lab41/sunny-side-up" -> "xiamx/awesome-sentiment-analysis"
"Lab41/sunny-side-up" -> "linanqiu/word2vec-sentiments"
"Lab41/sunny-side-up" -> "Lab41/hermes"
"Lab41/sunny-side-up" -> "thunlp/NSC" ["e"=1]
"taranjeet/hindi-tokenizer" -> "cfiltnlp/pyiwn"
"narVidhai/tamil-nlp-catalog" -> "INFITTOfficial/awesome-tamil"
"narVidhai/tamil-nlp-catalog" -> "goru001/nlp-for-tamil"
"attardi/wikiextractor" -> "facebookresearch/DrQA" ["e"=1]
"attardi/wikiextractor" -> "facebookresearch/XLM"
"attardi/wikiextractor" -> "allenai/allennlp"
"attardi/wikiextractor" -> "google/sentencepiece"
"attardi/wikiextractor" -> "rsennrich/subword-nmt" ["e"=1]
"attardi/wikiextractor" -> "facebookresearch/DPR" ["e"=1]
"attardi/wikiextractor" -> "facebookresearch/MUSE"
"attardi/wikiextractor" -> "zihangdai/xlnet"
"attardi/wikiextractor" -> "OpenNMT/OpenNMT-py"
"attardi/wikiextractor" -> "facebookresearch/SentEval"
"attardi/wikiextractor" -> "facebookresearch/LASER"
"attardi/wikiextractor" -> "huggingface/neuralcoref"
"attardi/wikiextractor" -> "kpu/kenlm" ["e"=1]
"attardi/wikiextractor" -> "facebookresearch/InferSent"
"attardi/wikiextractor" -> "jina-ai/clip-as-service"
"commonsense/conceptnet-numberbatch" -> "commonsense/conceptnet5"
"commonsense/conceptnet-numberbatch" -> "mfaruqui/retrofitting"
"commonsense/conceptnet-numberbatch" -> "j-min/tf_tutorial_plus" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "ryankiros/skip-thoughts" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "Currie32/Text-Summarization-with-Amazon-Reviews" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "facebookresearch/InferSent"
"commonsense/conceptnet-numberbatch" -> "facebookresearch/SentEval"
"commonsense/conceptnet-numberbatch" -> "atcbosselut/comet-commonsense" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "google-deepmind/rc-data" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "openai/generating-reviews-discovering-sentiment"
"commonsense/conceptnet-numberbatch" -> "brmson/dataset-sts"
"commonsense/conceptnet-numberbatch" -> "idio/wiki2vec" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "Franck-Dernoncourt/NeuroNER" ["e"=1]
"commonsense/conceptnet-numberbatch" -> "huggingface/neuralcoref"
"commonsense/conceptnet-numberbatch" -> "codekansas/keras-language-modeling" ["e"=1]
"jalammar/ecco" -> "PAIR-code/lit"
"jalammar/ecco" -> "cdpierse/transformers-interpret"
"jalammar/ecco" -> "jessevig/bertviz"
"jalammar/ecco" -> "NorskRegnesentral/skweak"
"jalammar/ecco" -> "marcotcr/checklist"
"jalammar/ecco" -> "GEM-benchmark/NL-Augmenter"
"jalammar/ecco" -> "ivan-bilan/The-NLP-Pandect"
"jalammar/ecco" -> "QData/TextAttack"
"jalammar/ecco" -> "ddangelov/Top2Vec"
"jalammar/ecco" -> "makcedward/nlpaug"
"jalammar/ecco" -> "ELS-RD/transformer-deploy" ["e"=1]
"jalammar/ecco" -> "argilla-io/argilla"
"jalammar/ecco" -> "inseq-team/inseq" ["e"=1]
"jalammar/ecco" -> "deepset-ai/FARM"
"jalammar/ecco" -> "huggingface/setfit"
"dair-ai/awesome-research-proposals-guide" -> "dair-ai/notebooks"
"dair-ai/awesome-research-proposals-guide" -> "dair-ai/awesome-ML-projects-guide"
"dair-ai/awesome-research-proposals-guide" -> "stefantruehl/research-proposal-template"
"dair-ai/awesome-research-proposals-guide" -> "dair-ai/deep_learning_notations"
"dair-ai/awesome-research-proposals-guide" -> "dair-ai/nlp_fundamentals"
"deborausujono/word2vecpy" -> "tscheepers/word2vec"
"deborausujono/word2vecpy" -> "klb3713/word2vec"
"deborausujono/word2vecpy" -> "fanglanting/skip-gram-pytorch"
"deborausujono/word2vecpy" -> "enewe101/word2vec"
"deborausujono/word2vecpy" -> "dalinvip/Word_Similarity_and_Word_Analogy"
"deborausujono/word2vecpy" -> "hans/glove.py"
"deborausujono/word2vecpy" -> "dhammack/Word2VecExample"
"deborausujono/word2vecpy" -> "tankle/word2vec"
"deborausujono/word2vecpy" -> "weberrr/pytorch_word2vec"
"deborausujono/word2vecpy" -> "Adoni/word2vec_pytorch"
"deborausujono/word2vecpy" -> "theeluwin/pytorch-sgns"
"OthersideAI/chronology" -> "KellanM/OpenAI-Api-Unreal" ["e"=1]
"OthersideAI/chronology" -> "hexthedev/OpenAi-Api-Unity" ["e"=1]
"OthersideAI/chronology" -> "Shubhamsaboo/kairos_gpt3"
"OthersideAI/chronology" -> "OthersideAI/chronology-ui"
"OthersideAI/chronology" -> "ben-aaron188/rgpt3" ["e"=1]
"OthersideAI/chronology" -> "dylanshine/openai-kit" ["e"=1]
"OthersideAI/chronology" -> "openai/openai-quickstart-python" ["e"=1]
"OthersideAI/chronology" -> "shreyashankar/gpt3-sandbox"
"OthersideAI/chronology" -> "CrazyPython/gpt3-cli"
"OthersideAI/chronology" -> "tectalichq/public-openai-client-js" ["e"=1]
"OthersideAI/chronology" -> "njerschow/openai-api"
"OthersideAI/chronology" -> "sferik/openai-ruby"
"OthersideAI/chronology" -> "minimaxir/gpt-3-experiments"
"JieyuZ2/Awesome-Weak-Supervision" -> "JieyuZ2/wrench"
"JieyuZ2/Awesome-Weak-Supervision" -> "autonlab/weasel"
"JieyuZ2/Awesome-Weak-Supervision" -> "JieyuZ2/TaskMeAnything"
"JieyuZ2/Awesome-Weak-Supervision" -> "JieyuZ2/EcoAssistant"
"JieyuZ2/Awesome-Weak-Supervision" -> "benbo/interactive-weak-supervision"
"JieyuZ2/Awesome-Weak-Supervision" -> "RAIVNLab/sugar-crepe"
"seatgeek/thefuzz" -> "seatgeek/fuzzywuzzy"
"seatgeek/thefuzz" -> "rapidfuzz/RapidFuzz"
"seatgeek/thefuzz" -> "unionai-oss/pandera" ["e"=1]
"seatgeek/thefuzz" -> "ztane/python-Levenshtein"
"seatgeek/thefuzz" -> "MaartenGr/KeyBERT"
"seatgeek/thefuzz" -> "dedupeio/dedupe"
"seatgeek/thefuzz" -> "jamesturk/jellyfish"
"seatgeek/thefuzz" -> "adbar/trafilatura" ["e"=1]
"seatgeek/thefuzz" -> "MaartenGr/BERTopic"
"seatgeek/thefuzz" -> "nalepae/pandarallel" ["e"=1]
"seatgeek/thefuzz" -> "jd/tenacity" ["e"=1]
"seatgeek/thefuzz" -> "MaartenGr/PolyFuzz"
"seatgeek/thefuzz" -> "ResidentMario/missingno" ["e"=1]
"seatgeek/thefuzz" -> "BeastByteAI/scikit-llm" ["e"=1]
"seatgeek/thefuzz" -> "pdfminer/pdfminer.six" ["e"=1]
"DeepLcom/deepl-python" -> "DeepLcom/deepl-dotnet"
"DeepLcom/deepl-python" -> "DeepLcom/deepl-node"
"DeepLcom/deepl-python" -> "ptrstn/deepl-translate"
"DeepLcom/deepl-python" -> "nidhaloff/deep-translator"
"DeepLcom/deepl-python" -> "eggplants/deepl-cli"
"DeepLcom/deepl-python" -> "DeepLcom/openapi"
"DeepLcom/deepl-python" -> "polm/fugashi" ["e"=1]
"DeepLcom/deepl-python" -> "DeepLcom/deepl-php"
"DeepLcom/deepl-python" -> "jianfch/stable-ts" ["e"=1]
"DeepLcom/deepl-python" -> "argosopentech/argos-translate"
"DeepLcom/deepl-python" -> "DeepLcom/google-sheets-example"
"DeepLcom/deepl-python" -> "pemistahl/lingua-py" ["e"=1]
"DeepLcom/deepl-python" -> "DeepLcom/deepl-java"
"DeepLcom/deepl-python" -> "Softcatala/whisper-ctranslate2" ["e"=1]
"DeepLcom/deepl-python" -> "kakaobrain/kogpt" ["e"=1]
"tecoholic/ner-annotator" -> "ieriii/spacy-annotator"
"tecoholic/ner-annotator" -> "explosion/projects"
"tecoholic/ner-annotator" -> "ManivannanMurugavel/spacy-ner-annotator"
"tecoholic/ner-annotator" -> "doccano/doccano-transformer"
"tecoholic/ner-annotator" -> "MaartenGr/PolyFuzz"
"tecoholic/ner-annotator" -> "kevinlu1248/pyate"
"tecoholic/ner-annotator" -> "Liquid-Legal-Institute/Legal-Text-Analytics" ["e"=1]
"tecoholic/ner-annotator" -> "amrrs/custom-ner-with-spacy3"
"tecoholic/ner-annotator" -> "erre-quadro/spikex"
"tecoholic/ner-annotator" -> "NorskRegnesentral/skweak"
"tecoholic/ner-annotator" -> "explosion/spacy-streamlit" ["e"=1]
"tecoholic/ner-annotator" -> "vector-ai/vectorai"
"tecoholic/ner-annotator" -> "Jcharis/Natural-Language-Processing-Tutorials" ["e"=1]
"tecoholic/ner-annotator" -> "interpretml/interpret-text" ["e"=1]
"tecoholic/ner-annotator" -> "koaning/spacy-youtube-material"
"OlgaChernytska/word2vec-pytorch" -> "Andras7/word2vec-pytorch"
"linanqiu/word2vec-sentiments" -> "wendykan/DeepLearningMovies"
"linanqiu/word2vec-sentiments" -> "klb3713/sentence2vec"
"linanqiu/word2vec-sentiments" -> "giacbrd/ShallowLearn"
"linanqiu/word2vec-sentiments" -> "adeshpande3/LSTM-Sentiment-Analysis"
"linanqiu/word2vec-sentiments" -> "cemoody/lda2vec"
"linanqiu/word2vec-sentiments" -> "attardi/deepnl"
"linanqiu/word2vec-sentiments" -> "Lab41/sunny-side-up"
"linanqiu/word2vec-sentiments" -> "xiaohan2012/twitter-sent-dnn"
"linanqiu/word2vec-sentiments" -> "fbkarsdorp/doc2vec"
"linanqiu/word2vec-sentiments" -> "dhammack/Word2VecExample"
"linanqiu/word2vec-sentiments" -> "maciejkula/glove-python"
"linanqiu/word2vec-sentiments" -> "3Top/word2vec-api"
"linanqiu/word2vec-sentiments" -> "richliao/textClassifier" ["e"=1]
"linanqiu/word2vec-sentiments" -> "2shou/TextGrocery" ["e"=1]
"linanqiu/word2vec-sentiments" -> "bmabey/pyLDAvis"
"mallorbc/Finetune_LLMs" -> "Xirider/finetune-gpt2xl"
"mallorbc/Finetune_LLMs" -> "mallorbc/gpt-j-6b"
"mallorbc/Finetune_LLMs" -> "mallorbc/GPT_Neo_quotes_dataset"
"mallorbc/Finetune_LLMs" -> "zphang/minimal-llama" ["e"=1]
"mallorbc/Finetune_LLMs" -> "DeepSchneider/gpt-neo-fine-tuning-example"
"mallorbc/Finetune_LLMs" -> "arrmansa/Basic-UI-for-GPT-J-6B-with-low-vram"
"mallorbc/Finetune_LLMs" -> "zphang/minimal-gpt-neox-20b"
"lushan88a/google_trans_new" -> "ssut/py-googletrans"
"baifanxxx/awesome-active-learning" -> "SupeRuier/awesome-active-learning"
"baifanxxx/awesome-active-learning" -> "ej0cl6/deep-active-learning"
"baifanxxx/awesome-active-learning" -> "SineZHAN/deepALplus"
"baifanxxx/awesome-active-learning" -> "rmunro/pytorch_active_learning"
"baifanxxx/awesome-active-learning" -> "google/active-learning"
"baifanxxx/awesome-active-learning" -> "JordanAsh/badge"
"baifanxxx/awesome-active-learning" -> "NUAA-AL/ALiPy"
"baifanxxx/awesome-active-learning" -> "AminParvaneh/alpha_mix_active_learning"
"baifanxxx/awesome-active-learning" -> "ozansener/active_learning_coreset"
"baifanxxx/awesome-active-learning" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"baifanxxx/awesome-active-learning" -> "yongjin-shin/awesome-active-learning"
"baifanxxx/awesome-active-learning" -> "yuantn/MI-AOD"
"baifanxxx/awesome-active-learning" -> "decile-team/distil"
"baifanxxx/awesome-active-learning" -> "baal-org/baal"
"baifanxxx/awesome-active-learning" -> "modAL-python/modAL"
"dair-ai/awesome-ML-projects-guide" -> "dair-ai/awesome-research-proposals-guide"
"dair-ai/awesome-ML-projects-guide" -> "dair-ai/nlp_fundamentals"
"dair-ai/awesome-ML-projects-guide" -> "dair-ai/keep-learning-ml"
"dair-ai/awesome-ML-projects-guide" -> "dair-ai/deep_learning_notations"
"first20hours/google-10000-english" -> "dwyl/english-words"
"first20hours/google-10000-english" -> "LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" ["e"=1]
"first20hours/google-10000-english" -> "mortenjust/cleartext-mac" ["e"=1]
"first20hours/google-10000-english" -> "hermitdave/FrequencyWords"
"first20hours/google-10000-english" -> "arstgit/high-frequency-vocabulary" ["e"=1]
"first20hours/google-10000-english" -> "rspeer/wordfreq"
"first20hours/google-10000-english" -> "dolph/dictionary"
"first20hours/google-10000-english" -> "adambom/dictionary"
"first20hours/google-10000-english" -> "skywind3000/ECDICT" ["e"=1]
"first20hours/google-10000-english" -> "mahavivo/english-wordlists" ["e"=1]
"first20hours/google-10000-english" -> "spencermountain/compromise" ["e"=1]
"first20hours/google-10000-english" -> "jnoodle/English-Vocabulary-Word-List" ["e"=1]
"first20hours/google-10000-english" -> "yvoronoy/awesome-english" ["e"=1]
"first20hours/google-10000-english" -> "IlyaSemenov/wikipedia-word-frequency"
"first20hours/google-10000-english" -> "matthewreagan/WebstersEnglishDictionary"
"facebookresearch/text-adversarial-attack" -> "BrachioLab/adversarial_prompting"
"UKPLab/EasyNMT" -> "Helsinki-NLP/Opus-MT" ["e"=1]
"UKPLab/EasyNMT" -> "huggingface/setfit"
"UKPLab/EasyNMT" -> "joeynmt/joeynmt" ["e"=1]
"UKPLab/EasyNMT" -> "jalammar/ecco"
"UKPLab/EasyNMT" -> "nlp-uoregon/trankit"
"UKPLab/EasyNMT" -> "neulab/awesome-align" ["e"=1]
"UKPLab/EasyNMT" -> "Unbabel/COMET" ["e"=1]
"UKPLab/EasyNMT" -> "webis-de/small-text"
"UKPLab/EasyNMT" -> "MaartenGr/PolyFuzz"
"UKPLab/EasyNMT" -> "makcedward/nlpaug"
"UKPLab/EasyNMT" -> "cisnlp/simalign" ["e"=1]
"UKPLab/EasyNMT" -> "PrithivirajDamodaran/Gramformer" ["e"=1]
"UKPLab/EasyNMT" -> "google-research/multilingual-t5" ["e"=1]
"UKPLab/EasyNMT" -> "VKCOM/YouTokenToMe" ["e"=1]
"UKPLab/EasyNMT" -> "NorskRegnesentral/skweak"
"yy/dviz-course" -> "yy/netsci-course"
"zygmuntz/classifying-text" -> "vinhkhuc/kaggle-sentiment-popcorn"
"dkpro/dkpro-core" -> "dkpro/dkpro-tc"
"dkpro/dkpro-core" -> "dkpro/dkpro-core-examples"
"dkpro/dkpro-core" -> "dkpro/dkpro-cassis"
"dkpro/dkpro-core" -> "dkpro/dkpro-jwpl"
"dkpro/dkpro-core" -> "dkpro/dkpro-lab"
"dkpro/dkpro-core" -> "apache/uima-uimaj"
"dkpro/dkpro-core" -> "dkpro/dkpro-uby"
"dkpro/dkpro-core" -> "ClearTK/cleartk"
"dkpro/dkpro-core" -> "dkpro/dkpro-similarity"
"dkpro/dkpro-core" -> "dkpro/dkpro-jwktl"
"RelevanceAI/vectorhub" -> "vector-ai/vectorai"
"RelevanceAI/vectorhub" -> "MaartenGr/PolyFuzz"
"RelevanceAI/vectorhub" -> "MartinoMensio/spacy-universal-sentence-encoder" ["e"=1]
"RelevanceAI/vectorhub" -> "explosion/spacy-streamlit" ["e"=1]
"hemingkx/ChineseNMT" -> "qingyujean/Magic-NLPer"
"hemingkx/ChineseNMT" -> "benywon/en-ch-NMT"
"hemingkx/ChineseNMT" -> "hinesboy/transformer-simple"
"hemingkx/ChineseNMT" -> "JasonFengGit/Neural-Model-Translation" ["e"=1]
"hemingkx/ChineseNMT" -> "seanzhang-zhichen/-transformer-english2chinese-"
"hemingkx/ChineseNMT" -> "P3n9W31/transformer-pytorch"
"hemingkx/ChineseNMT" -> "jayparks/transformer"
"hemingkx/ChineseNMT" -> "foamliu/Machine-Translation"
"hemingkx/ChineseNMT" -> "taoztw/Transformer"
"hemingkx/ChineseNMT" -> "FLC777/GLAT" ["e"=1]
"plainheart/bing-translate-api" -> "TimLuo465/baidu-translate-api"
"semiosis/prompts" -> "semiosis/pen.el" ["e"=1]
"semiosis/prompts" -> "maraoz/gpt-scrolls"
"semiosis/prompts" -> "sevazhidkov/prompts-ai" ["e"=1]
"semiosis/prompts" -> "semiosis/glossaries-gh"
"GEM-benchmark/NL-Augmenter" -> "styfeng/DataAug4NLP"
"GEM-benchmark/NL-Augmenter" -> "google/BIG-bench" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "makcedward/nlpaug"
"GEM-benchmark/NL-Augmenter" -> "allenai/natural-instructions" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "marcotcr/checklist"
"GEM-benchmark/NL-Augmenter" -> "QData/TextAttack"
"GEM-benchmark/NL-Augmenter" -> "robustness-gym/robustness-gym"
"GEM-benchmark/NL-Augmenter" -> "jalammar/ecco"
"GEM-benchmark/NL-Augmenter" -> "cdpierse/transformers-interpret"
"GEM-benchmark/NL-Augmenter" -> "NorskRegnesentral/skweak"
"GEM-benchmark/NL-Augmenter" -> "neulab/BARTScore" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "neulab/knn-transformers" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "timoschick/dino"
"GEM-benchmark/NL-Augmenter" -> "ELS-RD/transformer-deploy" ["e"=1]
"GEM-benchmark/NL-Augmenter" -> "timoschick/pet" ["e"=1]
"webis-de/small-text" -> "IBM/low-resource-text-classification-framework"
"webis-de/small-text" -> "huggingface/setfit"
"webis-de/small-text" -> "NorskRegnesentral/skweak"
"webis-de/small-text" -> "davidberenstein1957/concise-concepts"
"webis-de/small-text" -> "koaning/doubtlab" ["e"=1]
"webis-de/small-text" -> "baal-org/baal"
"webis-de/small-text" -> "davidberenstein1957/crosslingual-coreference"
"webis-de/small-text" -> "DFKI-NLP/thermostat"
"webis-de/small-text" -> "explosion/floret"
"webis-de/small-text" -> "argilla-io/argilla"
"webis-de/small-text" -> "tomaarsen/SpanMarkerNER" ["e"=1]
"webis-de/small-text" -> "rmunro/pytorch_active_learning"
"webis-de/small-text" -> "TimSchopf/KeyphraseVectorizers"
"webis-de/small-text" -> "koaning/embetter" ["e"=1]
"webis-de/small-text" -> "NUAA-AL/ALiPy"
"jarmoza/twic" -> "archivesunleashed/docker-aut"
"thaalesalves/ai-games-research" -> "Gnurro/AIDscripts"
"thaalesalves/ai-games-research" -> "MagicShel/aid-simple-context"
"Xirider/finetune-gpt2xl" -> "mallorbc/Finetune_LLMs"
"Xirider/finetune-gpt2xl" -> "DeepSchneider/gpt-neo-fine-tuning-example"
"Xirider/finetune-gpt2xl" -> "mallorbc/GPT_Neo_fine-tuning_notebook"
"Xirider/finetune-gpt2xl" -> "arrmansa/Basic-UI-for-GPT-J-6B-with-low-vram"
"Xirider/finetune-gpt2xl" -> "SKRohit/Generating_Text_Summary_With_GPT2"
"Xirider/finetune-gpt2xl" -> "finetunej/gpt-neo_finetune_2.7B"
"DeepSchneider/gpt-neo-fine-tuning-example" -> "Xirider/finetune-gpt2xl"
"DeepSchneider/gpt-neo-fine-tuning-example" -> "finetunej/gpt-neo_finetune_2.7B"
"DeepSchneider/gpt-neo-fine-tuning-example" -> "mallorbc/GPT_Neo_fine-tuning_notebook"
"arrmansa/Basic-UI-for-GPT-J-6B-with-low-vram" -> "arrmansa/Basic-UI-for-GPT-Neo-with-low-vram"
"arrmansa/Basic-UI-for-GPT-J-6B-with-low-vram" -> "finetunej/gpt-neo_dungeon"
"arrmansa/Basic-UI-for-GPT-J-6B-with-low-vram" -> "finetunej/transformers"
"Open-Speech-EkStep/vakyansh-models" -> "Open-Speech-EkStep/vakyansh-wav2vec2-experimentation"
"Open-Speech-EkStep/vakyansh-models" -> "Open-Speech-EkStep/vakyansh-tts"
"Open-Speech-EkStep/vakyansh-models" -> "Open-Speech-EkStep/audio-to-speech-pipeline"
"Open-Speech-EkStep/vakyansh-models" -> "Open-Speech-EkStep/indic-punct"
"Open-Speech-EkStep/vakyansh-models" -> "AI4Bharat/IndicWav2Vec"
"Open-Speech-EkStep/vakyansh-models" -> "AI4Bharat/indicTrans"
"Open-Speech-EkStep/vakyansh-models" -> "AI4Bharat/IndicTrans2"
"Open-Speech-EkStep/vakyansh-models" -> "AI4Bharat/Indic-TTS"
"Open-Speech-EkStep/vakyansh-models" -> "AI4Bharat/indicnlp_catalog"
"Open-Speech-EkStep/vakyansh-models" -> "AI4Bharat/Indic-BERT-v1"
"wlin12/wang2vec" -> "clab/lstm-parser"
"wlin12/wang2vec" -> "ytsvetko/qvec"
"wlin12/wang2vec" -> "YahooArchive/YaraParser"
"wlin12/wang2vec" -> "licstar/compare"
"webanno/webanno" -> "proycon/flat"
"webanno/webanno" -> "inception-project/inception"
"webanno/webanno" -> "jonorthwash/ud-annotatrix"
"webanno/webanno" -> "dkpro/dkpro-core"
"webanno/webanno" -> "EmilStenstrom/conllu"
"webanno/webanno" -> "Orange-OpenSource/conllueditor"
"Animenosekai/translate" -> "eth0izzle/Needl" ["e"=1]
"Animenosekai/translate" -> "ptrstn/deepl-translate"
"Animenosekai/translate" -> "nidhaloff/deep-translator"
"Animenosekai/translate" -> "ssut/py-googletrans"
"Animenosekai/translate" -> "sergey-scat/unicaps"
"NorskRegnesentral/skweak" -> "autonlab/weasel"
"NorskRegnesentral/skweak" -> "erre-quadro/spikex"
"NorskRegnesentral/skweak" -> "argilla-io/argilla"
"NorskRegnesentral/skweak" -> "KennethEnevoldsen/augmenty"
"NorskRegnesentral/skweak" -> "davidberenstein1957/concise-concepts"
"NorskRegnesentral/skweak" -> "webis-de/small-text"
"NorskRegnesentral/skweak" -> "HazyResearch/flyingsquid"
"NorskRegnesentral/skweak" -> "jenojp/negspacy" ["e"=1]
"NorskRegnesentral/skweak" -> "koaning/doubtlab" ["e"=1]
"NorskRegnesentral/skweak" -> "jalammar/ecco"
"NorskRegnesentral/skweak" -> "msg-systems/coreferee"
"NorskRegnesentral/skweak" -> "MilaNLProc/contextualized-topic-models"
"NorskRegnesentral/skweak" -> "NorskRegnesentral/weak-supervision-for-NER" ["e"=1]
"NorskRegnesentral/skweak" -> "explosion/floret"
"NorskRegnesentral/skweak" -> "MaartenGr/PolyFuzz"
"vedicscriptures/bhagavad-gita-api" -> "vedic-lang/vedic"
"vedicscriptures/bhagavad-gita-api" -> "PtPrashantTripathi/linkpe" ["e"=1]
"jjangsangy/ExplainToMe" -> "xiaoxu193/PyTeaser"
"thu-coai/PaperForONLG" -> "thu-coai/CommonsenseStoryGen"
"thu-coai/PaperForONLG" -> "hrashkin/plotmachines"
"thu-coai/PaperForONLG" -> "thu-coai/OpenMEVA"
"thu-coai/PaperForONLG" -> "krishnap25/mauve"
"thu-coai/PaperForONLG" -> "PlusLabNLP/story-gen-BART"
"thu-coai/PaperForONLG" -> "thu-coai/HINT"
"thu-coai/PaperForONLG" -> "wyu97/KENLG-Reading" ["e"=1]
"EuroEval/EuroEval" -> "KennethEnevoldsen/scandinavian-embedding-benchmark"
"EuroEval/EuroEval" -> "centre-for-humanities-computing/DaCy"
"EuroEval/EuroEval" -> "danish-foundation-models/site"
"EuroEval/EuroEval" -> "MalteHB/-l-ctra"
"EuroEval/EuroEval" -> "Dansk-Data-Science-Community/sustainable-data-science"
"LaurentVeyssier/Chest-X-Ray-Medical-Diagnosis-with-Deep-Learning" -> "SouravG/Housing-price-prediction-using-Regularised-linear-regression"
"LaurentVeyssier/Chest-X-Ray-Medical-Diagnosis-with-Deep-Learning" -> "geekquad/Fraud-Detection"
"LaurentVeyssier/Chest-X-Ray-Medical-Diagnosis-with-Deep-Learning" -> "MelihGulum/Comprehensive-Data-Science-AI-Project-Portfolio"
"AI4Bharat/indicTrans" -> "AI4Bharat/IndicTrans2"
"AI4Bharat/indicTrans" -> "libindic/indic-trans"
"AI4Bharat/indicTrans" -> "AI4Bharat/indicnlp_catalog"
"we1pingyu/CALD" -> "NVlabs/AL-MDN"
"we1pingyu/CALD" -> "nducthang/Active-learning-for-object-detection"
"we1pingyu/CALD" -> "yuantn/MI-AOD"
"we1pingyu/CALD" -> "JappaB/Active_Learning_Object_Detection"
"we1pingyu/CALD" -> "sharat29ag/CDAL"
"yuantn/MI-AOD" -> "NVlabs/AL-MDN"
"yuantn/MI-AOD" -> "we1pingyu/CALD"
"yuantn/MI-AOD" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"yuantn/MI-AOD" -> "nducthang/Active-learning-for-object-detection"
"yuantn/MI-AOD" -> "sharat29ag/CDAL"
"yuantn/MI-AOD" -> "AminParvaneh/alpha_mix_active_learning"
"yuantn/MI-AOD" -> "ChenhongyiYang/PPAL"
"yuantn/MI-AOD" -> "2006pmach/awesome-active-learning"
"yuantn/MI-AOD" -> "superannotateai/active_learning" ["e"=1]
"yuantn/MI-AOD" -> "baifanxxx/awesome-active-learning"
"yuantn/MI-AOD" -> "JappaB/Active_Learning_Object_Detection"
"yuantn/MI-AOD" -> "ej0cl6/deep-active-learning"
"yuantn/MI-AOD" -> "yongjin-shin/awesome-active-learning"
"yuantn/MI-AOD" -> "nihalsid/ViewAL"
"yuantn/MI-AOD" -> "huyvvo/BiB"
"NVlabs/AL-MDN" -> "we1pingyu/CALD"
"NVlabs/AL-MDN" -> "yuantn/MI-AOD"
"NVlabs/AL-MDN" -> "sharat29ag/CDAL"
"NVlabs/AL-MDN" -> "nducthang/Active-learning-for-object-detection"
"NVlabs/AL-MDN" -> "AminParvaneh/alpha_mix_active_learning"
"NVlabs/AL-MDN" -> "ChenhongyiYang/PPAL"
"NVlabs/AL-MDN" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"NVlabs/AL-MDN" -> "JappaB/Active_Learning_Object_Detection"
"NVlabs/AL-MDN" -> "PrateekMunjal/TorchAL"
"NVlabs/AL-MDN" -> "huyvvo/BiB"
"NVlabs/AL-MDN" -> "2006pmach/awesome-active-learning"
"dipanjanS/tensorflow2-crash-course" -> "haven-ai/haven-ai"
"dipanjanS/tensorflow2-crash-course" -> "dipanjanS/art_of_data_visualization"
"dipanjanS/tensorflow2-crash-course" -> "dipanjanS/nlp_essentials"
"attardi/deepnl" -> "erickrf/nlpnet"
"attardi/deepnl" -> "idio/wiki2vec" ["e"=1]
"attardi/deepnl" -> "niangaotuantuan/Publications-of-Deep-Learning-in-NLP" ["e"=1]
"attardi/deepnl" -> "UKPLab/deeplearning4nlp-tutorial"
"attardi/deepnl" -> "shashankg7/Deep-Learning-for-NLP-Resources"
"attardi/deepnl" -> "sbos/AdaGram.jl"
"attardi/deepnl" -> "JonathanRaiman/PVDM"
"attardi/deepnl" -> "clab/lstm-parser"
"attardi/deepnl" -> "askerlee/topicvec" ["e"=1]
"attardi/deepnl" -> "dbpedia/fact-extractor" ["e"=1]
"attardi/deepnl" -> "clab/dynet_tutorial_examples"
"attardi/deepnl" -> "jwieting/charagram"
"attardi/deepnl" -> "klb3713/sentence2vec"
"attardi/deepnl" -> "biplab-iitb/practNLPTools"
"attardi/deepnl" -> "licstar/compare"
"facebookresearch/SentAugment" -> "microsoft/fastformers"
"sbos/AdaGram.jl" -> "lopuhin/python-adagram"
"datamade/data-making-guidelines" -> "openaddresses/pyesridump" ["e"=1]
"datamade/data-making-guidelines" -> "datamade/data-analysis-guidelines"
"datamade/data-making-guidelines" -> "propublica/ilcampaigncash"
"datamade/data-making-guidelines" -> "datamade/how-to"
"datamade/data-making-guidelines" -> "datadesk/lapd-crime-classification-analysis"
"wbrown/novelai-research-tool" -> "MagicShel/aid-simple-context"
"wbrown/novelai-research-tool" -> "l-io-n/AI-Resources"
"Leonard-Xu/CWE" -> "HKUST-KnowComp/JWE"
"Leonard-Xu/CWE" -> "JianXu123/SCWE"
"Leonard-Xu/CWE" -> "thunlp/SE-WRL"
"Leonard-Xu/CWE" -> "largelymfs/topical_word_embeddings" ["e"=1]
"Leonard-Xu/CWE" -> "dalinvip/cw2vec"
"Leonard-Xu/CWE" -> "licstar/compare"
"Leonard-Xu/CWE" -> "dalinvip/Word_Similarity_and_Word_Analogy"
"Leonard-Xu/CWE" -> "zhezhaoa/ngram2vec" ["e"=1]
"Leonard-Xu/CWE" -> "thunlp/COS960"
"Leonard-Xu/CWE" -> "wlin12/wang2vec"
"acl21/deep-active-learning-pytorch" -> "PrateekMunjal/TorchAL"
"acl21/deep-active-learning-pytorch" -> "avihu111/TypiClust"
"styfeng/DataAug4NLP" -> "jasonwei20/eda_nlp" ["e"=1]
"styfeng/DataAug4NLP" -> "GEM-benchmark/NL-Augmenter"
"styfeng/DataAug4NLP" -> "makcedward/nlpaug"
"styfeng/DataAug4NLP" -> "QData/TextAttack"
"styfeng/DataAug4NLP" -> "marcotcr/checklist"
"styfeng/DataAug4NLP" -> "lancopku/text-autoaugment"
"styfeng/DataAug4NLP" -> "FranxYao/Deep-Generative-Models-for-Natural-Language-Processing" ["e"=1]
"styfeng/DataAug4NLP" -> "danqi/acl2020-openqa-tutorial" ["e"=1]
"styfeng/DataAug4NLP" -> "dsfsi/textaugment"
"styfeng/DataAug4NLP" -> "yym6472/ConSERT" ["e"=1]
"styfeng/DataAug4NLP" -> "google-research/uda" ["e"=1]
"styfeng/DataAug4NLP" -> "allenai/dont-stop-pretraining" ["e"=1]
"styfeng/DataAug4NLP" -> "princeton-nlp/SimCSE" ["e"=1]
"styfeng/DataAug4NLP" -> "SALT-NLP/MixText" ["e"=1]
"styfeng/DataAug4NLP" -> "zhijing-jin/nlp-phd-global-equality" ["e"=1]
"rapidfuzz/Levenshtein" -> "rapidfuzz/python-Levenshtein"
"rapidfuzz/Levenshtein" -> "rapidfuzz/JaroWinkler"
"devmount/GermanWordEmbeddings" -> "WZBSocialScienceCenter/germalemma"
"devmount/GermanWordEmbeddings" -> "adbar/German-NLP"
"devmount/GermanWordEmbeddings" -> "dtuggener/CharSplit"
"devmount/GermanWordEmbeddings" -> "tblock/10kGNAD"
"devmount/GermanWordEmbeddings" -> "Liebeck/spacy-sentiws"
"zelandiya/keyword-extraction-datasets" -> "snkim/AutomaticKeyphraseExtraction"
"zelandiya/keyword-extraction-datasets" -> "zelandiya/maui"
"zelandiya/keyword-extraction-datasets" -> "fudannlp16/KeyPhrase-Extraction"
"clab/lstm-parser" -> "elikip/bist-parser"
"clab/lstm-parser" -> "swabhs/joint-lstm-parser"
"clab/lstm-parser" -> "clab/rnng"
"clab/lstm-parser" -> "YahooArchive/YaraParser"
"clab/lstm-parser" -> "tdozat/Parser-v1"
"clab/lstm-parser" -> "wlin12/wang2vec"
"nlp-uoregon/trankit" -> "VinAIResearch/PhoBERT" ["e"=1]
"nlp-uoregon/trankit" -> "vncorenlp/VnCoreNLP" ["e"=1]
"nlp-uoregon/trankit" -> "NorskRegnesentral/skweak"
"nlp-uoregon/trankit" -> "binhvq/news-corpus" ["e"=1]
"nlp-uoregon/trankit" -> "MaartenGr/PolyFuzz"
"nlp-uoregon/trankit" -> "VinAIResearch/PhoNLP" ["e"=1]
"nlp-uoregon/trankit" -> "yzhangcs/parser"
"nlp-uoregon/trankit" -> "webis-de/small-text"
"nlp-uoregon/trankit" -> "hailoc12/docbao" ["e"=1]
"nlp-uoregon/trankit" -> "neulab/awesome-align" ["e"=1]
"nlp-uoregon/trankit" -> "UKPLab/EasyNMT"
"nlp-uoregon/trankit" -> "vietai/dab" ["e"=1]
"nlp-uoregon/trankit" -> "langmaninternet/VietnameseTextNormalizer" ["e"=1]
"nlp-uoregon/trankit" -> "microsoft/fastformers"
"nlp-uoregon/trankit" -> "PAIR-code/lit"
"KennethEnevoldsen/augmenty" -> "KennethEnevoldsen/spacy-wrap"
"KennethEnevoldsen/augmenty" -> "davidberenstein1957/crosslingual-coreference"
"KennethEnevoldsen/augmenty" -> "explosion/spacy-experimental"
"taoztw/Transformer" -> "DevilExileSu/transformer"
"NiuTrans/CNSurvey" -> "NiuTrans/ABigSurvey"
"NiuTrans/CNSurvey" -> "NiuTrans/LanguageCodes"
"NiuTrans/CNSurvey" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/CNSurvey" -> "NiuTrans/NiuTrans.SMT"
"NiuTrans/CNSurvey" -> "NiuTrans/NASPapers"
"NiuTrans/CNSurvey" -> "NiuTrans/MT-paper-lists"
"NiuTrans/CNSurvey" -> "SimmerChan/corpus" ["e"=1]
"NiuTrans/CNSurvey" -> "KaiyuanGao/AI-Surveys"
"NiuTrans/CNSurvey" -> "NiuTrans/MTBook"
"NiuTrans/CNSurvey" -> "NiuTrans/NiuTensor"
"NiuTrans/CNSurvey" -> "xiaoqian19940510/text-classification-surveys" ["e"=1]
"NiuTrans/CNSurvey" -> "sunyilgdx/SIFRank_zh"
"NiuTrans/CNSurvey" -> "loujie0822/Pre-trained-Models" ["e"=1]
"NiuTrans/CNSurvey" -> "km1994/nlp_paper_study" ["e"=1]
"NiuTrans/CNSurvey" -> "thunlp/SOS4NLP" ["e"=1]
"mkusner/wmd" -> "src-d/wmd-relax"
"mkusner/wmd" -> "gaohuang/S-WMD" ["e"=1]
"mkusner/wmd" -> "wmayner/pyemd" ["e"=1]
"mkusner/wmd" -> "mchen24/iclr2017"
"mkusner/wmd" -> "aseveryn/deep-qa" ["e"=1]
"mkusner/wmd" -> "ryankiros/skip-thoughts" ["e"=1]
"mkusner/wmd" -> "stephenhky/PyWMD"
"mkusner/wmd" -> "largelymfs/topical_word_embeddings" ["e"=1]
"mkusner/wmd" -> "PrincetonML/SIF"
"mkusner/wmd" -> "brmson/dataset-sts"
"mkusner/wmd" -> "klb3713/sentence2vec"
"mkusner/wmd" -> "facebookresearch/InferSent"
"mkusner/wmd" -> "licstar/compare"
"mkusner/wmd" -> "attardi/deepnl"
"mkusner/wmd" -> "facebookarchive/NAMAS" ["e"=1]
"Lissy93/twitter-sentiment-visualisation" -> "Lissy93/sentiment-analysis"
"MaartenGr/PolyFuzz" -> "NorskRegnesentral/skweak"
"MaartenGr/PolyFuzz" -> "MaartenGr/KeyBERT"
"MaartenGr/PolyFuzz" -> "rapidfuzz/RapidFuzz"
"MaartenGr/PolyFuzz" -> "jfilter/clean-text"
"MaartenGr/PolyFuzz" -> "ddangelov/Top2Vec"
"MaartenGr/PolyFuzz" -> "MilaNLProc/contextualized-topic-models"
"MaartenGr/PolyFuzz" -> "erre-quadro/spikex"
"MaartenGr/PolyFuzz" -> "DerwenAI/kglab" ["e"=1]
"MaartenGr/PolyFuzz" -> "neomatrix369/nlp_profiler" ["e"=1]
"MaartenGr/PolyFuzz" -> "allenai/pawls"
"MaartenGr/PolyFuzz" -> "Bergvca/string_grouper"
"MaartenGr/PolyFuzz" -> "kevinlu1248/pyate"
"MaartenGr/PolyFuzz" -> "davidberenstein1957/concise-concepts"
"MaartenGr/PolyFuzz" -> "JohnGiorgi/DeCLUTR" ["e"=1]
"MaartenGr/PolyFuzz" -> "MIND-Lab/OCTIS" ["e"=1]
"gouwsmeister/bilbowa" -> "mfaruqui/crosslingual-cca"
"gouwsmeister/bilbowa" -> "mfaruqui/non-distributional"
"gouwsmeister/bilbowa" -> "shyamupa/biling-survey"
"gouwsmeister/bilbowa" -> "karlmoritz/bicvm"
"gouwsmeister/bilbowa" -> "lmthang/bivec"
"slavpetrov/berkeleyparser" -> "tdozat/Parser-v1"
"geyingli/unif" -> "huanghuidmml/tfbert"
"geyingli/unif" -> "DeligientSloth/AdversialNLP"
"affjljoo3581/Differentiable-RandAugment" -> "ds-wook/ds-wook"
"affjljoo3581/Differentiable-RandAugment" -> "yjyoon-dev/yjyoon-dev.github.io"
"affjljoo3581/Differentiable-RandAugment" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"alisawuffles/DExperts" -> "salesforce/GeDi"
"alisawuffles/DExperts" -> "yangkevin2/naacl-2021-fudge-controlled-generation"
"centre-for-humanities-computing/DaCy" -> "peleiden/daluke"
"centre-for-humanities-computing/DaCy" -> "ebanalyse/senda"
"centre-for-humanities-computing/DaCy" -> "danish-foundation-models/site"
"centre-for-humanities-computing/DaCy" -> "MalteHB/-l-ctra"
"centre-for-humanities-computing/DaCy" -> "martincjespersen/DaAnonymization"
"centre-for-humanities-computing/DaCy" -> "EuroEval/EuroEval"
"centre-for-humanities-computing/DaCy" -> "KennethEnevoldsen/scandinavian-embedding-benchmark"
"centre-for-humanities-computing/DaCy" -> "alexandrainst/danlp"
"centre-for-humanities-computing/DaCy" -> "ebanalyse/NERDA"
"ahalterman/mordecai3" -> "ahalterman/NGEC"
"NiuTrans/LanguageCodes" -> "NiuTrans/MTVenues"
"NiuTrans/LanguageCodes" -> "NiuTrans/NiuTrans.NMT"
"NiuTrans/LanguageCodes" -> "NiuTrans/MT-paper-lists"
"NiuTrans/LanguageCodes" -> "NiuTrans/NASPapers"
"dkpro/dkpro-tc" -> "dkpro/dkpro-lab"
"JieyuZ2/wrench" -> "JieyuZ2/Awesome-Weak-Supervision"
"JieyuZ2/wrench" -> "JieyuZ2/TaskMeAnything"
"JieyuZ2/wrench" -> "JieyuZ2/EcoAssistant"
"JieyuZ2/wrench" -> "autonlab/weasel"
"JieyuZ2/wrench" -> "rt219/Unpaired-Sketch-to-Photo-Translation"
"JieyuZ2/wrench" -> "RAIVNLab/sugar-crepe"
"NSchrading/intro-spacy-nlp" -> "JonathanReeve/workshop-text-analysis-spacy"
"NSchrading/intro-spacy-nlp" -> "explosion/spacy-notebooks"
"vinhkhuc/kaggle-sentiment-popcorn" -> "tjflexic/kaggle-word2vec-movie-reviews"
"vinhkhuc/kaggle-sentiment-popcorn" -> "logicalguess/tf-idf-spark-and-python"
"naver/gdc" -> "yangkevin2/naacl-2021-fudge-controlled-generation"
"Open-Speech-EkStep/vakyansh-wav2vec2-experimentation" -> "Open-Speech-EkStep/vakyansh-models"
"textflint/textflint" -> "thunlp/OpenAttack"
"textflint/textflint" -> "thunlp/TAADpapers"
"textflint/textflint" -> "QData/TextAttack"
"textflint/textflint" -> "marcotcr/checklist"
"textflint/textflint" -> "neulab/ExplainaBoard" ["e"=1]
"textflint/textflint" -> "txsun1997/MOSS" ["e"=1]
"textflint/textflint" -> "fastnlp/fastHan" ["e"=1]
"textflint/textflint" -> "zhuchen03/FreeLB"
"textflint/textflint" -> "LinyangLee/BERT-Attack"
"textflint/textflint" -> "airaria/TextBrewer" ["e"=1]
"thu-coai/OpenMEVA" -> "thu-coai/UNION"
"nducthang/Active-learning-for-object-detection" -> "we1pingyu/CALD"
"nducthang/Active-learning-for-object-detection" -> "JappaB/Active_Learning_Object_Detection"
"nducthang/Active-learning-for-object-detection" -> "sharat29ag/CDAL"
"autonlab/weasel" -> "benbo/interactive-weak-supervision"
"autonlab/weasel" -> "JieyuZ2/Awesome-Weak-Supervision"
"autonlab/weasel" -> "HazyResearch/flyingsquid"
"autonlab/weasel" -> "knodle/knodle"
"autonlab/weasel" -> "JieyuZ2/wrench"
"prajdabre/yanmtt" -> "AI4Bharat/indic-bart"
"prajdabre/yanmtt" -> "AI4Bharat/IndicInstruct"
"akkarimi/aeda_nlp" -> "clovaai/ssmix"
"vintasoftware/entity-embed" -> "vintasoftware/aurorae"
"vintasoftware/entity-embed" -> "vintasoftware/eslint-config-vinta"
"krishnap25/mauve" -> "krishnap25/mauve-experiments"
"krishnap25/mauve" -> "thu-coai/PaperForONLG"
"krishnap25/mauve" -> "yxuansu/SimCTG"
"krishnap25/mauve" -> "Yale-LILY/SummEval" ["e"=1]
"ClearTK/cleartk" -> "oaqa/suim"
"yangkevin2/naacl-2021-fudge-controlled-generation" -> "salesforce/GeDi"
"yangkevin2/naacl-2021-fudge-controlled-generation" -> "alvinchangw/COCON_ICLR2021"
"yangkevin2/naacl-2021-fudge-controlled-generation" -> "naver/gdc"
"rishabhk108/AdvancedOptML" -> "rishabhk108/OptimizationDemos"
"rishabhk108/AdvancedOptML" -> "rishabhk108/OptimizationML"
"rishabhk108/AdvancedOptML" -> "decile-team/submodlib"
"victorywys/SMART-KPE" -> "MySong7NLPer/AI-Conference-Acceptance-Rate"
"victorywys/SMART-KPE" -> "MySong7NLPer/ChineseKeyphraseExtraction"
"victorywys/SMART-KPE" -> "MySong7NLPer/ResearchWriting-Tips"
"victorywys/SMART-KPE" -> "MySong7NLPer/HyperSiameseNet"
"victorywys/SMART-KPE" -> "MySong7NLPer/HISum"
"victorywys/SMART-KPE" -> "MySong7NLPer/ChatGPT_as_Keyphrase_Extractor"
"Jayshen0/Unsupervised-Deep-Keyphrase-Generation" -> "MySong7NLPer/Presentations-Notes"
"hd10-iupui/AttentionRank" -> "xnliang98/uke_ccrank"
"finetunej/gpt-neo_dungeon" -> "CuriousNekomimi/AIDCAT"
"finetunej/gpt-neo_dungeon" -> "finetunej/gpt-neo_finetune_2.7B"
"aiplanethub/Machine_Learning_Bootcamp" -> "aiplanethub/Data_Science_Bootcamp"
"aiplanethub/Machine_Learning_Bootcamp" -> "pycaret/pycaret-demo-dphi"
"aiplanethub/Machine_Learning_Bootcamp" -> "aiplanethub/Deep_Learning_Bootcamp"
"aiplanethub/Machine_Learning_Bootcamp" -> "aiplanethub/Datathons"
"aiplanethub/Machine_Learning_Bootcamp" -> "aiplanethub/Datasets"
"msg-systems/coreferee" -> "richardpaulhudson/coreferee"
"msg-systems/coreferee" -> "davidberenstein1957/crosslingual-coreference"
"msg-systems/coreferee" -> "KennethEnevoldsen/augmenty"
"msg-systems/coreferee" -> "richardpaulhudson/holmes-extractor"
"interrogator/corpkit" -> "interrogator/tucan"
"interrogator/corpkit" -> "interrogator/buzz"
"interrogator/corpkit" -> "interrogator/risk"
"alexandra-chron/lexical_xlm_relm" -> "alexandra-chron/relm_unmt"
"alexandra-chron/lexical_xlm_relm" -> "alexandra-chron/hierarchical-domain-adaptation"
"frcchang/zpar" -> "clab/lstm-parser"
"frcchang/zpar" -> "swabhs/joint-lstm-parser"
"arrmansa/Basic-UI-for-GPT-Neo-with-low-vram" -> "arrmansa/Gpt-Neo-Limited-Vram-Cuda"
"alvinchangw/COCON_ICLR2021" -> "FreddeFrallan/Non-Residual-Prompting"
"alvinchangw/COCON_ICLR2021" -> "salesforce/GeDi"
"alvinchangw/COCON_ICLR2021" -> "yangkevin2/naacl-2021-fudge-controlled-generation"
"alvinchangw/COCON_ICLR2021" -> "Sachin19/mucoco"
"qcri/DeepBlocker" -> "anhaidgroup/sparkly"
"philippbayer/Goodreads_visualization" -> "PaulKlinger/Bookstats"
"licstar/compare" -> "knok/rcnn-text-classification"
"licstar/compare" -> "Leonard-Xu/CWE"
"licstar/compare" -> "wlin12/wang2vec"
"licstar/compare" -> "largelymfs/topical_word_embeddings" ["e"=1]
"licstar/compare" -> "jdeng/word2vec"
"licstar/compare" -> "mesnilgr/iclr15"
"Chen-Wang-CUHK/Training-Free-and-Ref-Free-Summ-Evaluation" -> "wxjiao/WMT2022-Large-Scale-African"
"ebanalyse/NERDA" -> "centre-for-humanities-computing/DaCy"
"ebanalyse/NERDA" -> "peleiden/daluke"
"ebanalyse/NERDA" -> "ebanalyse/senda"
"ArjitJ/DIAL" -> "icip-cas/EntityMatcher"
"ArjitJ/DIAL" -> "megagonlabs/machamp"
"megagonlabs/machamp" -> "ArjitJ/DIAL"
"lmthang/bivec" -> "karlmoritz/bicvm"
"lmthang/bivec" -> "gouwsmeister/bilbowa"
"lmthang/bivec" -> "alex-berard/multivec"
"ds-wook/predict-delinquency" -> "ds-wook/ml-project"
"ds-wook/predict-delinquency" -> "ds-wook/BOJ"
"ds-wook/predict-delinquency" -> "ds-wook/ds-wook"
"ds-wook/predict-delinquency" -> "ds-wook/final-industry-university"
"ds-wook/predict-delinquency" -> "ds-wook/ventilator-pressure-prediction"
"ds-wook/predict-delinquency" -> "ds-wook/Python-Machine-Learning"
"seomoz/word2gauss" -> "benathi/word2gm"
"seomoz/word2gauss" -> "abrazinskas/BSG"
"seomoz/word2gauss" -> "schelotto/Gaussian_Word_Embedding"
"seomoz/word2gauss" -> "mfaruqui/eval-word-vectors"
"erodola/DLAI-s2-2021" -> "edu-rinaldi/Iris-Recognition"
"erodola/DLAI-s2-2021" -> "gtolomei/big-data-computing"
"erodola/DLAI-s2-2021" -> "erodola/DLAI-s2-2020"
"dkpro/dkpro-similarity" -> "dkpro/dkpro-uby"
"decile-team/distil" -> "JordanAsh/badge"
"decile-team/distil" -> "decile-team/submodlib"
"decile-team/distil" -> "SineZHAN/deepALplus"
"decile-team/distil" -> "decile-team/cords" ["e"=1]
"decile-team/distil" -> "yongjin-shin/awesome-active-learning"
"decile-team/distil" -> "decile-team/trust"
"mallorbc/gpt-j-6b" -> "mallorbc/Finetune_LLMs"
"dengfy/cs224d" -> "dennybritz/cs224d-solutions"
"sustcsonglin/TN-PCFG" -> "LouChao98/neural_based_dmv"
"sustcsonglin/TN-PCFG" -> "sustcsonglin/second-order-neural-dmv"
"sustcsonglin/TN-PCFG" -> "VPeterV/RankSpace-Models"
"TravelingRobot/NAI_Community_Research" -> "l-io-n/AI-Resources"
"TravelingRobot/NAI_Community_Research" -> "valahraban/AID-World-Info-research-sheet"
"TravelingRobot/NAI_Community_Research" -> "wbrown/novelai-research-tool"
"Gnurro/AIDscripts" -> "gimzani/ai-dungeon-worldbuilder"
"Gnurro/AIDscripts" -> "Zynj-git/AIDungeon"
"Gnurro/AIDscripts" -> "thaalesalves/ai-games-research"
"decile-team/submodlib" -> "decile-team/trust"
"decile-team/submodlib" -> "decile-team/distil"
"decile-team/submodlib" -> "decile-team/jensen"
"sustcsonglin/second-order-neural-dmv" -> "LouChao98/neural_based_dmv"
"jiacheng-ye/kg_one2set" -> "kenchan0226/keyphrase-generation-rl"
"jiacheng-ye/kg_one2set" -> "xiaowu0162/low-resource-kpgen"
"jiacheng-ye/kg_one2set" -> "HqWu-HITCS/Awesome-Keyphrase-Prediction"
"jiacheng-ye/kg_one2set" -> "uclanlp/awesome-keyphrase-papers"
"jiacheng-ye/kg_one2set" -> "uclanlp/DeepKPG"
"jiacheng-ye/kg_one2set" -> "memray/OpenNMT-kpg-release"
"jiacheng-ye/kg_one2set" -> "Chen-Wang-CUHK/ExHiRD-DKG"
"l-io-n/AI-Resources" -> "valahraban/AID-World-Info-research-sheet"
"l-io-n/AI-Resources" -> "Gnurro/AIDscripts"
"l-io-n/AI-Resources" -> "wbrown/novelai-research-tool"
"l-io-n/AI-Resources" -> "TaleirOfDeynai/NAI-Lore-Helper"
"l-io-n/AI-Resources" -> "thaalesalves/ai-games-research"
"dongxinshuai/ASCC" -> "robinjia/certified-word-sub"
"dongxinshuai/ASCC" -> "RockyLzy/TextDefender"
"mourga/transformer-uncertainty" -> "mourga/affective-attention"
"mourga/transformer-uncertainty" -> "mourga/variational-lstm"
"mourga/transformer-uncertainty" -> "mourga/awd-lstm-lm"
"mourga/transformer-uncertainty" -> "mourga/contrastive-active-learning"
"mourga/transformer-uncertainty" -> "alexandra-chron/ntua-slp-wassa-iest2018"
"tblazevic/moonlander" -> "PetarMihalj/cpack"
"tblazevic/moonlander" -> "PetarMihalj/AGT"
"code-kern-ai/refinery-python-sdk" -> "code-kern-ai/embedders"
"code-kern-ai/refinery-python-sdk" -> "code-kern-ai/automl-docker"
"code-kern-ai/refinery-python-sdk" -> "code-kern-ai/sequence-learn"
"sarnikowski/danish_transformers" -> "MalteHB/-l-ctra"
"LeonardoEmili/stock-price-forecasting" -> "andrea-gasparini/f1-racing-cars-tracking"
"dbunibas/BART" -> "BigDaMa/ExampleDrivenErrorDetection"
"dbunibas/BART" -> "BigDaMa/raha"
"jiangfeng1124/acl15-clnndep" -> "shyamupa/biling-survey"
"Riccorl/transformers-embedder" -> "Riccorl/ipa"
"Riccorl/transformers-embedder" -> "SapienzaNLP/bmr"
"MalteHB/-l-ctra" -> "sarnikowski/danish_transformers"
"aiplanethub/live_sessions" -> "aiplanethub/Micro-Courses"
"thinkwee/UniKeyphrase" -> "xiaowu0162/low-resource-kpgen"
"RishabhMaheshwary/hard-label-attack" -> "machinelearning4health/TextHoaxer"
"RishabhMaheshwary/hard-label-attack" -> "dugu9sword/dne"
"GarfieldLyu/OCR_POST_DE" -> "dbmdz/historic-ner"
"alexandra-chron/hierarchical-domain-adaptation" -> "alexandra-chron/lexical_xlm_relm"
"alexandra-chron/hierarchical-domain-adaptation" -> "alexandra-chron/relm_unmt"
"dipanjanS/practical_nlp_workshop_gids20" -> "dipanjanS/ml_model_deployment_example"
"PetarMihalj/cpack" -> "PetarMihalj/AGT"
"PetarMihalj/AGT" -> "PetarMihalj/cpack"
"arrmansa/Gpt-Neo-Limited-Vram-Cuda" -> "arrmansa/Basic-UI-for-GPT-Neo-with-low-vram"
"Chen-Wang-CUHK/DialSum-with-SUFM-and-FR" -> "wxjiao/WMT2022-Large-Scale-African"
"dipanjanS/ml_model_deployment_example" -> "dipanjanS/practical_nlp_workshop_gids20"
"ds-wook/final-industry-university" -> "ds-wook/DsProject"
"ds-wook/final-industry-university" -> "ds-wook/ml-project"
"ds-wook/final-industry-university" -> "ds-wook/BOJ"
"ds-wook/final-industry-university" -> "ds-wook/Python-Machine-Learning"
"ds-wook/final-industry-university" -> "ds-wook/goodbooks-10k"
"ds-wook/final-industry-university" -> "ds-wook/ds-wook"
"ds-wook/ml-project" -> "ds-wook/final-industry-university"
"ds-wook/ml-project" -> "ds-wook/BOJ"
"ds-wook/ml-project" -> "ds-wook/predict-meals"
"ds-wook/ml-project" -> "ds-wook/predict-delinquency"
"keon/awesome-nlp" -> "ChristosChristofidis/awesome-deep-learning" ["e"=1]
"keon/awesome-nlp" -> "src-d/awesome-machine-learning-on-source-code" ["e"=1]
"keon/awesome-nlp" -> "ujjwalkarn/Machine-Learning-Tutorials" ["e"=1]
"keon/awesome-nlp" -> "sebastianruder/NLP-progress"
"keon/awesome-nlp" -> "jbhuang0604/awesome-computer-vision" ["e"=1]
"keon/awesome-nlp" -> "aikorea/awesome-rl" ["e"=1]
"keon/awesome-nlp" -> "GoogleTrends/data" ["e"=1]
"keon/awesome-nlp" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"keon/awesome-nlp" -> "jtoy/awesome-tensorflow" ["e"=1]
"keon/awesome-nlp" -> "bharathgs/Awesome-pytorch-list" ["e"=1]
"keon/awesome-nlp" -> "terryum/awesome-deep-learning-papers" ["e"=1]
"keon/awesome-nlp" -> "EthicalML/awesome-production-machine-learning" ["e"=1]
"keon/awesome-nlp" -> "allenai/allennlp"
"keon/awesome-nlp" -> "josephmisiti/awesome-machine-learning" ["e"=1]
"keon/awesome-nlp" -> "graykode/nlp-tutorial"
"dennybritz/cnn-text-classification-tf" -> "yoonkim/CNN_sentence" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "brightmart/text_classification" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "gaussic/text-classification-cnn-rnn" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "facebookresearch/fastText"
"dennybritz/cnn-text-classification-tf" -> "NTMC-Community/MatchZoo" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "tensorflow/nmt"
"dennybritz/cnn-text-classification-tf" -> "google/seq2seq"
"dennybritz/cnn-text-classification-tf" -> "Kyubyong/transformer"
"dennybritz/cnn-text-classification-tf" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "jina-ai/clip-as-service"
"dennybritz/cnn-text-classification-tf" -> "zihangdai/xlnet"
"dennybritz/cnn-text-classification-tf" -> "guillaumegenthial/sequence_tagging" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "sherjilozair/char-rnn-tensorflow" ["e"=1]
"dennybritz/cnn-text-classification-tf" -> "stanfordnlp/GloVe"
"booknlp/booknlp" -> "dbamman/book-nlp"
"booknlp/booknlp" -> "dbamman/litbank"
"booknlp/booknlp" -> "NorskRegnesentral/skweak"
"booknlp/booknlp" -> "MilaNLProc/contextualized-topic-models"
"booknlp/booknlp" -> "ryanjgallagher/shifterator"
"booknlp/booknlp" -> "koaning/bulk" ["e"=1]
"booknlp/booknlp" -> "explosion/projects"
"booknlp/booknlp" -> "melaniewalsh/Intro-Cultural-Analytics"
"booknlp/booknlp" -> "williamleif/histwords"
"booknlp/booknlp" -> "dbamman/anlp19"
"booknlp/booknlp" -> "JonathanReeve/chapterize"
"booknlp/booknlp" -> "erre-quadro/spikex"
"booknlp/booknlp" -> "davidberenstein1957/concise-concepts"
"booknlp/booknlp" -> "gandersen101/spaczz"
"booknlp/booknlp" -> "KennethEnevoldsen/augmenty"
"kudkudak/word-embeddings-benchmarks" -> "mfaruqui/eval-word-vectors"
"kudkudak/word-embeddings-benchmarks" -> "malllabiisc/WordGCN" ["e"=1]
"kudkudak/word-embeddings-benchmarks" -> "tca19/dict2vec"
"kudkudak/word-embeddings-benchmarks" -> "facebookresearch/SentEval"
"kudkudak/word-embeddings-benchmarks" -> "mfaruqui/retrofitting"
"kudkudak/word-embeddings-benchmarks" -> "artetxem/vecmap" ["e"=1]
"kudkudak/word-embeddings-benchmarks" -> "vecto-ai/vecto"
"kudkudak/word-embeddings-benchmarks" -> "minimalparts/nonce2vec"
"kudkudak/word-embeddings-benchmarks" -> "tolga-b/debiaswe" ["e"=1]
"kudkudak/word-embeddings-benchmarks" -> "benathi/word2gm"
"kudkudak/word-embeddings-benchmarks" -> "gonenhila/gender_bias_lipstick" ["e"=1]
"kudkudak/word-embeddings-benchmarks" -> "nyu-mll/multiNLI" ["e"=1]
"kudkudak/word-embeddings-benchmarks" -> "ytsvetko/qvec"
"kudkudak/word-embeddings-benchmarks" -> "seomoz/word2gauss"
"kudkudak/word-embeddings-benchmarks" -> "XuezheMax/NeuroNLP2"
"stanfordnlp/GloVe" -> "facebookresearch/fastText"
"stanfordnlp/GloVe" -> "allenai/allennlp"
"stanfordnlp/GloVe" -> "piskvorky/gensim"
"stanfordnlp/GloVe" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"stanfordnlp/GloVe" -> "maciejkula/glove-python"
"stanfordnlp/GloVe" -> "zihangdai/xlnet"
"stanfordnlp/GloVe" -> "stanfordnlp/CoreNLP"
"stanfordnlp/GloVe" -> "dennybritz/cnn-text-classification-tf"
"stanfordnlp/GloVe" -> "brightmart/text_classification" ["e"=1]
"stanfordnlp/GloVe" -> "google/seq2seq"
"stanfordnlp/GloVe" -> "jina-ai/clip-as-service"
"stanfordnlp/GloVe" -> "google-research/bert"
"stanfordnlp/GloVe" -> "google/sentencepiece"
"stanfordnlp/GloVe" -> "tensorflow/nmt"
"stanfordnlp/GloVe" -> "sebastianruder/NLP-progress"
"cemoody/lda2vec" -> "meereeum/lda2vec-tf" ["e"=1]
"cemoody/lda2vec" -> "bmabey/pyLDAvis"
"cemoody/lda2vec" -> "lda-project/lda" ["e"=1]
"cemoody/lda2vec" -> "ryankiros/skip-thoughts" ["e"=1]
"cemoody/lda2vec" -> "baidu/Familia" ["e"=1]
"cemoody/lda2vec" -> "piskvorky/gensim"
"cemoody/lda2vec" -> "blei-lab/edward" ["e"=1]
"cemoody/lda2vec" -> "facebookresearch/StarSpace"
"cemoody/lda2vec" -> "facebookresearch/fastText"
"cemoody/lda2vec" -> "tensorflow/skflow" ["e"=1]
"cemoody/lda2vec" -> "chartbeat-labs/textacy"
"cemoody/lda2vec" -> "stanfordnlp/GloVe"
"cemoody/lda2vec" -> "allenai/allennlp"
"cemoody/lda2vec" -> "dennybritz/cnn-text-classification-tf"
"cemoody/lda2vec" -> "ddangelov/Top2Vec"
"tmikolov/word2vec" -> "dav/word2vec"
"tmikolov/word2vec" -> "chrisjmccormick/word2vec_commented"
"tmikolov/word2vec" -> "danielfrg/word2vec"
"tmikolov/word2vec" -> "stanfordnlp/GloVe"
"tmikolov/word2vec" -> "ycjuan/kaggle-2014-criteo" ["e"=1]
"tmikolov/word2vec" -> "aditya-grover/node2vec" ["e"=1]
"tmikolov/word2vec" -> "dmlc/ps-lite" ["e"=1]
"tmikolov/word2vec" -> "wzhe06/Ad-papers" ["e"=1]
"tmikolov/word2vec" -> "wzhe06/Reco-papers" ["e"=1]
"tmikolov/word2vec" -> "allenai/bilm-tf"
"tmikolov/word2vec" -> "alibaba/euler" ["e"=1]
"tmikolov/word2vec" -> "ChenglongChen/tensorflow-DeepFM" ["e"=1]
"tmikolov/word2vec" -> "zhougr1993/DeepInterestNetwork" ["e"=1]
"tmikolov/word2vec" -> "attardi/wikiextractor"
"tmikolov/word2vec" -> "alibaba/x-deeplearning" ["e"=1]
"mireshghallah/mixmatch" -> "Sachin19/mucoco"
"PrateekMunjal/TorchAL" -> "avihu111/TypiClust"
"PrateekMunjal/TorchAL" -> "acl21/deep-active-learning-pytorch"
"PrateekMunjal/TorchAL" -> "AminParvaneh/alpha_mix_active_learning"
"Deimos/SubredditSimulator" -> "jsvine/markovify"
"Deimos/SubredditSimulator" -> "voussoir/reddit" ["e"=1]
"Deimos/SubredditSimulator" -> "riccardoscalco/Pykov"
"code-kern-ai/automl-docker" -> "code-kern-ai/refinery-python-sdk"
"code-kern-ai/automl-docker" -> "code-kern-ai/embedders"
"code-kern-ai/automl-docker" -> "code-kern-ai/sequence-learn"
"vedic-lang/vedic-lang.github.io" -> "vedic-lang/vedic-ide"
"infinitylogesh/mutate" -> "argilla-io/adept-augmentations"
"dedupeio/dedupe" -> "J535D165/recordlinkage"
"dedupeio/dedupe" -> "dedupeio/dedupe-examples"
"dedupeio/dedupe" -> "dedupeio/csvdedupe"
"dedupeio/dedupe" -> "moj-analytical-services/splink" ["e"=1]
"dedupeio/dedupe" -> "datamade/usaddress"
"dedupeio/dedupe" -> "J535D165/data-matching-software"
"dedupeio/dedupe" -> "seatgeek/fuzzywuzzy"
"dedupeio/dedupe" -> "zinggAI/zingg" ["e"=1]
"dedupeio/dedupe" -> "jamesturk/jellyfish"
"dedupeio/dedupe" -> "datamade/probablepeople"
"dedupeio/dedupe" -> "datamade/parserator"
"dedupeio/dedupe" -> "larsga/Duke"
"dedupeio/dedupe" -> "openvenues/libpostal" ["e"=1]
"dedupeio/dedupe" -> "snorkel-team/snorkel"
"dedupeio/dedupe" -> "ekzhu/datasketch" ["e"=1]
"ronxin/wevi" -> "seomoz/word2gauss"
"ronxin/wevi" -> "miyyer/dan" ["e"=1]
"ronxin/wevi" -> "chrisjmccormick/word2vec_commented"
"ronxin/wevi" -> "mesnilgr/nbsvm"
"ronxin/wevi" -> "clab/dynet_tutorial_examples"
"ronxin/wevi" -> "uhh-lt/sensegram"
"ronxin/wevi" -> "wlin12/wang2vec"
"ronxin/wevi" -> "tmikolov/word2vec"
"ronxin/wevi" -> "medallia/Word2VecJava" ["e"=1]
"ronxin/wevi" -> "wnzhang/deep-ctr" ["e"=1]
"ronxin/wevi" -> "kojisekig/word2vec-lucene" ["e"=1]
"jalammar/jalammar.github.io" -> "jalammar/ecco"
"jalammar/jalammar.github.io" -> "utterworks/fast-bert"
"jalammar/jalammar.github.io" -> "kaushaltrivedi/bert-toxic-comments-multilabel" ["e"=1]
"jalammar/jalammar.github.io" -> "graykode/nlp-roadmap"
"jalammar/jalammar.github.io" -> "dair-ai/nlp_paper_summaries"
"alex-berard/multivec" -> "lmthang/bivec"
"alex-berard/multivec" -> "karlmoritz/bicvm"
"alex-berard/multivec" -> "shyamupa/biling-survey"
"andrewt3000/DL4NLP" -> "shashankg7/Deep-Learning-for-NLP-Resources"
"andrewt3000/DL4NLP" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"andrewt3000/DL4NLP" -> "kjw0612/awesome-rnn" ["e"=1]
"andrewt3000/DL4NLP" -> "lipiji/App-DL" ["e"=1]
"andrewt3000/DL4NLP" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"andrewt3000/DL4NLP" -> "yoonkim/CNN_sentence" ["e"=1]
"andrewt3000/DL4NLP" -> "rguthrie3/DeepLearningForNLPInPytorch"
"andrewt3000/DL4NLP" -> "ryankiros/skip-thoughts" ["e"=1]
"andrewt3000/DL4NLP" -> "Kyubyong/nlp_tasks"
"andrewt3000/DL4NLP" -> "facebookarchive/MemNN" ["e"=1]
"andrewt3000/DL4NLP" -> "keon/awesome-nlp"
"andrewt3000/DL4NLP" -> "dennybritz/cnn-text-classification-tf"
"andrewt3000/DL4NLP" -> "cemoody/lda2vec"
"andrewt3000/DL4NLP" -> "koth/kcws" ["e"=1]
"andrewt3000/DL4NLP" -> "edobashira/speech-language-processing" ["e"=1]
"TimSchopf/KeyphraseVectorizers" -> "memray/OpenNMT-kpg-release"
"affjljoo3581/Samsung-AI-Challenge-for-Scientific-Discovery" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"affjljoo3581/Samsung-AI-Challenge-for-Scientific-Discovery" -> "ds-wook/final-industry-university"
"affjljoo3581/Samsung-AI-Challenge-for-Scientific-Discovery" -> "ds-wook/BOJ"
"affjljoo3581/Samsung-AI-Challenge-for-Scientific-Discovery" -> "coverist/coverist-android"
"affjljoo3581/Samsung-AI-Challenge-for-Scientific-Discovery" -> "ds-wook/ml-project"
"affjljoo3581/Samsung-AI-Challenge-for-Scientific-Discovery" -> "ds-wook/DsProject"
"affjljoo3581/Job-Recommend-Competition" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"affjljoo3581/Job-Recommend-Competition" -> "affjljoo3581/Inverse-DALL-E-for-Optical-Character-Recognition"
"cure-lab/deep-active-learning" -> "avihu111/TypiClust"
"SapienzaNLP/extend" -> "davidberenstein1957/crosslingual-coreference"
"SapienzaNLP/extend" -> "SapienzaNLP/maverick-coref" ["e"=1]
"SapienzaNLP/extend" -> "Babelscape/ner4el" ["e"=1]
"SapienzaNLP/extend" -> "Babelscape/rebel" ["e"=1]
"SapienzaNLP/extend" -> "microsoft/spacy-ann-linker" ["e"=1]
"SapienzaNLP/extend" -> "Riccorl/transformers-embedder"
"SapienzaNLP/extend" -> "nicola-decao/efficient-autoregressive-EL" ["e"=1]
"SapienzaNLP/extend" -> "Babelscape/crocodile"
"AI4Bharat/IndicXlit" -> "indic-transliteration/indic_transliteration_py"
"AI4Bharat/IndicXlit" -> "AI4Bharat/IndicNLP-Transliteration"
"lvsh/keywordfinder" -> "snkim/AutomaticKeyphraseExtraction"
"tscheepers/word2vec" -> "deborausujono/word2vecpy"
"kengz/aiva" -> "kengz/spacy-nlp"
"kengz/aiva" -> "explosion/spacy-services"
"kengz/aiva" -> "kengz/CGKB"
"kengz/aiva" -> "superscriptjs/superscript" ["e"=1]
"kengz/aiva" -> "patrickjquinn/P-Brain.ai"
"kengz/aiva" -> "explosion/displacy-ent"
"kengz/aiva" -> "Melissa-AI/Melissa-Core" ["e"=1]
"kengz/aiva" -> "treethought/flask-assistant" ["e"=1]
"kengz/aiva" -> "ritwik12/Virtual-Assistant"
"kengz/aiva" -> "macournoyer/neuralconvo" ["e"=1]
"kengz/aiva" -> "explosion/spacy-dev-resources"
"kengz/aiva" -> "rkadlec/ubuntu-ranking-dataset-creator" ["e"=1]
"kengz/aiva" -> "erelsgl/limdu" ["e"=1]
"kengz/aiva" -> "ggeop/Python-ai-assistant" ["e"=1]
"kengz/aiva" -> "dennybritz/chatbot-retrieval" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "attardi/deepnl"
"UKPLab/deeplearning4nlp-tutorial" -> "shashankg7/Deep-Learning-for-NLP-Resources"
"UKPLab/deeplearning4nlp-tutorial" -> "UKPLab/elmo-bilstm-cnn-crf" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "davidsbatista/Annotated-Semantic-Relationships-Datasets" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "rouseguy/DeepLearning-NLP" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "clab/dynet_tutorial_examples"
"UKPLab/deeplearning4nlp-tutorial" -> "shyamupa/snli-entailment" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "karthikncode/nlp-datasets" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "TensorFlowKR/awesome_tensorflow_implementations" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "ryankiros/skip-thoughts" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "andrewt3000/DL4NLP"
"UKPLab/deeplearning4nlp-tutorial" -> "UKPLab/emnlp2017-bilstm-cnn-crf" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "richliao/textClassifier" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "harvardnlp/seq2seq-attn" ["e"=1]
"UKPLab/deeplearning4nlp-tutorial" -> "thunlp/NRE" ["e"=1]
"DeepLcom/deepl-dotnet" -> "DeepLcom/deepl-mock"
"hal3/ciml" -> "clab/dynet_tutorial_examples"
"hal3/ciml" -> "rasbt/deep-learning-book" ["e"=1]
"hal3/ciml" -> "jacobeisenstein/gt-nlp-class"
"hal3/ciml" -> "mavam/stat-cookbook" ["e"=1]
"hal3/ciml" -> "dmlc/mxnet-notebooks" ["e"=1]
"hal3/ciml" -> "neulab/nn4nlp-concepts"
"hal3/ciml" -> "clab/dynet"
"hal3/ciml" -> "joanbruna/stat212b" ["e"=1]
"hal3/ciml" -> "ben519/MLPB" ["e"=1]
"hal3/ciml" -> "fonnesbeck/Bios8366" ["e"=1]
"hal3/ciml" -> "floydhub/dl-setup" ["e"=1]
"hal3/ciml" -> "rlabbe/ThinkBayes" ["e"=1]
"aneesha/RAKE" -> "zelandiya/RAKE-tutorial"
"aneesha/RAKE" -> "davidadamojr/TextRank"
"aneesha/RAKE" -> "csurfer/rake-nltk"
"aneesha/RAKE" -> "summanlp/textrank"
"aneesha/RAKE" -> "snkim/AutomaticKeyphraseExtraction"
"aneesha/RAKE" -> "boudinfl/pke"
"aneesha/RAKE" -> "LIAAD/yake"
"aneesha/RAKE" -> "memray/seq2seq-keyphrase"
"aneesha/RAKE" -> "fabianvf/python-rake"
"aneesha/RAKE" -> "vgrabovets/multi_rake"
"aneesha/RAKE" -> "MaartenGr/KeyBERT"
"aneesha/RAKE" -> "zelandiya/maui"
"aneesha/RAKE" -> "letiantian/TextRank4ZH" ["e"=1]
"aneesha/RAKE" -> "cemoody/lda2vec"
"aneesha/RAKE" -> "DerwenAI/pytextrank"
"yxuansu/SimCTG" -> "yxuansu/Contrastive_Search_Is_What_You_Need"
"yxuansu/SimCTG" -> "yxuansu/MAGIC" ["e"=1]
"yxuansu/SimCTG" -> "krishnap25/mauve"
"yxuansu/SimCTG" -> "facebookresearch/unlikelihood_training"
"yxuansu/SimCTG" -> "Shark-NLP/CoNT" ["e"=1]
"yxuansu/SimCTG" -> "thu-coai/PaperForONLG"
"yxuansu/SimCTG" -> "yangkevin2/naacl-2021-fudge-controlled-generation"
"yxuansu/SimCTG" -> "yxuansu/TaCL"
"yxuansu/SimCTG" -> "XiangLi1999/ContrastiveDecoding" ["e"=1]
"yxuansu/SimCTG" -> "XiangLi1999/Diffusion-LM" ["e"=1]
"yxuansu/SimCTG" -> "uber-research/PPLM"
"yxuansu/SimCTG" -> "wyu97/KENLG-Reading" ["e"=1]
"lrei/nbsvm" -> "sidaw/nbsvm"
"J535D165/recordlinkage" -> "J535D165/data-matching-software"
"J535D165/recordlinkage" -> "dedupeio/dedupe"
"J535D165/recordlinkage" -> "moj-analytical-services/splink" ["e"=1]
"J535D165/recordlinkage" -> "dedupeio/dedupe-examples"
"J535D165/recordlinkage" -> "RobinL/fuzzymatcher"
"J535D165/recordlinkage" -> "ropeladder/record-linkage-resources"
"J535D165/recordlinkage" -> "anhaidgroup/deepmatcher"
"J535D165/recordlinkage" -> "scify/JedAIToolkit"
"J535D165/recordlinkage" -> "openvenues/pypostal"
"J535D165/recordlinkage" -> "zinggAI/zingg" ["e"=1]
"J535D165/recordlinkage" -> "anhaidgroup/py_entitymatching"
"J535D165/recordlinkage" -> "larsga/Duke"
"J535D165/recordlinkage" -> "jamesturk/jellyfish"
"J535D165/recordlinkage" -> "dedupeio/csvdedupe"
"J535D165/recordlinkage" -> "kosukeimai/fastLink"
"mfaruqui/eval-word-vectors" -> "kudkudak/word-embeddings-benchmarks"
"mfaruqui/eval-word-vectors" -> "shyamupa/bi-embedding"
"boudinfl/pke" -> "LIAAD/yake"
"boudinfl/pke" -> "swisscom/ai-research-keyphrase-extraction"
"boudinfl/pke" -> "MaartenGr/KeyBERT"
"boudinfl/pke" -> "boudinfl/ake-datasets"
"boudinfl/pke" -> "thunlp/BERT-KPE"
"boudinfl/pke" -> "LIAAD/KeywordExtractor-Datasets"
"boudinfl/pke" -> "memray/seq2seq-keyphrase"
"boudinfl/pke" -> "memray/OpenNMT-kpg-release"
"boudinfl/pke" -> "shangjingbo1226/AutoPhrase" ["e"=1]
"boudinfl/pke" -> "snkim/AutomaticKeyphraseExtraction"
"boudinfl/pke" -> "csurfer/rake-nltk"
"boudinfl/pke" -> "ibatra/BERT-Keyword-Extractor"
"boudinfl/pke" -> "DerwenAI/pytextrank"
"boudinfl/pke" -> "aneesha/RAKE"
"boudinfl/pke" -> "sunyilgdx/SIFRank_zh"
"DeNederlandscheBank/name_matching" -> "ing-bank/EntityMatchingModel"
"ntucllab/libact" -> "NUAA-AL/ALiPy"
"ntucllab/libact" -> "google/active-learning"
"ntucllab/libact" -> "modAL-python/modAL"
"ntucllab/libact" -> "ej0cl6/deep-active-learning"
"ntucllab/libact" -> "rmunro/pytorch_active_learning"
"ntucllab/libact" -> "dsgissin/DiscriminativeActiveLearning"
"ntucllab/libact" -> "ozansener/active_learning_coreset"
"ntucllab/libact" -> "sinhasam/vaal"
"ntucllab/libact" -> "JordanAsh/badge"
"ntucllab/libact" -> "baal-org/baal"
"ntucllab/libact" -> "iitml/AL"
"ntucllab/libact" -> "asiddhant/Active-NLP"
"ntucllab/libact" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"ntucllab/libact" -> "Boreaso/ALFramework"
"ntucllab/libact" -> "BlackHC/BatchBALD"
"AidanWelch/google-translate-api" -> "songkeys/translateer"
"ServiceNow/azimuth" -> "ServiceNow/WorkArena" ["e"=1]
"ServiceNow/azimuth" -> "baal-org/baal"
"ServiceNow/azimuth" -> "ServiceNow/AgentLab" ["e"=1]
"suyashb95/WiktionaryParser" -> "tatuylonen/wiktextract"
"suyashb95/WiktionaryParser" -> "componavt/wikokit"
"suyashb95/WiktionaryParser" -> "tatuylonen/wikitextprocessor"
"suyashb95/WiktionaryParser" -> "hermitdave/FrequencyWords"
"suyashb95/WiktionaryParser" -> "juditacs/wikt2dict"
"suyashb95/WiktionaryParser" -> "dkpro/dkpro-jwktl"
"suyashb95/WiktionaryParser" -> "benreynwar/wiktionary-parser"
"suyashb95/WiktionaryParser" -> "words/wiktionary"
"DeepLcom/deepl-node" -> "DeepLcom/deepl-dotnet"
"DeepLcom/deepl-node" -> "DeepLcom/openapi"
"A-safarji/Time-series-deep-learning" -> "ojasphansekar/Zillow-Home-Value-Prediction"
"dkpro/dkpro-jwpl" -> "dkpro/dkpro-jwktl"
"dkpro/dkpro-jwpl" -> "dkpro/dkpro-core"
"google-research/url-nlp" -> "cisnlp/Glot500"
"google-research/url-nlp" -> "antonisa/lang2vec"
"uhh-lt/sensegram" -> "lopuhin/python-adagram"
"freedict/fd-dictionaries" -> "wordset/wordset-dictionary"
"freedict/fd-dictionaries" -> "itkach/slob"
"freedict/fd-dictionaries" -> "freedict/tools"
"freedict/fd-dictionaries" -> "huzheng001/stardict-3" ["e"=1]
"vedic-lang/vedic" -> "vedicscriptures/bhagavad-gita-api"
"vedic-lang/vedic" -> "vedic-lang/vedic-lang.github.io"
"vedic-lang/vedic" -> "vedic-lang/vedic-ide"
"vedic-lang/vedic" -> "ihdia/sanskrit-ocr"
"vedic-lang/vedic" -> "sanskrit/sanskrit"
"explosion/floret" -> "KennethEnevoldsen/augmenty"
"explosion/floret" -> "pmbaumgartner/spacy-html-tokenizer"
"explosion/floret" -> "explosion/spacy-experimental"
"explosion/floret" -> "msg-systems/coreferee"
"rdoeffinger/Dictionary" -> "itkach/aard2-android"
"rdoeffinger/Dictionary" -> "rdoeffinger/DictionaryPC"
"rdoeffinger/Dictionary" -> "namndev/QDict"
"kosukeimai/wru" -> "kosukeimai/fastLink"
"waseem18/Hacks" -> "waseem18/Openflock"
"NiuTrans/MTVenues" -> "NiuTrans/LanguageCodes"
"shashankg7/Deep-Learning-for-NLP-Resources" -> "andrewt3000/DL4NLP"
"shashankg7/Deep-Learning-for-NLP-Resources" -> "attardi/deepnl"
"shashankg7/Deep-Learning-for-NLP-Resources" -> "UKPLab/deeplearning4nlp-tutorial"
"shashankg7/Deep-Learning-for-NLP-Resources" -> "kristjankorjus/applied-deep-learning-resources" ["e"=1]
"shashankg7/Deep-Learning-for-NLP-Resources" -> "lipiji/App-DL" ["e"=1]
"shashankg7/Deep-Learning-for-NLP-Resources" -> "karthikncode/nlp-datasets" ["e"=1]
"AminParvaneh/alpha_mix_active_learning" -> "PrateekMunjal/TorchAL"
"AminParvaneh/alpha_mix_active_learning" -> "johnsk95/PT4AL"
"AminParvaneh/alpha_mix_active_learning" -> "sharat29ag/CDAL"
"AminParvaneh/alpha_mix_active_learning" -> "NVlabs/AL-MDN"
"AminParvaneh/alpha_mix_active_learning" -> "avihu111/TypiClust"
"AminParvaneh/alpha_mix_active_learning" -> "razvancaramalau/Sequential-GCN-for-Active-Learning"
"erodola/DLAI-s2-2022" -> "gtolomei/big-data-computing"
"davidberenstein1957/concise-concepts" -> "IBM/zshot" ["e"=1]
"davidberenstein1957/concise-concepts" -> "davidberenstein1957/classy-classification"
"davidberenstein1957/concise-concepts" -> "KennethEnevoldsen/augmenty"
"davidberenstein1957/concise-concepts" -> "richardpaulhudson/holmes-extractor"
"davidberenstein1957/concise-concepts" -> "sayef/fsner"
"davidberenstein1957/concise-concepts" -> "davidberenstein1957/crosslingual-coreference"
"davidberenstein1957/concise-concepts" -> "davidberenstein1957/fast-sentence-transformers"
"davidberenstein1957/concise-concepts" -> "NorskRegnesentral/skweak"
"davidberenstein1957/concise-concepts" -> "infinitylogesh/mutate"
"davidberenstein1957/concise-concepts" -> "kabirkhan/recon"
"davidberenstein1957/concise-concepts" -> "JulesBelveze/concepcy"
"danish-foundation-models/site" -> "KennethEnevoldsen/scandinavian-embedding-benchmark"
"danish-foundation-models/site" -> "centre-for-humanities-computing/DaCy"
"danish-foundation-models/site" -> "EuroEval/EuroEval"
"danish-foundation-models/site" -> "KennethEnevoldsen/spacy-wrap"
"danish-foundation-models/site" -> "Aarhus-Psychiatry-Research/timeseriesflattener"
"KennethEnevoldsen/asent" -> "KennethEnevoldsen/spacy-wrap"
"neopunisher/Open-Text-Summarizer" -> "thavelick/summarize"
"sidaw/nbsvm" -> "lrei/nbsvm"
"sidaw/nbsvm" -> "mesnilgr/nbsvm"
"davidberenstein1957/classy-classification" -> "davidberenstein1957/crosslingual-coreference"
"davidberenstein1957/classy-classification" -> "davidberenstein1957/fast-sentence-transformers"
"davidberenstein1957/classy-classification" -> "davidberenstein1957/concise-concepts"
"davidberenstein1957/classy-classification" -> "KennethEnevoldsen/augmenty"
"davidberenstein1957/classy-classification" -> "davidberenstein1957/spacy-setfit" ["e"=1]
"davidberenstein1957/crosslingual-coreference" -> "KennethEnevoldsen/augmenty"
"davidberenstein1957/crosslingual-coreference" -> "davidberenstein1957/fast-sentence-transformers"
"davidberenstein1957/crosslingual-coreference" -> "SapienzaNLP/extend"
"davidberenstein1957/crosslingual-coreference" -> "davidberenstein1957/classy-classification"
"stanfordnlp/spinn" -> "nyu-mll/spinn"
"stanfordnlp/spinn" -> "jekbradbury/examples"
"stanfordnlp/spinn" -> "jihunchoi/unsupervised-treelstm"
"mourga/contrastive-active-learning" -> "mourga/affective-attention"
"mourga/contrastive-active-learning" -> "mourga/transformer-uncertainty"
"mourga/contrastive-active-learning" -> "mourga/variational-lstm"
"mourga/contrastive-active-learning" -> "mourga/awd-lstm-lm"
"mourga/contrastive-active-learning" -> "alexandra-chron/ntua-slp-wassa-iest2018"
"johnsk95/PT4AL" -> "J911/J911" ["e"=1]
"johnsk95/PT4AL" -> "avihu111/TypiClust"
"tk120404/thirukkural" -> "tk120404/Aathichudi"
"tk120404/thirukkural" -> "tk120404/tamilproverbs"
"tk120404/thirukkural" -> "vijayanandrp/Thirukkural-Tamil-Dataset"
"GradySimon/tensorflow-glove" -> "hans/glove.py"
"GradySimon/tensorflow-glove" -> "guillaume-chevalier/GloVe-as-a-TensorFlow-Embedding-Layer"
"GradySimon/tensorflow-glove" -> "maciejkula/glove-python"
"GradySimon/tensorflow-glove" -> "carpedm20/neural-summary-tensorflow" ["e"=1]
"richardpaulhudson/coreferee" -> "msg-systems/coreferee"
"richardpaulhudson/coreferee" -> "davidberenstein1957/crosslingual-coreference"
"richardpaulhudson/coreferee" -> "richardpaulhudson/holmes-extractor"
"davidberenstein1957/fast-sentence-transformers" -> "davidberenstein1957/crosslingual-coreference"
"xnliang98/uke_ccrank" -> "hd10-iupui/AttentionRank"
"LinhanZ/mderank" -> "hd10-iupui/AttentionRank"
"LinhanZ/mderank" -> "MySong7NLPer/HyperMatch"
"LinhanZ/mderank" -> "xnliang98/uke_ccrank"
"LinhanZ/mderank" -> "sunyilgdx/SIFRank"
"LinhanZ/mderank" -> "NKU-HLT/PromptRank"
"MySong7NLPer/ChatGPT_as_Keyphrase_Extractor" -> "MySong7NLPer/HyperSiameseNet"
"MySong7NLPer/ChatGPT_as_Keyphrase_Extractor" -> "MySong7NLPer/HISum"
"MySong7NLPer/ChatGPT_as_Keyphrase_Extractor" -> "MySong7NLPer/AI-Conference-Acceptance-Rate"
"MySong7NLPer/ChatGPT_as_Keyphrase_Extractor" -> "MySong7NLPer/ChineseKeyphraseExtraction"
"MySong7NLPer/ChatGPT_as_Keyphrase_Extractor" -> "MySong7NLPer/ResearchWriting-Tips"
"MySong7NLPer/ChatGPT_as_Keyphrase_Extractor" -> "MySong7NLPer/ALCO"
"MySong7NLPer/ChatGPT_as_Keyphrase_Extractor" -> "MySong7NLPer/Presentations-Notes"
"MySong7NLPer/ChatGPT_as_Keyphrase_Extractor" -> "MySong7NLPer/HyperMatch"
"MySong7NLPer/HyperMatch" -> "MySong7NLPer/HyperSiameseNet"
"MySong7NLPer/HyperMatch" -> "MySong7NLPer/HISum"
"MySong7NLPer/HyperMatch" -> "MySong7NLPer/AI-Conference-Acceptance-Rate"
"MySong7NLPer/HyperMatch" -> "MySong7NLPer/ChineseKeyphraseExtraction"
"MySong7NLPer/HyperMatch" -> "MySong7NLPer/ResearchWriting-Tips"
"MySong7NLPer/HyperMatch" -> "MySong7NLPer/Presentations-Notes"
"MySong7NLPer/HyperMatch" -> "MySong7NLPer/ChatGPT_as_Keyphrase_Extractor"
"MySong7NLPer/HyperMatch" -> "MySong7NLPer/ALCO"
"programminghistorian/ph-submissions" -> "programminghistorian/jekyll"
"senderle/topic-modeling-tool" -> "cu-nil/chnotes"
"MySong7NLPer/KeyphraseExtractionSurvey" -> "MySong7NLPer/AI-Conference-Acceptance-Rate"
"MySong7NLPer/KeyphraseExtractionSurvey" -> "MySong7NLPer/ChineseKeyphraseExtraction"
"MySong7NLPer/KeyphraseExtractionSurvey" -> "MySong7NLPer/ResearchWriting-Tips"
"MySong7NLPer/KeyphraseExtractionSurvey" -> "MySong7NLPer/HyperSiameseNet"
"MySong7NLPer/KeyphraseExtractionSurvey" -> "MySong7NLPer/HISum"
"MySong7NLPer/KeyphraseExtractionSurvey" -> "MySong7NLPer/ChatGPT_as_Keyphrase_Extractor"
"MySong7NLPer/KeyphraseExtractionSurvey" -> "MySong7NLPer/Presentations-Notes"
"MySong7NLPer/KeyphraseExtractionSurvey" -> "MySong7NLPer/ALCO"
"MySong7NLPer/KeyphraseExtractionSurvey" -> "MySong7NLPer/HyperMatch"
"qkaren/COLD_decoding" -> "Sachin19/mucoco"
"qkaren/COLD_decoding" -> "launchnlp/BOLT"
"qkaren/COLD_decoding" -> "mireshghallah/mixmatch"
"AI4Bharat/Shoonya-Backend" -> "AI4Bharat/Shoonya-Frontend"
"AI4Bharat/Shoonya-Backend" -> "AI4Bharat/Chitralekha-Backend"
"avihu111/TypiClust" -> "PrateekMunjal/TorchAL"
"avihu111/TypiClust" -> "SineZHAN/deepALplus"
"avihu111/TypiClust" -> "johnsk95/PT4AL"
"avihu111/TypiClust" -> "MedICL-VU/COLosSAL"
"avihu111/TypiClust" -> "yichen928/ActiveFT"
"avihu111/TypiClust" -> "cliangyu/CSVAL"
"avihu111/TypiClust" -> "acl21/deep-active-learning-pytorch"
"avihu111/TypiClust" -> "JordanAsh/badge"
"avihu111/TypiClust" -> "AminParvaneh/alpha_mix_active_learning"
"avihu111/TypiClust" -> "LightersWang/Awesome-Active-Learning-for-Medical-Image-Analysis"
"avihu111/TypiClust" -> "HealthML/active-segmentation"
"ds-wook/ai-hackathon" -> "ds-wook/ventilator-pressure-prediction"
"openeventdata/petrarch2" -> "openeventdata/petrarch"
"openeventdata/petrarch2" -> "openeventdata/phoenix_pipeline"
"openeventdata/petrarch2" -> "openeventdata/PLOVER"
"Sachin19/mucoco" -> "mireshghallah/mixmatch"
"Sachin19/mucoco" -> "qkaren/COLD_decoding"
"AI4Bharat/Chitralekha-Backend" -> "AI4Bharat/Shoonya-Backend"
"yxuansu/TaCL" -> "yxuansu/Chinese-TaCL-BERT-NER-CWS"
"yxuansu/TaCL" -> "yxuansu/Awesome_Diffusions"
"tk120404/Aathichudi" -> "tk120404/tamilproverbs"
"tk120404/Aathichudi" -> "tk120404/thirukkural"
"fh295/SentenceRepresentation" -> "jwieting/iclr2016"
"JackHck/SBCL" -> "JackHck/MADAug"
"RockyLzy/TextDefender" -> "dugu9sword/dne"
"RockyLzy/TextDefender" -> "dongxinshuai/ASCC"
"RockyLzy/TextDefender" -> "zjiehang/RanMASK"
"kw-service/klas-helper-extension" -> "IceCream0910/kw-klas-plus"
"kw-service/klas-helper-extension" -> "kw-service/klas-helper-userscript"
"jmhessel/FightingWords" -> "kenlimmj/fightin-words"
"andrea-gasparini/f1-racing-cars-tracking" -> "LeonardoEmili/stock-price-forecasting"
"code-kern-ai/sequence-learn" -> "code-kern-ai/embedders"
"code-kern-ai/embedders" -> "code-kern-ai/sequence-learn"
"code-kern-ai/embedders" -> "code-kern-ai/refinery-python-sdk"
"rapidfuzz/JaroWinkler" -> "rapidfuzz/CyDifflib"
"kw-service/kw-notice-v1" -> "readme-generator/alreadyme-ai-serving"
"yichen928/FreeSel" -> "yichen928/ActiveFT"
"HqWu-HITCS/Awesome-Keyphrase-Prediction" -> "xiaowu0162/low-resource-kpgen"
"HqWu-HITCS/Awesome-Keyphrase-Prediction" -> "uclanlp/DeepKPG"
"ds-wook/amex-default-prediction" -> "ds-wook/ventilator-pressure-prediction"
"yjyoon-dev/ssoda-flutter" -> "yjyoon-dev/yjyoon-dev.github.io"
"ds-wook/ventilator-pressure-prediction" -> "ds-wook/ds-wook"
"brmson/dataset-sts" -> "facebookresearch/SentEval"
"brmson/dataset-sts" -> "ryankiros/skip-thoughts" ["e"=1]
"brmson/dataset-sts" -> "airalcorn2/Deep-Semantic-Similarity-Model" ["e"=1]
"brmson/dataset-sts" -> "dhwajraj/deep-siamese-text-similarity" ["e"=1]
"brmson/dataset-sts" -> "zhiguowang/BiMPM" ["e"=1]
"brmson/dataset-sts" -> "shuzi/insuranceQA" ["e"=1]
"brmson/dataset-sts" -> "alvations/stasis"
"brmson/dataset-sts" -> "aditya1503/Siamese-LSTM" ["e"=1]
"brmson/dataset-sts" -> "facebookresearch/InferSent"
"brmson/dataset-sts" -> "mfaruqui/retrofitting"
"brmson/dataset-sts" -> "mkusner/wmd"
"brmson/dataset-sts" -> "facebookarchive/MemNN" ["e"=1]
"brmson/dataset-sts" -> "PrincetonML/SIF"
"brmson/dataset-sts" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"brmson/dataset-sts" -> "google-research-datasets/paws" ["e"=1]
"snorkel-team/snorkel" -> "allenai/allennlp"
"snorkel-team/snorkel" -> "snorkel-team/snorkel-tutorials"
"snorkel-team/snorkel" -> "flairNLP/flair"
"snorkel-team/snorkel" -> "doccano/doccano" ["e"=1]
"snorkel-team/snorkel" -> "facebookresearch/pytext"
"snorkel-team/snorkel" -> "marcotcr/lime" ["e"=1]
"snorkel-team/snorkel" -> "HazyResearch/deepdive"
"snorkel-team/snorkel" -> "zihangdai/xlnet"
"snorkel-team/snorkel" -> "facebookresearch/StarSpace"
"snorkel-team/snorkel" -> "iterative/dvc" ["e"=1]
"snorkel-team/snorkel" -> "makcedward/nlpaug"
"snorkel-team/snorkel" -> "scikit-learn-contrib/imbalanced-learn" ["e"=1]
"snorkel-team/snorkel" -> "jina-ai/clip-as-service"
"snorkel-team/snorkel" -> "sebastianruder/NLP-progress"
"snorkel-team/snorkel" -> "interpretml/interpret" ["e"=1]
"williamleif/histwords" -> "yifan0sun/DynamicWord2Vec"
"williamleif/histwords" -> "nikhgarg/EmbeddingDynamicStereotypes"
"williamleif/histwords" -> "williamleif/socialsent"
"williamleif/histwords" -> "valedica/twec"
"williamleif/histwords" -> "jacobeisenstein/language-change-tutorial"
"williamleif/histwords" -> "williamleif/social-lstm"
"williamleif/histwords" -> "taylor-arnold/cleanNLP" ["e"=1]
"williamleif/histwords" -> "tdszyman/twapy"
"williamleif/histwords" -> "martingerlach/hSBM_Topicmodel"
"williamleif/histwords" -> "glnmario/cwr4lsc"
"williamleif/histwords" -> "derekgreene/dynamic-nmf" ["e"=1]
"williamleif/histwords" -> "viveksck/langchangetrack"
"williamleif/histwords" -> "dbamman/book-nlp"
"williamleif/histwords" -> "jacobeisenstein/probabilistic-lexicon-classification"
"williamleif/histwords" -> "dustinstoltz/CMDist"
"explosion/sense2vec" -> "explosion/projects"
"explosion/sense2vec" -> "chartbeat-labs/textacy"
"explosion/sense2vec" -> "explosion/thinc"
"explosion/sense2vec" -> "explosion/spacy-transformers"
"explosion/sense2vec" -> "ryankiros/skip-thoughts" ["e"=1]
"explosion/sense2vec" -> "facebookresearch/InferSent"
"explosion/sense2vec" -> "DerwenAI/pytextrank"
"explosion/sense2vec" -> "explosion/spacy-stanza"
"explosion/sense2vec" -> "huggingface/neuralcoref"
"explosion/sense2vec" -> "explosion/prodigy-recipes"
"explosion/sense2vec" -> "JasonKessler/scattertext"
"explosion/sense2vec" -> "aboSamoor/polyglot"
"explosion/sense2vec" -> "cemoody/lda2vec"
"explosion/sense2vec" -> "ICLRandD/Blackstone" ["e"=1]
"explosion/sense2vec" -> "epfml/sent2vec"
"chartbeat-labs/textacy" -> "huggingface/neuralcoref"
"chartbeat-labs/textacy" -> "explosion/sense2vec"
"chartbeat-labs/textacy" -> "DerwenAI/pytextrank"
"chartbeat-labs/textacy" -> "explosion/thinc"
"chartbeat-labs/textacy" -> "explosion/spacy-transformers"
"chartbeat-labs/textacy" -> "JasonKessler/scattertext"
"chartbeat-labs/textacy" -> "aboSamoor/polyglot"
"chartbeat-labs/textacy" -> "explosion/spacy-course"
"chartbeat-labs/textacy" -> "explosion/spacy-stanza"
"chartbeat-labs/textacy" -> "allenai/scispacy" ["e"=1]
"chartbeat-labs/textacy" -> "explosion/projects"
"chartbeat-labs/textacy" -> "cemoody/lda2vec"
"chartbeat-labs/textacy" -> "boudinfl/pke"
"chartbeat-labs/textacy" -> "LIAAD/yake"
"chartbeat-labs/textacy" -> "bmabey/pyLDAvis"
"niderhoff/nlp-datasets" -> "sebastianruder/NLP-progress"
"niderhoff/nlp-datasets" -> "keon/awesome-nlp"
"niderhoff/nlp-datasets" -> "allenai/allennlp"
"niderhoff/nlp-datasets" -> "flairNLP/flair"
"niderhoff/nlp-datasets" -> "jina-ai/clip-as-service"
"niderhoff/nlp-datasets" -> "Kyubyong/nlp_tasks"
"niderhoff/nlp-datasets" -> "brightmart/text_classification" ["e"=1]
"niderhoff/nlp-datasets" -> "OpenNMT/OpenNMT-py"
"niderhoff/nlp-datasets" -> "facebookresearch/fastText"
"niderhoff/nlp-datasets" -> "google/sentencepiece"
"niderhoff/nlp-datasets" -> "zihangdai/xlnet"
"niderhoff/nlp-datasets" -> "jacobeisenstein/gt-nlp-class"
"niderhoff/nlp-datasets" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"niderhoff/nlp-datasets" -> "stanfordnlp/GloVe"
"niderhoff/nlp-datasets" -> "pytorch/text"
"Ejhfast/empath-client" -> "chbrown/liwc-python"
"Ejhfast/empath-client" -> "kbenoit/quanteda.dictionaries"
"Ejhfast/empath-client" -> "CornellNLP/ConvoKit"
"Ejhfast/empath-client" -> "dlatk/dlatk"
"Ejhfast/empath-client" -> "ryanjgallagher/shifterator"
"Ejhfast/empath-client" -> "seanrife/psyLex"
"facebookresearch/pysparnn" -> "pixelogik/NearPy" ["e"=1]
"facebookresearch/pysparnn" -> "ryanrhymes/panns" ["e"=1]
"facebookresearch/pysparnn" -> "nmslib/nmslib" ["e"=1]
"facebookresearch/pysparnn" -> "salestock/fastText.py"
"facebookresearch/pysparnn" -> "spotify/annoy"
"facebookresearch/pysparnn" -> "FALCONN-LIB/FALCONN" ["e"=1]
"facebookresearch/pysparnn" -> "facebookresearch/CommAI-env" ["e"=1]
"facebookresearch/pysparnn" -> "yahoo/lopq" ["e"=1]
"facebookresearch/pysparnn" -> "facebookresearch/darkforestGo" ["e"=1]
"facebookresearch/pysparnn" -> "facebookarchive/fbpca" ["e"=1]
"facebookresearch/pysparnn" -> "facebookresearch/StarSpace"
"facebookresearch/pysparnn" -> "microsoft/LightLDA" ["e"=1]
"facebookresearch/pysparnn" -> "facebookresearch/multipathnet" ["e"=1]
"facebookresearch/pysparnn" -> "scikit-learn-contrib/polylearn" ["e"=1]
"facebookresearch/pysparnn" -> "facebookresearch/adaptive-softmax" ["e"=1]
"datquocnguyen/RDRPOSTagger" -> "datquocnguyen/jPTDP"
"datquocnguyen/RDRPOSTagger" -> "datquocnguyen/VnDT"
"datquocnguyen/RDRPOSTagger" -> "datquocnguyen/jLDADMM" ["e"=1]
"matheuss/google-translate-api" -> "vitalets/google-translate-api"
"matheuss/google-translate-api" -> "matheuss/google-translate-token"
"matheuss/google-translate-api" -> "ssut/py-googletrans"
"matheuss/google-translate-api" -> "cjvnjde/google-translate-api-browser"
"matheuss/google-translate-api" -> "Stichoza/google-translate-php" ["e"=1]
"matheuss/google-translate-api" -> "iamtraction/google-translate"
"matheuss/google-translate-api" -> "hua1995116/google-translate-open-api"
"matheuss/google-translate-api" -> "LibreTranslate/LibreTranslate" ["e"=1]
"matheuss/google-translate-api" -> "googleapis/nodejs-translate" ["e"=1]
"matheuss/google-translate-api" -> "yixianle/translate-api" ["e"=1]
"matheuss/google-translate-api" -> "yixianle/google-translate" ["e"=1]
"matheuss/google-translate-api" -> "franciscop/translate"
"matheuss/google-translate-api" -> "bregydoc/gtranslate"
"matheuss/google-translate-api" -> "nidhaloff/deep-translator"
"matheuss/google-translate-api" -> "matheuss/vertaler"
"CornellNLP/ConvoKit" -> "sudhof/politeness"
"CornellNLP/ConvoKit" -> "facebookresearch/EmpatheticDialogues" ["e"=1]
"CornellNLP/ConvoKit" -> "Ejhfast/empath-client"
"CornellNLP/ConvoKit" -> "dbamman/litbank"
"CornellNLP/ConvoKit" -> "jmhessel/FightingWords"
"CornellNLP/ConvoKit" -> "cgpotts/swda"
"CornellNLP/ConvoKit" -> "alexa/dialoglue" ["e"=1]
"CornellNLP/ConvoKit" -> "williamleif/histwords"
"CornellNLP/ConvoKit" -> "PolyAI-LDN/conversational-datasets" ["e"=1]
"CornellNLP/ConvoKit" -> "emorynlp/character-mining"
"CornellNLP/ConvoKit" -> "alexa/Topical-Chat" ["e"=1]
"CornellNLP/ConvoKit" -> "ryanjgallagher/shifterator"
"CornellNLP/ConvoKit" -> "dopefishh/pympi"
"CornellNLP/ConvoKit" -> "zhijing-jin/NLP4SocialGood_Papers" ["e"=1]
"CornellNLP/ConvoKit" -> "booknlp/booknlp"
"JohnSnowLabs/langtest" -> "JohnSnowLabs/johnsnowlabs"
"JohnSnowLabs/langtest" -> "JohnSnowLabs/spark-nlp-workshop"
"JohnSnowLabs/langtest" -> "AfaanBilal/koshur-lang"
"costezki/awesome-nlprojects" -> "ElizaLo/NLP-Natural-Language-Processing"
"costezki/awesome-nlprojects" -> "NirantK/NLP_Quickbook"
"costezki/awesome-nlprojects" -> "brianspiering/awesome-dl4nlp"
"costezki/awesome-nlprojects" -> "PacktPublishing/Advanced-NLP-Projects-with-TensorFlow-2.0" ["e"=1]
"commonsense/conceptnet" -> "commonsense/luminoso"
"commonsense/conceptnet" -> "commonsense/omcs"
"indic-transliteration/sanscript.js" -> "sanskrit/raw_etexts"
"indic-transliteration/sanscript.js" -> "sarit/SARIT-corpus"
"AI4Bharat/Chitralekha" -> "AI4Bharat/Chitralekha-Backend"
"code-kern-ai/refinery" -> "code-kern-ai/bricks" ["e"=1]
"code-kern-ai/refinery" -> "argilla-io/argilla"
"code-kern-ai/refinery" -> "NorskRegnesentral/skweak"
"code-kern-ai/refinery" -> "huggingface/setfit"
"code-kern-ai/refinery" -> "davidberenstein1957/concise-concepts"
"code-kern-ai/refinery" -> "koaning/embetter" ["e"=1]
"code-kern-ai/refinery" -> "impira/docquery" ["e"=1]
"code-kern-ai/refinery" -> "code-kern-ai/automl-docker"
"code-kern-ai/refinery" -> "webis-de/small-text"
"code-kern-ai/refinery" -> "explosion/spacy-llm" ["e"=1]
"code-kern-ai/refinery" -> "code-kern-ai/sequence-learn"
"code-kern-ai/refinery" -> "orchest/orchest" ["e"=1]
"code-kern-ai/refinery" -> "qdrant/quaterion" ["e"=1]
"code-kern-ai/refinery" -> "koaning/bulk" ["e"=1]
"code-kern-ai/refinery" -> "cdpierse/transformers-interpret"
"explosion/prodigy-openai-recipes" -> "ahalterman/multiuser_prodigy"
"explosion/prodigy-openai-recipes" -> "explosion/prodigy-recipes"
"explosion/prodigy-openai-recipes" -> "explosion/radicli" ["e"=1]
"kw-service/kw-notice-android-v2" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"kw-service/kw-notice-android-v2" -> "affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves"
"kw-service/kw-notice-android-v2" -> "affjljoo3581/starcoder-jax"
"huggingface/setfit" -> "argilla-io/argilla"
"huggingface/setfit" -> "urchade/GLiNER" ["e"=1]
"huggingface/setfit" -> "MaartenGr/BERTopic"
"huggingface/setfit" -> "webis-de/small-text"
"huggingface/setfit" -> "ddangelov/Top2Vec"
"huggingface/setfit" -> "huggingface/optimum" ["e"=1]
"huggingface/setfit" -> "cdpierse/transformers-interpret"
"huggingface/setfit" -> "MaartenGr/KeyBERT"
"huggingface/setfit" -> "stanford-futuredata/ColBERT" ["e"=1]
"huggingface/setfit" -> "AnswerDotAI/RAGatouille" ["e"=1]
"huggingface/setfit" -> "makcedward/nlpaug"
"huggingface/setfit" -> "tomaarsen/SpanMarkerNER" ["e"=1]
"huggingface/setfit" -> "UKPLab/sentence-transformers"
"huggingface/setfit" -> "AnswerDotAI/ModernBERT" ["e"=1]
"huggingface/setfit" -> "huggingface/text-embeddings-inference" ["e"=1]
"AI4Bharat/Indic-TTS" -> "smtiitm/Fastspeech2_HS"
"AI4Bharat/Indic-TTS" -> "AI4Bharat/IndicTrans2"
"AI4Bharat/Indic-TTS" -> "AI4Bharat/IndicWav2Vec"
"AI4Bharat/Indic-TTS" -> "Open-Speech-EkStep/vakyansh-models"
"AI4Bharat/Indic-TTS" -> "smtiitm/Fastspeech2_MFA"
"kbenoit/LIWCalike" -> "kbenoit/quanteda.dictionaries"
"alexandres/lexvec" -> "agnusmaximus/Word2Bits"
"alexandres/lexvec" -> "advancedlogic/go-freeling" ["e"=1]
"alexandres/lexvec" -> "benathi/word2gm"
"alexandres/lexvec" -> "mkusner/wmd"
"alexandres/lexvec" -> "mfaruqui/retrofitting"
"alexandres/lexvec" -> "ryankiros/skip-thoughts" ["e"=1]
"alexandres/lexvec" -> "stanfordnlp/spinn"
"alexandres/lexvec" -> "cemoody/lda2vec"
"alexandres/lexvec" -> "clab/dynet_tutorial_examples"
"alexandres/lexvec" -> "3Top/word2vec-api"
"alexandres/lexvec" -> "orenmel/context2vec"
"AI-team-UoA/pyJedAI" -> "AI-team-UoA/JedAI-WebApp"
"readme-generator/alreadyme-desktop" -> "kw-service/kw-notice-android-v2"
"readme-generator/alreadyme-desktop" -> "readme-generator/alreadyme-ai-serving"
"readme-generator/alreadyme-desktop" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"readme-generator/alreadyme-desktop" -> "affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves"
"readme-generator/alreadyme-desktop" -> "affjljoo3581/starcoder-jax"
"readme-generator/alreadyme-desktop" -> "readme-generator/alreadyme-ai-research"
"JackHCC/Chinese-Keyphrase-Extraction" -> "LinhanZ/mderank"
"JackHCC/Chinese-Keyphrase-Extraction" -> "Tony0726/Keyword-Extraction"
"nmrksic/counter-fitting" -> "mfaruqui/retrofitting"
"nmrksic/counter-fitting" -> "thunlp/SememePSO-Attack"
"nmrksic/counter-fitting" -> "JHL-HUST/PWWS"
"nmrksic/counter-fitting" -> "nesl/nlp_adversarial_examples"
"ChenhongyiYang/PPAL" -> "sharat29ag/CDAL"
"ChenhongyiYang/PPAL" -> "we1pingyu/CALD"
"ChenhongyiYang/PPAL" -> "huyvvo/BiB"
"ChenhongyiYang/PPAL" -> "NVlabs/AL-MDN"
"graphbrain/graphbrain" -> "kevinlu1248/pyate"
"graphbrain/graphbrain" -> "msg-systems/holmes-extractor"
"graphbrain/graphbrain" -> "erre-quadro/spikex"
"graphbrain/graphbrain" -> "jenojp/negspacy" ["e"=1]
"graphbrain/graphbrain" -> "NIHOPA/NLPre"
"graphbrain/graphbrain" -> "R1j1t/contextualSpellCheck" ["e"=1]
"graphbrain/graphbrain" -> "ICLRandD/Blackstone" ["e"=1]
"graphbrain/graphbrain" -> "argilla-io/spacy-wordnet"
"graphbrain/graphbrain" -> "textpipe/textpipe"
"graphbrain/graphbrain" -> "explosion/projects"
"graphbrain/graphbrain" -> "WZBSocialScienceCenter/tmtoolkit"
"graphbrain/graphbrain" -> "explosion/sense2vec"
"mmihaltz/word2vec-GoogleNews-vectors" -> "3Top/word2vec-api"
"mmihaltz/word2vec-GoogleNews-vectors" -> "eyaler/word2vec-slim"
"mmihaltz/word2vec-GoogleNews-vectors" -> "chrisjmccormick/inspect_word2vec"
"djz233/D-DGCN" -> "TaoYang225/AD-DROP"
"djz233/D-DGCN" -> "emorynlp/personality-detection"
"MaxwellRebo/awesome-2vec" -> "chihming/awesome-network-embedding" ["e"=1]
"MaxwellRebo/awesome-2vec" -> "Hironsan/awesome-embedding-models"
"MaxwellRebo/awesome-2vec" -> "thunlp/NRLPapers" ["e"=1]
"MaxwellRebo/awesome-2vec" -> "geffy/tffm" ["e"=1]
"MaxwellRebo/awesome-2vec" -> "jhlau/doc2vec"
"MaxwellRebo/awesome-2vec" -> "Separius/awesome-sentence-embedding"
"MaxwellRebo/awesome-2vec" -> "bdhingra/tweet2vec" ["e"=1]
"MaxwellRebo/awesome-2vec" -> "askerlee/topicvec" ["e"=1]
"MaxwellRebo/awesome-2vec" -> "facebookresearch/StarSpace"
"MaxwellRebo/awesome-2vec" -> "thunlp/OpenNE" ["e"=1]
"MaxwellRebo/awesome-2vec" -> "tangjianpku/LINE" ["e"=1]
"MaxwellRebo/awesome-2vec" -> "benedekrozemberczki/AttentionWalk" ["e"=1]
"MaxwellRebo/awesome-2vec" -> "klb3713/sentence2vec"
"MaxwellRebo/awesome-2vec" -> "mnqu/PTE" ["e"=1]
"MaxwellRebo/awesome-2vec" -> "nate-russell/Network-Embedding-Resources"
"waseem18/Openflock" -> "waseem18/Hacks"
"johnlonganecker/libpostal-rest" -> "johnlonganecker/libpostal-rest-docker"
"elikip/bist-parser" -> "tdozat/Parser-v1"
"elikip/bist-parser" -> "clab/lstm-parser"
"elikip/bist-parser" -> "UppsalaNLP/uuparser"
"elikip/bist-parser" -> "akjindal53244/dependency_parsing_tf"
"elikip/bist-parser" -> "jhcross/span-parser"
"elikip/bist-parser" -> "XuezheMax/NeuroNLP2"
"elikip/bist-parser" -> "YahooArchive/YaraParser"
"elikip/bist-parser" -> "clab/language-universal-parser"
"elikip/bist-parser" -> "wddabc/bist-parser"
"ufal/udpipe" -> "TakeLab/spacy-udpipe"
"ufal/udpipe" -> "CoNLL-UD-2018/UDPipe-Future"
"ufal/udpipe" -> "UniversalDependencies/docs"
"ufal/udpipe" -> "Hyperparticle/udify"
"ufal/udpipe" -> "buriy/spacy-ru" ["e"=1]
"ufal/udpipe" -> "EmilStenstrom/conllu"
"ufal/udpipe" -> "bnosac/udpipe" ["e"=1]
"ufal/udpipe" -> "jonorthwash/ud-annotatrix"
"minus34/gnaf-loader" -> "data61/gnaf"
"minus34/gnaf-loader" -> "ondrejivanic/G-NAF"
"minus34/gnaf-loader" -> "minus34/census-loader"
"minus34/gnaf-loader" -> "qapn/gnaf-importer"
"minus34/gnaf-loader" -> "iag-geo/psma-admin-bdys"
"openvenues/pypostal" -> "openvenues/libpostal" ["e"=1]
"openvenues/pypostal" -> "datamade/usaddress"
"openvenues/pypostal" -> "J535D165/recordlinkage"
"openvenues/pypostal" -> "GRAAL-Research/deepparse"
"openvenues/pypostal" -> "vladimarius/pyap"
"openvenues/pypostal" -> "GreenBuildingRegistry/usaddress-scourgify"
"openvenues/pypostal" -> "scaleway/postal-address"
"openvenues/pypostal" -> "datamade/parserator"
"openvenues/pypostal" -> "datamade/probablepeople"
"openvenues/pypostal" -> "OpenCageData/address-formatting"
"openvenues/pypostal" -> "openvenues/lieu"
"openvenues/pypostal" -> "johnlonganecker/libpostal-rest-docker"
"openvenues/pypostal" -> "SwoopSearch/pyaddress"
"openvenues/pypostal" -> "derek73/python-nameparser"
"openvenues/pypostal" -> "dedupeio/dedupe-examples"
"SineZHAN/deepALplus" -> "avihu111/TypiClust"
"SineZHAN/deepALplus" -> "Mephisto405/Learning-Loss-for-Active-Learning"
"SineZHAN/deepALplus" -> "ej0cl6/deep-active-learning"
"SineZHAN/deepALplus" -> "baifanxxx/awesome-active-learning"
"SineZHAN/deepALplus" -> "AminParvaneh/alpha_mix_active_learning"
"SineZHAN/deepALplus" -> "cure-lab/deep-active-learning"
"SineZHAN/deepALplus" -> "decile-team/distil"
"SineZHAN/deepALplus" -> "cliangyu/CSVAL"
"SineZHAN/deepALplus" -> "cjshui/WAAL"
"SineZHAN/deepALplus" -> "PrateekMunjal/TorchAL"
"SineZHAN/deepALplus" -> "acl21/deep-active-learning-pytorch"
"SineZHAN/deepALplus" -> "LightersWang/Awesome-Active-Learning-for-Medical-Image-Analysis"
"SineZHAN/deepALplus" -> "ozansener/active_learning_coreset"
"SineZHAN/deepALplus" -> "SupeRuier/awesome-active-learning"
"SineZHAN/deepALplus" -> "NVlabs/AL-MDN"
"ambuda-org/vidyut" -> "ambuda-org/ambuda"
"ambuda-org/vidyut" -> "ashtadhyayi-com/data"
"ambuda-org/vidyut" -> "cltk/sanskrit_text_gitasupersite"
"Riashat/Active-Learning-Bayesian-Convolutional-Neural-Networks" -> "Riashat/Deep-Bayesian-Active-Learning"
"Riashat/Active-Learning-Bayesian-Convolutional-Neural-Networks" -> "fahadm/Bayesian-Active-Learning-Pytorch"
"Riashat/Active-Learning-Bayesian-Convolutional-Neural-Networks" -> "bnjasim/Deep-Bayesian-Active-Learning"
"jwieting/iclr2016" -> "jwieting/charagram"
"jwieting/iclr2016" -> "fh295/SentenceRepresentation"
"clab/rnng" -> "harvardnlp/urnng"
"clab/rnng" -> "clab/lstm-parser"
"clab/rnng" -> "jihunchoi/unsupervised-treelstm"
"clab/rnng" -> "kmkurn/pytorch-rnng"
"clab/rnng" -> "iesl/diora"
"anhaidgroup/py_entitymatching" -> "anhaidgroup/py_stringmatching"
"anhaidgroup/py_entitymatching" -> "anhaidgroup/deepmatcher"
"anhaidgroup/py_entitymatching" -> "megagonlabs/ditto"
"anhaidgroup/py_entitymatching" -> "anhaidgroup/py_stringsimjoin"
"anhaidgroup/py_entitymatching" -> "zhao1701/extending-deep-ER"
"anhaidgroup/py_entitymatching" -> "megagonlabs/machamp"
"anhaidgroup/py_entitymatching" -> "qcri/DeepBlocker"
"rapidfuzz/python-Levenshtein" -> "rapidfuzz/Levenshtein"
"code-kern-ai/refinery-sample-projects" -> "code-kern-ai/embedders"
"scify/JedAIToolkit" -> "scify/jedai-ui"
"scify/JedAIToolkit" -> "Gaglia88/sparker"
"scify/JedAIToolkit" -> "AI-team-UoA/JedAI-WebApp"
"scify/JedAIToolkit" -> "vefthym/MinoanER"
"scify/JedAIToolkit" -> "J535D165/data-matching-software"
"scify/JedAIToolkit" -> "scify/JedAI-Spark"
"scify/JedAIToolkit" -> "AI-team-UoA/pyJedAI"
"scify/JedAIToolkit" -> "zentity-io/zentity"
"scify/JedAIToolkit" -> "vintasoftware/entity-embed"
"scify/JedAIToolkit" -> "qcri/DeepBlocker"
"scify/JedAIToolkit" -> "anhaidgroup/deepmatcher"
"scify/JedAIToolkit" -> "megagonlabs/ditto"
"anhaidgroup/py_stringmatching" -> "anhaidgroup/py_stringsimjoin"
"anhaidgroup/py_stringmatching" -> "anhaidgroup/py_entitymatching"
"chrisjmccormick/inspect_word2vec" -> "chrisjmccormick/word2vec_commented"
"NKU-HLT/PromptRank" -> "NKU-HLT/Role-Play-Prompting"
"NKU-HLT/PromptRank" -> "NKU-HLT/Emotion-Recognition"
"NKU-HLT/PromptRank" -> "NKU-HLT/KNN-CTC"
"NKU-HLT/PromptRank" -> "NKU-HLT/Fusion-Insider-threat-detection"
"NKU-HLT/PromptRank" -> "NKU-HLT/RAMP_MOS"
"NKU-HLT/PromptRank" -> "uclanlp/DeepKPG"
"huyvvo/BiB" -> "modelai/ALBench"
"yxuansu/Contrastive_Search_Is_What_You_Need" -> "yxuansu/SimCTG"
"yxuansu/Contrastive_Search_Is_What_You_Need" -> "yxuansu/Contrastive_Search_versus_Contrastive_Decoding"
"libindic/indic-trans" -> "libindic/Transliteration"
"libindic/indic-trans" -> "indic-transliteration/indic_transliteration_py"
"libindic/indic-trans" -> "anoopkunchukuttan/indic_nlp_library"
"libindic/indic-trans" -> "AI4Bharat/indicTrans"
"libindic/indic-trans" -> "AI4Bharat/IndicNLP-Transliteration"
"libindic/indic-trans" -> "AI4Bharat/Indic-BERT-v1"
"libindic/indic-trans" -> "google-research-datasets/dakshina"
"libindic/indic-trans" -> "AI4Bharat/indicnlp_catalog"
"libindic/indic-trans" -> "anoopkunchukuttan/crowd-indic-transliteration-data"
"libindic/indic-trans" -> "AI4Bharat/IndicXlit"
"libindic/indic-trans" -> "cfiltnlp/pyiwn"
"libindic/indic-trans" -> "anoopkunchukuttan/indic_nlp_resources"
"bplank/bilstm-aux" -> "swabhs/joint-lstm-parser"
"zouzias/spark-lucenerdd" -> "zouzias/spark-lucenerdd-examples"
"MimiOnuoha/missing-datasets" -> "MimiOnuoha/On-Algorithmic-Violence"
"MimiOnuoha/missing-datasets" -> "aparrish/rwet" ["e"=1]
"MimiOnuoha/missing-datasets" -> "melaniewalsh/responsible-datasets-in-context"
"MimiOnuoha/missing-datasets" -> "antimodular/Best-practices-for-conservation-of-media-art" ["e"=1]
"MimiOnuoha/missing-datasets" -> "LibraryOfCongress/data-exploration"
"MimiOnuoha/missing-datasets" -> "evnbr/bindery" ["e"=1]
"MimiOnuoha/missing-datasets" -> "sgsinclair/alta"
"MimiOnuoha/missing-datasets" -> "dataviza11y/resources" ["e"=1]
"MimiOnuoha/missing-datasets" -> "learning-gardens/cybernetics-club" ["e"=1]
"MimiOnuoha/missing-datasets" -> "MimiOnuoha/Impossible-Maps"
"MimiOnuoha/missing-datasets" -> "lenagroeger/gifs" ["e"=1]
"MimiOnuoha/missing-datasets" -> "organisciak/Text-Mining-Course"
"MimiOnuoha/missing-datasets" -> "cu-nil/chnotes"
"MimiOnuoha/missing-datasets" -> "MimiOnuoha/Creative-Approaches"
"josipjukic/alanno" -> "TakeLab/podium"
"josipjukic/alanno" -> "cyanic-selkie/cutters"
"commonsense/divisi2" -> "commonsense/luminoso"
"donguk071/three.js-with-mediapipe" -> "coverist/coverist-android"
"ds-wook/categorical-tabnet" -> "ds-wook/web-ctr-prediction"
"ds-wook/categorical-tabnet" -> "ds-wook/ventilator-pressure-prediction"
"ds-wook/categorical-tabnet" -> "ds-wook/ai-hackathon"
"TaoYang225/AD-DROP" -> "djz233/D-DGCN"
"kingtaurus/cs224d" -> "cerberusd/cs224d-solutions"
"andrea-gasparini/sapienza-beamer-template" -> "andrea-gasparini/f1-racing-cars-tracking"
"riedlma/SECOS" -> "jodaiber/semantic_compound_splitting"
"riedlma/SECOS" -> "ohenrik/nb_dep_ud_sm"
"affjljoo3581/Inverse-DALL-E-for-Optical-Character-Recognition" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"affjljoo3581/Inverse-DALL-E-for-Optical-Character-Recognition" -> "affjljoo3581/starcoder-jax"
"affjljoo3581/Inverse-DALL-E-for-Optical-Character-Recognition" -> "affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves"
"affjljoo3581/Inverse-DALL-E-for-Optical-Character-Recognition" -> "readme-generator/alreadyme-ai-research"
"affjljoo3581/Inverse-DALL-E-for-Optical-Character-Recognition" -> "ds-wook/ds-wook"
"udapi/udapi-python" -> "jonorthwash/ud-annotatrix"
"udapi/udapi-python" -> "rug-compling/conllu-viewer"
"anhaidgroup/py_stringsimjoin" -> "anhaidgroup/py_stringmatching"
"Franck-Dernoncourt/naacl2016" -> "YanWenqiang/HBLSTM-CRF"
"readme-generator/alreadyme-ai-research" -> "readme-generator/alreadyme-ai-serving"
"readme-generator/alreadyme-ai-research" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"readme-generator/alreadyme-ai-research" -> "affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves"
"readme-generator/alreadyme-ai-research" -> "affjljoo3581/starcoder-jax"
"uclanlp/DeepKPG" -> "uclanlp/awesome-keyphrase-papers"
"JackHck/MADAug" -> "JackHck/SBCL"
"readme-generator/alreadyme-backend" -> "readme-generator/alreadyme-ai-serving"
"affjljoo3581/KW-Computer-Vision-AI-1st-Solution" -> "affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves"
"affjljoo3581/KW-Computer-Vision-AI-1st-Solution" -> "affjljoo3581/starcoder-jax"
"affjljoo3581/KW-Computer-Vision-AI-1st-Solution" -> "readme-generator/alreadyme-ai-serving"
"affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves" -> "affjljoo3581/starcoder-jax"
"affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves" -> "readme-generator/alreadyme-ai-serving"
"affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves" -> "affjljoo3581/Google-American-Sign-Language-Fingerspelling-Recognition"
"readme-generator/alreadyme-ai-serving" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"readme-generator/alreadyme-ai-serving" -> "affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves"
"readme-generator/alreadyme-ai-serving" -> "readme-generator/alreadyme-ai-research"
"readme-generator/alreadyme-ai-serving" -> "affjljoo3581/starcoder-jax"
"detail-novelist/novelist-triton-server" -> "affjljoo3581/starcoder-jax"
"facebookresearch/fastText" -> "piskvorky/gensim"
"facebookresearch/fastText" -> "google-research/bert"
"facebookresearch/fastText" -> "facebookresearch/faiss"
"facebookresearch/fastText" -> "allenai/allennlp"
"facebookresearch/fastText" -> "sebastianruder/NLP-progress"
"facebookresearch/fastText" -> "explosion/spaCy"
"facebookresearch/fastText" -> "dmlc/xgboost" ["e"=1]
"facebookresearch/fastText" -> "brightmart/text_classification" ["e"=1]
"facebookresearch/fastText" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"facebookresearch/fastText" -> "tensorflow/tensor2tensor"
"facebookresearch/fastText" -> "stanfordnlp/GloVe"
"facebookresearch/fastText" -> "tensorflow/models" ["e"=1]
"facebookresearch/fastText" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"facebookresearch/fastText" -> "microsoft/LightGBM" ["e"=1]
"facebookresearch/fastText" -> "keras-team/keras" ["e"=1]
"JasonKessler/scattertext" -> "chartbeat-labs/textacy"
"JasonKessler/scattertext" -> "bmabey/pyLDAvis"
"JasonKessler/scattertext" -> "jbesomi/texthero"
"JasonKessler/scattertext" -> "ddangelov/Top2Vec"
"JasonKessler/scattertext" -> "DerwenAI/pytextrank"
"JasonKessler/scattertext" -> "explosion/sense2vec"
"JasonKessler/scattertext" -> "huggingface/neuralcoref"
"JasonKessler/scattertext" -> "MaartenGr/BERTopic"
"JasonKessler/scattertext" -> "MilaNLProc/contextualized-topic-models"
"JasonKessler/scattertext" -> "cemoody/lda2vec"
"JasonKessler/scattertext" -> "JasonKessler/Scattertext-PyData"
"JasonKessler/scattertext" -> "PAIR-code/lit"
"JasonKessler/scattertext" -> "explosion/spacy-transformers"
"JasonKessler/scattertext" -> "TeamHG-Memex/eli5" ["e"=1]
"JasonKessler/scattertext" -> "gregversteeg/corex_topic" ["e"=1]
"hltcoe/PredPatt" -> "decompositional-semantics-initiative/decomp"
"hltcoe/PredPatt" -> "swabhs/scaffolding"
"vivekn/sentiment" -> "abromberg/sentiment_analysis_python"
"vivekn/sentiment" -> "vivekn/sentiment-web"
"vivekn/sentiment" -> "pthrasher/sentiment"
"vivekn/sentiment" -> "xiamx/awesome-sentiment-analysis"
"vivekn/sentiment" -> "mesnilgr/nbsvm"
"vivekn/sentiment" -> "xiaohan2012/twitter-sent-dnn"
"vivekn/sentiment" -> "thisandagain/sentiment" ["e"=1]
"vivekn/sentiment" -> "rafacarrascosa/samr"
"vivekn/sentiment" -> "monkeylearn/hotel-review-analysis" ["e"=1]
"vivekn/sentiment" -> "wendykan/DeepLearningMovies"
"vivekn/sentiment" -> "fjavieralba/basic_sentiment_analysis"
"vivekn/sentiment" -> "adeshpande3/LSTM-Sentiment-Analysis"
"vivekn/sentiment" -> "ayushoriginal/Sentiment-Analysis-Twitter"
"vivekn/sentiment" -> "jeffreybreen/twitter-sentiment-analysis-tutorial-201107"
"bogatyy/cs224d" -> "sapruash/RecursiveNN"
"bogatyy/cs224d" -> "dengfy/cs224d"
"bogatyy/cs224d" -> "kingtaurus/cs224d"
"bogatyy/cs224d" -> "vijayvee/Recursive-neural-networks-TensorFlow"
"DerwenAI/pytextrank" -> "summanlp/textrank"
"DerwenAI/pytextrank" -> "chartbeat-labs/textacy"
"DerwenAI/pytextrank" -> "miso-belica/sumy"
"DerwenAI/pytextrank" -> "boudinfl/pke"
"DerwenAI/pytextrank" -> "davidadamojr/TextRank"
"DerwenAI/pytextrank" -> "explosion/sense2vec"
"DerwenAI/pytextrank" -> "icoxfog417/awesome-text-summarization" ["e"=1]
"DerwenAI/pytextrank" -> "JasonKessler/scattertext"
"DerwenAI/pytextrank" -> "ddangelov/Top2Vec"
"DerwenAI/pytextrank" -> "huggingface/neuralcoref"
"DerwenAI/pytextrank" -> "csurfer/rake-nltk"
"DerwenAI/pytextrank" -> "xiaoxu193/PyTeaser"
"DerwenAI/pytextrank" -> "LIAAD/yake"
"DerwenAI/pytextrank" -> "MilaNLProc/contextualized-topic-models"
"DerwenAI/pytextrank" -> "NorskRegnesentral/skweak"
"amueller/word_cloud" -> "fxsjy/jieba" ["e"=1]
"amueller/word_cloud" -> "piskvorky/gensim"
"amueller/word_cloud" -> "pyecharts/pyecharts" ["e"=1]
"amueller/word_cloud" -> "isnowfy/snownlp" ["e"=1]
"amueller/word_cloud" -> "bokeh/bokeh" ["e"=1]
"amueller/word_cloud" -> "vega/altair" ["e"=1]
"amueller/word_cloud" -> "sloria/TextBlob"
"amueller/word_cloud" -> "explosion/spaCy"
"amueller/word_cloud" -> "tqdm/tqdm" ["e"=1]
"amueller/word_cloud" -> "facebookresearch/fastText"
"amueller/word_cloud" -> "nltk/nltk"
"amueller/word_cloud" -> "mwaskom/seaborn" ["e"=1]
"amueller/word_cloud" -> "jasondavies/d3-cloud" ["e"=1]
"amueller/word_cloud" -> "littlecodersh/ItChat" ["e"=1]
"amueller/word_cloud" -> "python-visualization/folium" ["e"=1]
"brianspiering/awesome-dl4nlp" -> "keon/awesome-nlp"
"brianspiering/awesome-dl4nlp" -> "NirantK/NLP_Quickbook"
"brianspiering/awesome-dl4nlp" -> "andrewt3000/DL4NLP"
"brianspiering/awesome-dl4nlp" -> "stanfordnlp/cs224n-winter17-notes"
"brianspiering/awesome-dl4nlp" -> "ivan-bilan/The-NLP-Pandect"
"brianspiering/awesome-dl4nlp" -> "costezki/awesome-nlprojects"
"brianspiering/awesome-dl4nlp" -> "astorfi/Deep-Learning-NLP"
"brianspiering/awesome-dl4nlp" -> "omarsar/nlp_overview"
"brianspiering/awesome-dl4nlp" -> "rguthrie3/DeepLearningForNLPInPytorch"
"brianspiering/awesome-dl4nlp" -> "mihail911/nlp-library" ["e"=1]
"brianspiering/awesome-dl4nlp" -> "neubig/nn4nlp-code"
"brianspiering/awesome-dl4nlp" -> "Kyubyong/nlp_tasks"
"brianspiering/awesome-dl4nlp" -> "jacobeisenstein/gt-nlp-class"
"brianspiering/awesome-dl4nlp" -> "mhagiwara/100-nlp-papers"
"brianspiering/awesome-dl4nlp" -> "mathsyouth/awesome-text-summarization" ["e"=1]
"stanfordnlp/string2string" -> "google-research/url-nlp"
"salestock/fastText.py" -> "yoonkim/CNN_sentence" ["e"=1]
"salestock/fastText.py" -> "vrasneur/pyfasttext"
"salestock/fastText.py" -> "alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" ["e"=1]
"salestock/fastText.py" -> "apcode/tensorflow_fasttext" ["e"=1]
"salestock/fastText.py" -> "Kyubyong/wordvectors"
"salestock/fastText.py" -> "salestock/fastText.py"
"salestock/fastText.py" -> "PrincetonML/SIF"
"salestock/fastText.py" -> "facebookresearch/fastText"
"salestock/fastText.py" -> "facebookresearch/pysparnn"
"salestock/fastText.py" -> "dennybritz/cnn-text-classification-tf"
"salestock/fastText.py" -> "dennybritz/chatbot-retrieval" ["e"=1]
"salestock/fastText.py" -> "cahya-wirawan/cnn-text-classification-tf" ["e"=1]
"salestock/fastText.py" -> "facebookresearch/StarSpace"
"salestock/fastText.py" -> "jiegzhan/multi-class-text-classification-cnn" ["e"=1]
"salestock/fastText.py" -> "Hironsan/anago" ["e"=1]
"ravikiranj/twitter-sentiment-analyzer" -> "mayank93/Twitter-Sentiment-Analysis"
"ravikiranj/twitter-sentiment-analyzer" -> "realpython/twitter-sentiment-elasticsearch"
"ravikiranj/twitter-sentiment-analyzer" -> "xiaohan2012/twitter-sent-dnn"
"ravikiranj/twitter-sentiment-analyzer" -> "abromberg/sentiment_analysis_python"
"ravikiranj/twitter-sentiment-analyzer" -> "pthrasher/sentiment"
"MelihGulum/Comprehensive-Data-Science-AI-Project-Portfolio" -> "SouravG/Housing-price-prediction-using-Regularised-linear-regression"
"MelihGulum/Comprehensive-Data-Science-AI-Project-Portfolio" -> "geekquad/Fraud-Detection"
"hermitdave/FrequencyWords" -> "rspeer/wordfreq"
"hermitdave/FrequencyWords" -> "suyashb95/WiktionaryParser"
"hermitdave/FrequencyWords" -> "tatuylonen/wiktextract"
"hermitdave/FrequencyWords" -> "IlyaSemenov/wikipedia-word-frequency"
"hermitdave/FrequencyWords" -> "oprogramador/most-common-words-by-language"
"hermitdave/FrequencyWords" -> "barrust/pyspellchecker" ["e"=1]
"hermitdave/FrequencyWords" -> "wolfgarbe/SymSpell" ["e"=1]
"hermitdave/FrequencyWords" -> "first20hours/google-10000-english"
"hermitdave/FrequencyWords" -> "michmech/lemmatization-lists" ["e"=1]
"hermitdave/FrequencyWords" -> "freedict/fd-dictionaries"
"hermitdave/FrequencyWords" -> "mammothb/symspellpy" ["e"=1]
"hermitdave/FrequencyWords" -> "Tatoeba/tatoeba2" ["e"=1]
"hermitdave/FrequencyWords" -> "titoBouzout/Dictionaries" ["e"=1]
"hermitdave/FrequencyWords" -> "FreeLanguageTools/vocabsieve" ["e"=1]
"hermitdave/FrequencyWords" -> "kerrickstaley/genanki" ["e"=1]
"jhlau/doc2vec" -> "inejc/paragraph-vectors"
"jhlau/doc2vec" -> "jhlau/gensim"
"jhlau/doc2vec" -> "epfml/sent2vec"
"jhlau/doc2vec" -> "ibrahimsharaf/doc2vec"
"jhlau/doc2vec" -> "fbkarsdorp/doc2vec"
"jhlau/doc2vec" -> "rock3125/sentence2vec"
"jhlau/doc2vec" -> "PengboLiu/Doc2Vec-Document-Similarity" ["e"=1]
"jhlau/doc2vec" -> "iamxiaomu/doc2vec"
"jhlau/doc2vec" -> "MaxwellRebo/awesome-2vec"
"jhlau/doc2vec" -> "3Top/word2vec-api"
"jhlau/doc2vec" -> "jwieting/iclr2016"
"jhlau/doc2vec" -> "cemoody/lda2vec"
"jhlau/doc2vec" -> "JonathanRaiman/PVDM"
"jhlau/doc2vec" -> "salestock/fastText.py"
"jhlau/doc2vec" -> "facebookresearch/SentEval"
"dipanjanS/text-analytics-with-python" -> "dipanjanS/practical-machine-learning-with-python"
"dipanjanS/text-analytics-with-python" -> "dipanjanS/art_of_data_visualization"
"dipanjanS/text-analytics-with-python" -> "dipanjanS/hands-on-transfer-learning-with-python"
"dipanjanS/text-analytics-with-python" -> "dipanjanS/nlp_essentials"
"dipanjanS/text-analytics-with-python" -> "susanli2016/NLP-with-Python"
"dipanjanS/text-analytics-with-python" -> "JasonKessler/scattertext"
"dipanjanS/text-analytics-with-python" -> "DerwenAI/pytextrank"
"dipanjanS/text-analytics-with-python" -> "icoxfog417/awesome-text-summarization" ["e"=1]
"dipanjanS/text-analytics-with-python" -> "chartbeat-labs/textacy"
"dipanjanS/text-analytics-with-python" -> "adashofdata/nlp-in-python-tutorial"
"dipanjanS/text-analytics-with-python" -> "kavgan/nlp-in-practice"
"dipanjanS/text-analytics-with-python" -> "RubensZimbres/Repo-2017" ["e"=1]
"dipanjanS/text-analytics-with-python" -> "dipanjanS/data_science_for_all"
"dipanjanS/text-analytics-with-python" -> "NirantK/NLP_Quickbook"
"dipanjanS/text-analytics-with-python" -> "brightmart/text_classification" ["e"=1]
"snkim/AutomaticKeyphraseExtraction" -> "zelandiya/keyword-extraction-datasets"
"snkim/AutomaticKeyphraseExtraction" -> "memray/seq2seq-keyphrase"
"snkim/AutomaticKeyphraseExtraction" -> "memray/seq2seq-keyphrase-pytorch"
"snkim/AutomaticKeyphraseExtraction" -> "boudinfl/ake-datasets"
"snkim/AutomaticKeyphraseExtraction" -> "memray/OpenNMT-kpg-release"
"snkim/AutomaticKeyphraseExtraction" -> "swisscom/ai-research-keyphrase-extraction"
"snkim/AutomaticKeyphraseExtraction" -> "lvsh/keywordfinder"
"snkim/AutomaticKeyphraseExtraction" -> "boudinfl/pke"
"snkim/AutomaticKeyphraseExtraction" -> "aneesha/RAKE"
"snkim/AutomaticKeyphraseExtraction" -> "pranav-ust/BERT-keyphrase-extraction"
"snkim/AutomaticKeyphraseExtraction" -> "LIAAD/KeywordExtractor-Datasets"
"williamleif/socialsent" -> "jacobeisenstein/probabilistic-lexicon-classification"
"williamleif/socialsent" -> "williamleif/redditnetwork"
"williamleif/socialsent" -> "williamleif/histwords"
"williamleif/socialsent" -> "williamleif/social-lstm"
"williamleif/socialsent" -> "ICML14MoMCompare/spectral-learn"
"openeventdata/mordecai" -> "openeventdata/es-geonames"
"openeventdata/mordecai" -> "openeventdata/petrarch2"
"openeventdata/mordecai" -> "chartbeat-labs/textacy"
"openeventdata/mordecai" -> "Novetta/CLAVIN" ["e"=1]
"openeventdata/mordecai" -> "ahalterman/mordecai3"
"openeventdata/mordecai" -> "stuartemiddleton/geoparsepy"
"openeventdata/mordecai" -> "explosion/sense2vec"
"openeventdata/mordecai" -> "openeventdata/phoenix_pipeline"
"openeventdata/mordecai" -> "mediacloud/cliff-annotator" ["e"=1]
"openeventdata/mordecai" -> "msg-systems/holmes-extractor"
"openeventdata/mordecai" -> "jgontrum/spacy-api-docker"
"openeventdata/mordecai" -> "ICLRandD/Blackstone" ["e"=1]
"openeventdata/mordecai" -> "explosion/projects"
"openeventdata/mordecai" -> "huggingface/neuralcoref"
"openeventdata/mordecai" -> "JasonKessler/scattertext"
"uclanlp/awesome-keyphrase-papers" -> "uclanlp/DeepKPG"
"ing-bank/EntityMatchingModel" -> "DeNederlandscheBank/name_matching"
"mirusu400/KWU-library-QR-PoC" -> "IceCream0910/kw-klas-plus"
"eBay/Sequence-Semantic-Embedding" -> "lgalke/vec4ir"
"RAIVNLab/sugar-crepe" -> "RAIVNLab/CREPE"
"RAIVNLab/sugar-crepe" -> "JieyuZ2/TaskMeAnything"
"EmilStenstrom/conllu" -> "pyconll/pyconll"
"EmilStenstrom/conllu" -> "UniversalDependencies/tools"
"EmilStenstrom/conllu" -> "Orange-OpenSource/conllueditor"
"EmilStenstrom/conllu" -> "interrogator/conll-df"
"EmilStenstrom/conllu" -> "webanno/webanno"
"EmilStenstrom/conllu" -> "ufal/udpipe"
"EmilStenstrom/conllu" -> "jonorthwash/ud-annotatrix"
"EmilStenstrom/conllu" -> "danieldeutsch/sacrerouge" ["e"=1]
"EmilStenstrom/conllu" -> "Hyperparticle/udify"
"EmilStenstrom/conllu" -> "UniversalDependencies/UD_English-EWT"
"jgontrum/spacy-api-docker" -> "explosion/spacy-services"
"jgontrum/spacy-api-docker" -> "neelkamath/spacy-server"
"jgontrum/spacy-api-docker" -> "ines/spacy-graphql"
"jgontrum/spacy-api-docker" -> "ines/spacy-js"
"explosion/spacy-services" -> "explosion/displacy-ent"
"explosion/spacy-services" -> "jgontrum/spacy-api-docker"
"explosion/spacy-services" -> "explosion/spacy-dev-resources"
"explosion/spacy-services" -> "explosion/spacy-notebooks"
"cgpotts/swda" -> "NathanDuran/Switchboard-Corpus"
"cgpotts/swda" -> "ColingPaper2018/DialogueAct-Tagger"
"cgpotts/swda" -> "YanWenqiang/HBLSTM-CRF"
"cgpotts/swda" -> "Franck-Dernoncourt/naacl2016"
"cgpotts/swda" -> "NathanDuran/Probabilistic-RNN-DA-Classifier"
"cdg720/emnlp2016" -> "dgaddy/parser-analysis"
"yagguc/deep_impression" -> "InnovArul/first-impressions"
"yagguc/deep_impression" -> "zishansami102/First-Impression"
"sapruash/RecursiveNN" -> "nicolaspi/treelstm"
"sapruash/RecursiveNN" -> "vijayvee/Recursive-neural-networks-TensorFlow"
"sapruash/RecursiveNN" -> "XingxingZhang/td-treelstm"
"sapruash/RecursiveNN" -> "erickrf/treernn"
"jwieting/charagram" -> "jwieting/iclr2016"
"nyu-mll/spinn" -> "jihunchoi/unsupervised-treelstm"
"nyu-mll/spinn" -> "nyu-mll/PRPN-Analysis"
"nyu-mll/spinn" -> "stanfordnlp/spinn"
"nyu-mll/spinn" -> "iesl/diora"
"nyu-mll/spinn" -> "harvardnlp/urnng"
"ketranm/neuralHMM" -> "jxhe/struct-learning-with-flow"
"thavelick/summarize" -> "adamfabish/Reduction"
"thavelick/summarize" -> "genekogan/text-learning"
"dell-research-harvard/linktransformer" -> "AI-team-UoA/pyJedAI"
"dell-research-harvard/linktransformer" -> "NickCrews/mismo"
"explosion/displacy" -> "explosion/displacy-ent"
"explosion/displacy" -> "explosion/spacy-dev-resources"
"explosion/displacy" -> "explosion/spacy-services"
"explosion/displacy-ent" -> "explosion/displacy"
"explosion/displacy-ent" -> "explosion/spacy-services"
"yichen928/ActiveFT" -> "yichen928/FreeSel"
"johnlonganecker/libpostal-rest-docker" -> "johnlonganecker/libpostal-rest"
"sanskrit/sanskrit" -> "shreevatsa/sanskrit"
"sanskrit/sanskrit" -> "kmadathil/sanskrit_parser"
"whq-xxh/SFADA-GTV-Seg" -> "whq-xxh/SFADA-UWF-SLO"
"whq-xxh/SFADA-GTV-Seg" -> "HiLab-git/UGTST"
"whq-xxh/SFADA-GTV-Seg" -> "whq-xxh/RSVIS"
"orenmel/context2vec" -> "wlin12/wang2vec"
"orenmel/context2vec" -> "harvardnlp/decomp-attn" ["e"=1]
"joelnish/double-edge-swap-mcmc" -> "ICML14MoMCompare/spectral-learn"
"dschnelldavis/parse-full-name" -> "joshfraser/JavaScript-Name-Parser"
"AI4Bharat/IndicTrans2" -> "AI4Bharat/indicTrans"
"AI4Bharat/IndicTrans2" -> "AI4Bharat/indicnlp_catalog"
"AI4Bharat/IndicTrans2" -> "AI4Bharat/IndicBERT"
"AI4Bharat/IndicTrans2" -> "VarunGumma/IndicTransToolkit"
"AI4Bharat/IndicTrans2" -> "AI4Bharat/IndicXlit"
"AI4Bharat/IndicTrans2" -> "AI4Bharat/Indic-TTS"
"AI4Bharat/IndicTrans2" -> "AI4Bharat/IndicWav2Vec"
"AI4Bharat/IndicTrans2" -> "AI4Bharat/IndicLID"
"AI4Bharat/IndicTrans2" -> "Open-Speech-EkStep/vakyansh-models"
"AI4Bharat/IndicTrans2" -> "prajdabre/yanmtt"
"AI4Bharat/IndicTrans2" -> "AI4Bharat/IndicLLMSuite"
"AI4Bharat/IndicTrans2" -> "AI4Bharat/Indic-BERT-v1"
"AI4Bharat/IndicTrans2" -> "abhinand5/tamil-llama"
"AI4Bharat/IndicTrans2" -> "AI4Bharat/Chitralekha"
"AI4Bharat/IndicTrans2" -> "anoopkunchukuttan/indic_nlp_library"
"MySong7NLPer/HISum" -> "MySong7NLPer/HyperSiameseNet"
"MySong7NLPer/HISum" -> "MySong7NLPer/AI-Conference-Acceptance-Rate"
"MySong7NLPer/HISum" -> "MySong7NLPer/ChineseKeyphraseExtraction"
"MySong7NLPer/HISum" -> "MySong7NLPer/ResearchWriting-Tips"
"laserwave/keywords_extraction_rake" -> "mpk001/RAKE-keywordsExtraction"
"vijayvee/Recursive-neural-networks-TensorFlow" -> "yihui-he/recursive-neural-network"
"JieyuZ2/EcoAssistant" -> "JieyuZ2/TaskMeAnything"
"JieyuZ2/EcoAssistant" -> "JieyuZ2/ProVision"
"JieyuZ2/EcoAssistant" -> "JieyuZ2/wrench"
"JieyuZ2/EcoAssistant" -> "RAIVNLab/sugar-crepe"
"JieyuZ2/EcoAssistant" -> "JackHck/SBCL"
"pnpnpn/street-address" -> "SwoopSearch/pyaddress"
"knok/rcnn-text-classification" -> "airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier"
"knok/rcnn-text-classification" -> "licstar/compare"
"wjbmattingly/tap-2023-spacy-01" -> "jdportercode/TAP23"
"wjbmattingly/tap-2023-spacy-01" -> "elliewix/tapi-2023-webscraping"
"NKU-HLT/Role-Play-Prompting" -> "NKU-HLT/Fusion-Insider-threat-detection"
"NKU-HLT/Role-Play-Prompting" -> "NKU-HLT/KNN-CTC"
"NKU-HLT/Role-Play-Prompting" -> "NKU-HLT/Emotion-Recognition"
"NKU-HLT/Role-Play-Prompting" -> "NKU-HLT/PromptRank"
"WenDesi/Chinese_radical" -> "HKUST-KnowComp/JWE"
"WenDesi/Chinese_radical" -> "megemini/-_megemini-"
"jdportercode/TAP23" -> "wjbmattingly/tap-2023-spacy-01"
"lopuhin/python-adagram" -> "sbos/AdaGram.jl"
"yy/netsci-course" -> "yy/dviz-course"
"AshokR/TamilNLP" -> "vanangamudi/tamil-lm2"
"AshokR/TamilNLP" -> "rdamodharan/tamil-stemmer"
"AshokR/TamilNLP" -> "nithyadurai87/tamil-sandhi-checker"
"AshokR/TamilNLP" -> "Ezhil-Language-Foundation/open-tamil"
"AshokR/TamilNLP" -> "rprabhu/TamilDictionary"
"AfaanBilal/koshur-lang" -> "izan-majeed/Kaeshir-Database"
"KennethEnevoldsen/scandinavian-embedding-benchmark" -> "danish-foundation-models/site"
"KennethEnevoldsen/scandinavian-embedding-benchmark" -> "martincjespersen/DaAnonymization"
"InnovArul/first-impressions" -> "yagguc/deep_impression"
"kenlimmj/fightin-words" -> "jmhessel/FightingWords"
"kenchan0226/FineGrainedFact" -> "wxjiao/WMT2022-Large-Scale-African"
"affjljoo3581/Google-American-Sign-Language-Fingerspelling-Recognition" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"affjljoo3581/Google-American-Sign-Language-Fingerspelling-Recognition" -> "affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves"
"omarsar/machine_learning_fundamentals" -> "omarsar/nlp_with_tensorflow"
"affjljoo3581/starcoder-jax" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"affjljoo3581/starcoder-jax" -> "affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves"
"affjljoo3581/starcoder-jax" -> "readme-generator/alreadyme-ai-serving"
"RasaHQ/rasa" -> "RasaHQ/rasa_core" ["e"=1]
"RasaHQ/rasa" -> "gunthercox/ChatterBot" ["e"=1]
"RasaHQ/rasa" -> "explosion/spaCy"
"RasaHQ/rasa" -> "deeppavlov/DeepPavlov"
"RasaHQ/rasa" -> "facebookresearch/ParlAI"
"RasaHQ/rasa" -> "botpress/botpress" ["e"=1]
"RasaHQ/rasa" -> "jina-ai/clip-as-service"
"RasaHQ/rasa" -> "flairNLP/flair"
"RasaHQ/rasa" -> "facebookresearch/fastText"
"RasaHQ/rasa" -> "google-research/bert"
"RasaHQ/rasa" -> "allenai/allennlp"
"RasaHQ/rasa" -> "sebastianruder/NLP-progress"
"RasaHQ/rasa" -> "crownpku/Rasa_NLU_Chi" ["e"=1]
"RasaHQ/rasa" -> "deepset-ai/haystack" ["e"=1]
"RasaHQ/rasa" -> "piskvorky/gensim"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "abdulfatir/twitter-sentiment-analysis"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "mayank93/Twitter-Sentiment-Analysis"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "uclatommy/tweetfeels"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "ujjwalkarn/Twitter-Sentiment-Analysis"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "ravikiranj/twitter-sentiment-analyzer"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "xiaohan2012/twitter-sent-dnn"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "vivekn/sentiment"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "xiamx/awesome-sentiment-analysis"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "marrrcin/ml-twitter-sentiment-analysis"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "jeffreybreen/twitter-sentiment-analysis-tutorial-201107"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "abromberg/sentiment_analysis_python"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "the-javapocalypse/Twitter-Sentiment-Analysis"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "NVIDIA/sentiment-discovery"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "dipanjanS/text-analytics-with-python"
"ayushoriginal/Sentiment-Analysis-Twitter" -> "danielegrattarola/twitter-sentiment-cnn"
"Hironsan/awesome-embedding-models" -> "Separius/awesome-sentence-embedding"
"Hironsan/awesome-embedding-models" -> "MaxwellRebo/awesome-2vec"
"Hironsan/awesome-embedding-models" -> "chihming/awesome-network-embedding" ["e"=1]
"Hironsan/awesome-embedding-models" -> "Hironsan/anago" ["e"=1]
"Hironsan/awesome-embedding-models" -> "facebookresearch/InferSent"
"Hironsan/awesome-embedding-models" -> "Kyubyong/wordvectors"
"Hironsan/awesome-embedding-models" -> "thunlp/NRLPapers" ["e"=1]
"Hironsan/awesome-embedding-models" -> "ryankiros/skip-thoughts" ["e"=1]
"Hironsan/awesome-embedding-models" -> "chakki-works/chakin" ["e"=1]
"Hironsan/awesome-embedding-models" -> "facebookresearch/SentEval"
"Hironsan/awesome-embedding-models" -> "facebookresearch/MUSE"
"Hironsan/awesome-embedding-models" -> "facebookresearch/StarSpace"
"Hironsan/awesome-embedding-models" -> "3Top/word2vec-api"
"Hironsan/awesome-embedding-models" -> "arXivTimes/arXivTimes" ["e"=1]
"Hironsan/awesome-embedding-models" -> "plasticityai/magnitude"
"abhinand5/tamil-llama" -> "Ezhil-Language-Foundation/open-tamil"
"abhinand5/tamil-llama" -> "narVidhai/tamil-nlp-catalog"
"abhinand5/tamil-llama" -> "AshokR/TamilNLP"
"abhinand5/tamil-llama" -> "AI4Bharat/IndicTrans2"
"abhinand5/tamil-llama" -> "vanangamudi/tamil-lm2"
"abhinand5/tamil-llama" -> "nithyadurai87/tamil-sandhi-checker"
"abhinand5/tamil-llama" -> "malaikannan/TamilSpellChecker"
"abhinand5/tamil-llama" -> "vijayanandrp/Thirukkural-Tamil-Dataset"
"pytorch/text" -> "allenai/allennlp"
"pytorch/text" -> "PetrochukM/PyTorch-NLP"
"pytorch/text" -> "OpenNMT/OpenNMT-py"
"pytorch/text" -> "spro/practical-pytorch"
"pytorch/text" -> "IBM/pytorch-seq2seq"
"pytorch/text" -> "facebookresearch/pytext"
"pytorch/text" -> "facebookresearch/InferSent"
"pytorch/text" -> "salesforce/awd-lstm-lm"
"pytorch/text" -> "facebookresearch/XLM"
"pytorch/text" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"pytorch/text" -> "lanpa/tensorboardX" ["e"=1]
"pytorch/text" -> "zihangdai/xlnet"
"pytorch/text" -> "kimiyoung/transformer-xl"
"pytorch/text" -> "codertimo/BERT-pytorch"
"pytorch/text" -> "pytorch/ignite" ["e"=1]
"MaximumEntropy/Seq2Seq-PyTorch" -> "eladhoffer/seq2seq.pytorch"
"MaximumEntropy/Seq2Seq-PyTorch" -> "IBM/pytorch-seq2seq"
"MaximumEntropy/Seq2Seq-PyTorch" -> "keon/seq2seq"
"MaximumEntropy/Seq2Seq-PyTorch" -> "spro/practical-pytorch"
"MaximumEntropy/Seq2Seq-PyTorch" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"MaximumEntropy/Seq2Seq-PyTorch" -> "suragnair/seqGAN" ["e"=1]
"MaximumEntropy/Seq2Seq-PyTorch" -> "kefirski/pytorch_RVAE" ["e"=1]
"MaximumEntropy/Seq2Seq-PyTorch" -> "dasguptar/treelstm.pytorch"
"MaximumEntropy/Seq2Seq-PyTorch" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"MaximumEntropy/Seq2Seq-PyTorch" -> "salesforce/pytorch-qrnn"
"MaximumEntropy/Seq2Seq-PyTorch" -> "pytorch/text"
"MaximumEntropy/Seq2Seq-PyTorch" -> "OpenNMT/OpenNMT-py"
"MaximumEntropy/Seq2Seq-PyTorch" -> "LantaoYu/SeqGAN" ["e"=1]
"MaximumEntropy/Seq2Seq-PyTorch" -> "harvardnlp/seq2seq-attn" ["e"=1]
"MaximumEntropy/Seq2Seq-PyTorch" -> "jakezhaojb/ARAE" ["e"=1]
"jamesturk/jellyfish" -> "dedupeio/dedupe"
"jamesturk/jellyfish" -> "life4/textdistance"
"jamesturk/jellyfish" -> "J535D165/recordlinkage"
"jamesturk/jellyfish" -> "seatgeek/fuzzywuzzy"
"jamesturk/jellyfish" -> "rapidfuzz/RapidFuzz"
"jamesturk/jellyfish" -> "datamade/probablepeople"
"jamesturk/jellyfish" -> "datamade/parserator"
"jamesturk/jellyfish" -> "chartbeat-labs/textacy"
"jamesturk/jellyfish" -> "datamade/usaddress"
"jamesturk/jellyfish" -> "ztane/python-Levenshtein"
"jamesturk/jellyfish" -> "openvenues/pypostal"
"jamesturk/jellyfish" -> "lanl/pyxDamerauLevenshtein"
"jamesturk/jellyfish" -> "luozhouyang/python-string-similarity" ["e"=1]
"jamesturk/jellyfish" -> "MaartenGr/PolyFuzz"
"jamesturk/jellyfish" -> "explosion/sense2vec"
"PrincetonML/SIF" -> "rock3125/sentence2vec"
"PrincetonML/SIF" -> "oborchers/Fast_Sentence_Embeddings"
"PrincetonML/SIF" -> "facebookresearch/InferSent"
"PrincetonML/SIF" -> "facebookresearch/SentEval"
"PrincetonML/SIF" -> "epfml/sent2vec"
"PrincetonML/SIF" -> "jx00109/sentence2vec"
"PrincetonML/SIF" -> "ryankiros/skip-thoughts" ["e"=1]
"PrincetonML/SIF" -> "Separius/awesome-sentence-embedding"
"PrincetonML/SIF" -> "NTMC-Community/MatchZoo" ["e"=1]
"PrincetonML/SIF" -> "allenai/bilm-tf"
"PrincetonML/SIF" -> "UKPLab/arxiv2018-xling-sentence-embeddings"
"PrincetonML/SIF" -> "dhwajraj/deep-siamese-text-similarity" ["e"=1]
"PrincetonML/SIF" -> "richliao/textClassifier" ["e"=1]
"PrincetonML/SIF" -> "HIT-SCIR/ELMoForManyLangs"
"PrincetonML/SIF" -> "jwieting/iclr2016"
"spro/practical-pytorch" -> "rguthrie3/DeepLearningForNLPInPytorch"
"spro/practical-pytorch" -> "jcjohnson/pytorch-examples" ["e"=1]
"spro/practical-pytorch" -> "OpenNMT/OpenNMT-py"
"spro/practical-pytorch" -> "pytorch/text"
"spro/practical-pytorch" -> "allenai/allennlp"
"spro/practical-pytorch" -> "IBM/pytorch-seq2seq"
"spro/practical-pytorch" -> "DSKSD/DeepNLP-models-Pytorch"
"spro/practical-pytorch" -> "ritchieng/the-incredible-pytorch" ["e"=1]
"spro/practical-pytorch" -> "lanpa/tensorboardX" ["e"=1]
"spro/practical-pytorch" -> "bharathgs/Awesome-pytorch-list" ["e"=1]
"spro/practical-pytorch" -> "hunkim/PyTorchZeroToAll" ["e"=1]
"spro/practical-pytorch" -> "jadore801120/attention-is-all-you-need-pytorch"
"spro/practical-pytorch" -> "pytorch/examples" ["e"=1]
"spro/practical-pytorch" -> "MaximumEntropy/Seq2Seq-PyTorch"
"spro/practical-pytorch" -> "pytorch/tutorials" ["e"=1]
"mhagiwara/100-nlp-papers" -> "dair-ai/nlp_paper_summaries"
"mhagiwara/100-nlp-papers" -> "NiuTrans/ABigSurvey"
"mhagiwara/100-nlp-papers" -> "keon/awesome-nlp"
"mhagiwara/100-nlp-papers" -> "sebastianruder/NLP-progress"
"mhagiwara/100-nlp-papers" -> "ivan-bilan/The-NLP-Pandect"
"mhagiwara/100-nlp-papers" -> "graykode/nlp-tutorial"
"mhagiwara/100-nlp-papers" -> "allenai/allennlp"
"mhagiwara/100-nlp-papers" -> "tomohideshibata/BERT-related-papers" ["e"=1]
"mhagiwara/100-nlp-papers" -> "huggingface/awesome-papers"
"mhagiwara/100-nlp-papers" -> "microsoft/nlp-recipes"
"mhagiwara/100-nlp-papers" -> "jacobeisenstein/gt-nlp-class"
"mhagiwara/100-nlp-papers" -> "thunlp/PLMpapers" ["e"=1]
"mhagiwara/100-nlp-papers" -> "graykode/nlp-roadmap"
"mhagiwara/100-nlp-papers" -> "fastai/course-nlp"
"mhagiwara/100-nlp-papers" -> "makcedward/nlpaug"
"ebanalyse/ebnerd-benchmark" -> "reczoo/RecSys2024_CTR_Challenge"
"ebanalyse/ebnerd-benchmark" -> "ebanalyse/senda"
"Kyubyong/wordvectors" -> "3Top/word2vec-api"
"Kyubyong/wordvectors" -> "HIT-SCIR/ELMoForManyLangs"
"Kyubyong/wordvectors" -> "lovit/soynlp" ["e"=1]
"Kyubyong/wordvectors" -> "SKTBrain/KoBERT" ["e"=1]
"Kyubyong/wordvectors" -> "Hironsan/awesome-embedding-models"
"Kyubyong/wordvectors" -> "Kyubyong/nlp_tasks"
"Kyubyong/wordvectors" -> "facebookresearch/StarSpace"
"Kyubyong/wordvectors" -> "rsennrich/subword-nmt" ["e"=1]
"Kyubyong/wordvectors" -> "salestock/fastText.py"
"Kyubyong/wordvectors" -> "babylonhealth/fastText_multilingual"
"Kyubyong/wordvectors" -> "facebookresearch/fastText"
"Kyubyong/wordvectors" -> "yoonkim/CNN_sentence" ["e"=1]
"Kyubyong/wordvectors" -> "allenai/bilm-tf"
"Kyubyong/wordvectors" -> "brightmart/text_classification" ["e"=1]
"Kyubyong/wordvectors" -> "monologg/KoELECTRA" ["e"=1]
"csurfer/rake-nltk" -> "aneesha/RAKE"
"csurfer/rake-nltk" -> "zelandiya/RAKE-tutorial"
"csurfer/rake-nltk" -> "boudinfl/pke"
"csurfer/rake-nltk" -> "vgrabovets/multi_rake"
"csurfer/rake-nltk" -> "LIAAD/yake"
"csurfer/rake-nltk" -> "summanlp/textrank"
"csurfer/rake-nltk" -> "davidadamojr/TextRank"
"csurfer/rake-nltk" -> "DerwenAI/pytextrank"
"csurfer/rake-nltk" -> "fabianvf/python-rake"
"csurfer/rake-nltk" -> "MaartenGr/KeyBERT"
"csurfer/rake-nltk" -> "chartbeat-labs/textacy"
"csurfer/rake-nltk" -> "waseem18/node-rake"
"csurfer/rake-nltk" -> "Mimino666/langdetect" ["e"=1]
"csurfer/rake-nltk" -> "miso-belica/sumy"
"csurfer/rake-nltk" -> "aboSamoor/polyglot"
"memray/seq2seq-keyphrase" -> "memray/seq2seq-keyphrase-pytorch"
"memray/seq2seq-keyphrase" -> "memray/OpenNMT-kpg-release"
"memray/seq2seq-keyphrase" -> "MultiPath/CopyNet" ["e"=1]
"memray/seq2seq-keyphrase" -> "kenchan0226/keyphrase-generation-rl"
"memray/seq2seq-keyphrase" -> "fudannlp16/KeyPhrase-Extraction"
"memray/seq2seq-keyphrase" -> "snkim/AutomaticKeyphraseExtraction"
"memray/seq2seq-keyphrase" -> "swisscom/ai-research-keyphrase-extraction"
"memray/seq2seq-keyphrase" -> "Chen-Wang-CUHK/KG-KE-KR-M"
"memray/seq2seq-keyphrase" -> "boudinfl/ake-datasets"
"memray/seq2seq-keyphrase" -> "avinsit123/keyphrase-gan"
"memray/seq2seq-keyphrase" -> "yuewang-cuhk/TAKG"
"memray/seq2seq-keyphrase" -> "boudinfl/pke"
"memray/seq2seq-keyphrase" -> "whqwill/seq2seq-keyphrase-bert"
"memray/seq2seq-keyphrase" -> "LIAAD/KeywordExtractor-Datasets"
"memray/seq2seq-keyphrase" -> "supercoderhawk/deep-keyphrase"
"LightersWang/Awesome-Active-Learning-for-Medical-Image-Analysis" -> "MedICL-VU/COLosSAL"
"LightersWang/Awesome-Active-Learning-for-Medical-Image-Analysis" -> "HiLab-git/UGTST"
"LightersWang/Awesome-Active-Learning-for-Medical-Image-Analysis" -> "avihu111/TypiClust"
"gambolputty/german-nouns" -> "gambolputty/wiktionary-de-parser"
"explosion/spacy-notebooks" -> "explosion/spacy-services"
"explosion/spacy-notebooks" -> "NSchrading/intro-spacy-nlp"
"explosion/spacy-notebooks" -> "explosion/talks"
"explosion/spacy-notebooks" -> "explosion/spacy-dev-resources"
"explosion/spacy-notebooks" -> "explosion/spacy-lookups-data"
"lorenbrichter/Words" -> "words/an-array-of-english-words"
"lk-geimfari/expynent" -> "lk-geimfari/mimesis" ["e"=1]
"patrickjquinn/P-Brain.ai" -> "patrickjquinn/P-Brain.ai-RasPi"
"dolph/dictionary" -> "matthewreagan/WebstersEnglishDictionary"
"dolph/dictionary" -> "adambom/dictionary"
"dolph/dictionary" -> "jeremy-rifkin/Wordlist"
"dolph/dictionary" -> "wordset/wordset-dictionary"
"dolph/dictionary" -> "words/an-array-of-english-words"
"dolph/dictionary" -> "sindresorhus/word-list"
"SenticNet/personality-detection" -> "yashsmehta/personality-prediction"
"SenticNet/personality-detection" -> "jkwieser/personality-prediction-from-text"
"SenticNet/personality-detection" -> "jcl132/personality-prediction-from-text"
"SenticNet/personality-detection" -> "hjian42/automatic-personality-prediction"
"SenticNet/personality-detection" -> "gugug/TensorFlow_DNN_Character_Classification"
"SenticNet/personality-detection" -> "amirmohammadkz/personality_detection"
"SenticNet/personality-detection" -> "automoto/big-five-data"
"SenticNet/personality-detection" -> "chbrown/liwc-python"
"SenticNet/personality-detection" -> "desaichirayu/Personality-Attribution-using-Natural-Language-Processing"
"SenticNet/personality-detection" -> "watson-developer-cloud/personality-insights-nodejs" ["e"=1]
"SenticNet/personality-detection" -> "declare-lab/MELD" ["e"=1]
"SenticNet/personality-detection" -> "zishansami102/First-Impression"
"SenticNet/personality-detection" -> "emorynlp/personality-detection"
"SenticNet/personality-detection" -> "Resh1992/User-profiling-in-social-media"
"SenticNet/personality-detection" -> "Penghao-He/YouTube-Personality-Detection"
"thorehusfeldt/git-paa-dansk" -> "sarnikowski/danish_transformers"
"NiuTrans/Introduction-to-Transformers" -> "NiuTrans/MTVenues"
"IceCream0910/kw-klas-plus" -> "mirusu400/KWU-library-QR-PoC"
"IceCream0910/kw-klas-plus" -> "kw-service/klas-helper-extension"
"proycon/pynlpl" -> "interrogator/corpkit"
"proycon/pynlpl" -> "proycon/colibri-core"
"proycon/pynlpl" -> "erickrf/nlpnet"
"LibraryOfCongress/data-exploration" -> "LibraryOfCongress/concordia"
"matthewreagan/WebstersEnglishDictionary" -> "adambom/dictionary"
"matthewreagan/WebstersEnglishDictionary" -> "dolph/dictionary"
"matthewreagan/WebstersEnglishDictionary" -> "wordset/wordset-dictionary"
"matthewreagan/WebstersEnglishDictionary" -> "wtetsu/mouse-dictionary" ["e"=1]
"dlatk/dlatk" -> "wwbp/county_tweet_lexical_bank"
"dlatk/dlatk" -> "humanlab/HaRT"
"nick7nlp/Counting-Stars" -> "MySong7NLPer/ChatGPT_as_Keyphrase_Extractor"
"nick7nlp/Counting-Stars" -> "MySong7NLPer/ALCO"
"nick7nlp/Counting-Stars" -> "MySong7NLPer/AI-Conference-Acceptance-Rate"
"nick7nlp/Counting-Stars" -> "MySong7NLPer/ChineseKeyphraseExtraction"
"nick7nlp/Counting-Stars" -> "MySong7NLPer/ResearchWriting-Tips"
"nick7nlp/Counting-Stars" -> "MySong7NLPer/HyperSiameseNet"
"nick7nlp/Counting-Stars" -> "MySong7NLPer/HISum"
"nick7nlp/Counting-Stars" -> "MySong7NLPer/Presentations-Notes"
"nick7nlp/Counting-Stars" -> "victorywys/SMART-KPE"
"erickrf/treernn" -> "XingxingZhang/td-treelstm"
"erickrf/treernn" -> "sapruash/RecursiveNN"
"rock3125/sentence2vec" -> "jx00109/sentence2vec"
"rock3125/sentence2vec" -> "PrincetonML/SIF"
"rock3125/sentence2vec" -> "UKPLab/arxiv2018-xling-sentence-embeddings"
"rock3125/sentence2vec" -> "klb3713/sentence2vec"
"rock3125/sentence2vec" -> "mchen24/iclr2017"
"rock3125/sentence2vec" -> "lajanugen/S2V"
"rock3125/sentence2vec" -> "epfml/sent2vec"
"web64/norwegian-nlp-resources" -> "NbAiLab/notram"
"web64/norwegian-nlp-resources" -> "ltgoslo/norec"
"web64/norwegian-nlp-resources" -> "ltgoslo/NorBERT"
"web64/norwegian-nlp-resources" -> "ltgoslo/norne"
"web64/norwegian-nlp-resources" -> "ltgoslo/talk-of-norway"
"web64/norwegian-nlp-resources" -> "certainlyio/nordic_bert"
"ispras/atr4s" -> "AylaRT/ACTER"
"IntelLabs/pWord2Vec" -> "cythnn/cythnn"
"mchen24/iclr2017" -> "IBM/WordMoversEmbeddings"
"mchen24/iclr2017" -> "fh295/SentenceRepresentation"
"clab/dynet_tutorial_examples" -> "clab/lstm-parser"
"clab/dynet_tutorial_examples" -> "clab/dynet"
"clab/dynet_tutorial_examples" -> "jwieting/charagram"
"clab/dynet_tutorial_examples" -> "taolei87/rcnn" ["e"=1]
"clab/dynet_tutorial_examples" -> "neubig/lamtram" ["e"=1]
"clab/dynet_tutorial_examples" -> "ytsvetko/qvec"
"clab/dynet_tutorial_examples" -> "nyu-dl/dl4mt-tutorial" ["e"=1]
"clab/dynet_tutorial_examples" -> "elikip/bist-parser"
"clab/dynet_tutorial_examples" -> "tdozat/Parser-v1"
"clab/dynet_tutorial_examples" -> "lisa-groundhog/GroundHog" ["e"=1]
"clab/dynet_tutorial_examples" -> "bplank/bilstm-aux"
"clab/dynet_tutorial_examples" -> "YahooArchive/YaraParser"
"gutfeeling/beginner_nlp" -> "andrewt3000/DL4NLP"
"openeventdata/PLOVER" -> "openeventdata/phoenix_pipeline"
"openeventdata/PLOVER" -> "openeventdata/petrarch2"
"mjhea0/twitter-sentiment-analysis" -> "gastonstat/Mining_Twitter"
"SwoopSearch/pyaddress" -> "pnpnpn/street-address"
"explosion/spacy-dev-resources" -> "explosion/spacy-services"
"NKU-HLT/Fusion-Insider-threat-detection" -> "NKU-HLT/KNN-CTC"
"NKU-HLT/Fusion-Insider-threat-detection" -> "NKU-HLT/Emotion-Recognition"
"NKU-HLT/Fusion-Insider-threat-detection" -> "NKU-HLT/Role-Play-Prompting"
"NKU-HLT/KNN-CTC" -> "NKU-HLT/Fusion-Insider-threat-detection"
"NKU-HLT/KNN-CTC" -> "NKU-HLT/Emotion-Recognition"
"NKU-HLT/KNN-CTC" -> "NKU-HLT/Role-Play-Prompting"
"NKU-HLT/KNN-CTC" -> "NKU-HLT/RAMP_MOS"
"NKU-HLT/Emotion-Recognition" -> "NKU-HLT/Fusion-Insider-threat-detection"
"NKU-HLT/Emotion-Recognition" -> "NKU-HLT/KNN-CTC"
"NKU-HLT/Emotion-Recognition" -> "NKU-HLT/Role-Play-Prompting"
"tdozat/Parser-v1" -> "elikip/bist-parser"
"tdozat/Parser-v1" -> "zhangmeishan/BiaffineDParser"
"tdozat/Parser-v1" -> "jcyk/Dynet-Biaffine-dependency-parser"
"tdozat/Parser-v1" -> "clab/lstm-parser"
"tdozat/Parser-v1" -> "tdozat/Parser-v2"
"tdozat/Parser-v1" -> "hankcs/TreebankPreprocessing"
"dtuggener/CharSplit" -> "repodiac/german_compound_splitter"
"dtuggener/CharSplit" -> "riedlma/SECOS"
"kengz/spacy-nlp" -> "ines/spacy-js"
"kengz/spacy-nlp" -> "kengz/CGKB"
"jacobeisenstein/probabilistic-lexicon-classification" -> "ICML14MoMCompare/spectral-learn"
"jacobeisenstein/probabilistic-lexicon-classification" -> "williamleif/redditnetwork"
"jonorthwash/ud-annotatrix" -> "udapi/udapi-python"
"jonorthwash/ud-annotatrix" -> "UniversalDependencies/tools"
"jonorthwash/ud-annotatrix" -> "Orange-OpenSource/conllueditor"
"waseem18/node-rake" -> "mattermost-community/mattermost-plugin-jenkins" ["e"=1]
"waseem18/node-rake" -> "waseem18/Openflock"
"yiyang-gt/social-attention" -> "ICML14MoMCompare/spectral-learn"
"HiLab-git/DMSPS" -> "HiLab-git/UGTST"
"airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier" -> "knok/rcnn-text-classification"
"airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier" -> "roomylee/rcnn-text-classification"
"airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier" -> "prernakhurana2/RCNN"
"airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier" -> "minerva-ml/open-solution-toxic-comments" ["e"=1]
"ds-wook/web-ctr-prediction" -> "ds-wook/categorical-tabnet"
"affjljoo3581/deit3-jax" -> "coverist/coverist-android"
"nabihach/FD_CFD_extraction" -> "codocedo/tane"
"facebookresearch/faiss" -> "spotify/annoy"
"facebookresearch/faiss" -> "milvus-io/milvus" ["e"=1]
"facebookresearch/faiss" -> "facebookresearch/fastText"
"facebookresearch/faiss" -> "UKPLab/sentence-transformers"
"facebookresearch/faiss" -> "vllm-project/vllm" ["e"=1]
"facebookresearch/faiss" -> "deepspeedai/DeepSpeed" ["e"=1]
"facebookresearch/faiss" -> "google-research/bert"
"facebookresearch/faiss" -> "run-llama/llama_index" ["e"=1]
"facebookresearch/faiss" -> "ray-project/ray" ["e"=1]
"facebookresearch/faiss" -> "google-research/google-research" ["e"=1]
"facebookresearch/faiss" -> "huggingface/transformers" ["e"=1]
"facebookresearch/faiss" -> "Lightning-AI/pytorch-lightning" ["e"=1]
"facebookresearch/faiss" -> "facebookresearch/fairseq"
"facebookresearch/faiss" -> "langchain-ai/langchain" ["e"=1]
"facebookresearch/faiss" -> "jax-ml/jax" ["e"=1]
"google/sentencepiece" -> "rsennrich/subword-nmt" ["e"=1]
"google/sentencepiece" -> "openai/tiktoken" ["e"=1]
"google/sentencepiece" -> "allenai/allennlp"
"google/sentencepiece" -> "OpenNMT/OpenNMT-py"
"google/sentencepiece" -> "zihangdai/xlnet"
"google/sentencepiece" -> "huggingface/tokenizers"
"google/sentencepiece" -> "google-research/text-to-text-transfer-transformer"
"google/sentencepiece" -> "UKPLab/sentence-transformers"
"google/sentencepiece" -> "tensorflow/tensor2tensor"
"google/sentencepiece" -> "jina-ai/clip-as-service"
"google/sentencepiece" -> "sebastianruder/NLP-progress"
"google/sentencepiece" -> "facebookresearch/XLM"
"google/sentencepiece" -> "NVIDIA/Megatron-LM" ["e"=1]
"google/sentencepiece" -> "facebookresearch/fastText"
"google/sentencepiece" -> "flairNLP/flair"
"facebookresearch/fairseq-lua" -> "OpenNMT/OpenNMT" ["e"=1]
"facebookresearch/fairseq-lua" -> "google/seq2seq"
"facebookresearch/fairseq-lua" -> "OpenNMT/OpenNMT-py"
"facebookresearch/fairseq-lua" -> "tensorflow/nmt"
"facebookresearch/fairseq-lua" -> "facebookresearch/ParlAI"
"facebookresearch/fairseq-lua" -> "rsennrich/subword-nmt" ["e"=1]
"facebookresearch/fairseq-lua" -> "harvardnlp/seq2seq-attn" ["e"=1]
"facebookresearch/fairseq-lua" -> "tensorflow/tensor2tensor"
"facebookresearch/fairseq-lua" -> "google-deepmind/sonnet" ["e"=1]
"facebookresearch/fairseq-lua" -> "buriburisuri/speech-to-text-wavenet" ["e"=1]
"facebookresearch/fairseq-lua" -> "facebookresearch/InferSent"
"facebookresearch/fairseq-lua" -> "Kyubyong/transformer"
"facebookresearch/fairseq-lua" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"facebookresearch/fairseq-lua" -> "facebookarchive/MemNN" ["e"=1]
"facebookresearch/fairseq-lua" -> "facebookresearch/UnsupervisedMT" ["e"=1]
"abromberg/sentiment_analysis_python" -> "vivekn/sentiment"
"abromberg/sentiment_analysis_python" -> "ravikiranj/twitter-sentiment-analyzer"
"abromberg/sentiment_analysis_python" -> "pthrasher/sentiment"
"abromberg/sentiment_analysis_python" -> "mayank93/Twitter-Sentiment-Analysis"
"facebookresearch/ParlAI" -> "allenai/allennlp"
"facebookresearch/ParlAI" -> "facebookresearch/DrQA" ["e"=1]
"facebookresearch/ParlAI" -> "facebookresearch/fastText"
"facebookresearch/ParlAI" -> "tensorflow/tensor2tensor"
"facebookresearch/ParlAI" -> "facebookresearch/fairseq-lua"
"facebookresearch/ParlAI" -> "sebastianruder/NLP-progress"
"facebookresearch/ParlAI" -> "OpenNMT/OpenNMT-py"
"facebookresearch/ParlAI" -> "facebookresearch/pytext"
"facebookresearch/ParlAI" -> "deeppavlov/DeepPavlov"
"facebookresearch/ParlAI" -> "google/sentencepiece"
"facebookresearch/ParlAI" -> "RasaHQ/rasa"
"facebookresearch/ParlAI" -> "zihangdai/xlnet"
"facebookresearch/ParlAI" -> "google-deepmind/sonnet" ["e"=1]
"facebookresearch/ParlAI" -> "flairNLP/flair"
"facebookresearch/ParlAI" -> "google/seq2seq"
"jacobeisenstein/gt-nlp-class" -> "allenai/allennlp"
"jacobeisenstein/gt-nlp-class" -> "sebastianruder/NLP-progress"
"jacobeisenstein/gt-nlp-class" -> "salesforce/decaNLP"
"jacobeisenstein/gt-nlp-class" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"jacobeisenstein/gt-nlp-class" -> "keon/awesome-nlp"
"jacobeisenstein/gt-nlp-class" -> "facebookresearch/pytext"
"jacobeisenstein/gt-nlp-class" -> "zihangdai/xlnet"
"jacobeisenstein/gt-nlp-class" -> "niderhoff/nlp-datasets"
"jacobeisenstein/gt-nlp-class" -> "facebookresearch/XLM"
"jacobeisenstein/gt-nlp-class" -> "microsoft/nlp-recipes"
"jacobeisenstein/gt-nlp-class" -> "ctgk/PRML" ["e"=1]
"jacobeisenstein/gt-nlp-class" -> "yandexdataschool/nlp_course"
"jacobeisenstein/gt-nlp-class" -> "spro/practical-pytorch"
"jacobeisenstein/gt-nlp-class" -> "flairNLP/flair"
"jacobeisenstein/gt-nlp-class" -> "stanfordnlp/stanza"
"babylonhealth/fastText_multilingual" -> "facebookresearch/MUSE"
"babylonhealth/fastText_multilingual" -> "artetxem/vecmap" ["e"=1]
"babylonhealth/fastText_multilingual" -> "facebookresearch/LASER"
"babylonhealth/fastText_multilingual" -> "facebookresearch/XLM"
"babylonhealth/fastText_multilingual" -> "clab/fast_align" ["e"=1]
"babylonhealth/fastText_multilingual" -> "Kyubyong/wordvectors"
"babylonhealth/fastText_multilingual" -> "aboSamoor/polyglot"
"babylonhealth/fastText_multilingual" -> "bheinzerling/bpemb"
"babylonhealth/fastText_multilingual" -> "facebookresearch/StarSpace"
"babylonhealth/fastText_multilingual" -> "mkusner/wmd"
"babylonhealth/fastText_multilingual" -> "salestock/fastText.py"
"babylonhealth/fastText_multilingual" -> "mfaruqui/crosslingual-cca"
"babylonhealth/fastText_multilingual" -> "facebookresearch/InferSent"
"babylonhealth/fastText_multilingual" -> "facebookresearch/UnsupervisedMT" ["e"=1]
"babylonhealth/fastText_multilingual" -> "facebookresearch/SentEval"
"fbkarsdorp/python-course" -> "TEIC/TEI" ["e"=1]
"fbkarsdorp/python-course" -> "CLARIAH/awesome-humanities-ontologies" ["e"=1]
"fbkarsdorp/python-course" -> "sgsinclair/alta"
"fbkarsdorp/python-course" -> "senderle/topic-modeling-tool"
"fbkarsdorp/python-course" -> "TEIC/CETEIcean" ["e"=1]
"fbkarsdorp/python-course" -> "mchesterkadwell/intro-to-text-mining-with-python"
"miso-belica/sumy" -> "xiaoxu193/PyTeaser"
"miso-belica/sumy" -> "summanlp/textrank"
"miso-belica/sumy" -> "IndigoResearch/textteaser"
"miso-belica/sumy" -> "DerwenAI/pytextrank"
"miso-belica/sumy" -> "icoxfog417/awesome-text-summarization" ["e"=1]
"miso-belica/sumy" -> "mathsyouth/awesome-text-summarization" ["e"=1]
"miso-belica/sumy" -> "dmmiller612/bert-extractive-summarizer" ["e"=1]
"miso-belica/sumy" -> "facebookarchive/NAMAS" ["e"=1]
"miso-belica/sumy" -> "davidadamojr/TextRank"
"miso-belica/sumy" -> "nlpyang/PreSumm" ["e"=1]
"miso-belica/sumy" -> "MojoJolo/textteaser"
"miso-belica/sumy" -> "abisee/pointer-generator" ["e"=1]
"miso-belica/sumy" -> "codelucas/newspaper" ["e"=1]
"miso-belica/sumy" -> "dongjun-Lee/text-summarization-tensorflow" ["e"=1]
"miso-belica/sumy" -> "letiantian/TextRank4ZH" ["e"=1]
"wordset/wordset-dictionary" -> "CloudBytes-Academy/English-Dictionary-Open-Source"
"wordset/wordset-dictionary" -> "freedict/fd-dictionaries"
"wordset/wordset-dictionary" -> "matthewreagan/WebstersEnglishDictionary"
"wordset/wordset-dictionary" -> "dolph/dictionary"
"wordset/wordset-dictionary" -> "zaibacu/thesaurus"
"wordset/wordset-dictionary" -> "adambom/dictionary"
"wordset/wordset-dictionary" -> "open-dict-data/ipa-dict" ["e"=1]
"wordset/wordset-dictionary" -> "TheOpenDictionary/odict"
"wordset/wordset-dictionary" -> "tatuylonen/wiktextract"
"epfml/sent2vec" -> "facebookresearch/InferSent"
"epfml/sent2vec" -> "swisscom/ai-research-keyphrase-extraction"
"epfml/sent2vec" -> "PrincetonML/SIF"
"epfml/sent2vec" -> "facebookresearch/SentEval"
"epfml/sent2vec" -> "Separius/awesome-sentence-embedding"
"epfml/sent2vec" -> "ryankiros/skip-thoughts" ["e"=1]
"epfml/sent2vec" -> "facebookresearch/StarSpace"
"epfml/sent2vec" -> "jhlau/doc2vec"
"epfml/sent2vec" -> "allenai/bilm-tf"
"epfml/sent2vec" -> "rock3125/sentence2vec"
"epfml/sent2vec" -> "ncbi-nlp/BioSentVec" ["e"=1]
"epfml/sent2vec" -> "oborchers/Fast_Sentence_Embeddings"
"epfml/sent2vec" -> "explosion/sense2vec"
"epfml/sent2vec" -> "facebookresearch/MUSE"
"epfml/sent2vec" -> "HIT-SCIR/ELMoForManyLangs"
"laugustyniak/awesome-sentiment-analysis" -> "xiamx/awesome-sentiment-analysis"
"laugustyniak/awesome-sentiment-analysis" -> "laugustyniak/textlytics"
"laugustyniak/awesome-sentiment-analysis" -> "lixin4ever/TNet" ["e"=1]
"laugustyniak/awesome-sentiment-analysis" -> "ChenChengKuan/awesome-text-generation" ["e"=1]
"laugustyniak/awesome-sentiment-analysis" -> "ziyin-dl/word-embedding-dimensionality-selection"
"laugustyniak/awesome-sentiment-analysis" -> "tlkh/text-emotion-classification"
"laugustyniak/awesome-sentiment-analysis" -> "haiker2011/awesome-nlp-sentiment-analysis" ["e"=1]
"google/seq2seq" -> "tensorflow/nmt"
"google/seq2seq" -> "farizrahman4u/seq2seq" ["e"=1]
"google/seq2seq" -> "facebookresearch/fairseq-lua"
"google/seq2seq" -> "Kyubyong/transformer"
"google/seq2seq" -> "tensorflow/tensor2tensor"
"google/seq2seq" -> "OpenNMT/OpenNMT-py"
"google/seq2seq" -> "rsennrich/subword-nmt" ["e"=1]
"google/seq2seq" -> "dennybritz/cnn-text-classification-tf"
"google/seq2seq" -> "LantaoYu/SeqGAN" ["e"=1]
"google/seq2seq" -> "ematvey/tensorflow-seq2seq-tutorials" ["e"=1]
"google/seq2seq" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"google/seq2seq" -> "google-deepmind/sonnet" ["e"=1]
"google/seq2seq" -> "abisee/pointer-generator" ["e"=1]
"google/seq2seq" -> "facebookresearch/fastText"
"google/seq2seq" -> "zihangdai/xlnet"
"google/sling" -> "facebookresearch/InferSent"
"google/sling" -> "percyliang/sempre" ["e"=1]
"google/sling" -> "Franck-Dernoncourt/NeuroNER" ["e"=1]
"google/sling" -> "facebookresearch/StarSpace"
"google/sling" -> "huggingface/neuralcoref"
"google/sling" -> "facebookresearch/DrQA" ["e"=1]
"google/sling" -> "facebookresearch/SentEval"
"google/sling" -> "allenai/allennlp"
"google/sling" -> "facebookarchive/MemNN" ["e"=1]
"google/sling" -> "baidu/Familia" ["e"=1]
"google/sling" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"google/sling" -> "clab/dynet"
"google/sling" -> "google/seq2seq"
"google/sling" -> "tensorflow/fold" ["e"=1]
"google/sling" -> "shawnwun/RNNLG" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "hankcs/CS224n" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "learning511/cs224n-learning-camp" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "rguthrie3/DeepLearningForNLPInPytorch"
"stanfordnlp/cs224n-winter17-notes" -> "zhanlaoban/CS224N-Stanford-Winter-2019" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "spro/practical-pytorch"
"stanfordnlp/cs224n-winter17-notes" -> "oxford-cs-deepnlp-2017/lectures" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "ZacBi/CS224n-2019-solutions" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "google/seq2seq"
"stanfordnlp/cs224n-winter17-notes" -> "brianspiering/awesome-dl4nlp"
"stanfordnlp/cs224n-winter17-notes" -> "dennybritz/chatbot-retrieval" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "cgpotts/cs224u"
"stanfordnlp/cs224n-winter17-notes" -> "andrewt3000/DL4NLP"
"stanfordnlp/cs224n-winter17-notes" -> "chiphuyen/stanford-tensorflow-tutorials" ["e"=1]
"stanfordnlp/cs224n-winter17-notes" -> "DSKSD/DeepNLP-models-Pytorch"
"explosion/spacy-models" -> "explosion/spacy-transformers"
"explosion/spacy-models" -> "explosion/thinc"
"explosion/spacy-models" -> "explosion/projects"
"explosion/spacy-models" -> "explosion/spacy-course"
"explosion/spacy-models" -> "huggingface/neuralcoref"
"explosion/spacy-models" -> "explosion/sense2vec"
"explosion/spacy-models" -> "chartbeat-labs/textacy"
"explosion/spacy-models" -> "explosion/spaCy"
"explosion/spacy-models" -> "nltk/nltk_data" ["e"=1]
"explosion/spacy-models" -> "allenai/scispacy" ["e"=1]
"explosion/spacy-models" -> "CLUEbenchmark/CLUE" ["e"=1]
"explosion/spacy-models" -> "princeton-nlp/SimCSE" ["e"=1]
"explosion/spacy-models" -> "explosion/spacy-notebooks"
"explosion/spacy-models" -> "DerwenAI/pytextrank"
"explosion/spacy-models" -> "allenai/allennlp"
"rguthrie3/DeepLearningForNLPInPytorch" -> "spro/practical-pytorch"
"rguthrie3/DeepLearningForNLPInPytorch" -> "DSKSD/DeepNLP-models-Pytorch"
"rguthrie3/DeepLearningForNLPInPytorch" -> "PetrochukM/PyTorch-NLP"
"rguthrie3/DeepLearningForNLPInPytorch" -> "pytorch/text"
"rguthrie3/DeepLearningForNLPInPytorch" -> "stanfordnlp/cs224n-winter17-notes"
"rguthrie3/DeepLearningForNLPInPytorch" -> "andrewt3000/DL4NLP"
"rguthrie3/DeepLearningForNLPInPytorch" -> "LiyuanLucasLiu/LM-LSTM-CRF" ["e"=1]
"rguthrie3/DeepLearningForNLPInPytorch" -> "allenai/allennlp"
"rguthrie3/DeepLearningForNLPInPytorch" -> "jcjohnson/pytorch-examples" ["e"=1]
"rguthrie3/DeepLearningForNLPInPytorch" -> "EdGENetworks/attention-networks-for-classification" ["e"=1]
"rguthrie3/DeepLearningForNLPInPytorch" -> "OpenNMT/OpenNMT-py"
"rguthrie3/DeepLearningForNLPInPytorch" -> "clab/dynet_tutorial_examples"
"rguthrie3/DeepLearningForNLPInPytorch" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"rguthrie3/DeepLearningForNLPInPytorch" -> "jacobeisenstein/gt-nlp-class"
"rguthrie3/DeepLearningForNLPInPytorch" -> "mila-iqia/welcome_tutorials" ["e"=1]
"OpenNMT/OpenNMT-py" -> "allenai/allennlp"
"OpenNMT/OpenNMT-py" -> "tensorflow/nmt"
"OpenNMT/OpenNMT-py" -> "rsennrich/subword-nmt" ["e"=1]
"OpenNMT/OpenNMT-py" -> "spro/practical-pytorch"
"OpenNMT/OpenNMT-py" -> "jadore801120/attention-is-all-you-need-pytorch"
"OpenNMT/OpenNMT-py" -> "OpenNMT/OpenNMT-tf" ["e"=1]
"OpenNMT/OpenNMT-py" -> "google/sentencepiece"
"OpenNMT/OpenNMT-py" -> "pytorch/text"
"OpenNMT/OpenNMT-py" -> "abisee/pointer-generator" ["e"=1]
"OpenNMT/OpenNMT-py" -> "tensorflow/tensor2tensor"
"OpenNMT/OpenNMT-py" -> "zihangdai/xlnet"
"OpenNMT/OpenNMT-py" -> "facebookresearch/XLM"
"OpenNMT/OpenNMT-py" -> "OpenNMT/OpenNMT" ["e"=1]
"OpenNMT/OpenNMT-py" -> "THUNLP-MT/MT-Reading-List" ["e"=1]
"OpenNMT/OpenNMT-py" -> "kimiyoung/transformer-xl"
"chrisjmccormick/word2vec_commented" -> "chrisjmccormick/inspect_word2vec"
"chrisjmccormick/word2vec_commented" -> "tmikolov/word2vec"
"chrisjmccormick/word2vec_commented" -> "dav/word2vec"
"chrisjmccormick/word2vec_commented" -> "theeluwin/pytorch-sgns"
"chrisjmccormick/word2vec_commented" -> "ycjuan/libffm" ["e"=1]
"chrisjmccormick/word2vec_commented" -> "ronxin/wevi"
"chrisjmccormick/word2vec_commented" -> "srendle/libfm" ["e"=1]
"chrisjmccormick/word2vec_commented" -> "microsoft/LightLDA" ["e"=1]
"chrisjmccormick/word2vec_commented" -> "deborausujono/word2vecpy"
"chrisjmccormick/word2vec_commented" -> "hankcs/CS224n" ["e"=1]
"chrisjmccormick/word2vec_commented" -> "salestock/fastText.py"
"chrisjmccormick/word2vec_commented" -> "stanfordnlp/GloVe"
"chrisjmccormick/word2vec_commented" -> "ryankiros/skip-thoughts" ["e"=1]
"chrisjmccormick/word2vec_commented" -> "epfml/sent2vec"
"chrisjmccormick/word2vec_commented" -> "maxoodf/word2vec"
"adambom/dictionary" -> "matthewreagan/WebstersEnglishDictionary"
"adambom/dictionary" -> "dolph/dictionary"
"adambom/dictionary" -> "wordset/wordset-dictionary"
"adambom/dictionary" -> "aviaryan/gcide-dictionary-json"
"adambom/dictionary" -> "gutfeeling/word_forms" ["e"=1]
"openai/generating-reviews-discovering-sentiment" -> "NVIDIA/sentiment-discovery"
"openai/generating-reviews-discovering-sentiment" -> "guillitte/pytorch-sentiment-neuron"
"openai/generating-reviews-discovering-sentiment" -> "jiweil/Neural-Dialogue-Generation" ["e"=1]
"openai/generating-reviews-discovering-sentiment" -> "facebookresearch/InferSent"
"openai/generating-reviews-discovering-sentiment" -> "ryankiros/skip-thoughts" ["e"=1]
"openai/generating-reviews-discovering-sentiment" -> "openai/finetune-transformer-lm"
"openai/generating-reviews-discovering-sentiment" -> "yoonkim/CNN_sentence" ["e"=1]
"openai/generating-reviews-discovering-sentiment" -> "facebookresearch/fairseq-lua"
"openai/generating-reviews-discovering-sentiment" -> "facebookresearch/SentEval"
"openai/generating-reviews-discovering-sentiment" -> "OpenNMT/OpenNMT" ["e"=1]
"openai/generating-reviews-discovering-sentiment" -> "salesforce/awd-lstm-lm"
"openai/generating-reviews-discovering-sentiment" -> "google-deepmind/rc-data" ["e"=1]
"openai/generating-reviews-discovering-sentiment" -> "kelvinguu/neural-editor" ["e"=1]
"openai/generating-reviews-discovering-sentiment" -> "karthikncode/nlp-datasets" ["e"=1]
"openai/generating-reviews-discovering-sentiment" -> "bfelbo/DeepMoji"
"marcosfede/algorithms" -> "s0md3v/huepy" ["e"=1]
"marcosfede/algorithms" -> "life4/textdistance"
"marcosfede/algorithms" -> "rShetty/awesome-distributed-systems" ["e"=1]
"marcosfede/algorithms" -> "devAmoghS/Python-Interview-Problems-for-Practice" ["e"=1]
"marcosfede/algorithms" -> "kevintpeng/Learn-Something-Every-Day" ["e"=1]
"marcosfede/algorithms" -> "llSourcell/Learn_Blockchain_in_2_months" ["e"=1]
"marcosfede/algorithms" -> "minimaxir/person-blocker" ["e"=1]
"marcosfede/algorithms" -> "sahilbansal17/Get_Better_at_CP_in_2_Months" ["e"=1]
"marcosfede/algorithms" -> "ua-nick/Data-Structures-and-Algorithms" ["e"=1]
"marcosfede/algorithms" -> "fnplus/interview-techdev-guide" ["e"=1]
"marcosfede/algorithms" -> "anubhavshrimal/Data-Structures-Algorithms" ["e"=1]
"marcosfede/algorithms" -> "0xAX/go-algorithms" ["e"=1]
"marcosfede/algorithms" -> "schollz/find3" ["e"=1]
"marcosfede/algorithms" -> "astorfi/Deep-Learning-Roadmap" ["e"=1]
"t-makaro/animatplot" -> "IndicoDataSolutions/finetune"
"whq-xxh/ADA4MIA" -> "whq-xxh/SFADA-GTV-Seg"
"whq-xxh/ADA4MIA" -> "HiLab-git/UGTST"
"JieyuZ2/TaskMeAnything" -> "JieyuZ2/ProVision"
"JieyuZ2/TaskMeAnything" -> "Dongping-Chen/ISG"
"JieyuZ2/TaskMeAnything" -> "RAIVNLab/mnms"
"JieyuZ2/TaskMeAnything" -> "RAIVNLab/sugar-crepe"
"TalLinzen/rnn_agreement" -> "facebookresearch/colorlessgreenRNNs"
"TalLinzen/rnn_agreement" -> "yoavg/bert-syntax"
"xiamx/awesome-sentiment-analysis" -> "laugustyniak/awesome-sentiment-analysis"
"xiamx/awesome-sentiment-analysis" -> "vivekn/sentiment"
"xiamx/awesome-sentiment-analysis" -> "ganeshjawahar/mem_absa" ["e"=1]
"xiamx/awesome-sentiment-analysis" -> "adeshpande3/LSTM-Sentiment-Analysis"
"xiamx/awesome-sentiment-analysis" -> "openai/generating-reviews-discovering-sentiment"
"xiamx/awesome-sentiment-analysis" -> "thunlp/NSC" ["e"=1]
"xiamx/awesome-sentiment-analysis" -> "Lab41/sunny-side-up"
"xiamx/awesome-sentiment-analysis" -> "abdulfatir/twitter-sentiment-analysis"
"xiamx/awesome-sentiment-analysis" -> "jimmyyfeng/TD-LSTM" ["e"=1]
"xiamx/awesome-sentiment-analysis" -> "xiaohan2012/twitter-sent-dnn"
"xiamx/awesome-sentiment-analysis" -> "cjhutto/vaderSentiment"
"xiamx/awesome-sentiment-analysis" -> "ayushoriginal/Sentiment-Analysis-Twitter"
"xiamx/awesome-sentiment-analysis" -> "uclatommy/tweetfeels"
"xiamx/awesome-sentiment-analysis" -> "yoonkim/CNN_sentence" ["e"=1]
"xiamx/awesome-sentiment-analysis" -> "declare-lab/awesome-sentiment-analysis" ["e"=1]
"benathi/word2gm" -> "seomoz/word2gauss"
"benathi/word2gm" -> "benathi/multisense-prob-fasttext"
"usc-isi-i2/etk" -> "usc-isi-i2/rltk"
"usc-isi-i2/etk" -> "usc-isi-i2/dig-etl-engine"
"NKU-HLT/AudioEditor" -> "NKU-HLT/RAMP_MOS"
"uclatommy/tweetfeels" -> "xiaohan2012/twitter-sent-dnn"
"uclatommy/tweetfeels" -> "ujjwalkarn/Twitter-Sentiment-Analysis"
"uclatommy/tweetfeels" -> "jasti/Stock-Predictor" ["e"=1]
"uclatommy/tweetfeels" -> "mayank93/Twitter-Sentiment-Analysis"
"uclatommy/tweetfeels" -> "Lissy93/twitter-sentiment-visualisation"
"matthaywardwebdesign/aus-search" -> "data61/gnaf"
"HiLab-git/UGTST" -> "MedICL-VU/COLosSAL"
"NKU-HLT/RAMP_MOS" -> "NKU-HLT/MusicEval-baseline"
"NKU-HLT/RAMP_MOS" -> "NKU-HLT/KNN-CTC"
"dasguptar/treelstm.pytorch" -> "stanfordnlp/treelstm" ["e"=1]
"dasguptar/treelstm.pytorch" -> "ttpro1995/TreeLSTMSentiment"
"dasguptar/treelstm.pytorch" -> "unbounce/pytorch-tree-lstm"
"dasguptar/treelstm.pytorch" -> "yikangshen/Ordered-Neurons"
"dasguptar/treelstm.pytorch" -> "MaximumEntropy/Seq2Seq-PyTorch"
"dasguptar/treelstm.pytorch" -> "ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" ["e"=1]
"dasguptar/treelstm.pytorch" -> "jekbradbury/examples"
"dasguptar/treelstm.pytorch" -> "Sshanu/Relation-Classification-using-Bidirectional-LSTM-Tree" ["e"=1]
"dasguptar/treelstm.pytorch" -> "nyu-mll/spinn"
"dasguptar/treelstm.pytorch" -> "sapruash/RecursiveNN"
"dasguptar/treelstm.pytorch" -> "eladhoffer/seq2seq.pytorch"
"dasguptar/treelstm.pytorch" -> "qipeng/gcn-over-pruned-trees" ["e"=1]
"dasguptar/treelstm.pytorch" -> "nicolaspi/treelstm"
"dasguptar/treelstm.pytorch" -> "salesforce/awd-lstm-lm"
"dasguptar/treelstm.pytorch" -> "jihunchoi/unsupervised-treelstm"
"jekbradbury/examples" -> "stanfordnlp/spinn"
"kosukeimai/fastLink" -> "kosukeimai/wru"
"kosukeimai/fastLink" -> "djvanderlaan/reclin"
"kosukeimai/fastLink" -> "J535D165/data-matching-software"
"kosukeimai/fastLink" -> "dgrtwo/fuzzyjoin" ["e"=1]
"src-d/wmd-relax" -> "mkusner/wmd"
"src-d/wmd-relax" -> "eaclark07/sms"
"src-d/wmd-relax" -> "stephenhky/PyWMD"
"src-d/wmd-relax" -> "AIPHES/emnlp19-moverscore" ["e"=1]
"src-d/wmd-relax" -> "google-research-datasets/sentence-compression"
"NIHOPA/NLPre" -> "NIHOPA/word2vec_pipeline"
"NIHOPA/NLPre" -> "kevinlu1248/pyate"
"NIHOPA/NLPre" -> "BaderLab/saber" ["e"=1]
"havanagrawal/c2c2017" -> "sunnypatel165/c2c2018"
"JieyuZ2/ProVision" -> "JieyuZ2/TaskMeAnything"
"JieyuZ2/ProVision" -> "Dongping-Chen/ISG"
"thunlp/SE-WRL" -> "thunlp/SE-WRL-SAT"
"thunlp/SE-WRL" -> "thunlp/sememe_prediction"
"thunlp/SE-WRL" -> "thunlp/OpenHowNet" ["e"=1]
"thunlp/SE-WRL" -> "thunlp/Auto_CLIWC"
"thunlp/SE-WRL" -> "thunlp/SCPapers"
"thunlp/SE-WRL" -> "Leonard-Xu/CWE"
"erickrf/nlpnet" -> "attardi/deepnl"
"erickrf/nlpnet" -> "unicamp-dl/PTT5" ["e"=1]
"erickrf/nlpnet" -> "biplab-iitb/practNLPTools"
"erickrf/nlpnet" -> "clab/lstm-parser"
"erickrf/nlpnet" -> "proycon/pynlpl"
"google-research-datasets/sentence-compression" -> "cnap/sentence-compression"
"nikicc/twitter-emotion-recognition" -> "Ankushr785/Emotion-recognition-from-tweets"
"baahrens/goodreads-api-node" -> "bdickason/node-goodreads"
"usc-isi-i2/rltk" -> "usc-isi-i2/etk"
"whq-xxh/SFADA-UWF-SLO" -> "whq-xxh/SFADA-GTV-Seg"
"Gaglia88/sparker" -> "drangons/entity_resolution_spark"
"JULIELab/EmoBank" -> "SungjoonPark/EmotionDetection"
"JULIELab/EmoBank" -> "sarnthil/unify-emotion-datasets"
"JULIELab/EmoBank" -> "cbaziotis/ntua-slp-semeval2018"
"JULIELab/EmoBank" -> "JULIELab/JEmAS"
"JULIELab/EmoBank" -> "gmendes9/multilingual_va_prediction"
"JULIELab/EmoBank" -> "tlkh/text-emotion-classification"
"JULIELab/EmoBank" -> "sinmaniphel/py_isear_dataset"
"dmis-lab/Monet" -> "kw-service/kw-notice-android-v2"
"dmis-lab/Monet" -> "affjljoo3581/deit3-jax"
"dmis-lab/Monet" -> "affjljoo3581/starcoder-jax"
"dmis-lab/Monet" -> "affjljoo3581/KW-Computer-Vision-AI-1st-Solution"
"dmis-lab/Monet" -> "affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves"
"dmis-lab/Monet" -> "affjljoo3581/Google-American-Sign-Language-Fingerspelling-Recognition"
"nicolaspi/treelstm" -> "sapruash/RecursiveNN"
"williamleif/redditnetwork" -> "ICML14MoMCompare/spectral-learn"
"spotify/annoy" -> "facebookresearch/faiss"
"spotify/annoy" -> "erikbern/ann-benchmarks" ["e"=1]
"spotify/annoy" -> "nmslib/nmslib" ["e"=1]
"spotify/annoy" -> "nmslib/hnswlib" ["e"=1]
"spotify/annoy" -> "facebookresearch/fastText"
"spotify/annoy" -> "piskvorky/gensim"
"spotify/annoy" -> "UKPLab/sentence-transformers"
"spotify/annoy" -> "jina-ai/clip-as-service"
"spotify/annoy" -> "spotify/luigi" ["e"=1]
"spotify/annoy" -> "microsoft/LightGBM" ["e"=1]
"spotify/annoy" -> "allenai/allennlp"
"spotify/annoy" -> "flairNLP/flair"
"spotify/annoy" -> "dmlc/xgboost" ["e"=1]
"spotify/annoy" -> "horovod/horovod" ["e"=1]
"spotify/annoy" -> "facebookresearch/StarSpace"
"susanli2016/Machine-Learning-with-Python" -> "susanli2016/NLP-with-Python"
"susanli2016/Machine-Learning-with-Python" -> "tirthajyoti/Machine-Learning-with-Python" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "dipanjanS/practical-machine-learning-with-python"
"susanli2016/Machine-Learning-with-Python" -> "rasbt/python-machine-learning-book" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "rasbt/python-machine-learning-book-2nd-edition" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "lazyprogrammer/machine_learning_examples" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "WillKoehrsen/Data-Analysis" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "TarrySingh/Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "zotroneneis/machine_learning_basics" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "kojino/120-Data-Science-Interview-Questions" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "udacity/machine-learning" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "cerlymarco/MEDIUM_NoteBook" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "ydataai/ydata-profiling" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "firmai/industry-machine-learning" ["e"=1]
"susanli2016/Machine-Learning-with-Python" -> "rhiever/Data-Analysis-and-Machine-Learning-Projects" ["e"=1]
"tensorflow/tensor2tensor" -> "google-research/bert"
"tensorflow/tensor2tensor" -> "Kyubyong/transformer"
"tensorflow/tensor2tensor" -> "tensorflow/nmt"
"tensorflow/tensor2tensor" -> "allenai/allennlp"
"tensorflow/tensor2tensor" -> "jadore801120/attention-is-all-you-need-pytorch"
"tensorflow/tensor2tensor" -> "google/trax"
"tensorflow/tensor2tensor" -> "facebookresearch/fastText"
"tensorflow/tensor2tensor" -> "zihangdai/xlnet"
"tensorflow/tensor2tensor" -> "google/seq2seq"
"tensorflow/tensor2tensor" -> "jina-ai/clip-as-service"
"tensorflow/tensor2tensor" -> "sebastianruder/NLP-progress"
"tensorflow/tensor2tensor" -> "google/sentencepiece"
"tensorflow/tensor2tensor" -> "OpenNMT/OpenNMT-py"
"tensorflow/tensor2tensor" -> "google-deepmind/sonnet" ["e"=1]
"tensorflow/tensor2tensor" -> "tensorflow/models" ["e"=1]
"adeshpande3/LSTM-Sentiment-Analysis" -> "adeshpande3/Tensorflow-Programs-and-Tutorials" ["e"=1]
"adeshpande3/LSTM-Sentiment-Analysis" -> "abdulfatir/twitter-sentiment-analysis"
"adeshpande3/LSTM-Sentiment-Analysis" -> "adeshpande3/Machine-Learning-Links-And-Lessons-Learned" ["e"=1]
"adeshpande3/LSTM-Sentiment-Analysis" -> "xiamx/awesome-sentiment-analysis"
"adeshpande3/LSTM-Sentiment-Analysis" -> "chaoming0625/SentimentPolarityAnalysis" ["e"=1]
"adeshpande3/LSTM-Sentiment-Analysis" -> "linanqiu/word2vec-sentiments"
"adeshpande3/LSTM-Sentiment-Analysis" -> "adeshpande3/Generative-Adversarial-Networks" ["e"=1]
"adeshpande3/LSTM-Sentiment-Analysis" -> "mpk001/Sentiment_analysis" ["e"=1]
"adeshpande3/LSTM-Sentiment-Analysis" -> "rockingdingo/deepnlp" ["e"=1]
"adeshpande3/LSTM-Sentiment-Analysis" -> "Edward1Chou/SentimentAnalysis" ["e"=1]
"adeshpande3/LSTM-Sentiment-Analysis" -> "adeshpande3/Facebook-Messenger-Bot" ["e"=1]
"adeshpande3/LSTM-Sentiment-Analysis" -> "vivekn/sentiment"
"adeshpande3/LSTM-Sentiment-Analysis" -> "ilivans/tf-rnn-attention" ["e"=1]
"adeshpande3/LSTM-Sentiment-Analysis" -> "NVIDIA/sentiment-discovery"
"adeshpande3/LSTM-Sentiment-Analysis" -> "dennybritz/cnn-text-classification-tf"
"jadore801120/attention-is-all-you-need-pytorch" -> "codertimo/BERT-pytorch"
"jadore801120/attention-is-all-you-need-pytorch" -> "OpenNMT/OpenNMT-py"
"jadore801120/attention-is-all-you-need-pytorch" -> "tensorflow/tensor2tensor"
"jadore801120/attention-is-all-you-need-pytorch" -> "Kyubyong/transformer"
"jadore801120/attention-is-all-you-need-pytorch" -> "allenai/allennlp"
"jadore801120/attention-is-all-you-need-pytorch" -> "harvardnlp/annotated-transformer"
"jadore801120/attention-is-all-you-need-pytorch" -> "pytorch/examples" ["e"=1]
"jadore801120/attention-is-all-you-need-pytorch" -> "kimiyoung/transformer-xl"
"jadore801120/attention-is-all-you-need-pytorch" -> "spro/practical-pytorch"
"jadore801120/attention-is-all-you-need-pytorch" -> "zihangdai/xlnet"
"jadore801120/attention-is-all-you-need-pytorch" -> "lucidrains/vit-pytorch" ["e"=1]
"jadore801120/attention-is-all-you-need-pytorch" -> "bentrevett/pytorch-seq2seq"
"jadore801120/attention-is-all-you-need-pytorch" -> "google-research/bert"
"jadore801120/attention-is-all-you-need-pytorch" -> "tkipf/pygcn" ["e"=1]
"jadore801120/attention-is-all-you-need-pytorch" -> "ymcui/Chinese-BERT-wwm" ["e"=1]
"Kyubyong/transformer" -> "tensorflow/tensor2tensor"
"Kyubyong/transformer" -> "tensorflow/nmt"
"Kyubyong/transformer" -> "jadore801120/attention-is-all-you-need-pytorch"
"Kyubyong/transformer" -> "zihangdai/xlnet"
"Kyubyong/transformer" -> "kimiyoung/transformer-xl"
"Kyubyong/transformer" -> "bojone/attention" ["e"=1]
"Kyubyong/transformer" -> "google/seq2seq"
"Kyubyong/transformer" -> "brightmart/text_classification" ["e"=1]
"Kyubyong/transformer" -> "brightmart/albert_zh" ["e"=1]
"Kyubyong/transformer" -> "NTMC-Community/MatchZoo" ["e"=1]
"Kyubyong/transformer" -> "macanv/BERT-BiLSTM-CRF-NER" ["e"=1]
"Kyubyong/transformer" -> "allenai/bilm-tf"
"Kyubyong/transformer" -> "abisee/pointer-generator" ["e"=1]
"Kyubyong/transformer" -> "dennybritz/cnn-text-classification-tf"
"Kyubyong/transformer" -> "ChenglongChen/tensorflow-DeepFM" ["e"=1]
"susanli2016/NLP-with-Python" -> "susanli2016/Machine-Learning-with-Python"
"susanli2016/NLP-with-Python" -> "fastai/course-nlp"
"susanli2016/NLP-with-Python" -> "kavgan/nlp-in-practice"
"susanli2016/NLP-with-Python" -> "makcedward/nlp"
"susanli2016/NLP-with-Python" -> "adashofdata/nlp-in-python-tutorial"
"susanli2016/NLP-with-Python" -> "dipanjanS/practical-machine-learning-with-python"
"susanli2016/NLP-with-Python" -> "niderhoff/nlp-datasets"
"susanli2016/NLP-with-Python" -> "susanli2016/PySpark-and-MLlib" ["e"=1]
"susanli2016/NLP-with-Python" -> "flairNLP/flair"
"susanli2016/NLP-with-Python" -> "microsoft/nlp-recipes"
"susanli2016/NLP-with-Python" -> "piskvorky/gensim"
"susanli2016/NLP-with-Python" -> "nlptown/nlp-notebooks"
"susanli2016/NLP-with-Python" -> "cemoody/lda2vec"
"susanli2016/NLP-with-Python" -> "explosion/spacy-course"
"susanli2016/NLP-with-Python" -> "sebastianruder/NLP-progress"
"minimaxir/textgenrnn" -> "minimaxir/gpt-2-simple"
"minimaxir/textgenrnn" -> "minimaxir/aitextgen"
"minimaxir/textgenrnn" -> "jsvine/markovify"
"minimaxir/textgenrnn" -> "asyml/texar" ["e"=1]
"minimaxir/textgenrnn" -> "karpathy/char-rnn" ["e"=1]
"minimaxir/textgenrnn" -> "minimaxir/tweet-generator"
"minimaxir/textgenrnn" -> "openai/gpt-2"
"minimaxir/textgenrnn" -> "geek-ai/Texygen" ["e"=1]
"minimaxir/textgenrnn" -> "jcjohnson/torch-rnn" ["e"=1]
"minimaxir/textgenrnn" -> "nshepperd/gpt-2"
"minimaxir/textgenrnn" -> "allenai/allennlp"
"minimaxir/textgenrnn" -> "dmlc/gluon-nlp"
"minimaxir/textgenrnn" -> "farizrahman4u/seq2seq" ["e"=1]
"minimaxir/textgenrnn" -> "ryankiros/neural-storyteller" ["e"=1]
"minimaxir/textgenrnn" -> "dariusk/corpora" ["e"=1]
"facebookresearch/InferSent" -> "facebookresearch/SentEval"
"facebookresearch/InferSent" -> "ryankiros/skip-thoughts" ["e"=1]
"facebookresearch/InferSent" -> "facebookresearch/MUSE"
"facebookresearch/InferSent" -> "facebookresearch/StarSpace"
"facebookresearch/InferSent" -> "epfml/sent2vec"
"facebookresearch/InferSent" -> "PrincetonML/SIF"
"facebookresearch/InferSent" -> "Separius/awesome-sentence-embedding"
"facebookresearch/InferSent" -> "facebookresearch/DrQA" ["e"=1]
"facebookresearch/InferSent" -> "pytorch/text"
"facebookresearch/InferSent" -> "allenai/bi-att-flow" ["e"=1]
"facebookresearch/InferSent" -> "allenai/allennlp"
"facebookresearch/InferSent" -> "facebookresearch/fairseq-lua"
"facebookresearch/InferSent" -> "salesforce/awd-lstm-lm"
"facebookresearch/InferSent" -> "facebookresearch/LASER"
"facebookresearch/InferSent" -> "facebookresearch/XLM"
"gaoisbest/NLP-Projects" -> "ElizaLo/NLP-Natural-Language-Processing"
"gaoisbest/NLP-Projects" -> "PacktPublishing/Advanced-NLP-Projects-with-TensorFlow-2.0" ["e"=1]
"gaoisbest/NLP-Projects" -> "l11x0m7/Question_Answering_Models"
"gaoisbest/NLP-Projects" -> "anujvyas/Natural-Language-Processing-Projects" ["e"=1]
"gaoisbest/NLP-Projects" -> "quincyliang/nlp-data-augmentation" ["e"=1]
"gaoisbest/NLP-Projects" -> "seriousran/awesome-qa" ["e"=1]
"gaoisbest/NLP-Projects" -> "lihanghang/NLP-Knowledge-Graph" ["e"=1]
"gaoisbest/NLP-Projects" -> "xmxoxo/BERT-train2deploy" ["e"=1]
"gaoisbest/NLP-Projects" -> "zlsdu/Word-Embedding" ["e"=1]
"allenai/allennlp" -> "sebastianruder/NLP-progress"
"allenai/allennlp" -> "flairNLP/flair"
"allenai/allennlp" -> "OpenNMT/OpenNMT-py"
"allenai/allennlp" -> "zihangdai/xlnet"
"allenai/allennlp" -> "jina-ai/clip-as-service"
"allenai/allennlp" -> "google-research/bert"
"allenai/allennlp" -> "facebookresearch/fastText"
"allenai/allennlp" -> "facebookresearch/ParlAI"
"allenai/allennlp" -> "facebookresearch/pytext"
"allenai/allennlp" -> "google/sentencepiece"
"allenai/allennlp" -> "pytorch/text"
"allenai/allennlp" -> "codertimo/BERT-pytorch"
"allenai/allennlp" -> "brightmart/text_classification" ["e"=1]
"allenai/allennlp" -> "tensorflow/tensor2tensor"
"allenai/allennlp" -> "Embedding/Chinese-Word-Vectors" ["e"=1]
"the-javapocalypse/Twitter-Sentiment-Analysis" -> "ujjwalkarn/Twitter-Sentiment-Analysis"
"bfelbo/DeepMoji" -> "huggingface/torchMoji"
"bfelbo/DeepMoji" -> "lukalabs/cakechat" ["e"=1]
"bfelbo/DeepMoji" -> "openai/generating-reviews-discovering-sentiment"
"bfelbo/DeepMoji" -> "uclnlp/emoji2vec"
"bfelbo/DeepMoji" -> "NVIDIA/sentiment-discovery"
"bfelbo/DeepMoji" -> "facebookresearch/InferSent"
"bfelbo/DeepMoji" -> "richliao/textClassifier" ["e"=1]
"bfelbo/DeepMoji" -> "atpaino/deep-text-corrector" ["e"=1]
"bfelbo/DeepMoji" -> "salestock/fastText.py"
"bfelbo/DeepMoji" -> "facebookresearch/StarSpace"
"bfelbo/DeepMoji" -> "uber-research/PPLM"
"bfelbo/DeepMoji" -> "pender/chatbot-rnn" ["e"=1]
"bfelbo/DeepMoji" -> "Franck-Dernoncourt/NeuroNER" ["e"=1]
"bfelbo/DeepMoji" -> "huggingface/hmtl"
"bfelbo/DeepMoji" -> "salesforce/decaNLP"
"life4/textdistance" -> "jamesturk/jellyfish"
"life4/textdistance" -> "rapidfuzz/RapidFuzz"
"life4/textdistance" -> "ddangelov/Top2Vec"
"life4/textdistance" -> "luozhouyang/python-string-similarity" ["e"=1]
"life4/textdistance" -> "chartbeat-labs/textacy"
"life4/textdistance" -> "dedupeio/dedupe"
"life4/textdistance" -> "JasonKessler/scattertext"
"life4/textdistance" -> "allenai/allennlp"
"life4/textdistance" -> "seatgeek/fuzzywuzzy"
"life4/textdistance" -> "IntelLabs/nlp-architect"
"life4/textdistance" -> "textstat/textstat"
"life4/textdistance" -> "jbesomi/texthero"
"life4/textdistance" -> "marcosfede/algorithms"
"life4/textdistance" -> "Franck-Dernoncourt/NeuroNER" ["e"=1]
"life4/textdistance" -> "MaartenGr/BERTopic"
"vprusso/youtube_tutorials" -> "justmarkham/pandas-videos" ["e"=1]
"vprusso/youtube_tutorials" -> "ayushoriginal/Sentiment-Analysis-Twitter"
"vprusso/youtube_tutorials" -> "CoreyMSchafer/code_snippets" ["e"=1]
"vprusso/youtube_tutorials" -> "Sentdex/socialsentiment" ["e"=1]
"vprusso/youtube_tutorials" -> "Apress/practical-web-scraping-for-data-science"
"vprusso/youtube_tutorials" -> "Chulong-Li/Real-time-Sentiment-Tracking-on-Twitter-for-Brand-Improvement-and-Trend-Recognition"
"vprusso/youtube_tutorials" -> "joeyajames/Python" ["e"=1]
"vprusso/youtube_tutorials" -> "OmkarPathak/Data-Structures-using-Python" ["e"=1]
"vprusso/youtube_tutorials" -> "the-javapocalypse/Twitter-Sentiment-Analysis"
"vprusso/youtube_tutorials" -> "careercup/CtCI-6th-Edition-Python" ["e"=1]
"vprusso/youtube_tutorials" -> "areed1192/sigma_coding_youtube" ["e"=1]
"vprusso/youtube_tutorials" -> "susanli2016/NLP-with-Python"
"vprusso/youtube_tutorials" -> "codingforentrepreneurs/30-Days-of-Python" ["e"=1]
"vprusso/youtube_tutorials" -> "MorvanZhou/easy-scraping-tutorial" ["e"=1]
"vprusso/youtube_tutorials" -> "tweepy/tweepy" ["e"=1]
"facebookresearch/StarSpace" -> "facebookresearch/InferSent"
"facebookresearch/StarSpace" -> "facebookresearch/SentEval"
"facebookresearch/StarSpace" -> "facebookresearch/MUSE"
"facebookresearch/StarSpace" -> "facebookresearch/pytext"
"facebookresearch/StarSpace" -> "facebookresearch/fastText"
"facebookresearch/StarSpace" -> "allenai/allennlp"
"facebookresearch/StarSpace" -> "facebookresearch/poincare-embeddings" ["e"=1]
"facebookresearch/StarSpace" -> "facebookresearch/DrQA" ["e"=1]
"facebookresearch/StarSpace" -> "ryankiros/skip-thoughts" ["e"=1]
"facebookresearch/StarSpace" -> "facebookresearch/PyTorch-BigGraph" ["e"=1]
"facebookresearch/StarSpace" -> "maciejkula/spotlight" ["e"=1]
"facebookresearch/StarSpace" -> "epfml/sent2vec"
"facebookresearch/StarSpace" -> "spotify/annoy"
"facebookresearch/StarSpace" -> "chihming/awesome-network-embedding" ["e"=1]
"facebookresearch/StarSpace" -> "nmslib/nmslib" ["e"=1]
"ing-bank/sparse_dot_topn" -> "lukewhyte/textpack"
"ing-bank/sparse_dot_topn" -> "Bergvca/string_grouper"
"ing-bank/sparse_dot_topn" -> "psolin/cleanco"
"ing-bank/sparse_dot_topn" -> "MaartenGr/PolyFuzz"
"ing-bank/sparse_dot_topn" -> "ing-bank/popmon" ["e"=1]
"tensorflow/nmt" -> "google/seq2seq"
"tensorflow/nmt" -> "OpenNMT/OpenNMT-py"
"tensorflow/nmt" -> "tensorflow/tensor2tensor"
"tensorflow/nmt" -> "Kyubyong/transformer"
"tensorflow/nmt" -> "rsennrich/subword-nmt" ["e"=1]
"tensorflow/nmt" -> "facebookresearch/fairseq-lua"
"tensorflow/nmt" -> "brightmart/text_classification" ["e"=1]
"tensorflow/nmt" -> "dennybritz/cnn-text-classification-tf"
"tensorflow/nmt" -> "allenai/allennlp"
"tensorflow/nmt" -> "farizrahman4u/seq2seq" ["e"=1]
"tensorflow/nmt" -> "zihangdai/xlnet"
"tensorflow/nmt" -> "OpenNMT/OpenNMT-tf" ["e"=1]
"tensorflow/nmt" -> "google/sentencepiece"
"tensorflow/nmt" -> "spro/practical-pytorch"
"tensorflow/nmt" -> "facebookresearch/fastText"
"huggingface/neuralcoref" -> "kentonl/e2e-coref" ["e"=1]
"huggingface/neuralcoref" -> "chartbeat-labs/textacy"
"huggingface/neuralcoref" -> "mandarjoshi90/coref" ["e"=1]
"huggingface/neuralcoref" -> "allenai/allennlp"
"huggingface/neuralcoref" -> "explosion/spacy-transformers"
"huggingface/neuralcoref" -> "facebookresearch/InferSent"
"huggingface/neuralcoref" -> "flairNLP/flair"
"huggingface/neuralcoref" -> "clarkkev/deep-coref" ["e"=1]
"huggingface/neuralcoref" -> "explosion/thinc"
"huggingface/neuralcoref" -> "shayneobrien/coreference-resolution" ["e"=1]
"huggingface/neuralcoref" -> "attardi/wikiextractor"
"huggingface/neuralcoref" -> "stanfordnlp/stanza"
"huggingface/neuralcoref" -> "zihangdai/xlnet"
"huggingface/neuralcoref" -> "thunlp/OpenNRE" ["e"=1]
"huggingface/neuralcoref" -> "Franck-Dernoncourt/NeuroNER" ["e"=1]
"jbrooksuk/node-summary" -> "kitten/node-tldr"
"jbrooksuk/node-summary" -> "xiaoxu193/PyTeaser"
"jbrooksuk/node-summary" -> "pdehaan/summarizer"
"jbrooksuk/node-summary" -> "topliceanu/sum"
"jbrooksuk/node-summary" -> "ageitgey/node-unfluff" ["e"=1]
"jbrooksuk/node-summary" -> "MojoJolo/textteaser"
"jbrooksuk/node-summary" -> "anpandu/nodejs-text-summarizer"
"jbrooksuk/node-summary" -> "IndigoResearch/textteaser"
"jbrooksuk/node-summary" -> "linanqiu/lexrank"
"jbrooksuk/node-summary" -> "moos/wordpos" ["e"=1]
"jbrooksuk/node-summary" -> "retextjs/retext-keywords" ["e"=1]
"jbrooksuk/node-summary" -> "fergiemcdowall/stopword"
"salesforce/awd-lstm-lm" -> "salesforce/pytorch-qrnn"
"salesforce/awd-lstm-lm" -> "zihangdai/mos"
"salesforce/awd-lstm-lm" -> "kimiyoung/transformer-xl"
"salesforce/awd-lstm-lm" -> "pytorch/text"
"salesforce/awd-lstm-lm" -> "salesforce/decaNLP"
"salesforce/awd-lstm-lm" -> "huggingface/pytorch-openai-transformer-lm"
"salesforce/awd-lstm-lm" -> "facebookresearch/InferSent"
"salesforce/awd-lstm-lm" -> "rsennrich/subword-nmt" ["e"=1]
"salesforce/awd-lstm-lm" -> "facebookresearch/XLM"
"salesforce/awd-lstm-lm" -> "OpenNMT/OpenNMT-py"
"salesforce/awd-lstm-lm" -> "allenai/bilm-tf"
"salesforce/awd-lstm-lm" -> "yikangshen/Ordered-Neurons"
"salesforce/awd-lstm-lm" -> "asappresearch/sru"
"salesforce/awd-lstm-lm" -> "allenai/allennlp"
"salesforce/awd-lstm-lm" -> "nyu-mll/jiant"
"indic-transliteration/indic_transliteration_py" -> "AI4Bharat/IndicXlit"
"indic-transliteration/indic_transliteration_py" -> "libindic/indic-trans"
"indic-transliteration/indic_transliteration_py" -> "sanskrit-kosha/kosha"
"indic-transliteration/indic_transliteration_py" -> "indic-transliteration/common_maps"
"indic-transliteration/indic_transliteration_py" -> "indic-transliteration/sanscript.js"
"indic-transliteration/indic_transliteration_py" -> "kmadathil/sanskrit_parser"
"indic-transliteration/indic_transliteration_py" -> "OliverHellwig/sanskrit"
"indic-transliteration/indic_transliteration_py" -> "AI4Bharat/IndicNLP-Transliteration"
"Adoni/word2vec_pytorch" -> "dalinvip/pytorch_word2vec"
"Adoni/word2vec_pytorch" -> "theeluwin/pytorch-sgns"
"Adoni/word2vec_pytorch" -> "jojonki/word2vec-pytorch"
"Adoni/word2vec_pytorch" -> "fanglanting/skip-gram-pytorch"
"Adoni/word2vec_pytorch" -> "kefirski/pytorch_NEG_loss"
"Adoni/word2vec_pytorch" -> "Andras7/word2vec-pytorch"
"Adoni/word2vec_pytorch" -> "ray1007/pytorch-word2vec"
"terryyin/translate-python" -> "ssut/py-googletrans"
"terryyin/translate-python" -> "mouuff/mtranslate"
"terryyin/translate-python" -> "translate/translate" ["e"=1]
"terryyin/translate-python" -> "jjangsangy/py-translate"
"terryyin/translate-python" -> "nidhaloff/deep-translator"
"terryyin/translate-python" -> "dveselov/python-yandex-translate"
"terryyin/translate-python" -> "UlionTse/translators" ["e"=1]
"terryyin/translate-python" -> "Animenosekai/translate"
"terryyin/translate-python" -> "littlecodersh/translation"
"IBM/pytorch-seq2seq" -> "MaximumEntropy/Seq2Seq-PyTorch"
"IBM/pytorch-seq2seq" -> "eladhoffer/seq2seq.pytorch"
"IBM/pytorch-seq2seq" -> "keon/seq2seq"
"IBM/pytorch-seq2seq" -> "spro/practical-pytorch"
"IBM/pytorch-seq2seq" -> "pytorch/text"
"IBM/pytorch-seq2seq" -> "OpenNMT/OpenNMT-py"
"IBM/pytorch-seq2seq" -> "abisee/pointer-generator" ["e"=1]
"IBM/pytorch-seq2seq" -> "Shawn1993/cnn-text-classification-pytorch" ["e"=1]
"IBM/pytorch-seq2seq" -> "google/seq2seq"
"IBM/pytorch-seq2seq" -> "salesforce/awd-lstm-lm"
"IBM/pytorch-seq2seq" -> "AuCson/PyTorch-Batch-Attention-Seq2seq"
"IBM/pytorch-seq2seq" -> "jadore801120/attention-is-all-you-need-pytorch"
"IBM/pytorch-seq2seq" -> "huggingface/pytorch-openai-transformer-lm"
"IBM/pytorch-seq2seq" -> "salesforce/pytorch-qrnn"
"IBM/pytorch-seq2seq" -> "PetrochukM/PyTorch-NLP"
"martingerlach/hSBM_Topicmodel" -> "junipertcy/bipartiteSBM"
"martingerlach/hSBM_Topicmodel" -> "jg-you/noisy-networks-measurements" ["e"=1]
"martingerlach/hSBM_Topicmodel" -> "TopSBM/topsbm"
"martingerlach/hSBM_Topicmodel" -> "ryanjgallagher/shifterator"
"martingerlach/hSBM_Topicmodel" -> "gesistsa/oolong" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "dipanjanS/text-analytics-with-python"
"dipanjanS/practical-machine-learning-with-python" -> "tirthajyoti/Machine-Learning-with-Python" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "dipanjanS/hands-on-transfer-learning-with-python"
"dipanjanS/practical-machine-learning-with-python" -> "susanli2016/Machine-Learning-with-Python"
"dipanjanS/practical-machine-learning-with-python" -> "susanli2016/NLP-with-Python"
"dipanjanS/practical-machine-learning-with-python" -> "hundredblocks/concrete_NLP_tutorial"
"dipanjanS/practical-machine-learning-with-python" -> "rasbt/python-machine-learning-book-2nd-edition" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "TarrySingh/Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "dipanjanS/art_of_data_visualization"
"dipanjanS/practical-machine-learning-with-python" -> "justmarkham/scikit-learn-videos" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "dipanjanS/data_science_for_all"
"dipanjanS/practical-machine-learning-with-python" -> "WillKoehrsen/machine-learning-project-walkthrough" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "oracle/skater" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "rasbt/mlxtend" ["e"=1]
"dipanjanS/practical-machine-learning-with-python" -> "WillKoehrsen/feature-selector" ["e"=1]
"HKUST-KnowComp/JWE" -> "Leonard-Xu/CWE"
"HKUST-KnowComp/JWE" -> "dalinvip/cw2vec"
"HKUST-KnowComp/JWE" -> "JianXu123/SCWE"
"HKUST-KnowComp/JWE" -> "ray1007/GWE"
"HKUST-KnowComp/JWE" -> "dalinvip/Word_Similarity_and_Word_Analogy"
"HKUST-KnowComp/JWE" -> "WenDesi/Chinese_radical"
"HKUST-KnowComp/JWE" -> "zhang2010hao/cw2vec-pytorch"
"GauravBh1010tt/DeepLearn" -> "dmlc/gluon-nlp"
"GauravBh1010tt/DeepLearn" -> "jerryli27/TwinGAN" ["e"=1]
"GauravBh1010tt/DeepLearn" -> "Kyubyong/nlp_tasks"
"GauravBh1010tt/DeepLearn" -> "IntelLabs/nlp-architect"
"GauravBh1010tt/DeepLearn" -> "facebookresearch/InferSent"
"GauravBh1010tt/DeepLearn" -> "dennybritz/deeplearning-papernotes" ["e"=1]
"GauravBh1010tt/DeepLearn" -> "facebookresearch/StarSpace"
"GauravBh1010tt/DeepLearn" -> "salesforce/decaNLP"
"GauravBh1010tt/DeepLearn" -> "Ahmkel/Keras-Project-Template"
"GauravBh1010tt/DeepLearn" -> "PetrochukM/PyTorch-NLP"
"GauravBh1010tt/DeepLearn" -> "sachinruk/deepschool.io" ["e"=1]
"GauravBh1010tt/DeepLearn" -> "andrewt3000/DL4NLP"
"GauravBh1010tt/DeepLearn" -> "Separius/awesome-sentence-embedding"
"GauravBh1010tt/DeepLearn" -> "eBay/Sequence-Semantic-Embedding"
"GauravBh1010tt/DeepLearn" -> "MrGemy95/Tensorflow-Project-Template" ["e"=1]
"nipunsadvilkar/pySBD" -> "diasks2/pragmatic_segmenter" ["e"=1]
"nipunsadvilkar/pySBD" -> "jenojp/negspacy" ["e"=1]
"nipunsadvilkar/pySBD" -> "kevinlu1248/pyate"
"nipunsadvilkar/pySBD" -> "mediacloud/sentence-splitter" ["e"=1]
"nipunsadvilkar/pySBD" -> "bitextor/bitextor" ["e"=1]
"nipunsadvilkar/pySBD" -> "segment-any-text/wtpsplit" ["e"=1]
"nipunsadvilkar/pySBD" -> "fnl/syntok" ["e"=1]
"nipunsadvilkar/pySBD" -> "R1j1t/contextualSpellCheck" ["e"=1]
"nipunsadvilkar/pySBD" -> "NorskRegnesentral/skweak"
"nipunsadvilkar/pySBD" -> "gandersen101/spaczz"
"nipunsadvilkar/pySBD" -> "ICLRandD/Blackstone" ["e"=1]
"nipunsadvilkar/pySBD" -> "allenai/scispacy" ["e"=1]
"nipunsadvilkar/pySBD" -> "neulab/awesome-align" ["e"=1]
"nipunsadvilkar/pySBD" -> "chartbeat-labs/textacy"
"nipunsadvilkar/pySBD" -> "MaartenGr/PolyFuzz"
"facebookresearch/SentEval" -> "facebookresearch/InferSent"
"facebookresearch/SentEval" -> "nyu-mll/jiant"
"facebookresearch/SentEval" -> "facebookresearch/StarSpace"
"facebookresearch/SentEval" -> "ryankiros/skip-thoughts" ["e"=1]
"facebookresearch/SentEval" -> "facebookresearch/MUSE"
"facebookresearch/SentEval" -> "PrincetonML/SIF"
"facebookresearch/SentEval" -> "facebookresearch/XLM"
"facebookresearch/SentEval" -> "princeton-nlp/SimCSE" ["e"=1]
"facebookresearch/SentEval" -> "Separius/awesome-sentence-embedding"
"facebookresearch/SentEval" -> "brmson/dataset-sts"
"facebookresearch/SentEval" -> "facebookresearch/LASER"
"facebookresearch/SentEval" -> "epfml/sent2vec"
"facebookresearch/SentEval" -> "allenai/allennlp"
"facebookresearch/SentEval" -> "bheinzerling/bpemb"
"facebookresearch/SentEval" -> "rsennrich/subword-nmt" ["e"=1]
"PaulKlinger/Bookstats" -> "PaulKlinger/Enhance-GoodReads-Export"
"PaulKlinger/Bookstats" -> "philippbayer/Goodreads_visualization"
"XuezheMax/NeuroNLP2" -> "yzhangcs/parser"
"XuezheMax/NeuroNLP2" -> "LiyuanLucasLiu/LM-LSTM-CRF" ["e"=1]
"XuezheMax/NeuroNLP2" -> "elikip/bist-parser"
"XuezheMax/NeuroNLP2" -> "tdozat/Parser-v1"
"XuezheMax/NeuroNLP2" -> "DoodleJZ/HPSG-Neural-Parser"
"XuezheMax/NeuroNLP2" -> "clab/rnng"
"XuezheMax/NeuroNLP2" -> "clab/lstm-parser"
"XuezheMax/NeuroNLP2" -> "sheng-z/stog" ["e"=1]
"XuezheMax/NeuroNLP2" -> "nikitakit/self-attentive-parser"
"XuezheMax/NeuroNLP2" -> "chantera/biaffineparser"
"XuezheMax/NeuroNLP2" -> "XuezheMax/LasagneNLP" ["e"=1]
"XuezheMax/NeuroNLP2" -> "allenai/acl2018-semantic-parsing-tutorial" ["e"=1]
"XuezheMax/NeuroNLP2" -> "harvardnlp/pytorch-struct" ["e"=1]
"XuezheMax/NeuroNLP2" -> "UKPLab/emnlp2017-bilstm-cnn-crf" ["e"=1]
"XuezheMax/NeuroNLP2" -> "jxhe/struct-learning-with-flow"
"eladhoffer/seq2seq.pytorch" -> "MaximumEntropy/Seq2Seq-PyTorch"
"eladhoffer/seq2seq.pytorch" -> "IBM/pytorch-seq2seq"
"eladhoffer/seq2seq.pytorch" -> "lium-lst/nmtpytorch" ["e"=1]
"eladhoffer/seq2seq.pytorch" -> "keon/seq2seq"
"eladhoffer/seq2seq.pytorch" -> "salesforce/pytorch-qrnn"
"eladhoffer/seq2seq.pytorch" -> "AuCson/PyTorch-Batch-Attention-Seq2seq"
"eladhoffer/seq2seq.pytorch" -> "harvardnlp/seq2seq-attn" ["e"=1]
"eladhoffer/seq2seq.pytorch" -> "eladhoffer/captionGen"
"eladhoffer/seq2seq.pytorch" -> "paarthneekhara/byteNet-tensorflow" ["e"=1]
"eladhoffer/seq2seq.pytorch" -> "artetxem/undreamt" ["e"=1]
"eladhoffer/seq2seq.pytorch" -> "wiseodd/controlled-text-generation" ["e"=1]
"eladhoffer/seq2seq.pytorch" -> "spro/practical-pytorch"
"eladhoffer/seq2seq.pytorch" -> "zihangdai/mos"
"eladhoffer/seq2seq.pytorch" -> "salesforce/matchbox" ["e"=1]
"eladhoffer/seq2seq.pytorch" -> "jakezhaojb/ARAE" ["e"=1]
"usc-isi-i2/dig-etl-engine" -> "usc-isi-i2/etk"
"swisscom/ai-research-keyphrase-extraction" -> "boudinfl/pke"
"swisscom/ai-research-keyphrase-extraction" -> "ibatra/BERT-Keyword-Extractor"
"swisscom/ai-research-keyphrase-extraction" -> "thunlp/BERT-KPE"
"swisscom/ai-research-keyphrase-extraction" -> "ymym3412/position-rank"
"swisscom/ai-research-keyphrase-extraction" -> "memray/seq2seq-keyphrase"
"swisscom/ai-research-keyphrase-extraction" -> "memray/OpenNMT-kpg-release"
"swisscom/ai-research-keyphrase-extraction" -> "epfml/sent2vec"
"swisscom/ai-research-keyphrase-extraction" -> "sunyilgdx/SIFRank"
"swisscom/ai-research-keyphrase-extraction" -> "boudinfl/ake-datasets"
"swisscom/ai-research-keyphrase-extraction" -> "pranav-ust/BERT-keyphrase-extraction"
"swisscom/ai-research-keyphrase-extraction" -> "LIAAD/KeywordExtractor-Datasets"
"swisscom/ai-research-keyphrase-extraction" -> "snkim/AutomaticKeyphraseExtraction"
"swisscom/ai-research-keyphrase-extraction" -> "kenchan0226/keyphrase-generation-rl"
"swisscom/ai-research-keyphrase-extraction" -> "LinhanZ/mderank"
"swisscom/ai-research-keyphrase-extraction" -> "memray/seq2seq-keyphrase-pytorch"
"hdaSprachtechnologie/odenet" -> "wroberts/pygermanet"
"jihunchoi/unsupervised-treelstm" -> "nyu-mll/spinn"
"jihunchoi/unsupervised-treelstm" -> "harvardnlp/urnng"
"jihunchoi/unsupervised-treelstm" -> "yikangshen/PRPN"
"jihunchoi/unsupervised-treelstm" -> "hantek/distance-parser"
"jihunchoi/unsupervised-treelstm" -> "nyu-mll/PRPN-Analysis"
"jihunchoi/unsupervised-treelstm" -> "iesl/diora"
"jihunchoi/unsupervised-treelstm" -> "ExplorerFreda/TreeEnc"
"jihunchoi/unsupervised-treelstm" -> "shijx12/AR-Tree"
"NKU-HLT/MusicEval-baseline" -> "NKU-HLT/RAMP_MOS"
"sourcedexter/tfClassifier" -> "cysmith/neural-style-tf" ["e"=1]
"sourcedexter/tfClassifier" -> "visipedia/tf_classification"
"sourcedexter/tfClassifier" -> "dennybritz/cnn-text-classification-tf"
"guillitte/pytorch-sentiment-neuron" -> "tam17aki/multiplicative-lstm-tensorflow"
"guillitte/pytorch-sentiment-neuron" -> "openai/generating-reviews-discovering-sentiment"
"dalinvip/pytorch_word2vec" -> "Adoni/word2vec_pytorch"
"dalinvip/pytorch_word2vec" -> "lonePatient/chinese-word2vec-pytorch"
"datquocnguyen/jPTDP" -> "datquocnguyen/RDRPOSTagger"
"datquocnguyen/jPTDP" -> "datquocnguyen/VnDT"
"datquocnguyen/jPTDP" -> "UppsalaNLP/uuparser"
"thunlp/sememe_prediction" -> "thunlp/Character-enhanced-Sememe-Prediction"
"thunlp/sememe_prediction" -> "thunlp/SE-WRL"
"Riashat/Deep-Bayesian-Active-Learning" -> "Riashat/Active-Learning-Bayesian-Convolutional-Neural-Networks"
"UppsalaNLP/uuparser" -> "mstrise/dep2label"
"cosmozhang/NCRF-AE" -> "shtechair/CRFAE-Dep-Parser"
"EDS-APHP/UimaOnSpark" -> "oaqa/suim"
"sanskrit/data" -> "ad2476/pos-research"
"tsproisl/SoMaJo" -> "tsproisl/SoMeWeTa"
"tsproisl/SoMaJo" -> "stefan-it/europeana-bert"
"tsproisl/SoMaJo" -> "WZBSocialScienceCenter/germalemma"
"tsproisl/SoMaJo" -> "dbmdz/berts"
"ttpro1995/TreeLSTMSentiment" -> "dasguptar/treelstm.pytorch"
"mpk001/RAKE-keywordsExtraction" -> "chinwuDebug/RAKE_improve"
"mpk001/RAKE-keywordsExtraction" -> "laserwave/keywords_extraction_rake"
"kmadathil/sanskrit_parser" -> "drdhaval2785/SanskritVerb"
"kmadathil/sanskrit_parser" -> "OliverHellwig/sanskrit"
"kmadathil/sanskrit_parser" -> "ashtadhyayi-com/data"
"kmadathil/sanskrit_parser" -> "sarit/SARIT-corpus"
"kmadathil/sanskrit_parser" -> "ambuda-org/ambuda"
"kmadathil/sanskrit_parser" -> "drdhaval2785/python-prakriya"
"mimno/jsLDA" -> "jarmoza/twic"
"PaulKlinger/Enhance-GoodReads-Export" -> "PaulKlinger/Bookstats"
"jx00109/sentence2vec" -> "rock3125/sentence2vec"
"rohitsaluja22/OpenOCRCorrect" -> "UDAAN-LEAP/leap-pe-tool"
"rohitsaluja22/OpenOCRCorrect" -> "Sandhi-IITBombay/Shobhika"
"WZBSocialScienceCenter/germalemma" -> "ptnplanet/NLTK-Contributions"
"WZBSocialScienceCenter/germalemma" -> "devmount/GermanWordEmbeddings"
"kbenoit/quanteda.dictionaries" -> "kbenoit/LIWCalike"
"tca19/dict2vec" -> "tombosc/cpae"
"scify/jedai-ui" -> "scify/JedAI-Spark"
"shtechair/CRFAE-Dep-Parser" -> "WinnieHAN/mndmv"
"shtechair/CRFAE-Dep-Parser" -> "LouChao98/neural_based_dmv"
"piskvorky/gensim" ["l"="52.949,25.849"]
"explosion/spaCy" ["l"="52.919,25.931"]
"facebookresearch/fastText" ["l"="53.043,25.835"]
"nltk/nltk" ["l"="52.969,25.926"]
"allenai/allennlp" ["l"="53.002,25.738"]
"stanfordnlp/GloVe" ["l"="53.095,25.699"]
"google-research/bert" ["l"="53.095,25.874"]
"dmlc/xgboost" ["l"="48.109,28.951"]
"flairNLP/flair" ["l"="52.897,25.764"]
"sebastianruder/NLP-progress" ["l"="52.992,25.819"]
"stanfordnlp/CoreNLP" ["l"="52.982,25.883"]
"keras-team/keras" ["l"="48.067,28.867"]
"sloria/TextBlob" ["l"="52.86,25.882"]
"microsoft/LightGBM" ["l"="45.601,26.085"]
"spotify/annoy" ["l"="53.031,25.889"]
"jina-ai/clip-as-service" ["l"="53.014,25.778"]
"facebookresearch/fairseq" ["l"="53.135,25.953"]
"huggingface/transformers" ["l"="39.827,0.123"]
"microsoft/unilm" ["l"="38.785,-0.95"]
"deepspeedai/DeepSpeed" ["l"="39.997,0.424"]
"google-research/google-research" ["l"="50.731,29.386"]
"facebookresearch/faiss" ["l"="53.099,26.041"]
"UKPLab/sentence-transformers" ["l"="52.909,25.852"]
"Lightning-AI/pytorch-lightning" ["l"="50.795,29.491"]
"google/sentencepiece" ["l"="53.057,25.762"]
"tensorflow/tensor2tensor" ["l"="53.167,25.8"]
"OpenNMT/OpenNMT-py" ["l"="53.097,25.731"]
"meta-llama/llama" ["l"="40.061,0.34"]
"keon/awesome-nlp" ["l"="52.863,25.815"]
"graykode/nlp-tutorial" ["l"="52.911,25.8"]
"zihangdai/xlnet" ["l"="53.051,25.718"]
"Embedding/Chinese-Word-Vectors" ["l"="53.279,27.27"]
"brightmart/text_classification" ["l"="53.422,27.308"]
"oxford-cs-deepnlp-2017/lectures" ["l"="47.787,28.658"]
"delip/PyTorchNLPBook" ["l"="52.919,25.732"]
"apachecn/nlp-pytorch-zh" ["l"="53.564,27.122"]
"fastai/course-nlp" ["l"="52.822,25.703"]
"PetrochukM/PyTorch-NLP" ["l"="53.04,25.625"]
"DSKSD/DeepNLP-models-Pytorch" ["l"="53.054,25.689"]
"spro/practical-pytorch" ["l"="53.121,25.666"]
"jacobeisenstein/gt-nlp-class" ["l"="52.936,25.697"]
"rguthrie3/DeepLearningForNLPInPytorch" ["l"="53.01,25.653"]
"bentrevett/pytorch-sentiment-analysis" ["l"="53.013,25.707"]
"lyeoni/nlp-tutorial" ["l"="53.563,27.155"]
"microsoft/nlp-recipes" ["l"="52.848,25.725"]
"scoutbee/pytorch-nlp-notebooks" ["l"="52.816,25.917"]
"cgpotts/cs224u" ["l"="52.909,25.669"]
"keitakurita/Practical_NLP_in_PyTorch" ["l"="53.997,27.081"]
"ines/course-starter-python" ["l"="52.651,25.518"]
"ines/course-starter-r" ["l"="40.531,35.559"]
"explosion/spacy-course" ["l"="52.708,25.601"]
"ines/juniper" ["l"="44.91,21.726"]
"textpipe/textpipe" ["l"="52.578,25.511"]
"vgrabovets/multi_rake" ["l"="52.476,25.778"]
"csurfer/rake-nltk" ["l"="52.503,25.743"]
"swisscom/ai-research-keyphrase-extraction" ["l"="52.486,25.81"]
"LIAAD/yake" ["l"="52.542,25.767"]
"sharmaroshan/Twitter-Sentiment-Analysis" ["l"="52.46,25.928"]
"ojasphansekar/Zillow-Home-Value-Prediction" ["l"="52.443,25.967"]
"A-safarji/Time-series-deep-learning" ["l"="52.426,25.968"]
"sharmaroshan/Students-Performance-Analytics" ["l"="52.378,25.972"]
"sharmaroshan/Drugs-Recommendation-using-Reviews" ["l"="52.362,25.985"]
"sharmaroshan/SECOM-Detecting-Defected-Items" ["l"="52.436,25.982"]
"prateekjoshi565/twitter_sentiment_analysis" ["l"="52.41,25.986"]
"sharmaroshan/Big-Mart-Sales-Prediction" ["l"="52.432,25.952"]
"sharmaroshan/MNIST-Dataset" ["l"="52.45,25.951"]
"sharmaroshan/Titanic-Passenger-Survival-Prediction" ["l"="52.466,25.949"]
"sharmaroshan/Employee-Reviews" ["l"="52.442,25.942"]
"sharmaroshan/World-Food-Production" ["l"="52.43,25.937"]
"sharmaroshan/Restaurant-Reviews-Analysis" ["l"="52.46,25.961"]
"sharmaroshan/Wine-Quality-Predictions" ["l"="52.413,25.945"]
"sharmaroshan/Loan-Prediction" ["l"="52.403,25.958"]
"sharmaroshan/HR-Analytics" ["l"="52.396,25.968"]
"dipanjanS/hands-on-transfer-learning-with-python" ["l"="52.643,25.4"]
"dipanjanS/practical-machine-learning-with-python" ["l"="52.727,25.483"]
"artix41/awesome-transfer-learning" ["l"="51.309,37.61"]
"dipanjanS/art_of_data_visualization" ["l"="52.629,25.371"]
"dipanjanS/text-analytics-with-python" ["l"="52.708,25.511"]
"PacktPublishing/Hands-On-Transfer-Learning-with-Python" ["l"="52.626,25.344"]
"dipanjanS/data_science_for_all" ["l"="52.619,25.386"]
"dipanjanS/feature_engineering_session_dhs18" ["l"="52.603,25.365"]
"hfawaz/bigdata18" ["l"="43.622,26.82"]
"dipanjanS/nlp_essentials" ["l"="52.595,25.336"]
"easezyc/deep-transfer-learning" ["l"="51.35,37.603"]
"jindongwang/transferlearning-tutorial" ["l"="51.269,37.629"]
"dipanjanS/tensorflow2-crash-course" ["l"="52.596,25.303"]
"keras-team/keras-applications" ["l"="50.567,30.063"]
"dipanjanS/nlp_workshop_dhs18" ["l"="52.576,25.331"]
"domainadaptation/salad" ["l"="51.38,37.555"]
"omarsar/nlp_highlights" ["l"="52.748,25.81"]
"omarsar/nlp_overview" ["l"="52.806,25.749"]
"explosion/prodigy-recipes" ["l"="52.599,25.547"]
"explosion/jupyterlab-prodigy" ["l"="52.603,25.493"]
"explosion/projects" ["l"="52.602,25.571"]
"explosion/spacy-transformers" ["l"="52.708,25.579"]
"ahalterman/multiuser_prodigy" ["l"="52.551,25.518"]
"explosion/prodigy-openai-recipes" ["l"="52.544,25.5"]
"explosion/sense2vec" ["l"="52.681,25.598"]
"explosion/spacy-notebooks" ["l"="52.488,25.408"]
"explosion/weasel" ["l"="40.994,1.28"]
"explosion/spacy-streamlit" ["l"="42.503,-2.758"]
"argilla-io/spacy-wordnet" ["l"="52.408,25.505"]
"explosion/thinc" ["l"="52.742,25.624"]
"gandersen101/spaczz" ["l"="52.41,25.619"]
"NLPatVCU/medaCy" ["l"="-33.399,16.277"]
"explosion/wasabi" ["l"="40.842,1.599"]
"jenojp/negspacy" ["l"="-33.44,16.268"]
"FudanNLP/nlp-beginner" ["l"="53.458,27.081"]
"bharathgs/Awesome-pytorch-list" ["l"="50.741,28.402"]
"Kyubyong/nlp_tasks" ["l"="53.003,25.68"]
"codertimo/BERT-pytorch" ["l"="53.159,25.744"]
"pytorch/text" ["l"="53.07,25.646"]
"jadore801120/attention-is-all-you-need-pytorch" ["l"="53.218,25.739"]
"crownpku/Awesome-Chinese-NLP" ["l"="53.315,27.301"]
"stanfordnlp/stanza" ["l"="52.949,25.808"]
"HIT-SCIR/ltp" ["l"="53.225,27.327"]
"NLPchina/ansj_seg" ["l"="-3.992,8.601"]
"hankcs/HanLP" ["l"="53.04,27.189"]
"dav/word2vec" ["l"="53.228,25.493"]
"danielfrg/word2vec" ["l"="53.192,25.585"]
"tmikolov/word2vec" ["l"="53.194,25.505"]
"svn2github/word2vec" ["l"="53.262,25.351"]
"yoonkim/CNN_sentence" ["l"="46.207,27.733"]
"jdeng/word2vec" ["l"="53.285,25.315"]
"chrisjmccormick/word2vec_commented" ["l"="53.223,25.446"]
"dennybritz/cnn-text-classification-tf" ["l"="53.153,25.633"]
"3Top/word2vec-api" ["l"="53.092,25.529"]
"ycjuan/libffm" ["l"="58.011,23.415"]
"ycjuan/kaggle-2014-criteo" ["l"="58.018,23.396"]
"phanein/deepwalk" ["l"="52.911,16.122"]
"thunlp/NRLPapers" ["l"="52.929,16.105"]
"google/seq2seq" ["l"="53.179,25.669"]
"tangjianpku/LINE" ["l"="52.915,16.177"]
"SamLynnEvans/Transformer" ["l"="53.247,25.702"]
"hyunwoongko/transformer" ["l"="53.299,25.715"]
"Kyubyong/transformer" ["l"="53.233,25.678"]
"jayparks/transformer" ["l"="53.357,25.66"]
"kimiyoung/transformer-xl" ["l"="53.149,25.692"]
"bentrevett/pytorch-seq2seq" ["l"="53.128,25.731"]
"huggingface/pytorch-openai-transformer-lm" ["l"="53.108,25.646"]
"harvardnlp/annotated-transformer" ["l"="53.182,25.767"]
"tunz/transformer-pytorch" ["l"="53.34,25.683"]
"facebookresearch/XLM" ["l"="53.036,25.657"]
"rsennrich/subword-nmt" ["l"="53.808,24.735"]
"FengQuanLi/ResnetGPT" ["l"="58.219,18.274"]
"isnowfy/snownlp" ["l"="53.169,27.311"]
"clips/pattern" ["l"="52.89,25.99"]
"cjhutto/vaderSentiment" ["l"="52.9,25.717"]
"codelucas/newspaper" ["l"="46.098,23.942"]
"chartbeat-labs/textacy" ["l"="52.7,25.649"]
"aboSamoor/polyglot" ["l"="52.853,25.657"]
"seatgeek/fuzzywuzzy" ["l"="52.666,25.949"]
"facebookresearch/pytext" ["l"="52.976,25.701"]
"huggingface/tokenizers" ["l"="52.958,25.773"]
"asappresearch/sru" ["l"="53.14,25.597"]
"salesforce/pytorch-qrnn" ["l"="53.158,25.566"]
"facebookresearch/fairseq-lua" ["l"="53.204,25.644"]
"salesforce/awd-lstm-lm" ["l"="53.085,25.565"]
"MaximumEntropy/Seq2Seq-PyTorch" ["l"="53.165,25.589"]
"allenai/bi-att-flow" ["l"="54.681,26.519"]
"facebookresearch/InferSent" ["l"="53.016,25.559"]
"LantaoYu/SeqGAN" ["l"="57.813,29.4"]
"facebookresearch/DrQA" ["l"="54.617,26.505"]
"facebookarchive/MemNN" ["l"="46.112,27.804"]
"IBM/pytorch-seq2seq" ["l"="53.182,25.62"]
"jessevig/bertviz" ["l"="52.858,25.761"]
"pytorch/examples" ["l"="50.825,29.621"]
"doccano/doccano" ["l"="53.187,27.265"]
"abdulfatir/twitter-sentiment-analysis" ["l"="52.926,25.484"]
"ayushoriginal/Sentiment-Analysis-Twitter" ["l"="52.993,25.34"]
"adeshpande3/LSTM-Sentiment-Analysis" ["l"="53.04,25.414"]
"chaoming0625/SentimentPolarityAnalysis" ["l"="50.048,22.086"]
"xiamx/awesome-sentiment-analysis" ["l"="53.009,25.381"]
"baidu/Senta" ["l"="53.305,27.324"]
"mayank93/Twitter-Sentiment-Analysis" ["l"="53.01,25.305"]
"songyouwei/ABSA-PyTorch" ["l"="54.111,28.178"]
"vivekn/sentiment" ["l"="53.072,25.315"]
"marrrcin/ml-twitter-sentiment-analysis" ["l"="52.932,25.385"]
"Edward1Chou/SentimentAnalysis" ["l"="50.055,22.12"]
"ymcui/Chinese-BERT-wwm" ["l"="53.357,27.223"]
"huggingface/peft" ["l"="40.04,0.52"]
"Hyperparticle/udify" ["l"="52.476,25.095"]
"UppsalaNLP/uuparser" ["l"="52.643,25.094"]
"datquocnguyen/jPTDP" ["l"="52.538,25.051"]
"NLP-LOVE/ML-NLP" ["l"="50.867,28.201"]
"DA-southampton/NLP_ability" ["l"="53.492,27.077"]
"yandexdataschool/nlp_course" ["l"="52.819,25.863"]
"brightmart/nlp_chinese_corpus" ["l"="53.296,27.242"]
"yunjey/pytorch-tutorial" ["l"="50.738,28.451"]
"goodmami/wn" ["l"="52.274,25.499"]
"ujjwalkarn/Twitter-Sentiment-Analysis" ["l"="52.999,25.269"]
"ravikiranj/twitter-sentiment-analyzer" ["l"="53.041,25.264"]
"abromberg/sentiment_analysis_python" ["l"="53.038,25.287"]
"fastai/course-v3" ["l"="49.318,28.61"]
"fastai/numerical-linear-algebra" ["l"="47.819,28.491"]
"ivan-bilan/The-NLP-Pandect" ["l"="52.746,25.694"]
"susanli2016/NLP-with-Python" ["l"="52.807,25.616"]
"mihail911/nlp-library" ["l"="23.554,14.959"]
"llSourcell/Learn-Natural-Language-Processing-Curriculum" ["l"="49.573,26.936"]
"mhagiwara/100-nlp-papers" ["l"="52.807,25.773"]
"vi3k6i5/flashtext" ["l"="52.905,25.892"]
"google/python-fire" ["l"="44.801,20.501"]
"scikit-learn-contrib/imbalanced-learn" ["l"="45.488,26.194"]
"WZBSocialScienceCenter/pdftabextract" ["l"="45.077,20.516"]
"sanic-org/sanic" ["l"="44.69,20.742"]
"Qix-/better-exceptions" ["l"="45.073,20.655"]
"john-hewitt/structural-probes" ["l"="52.883,25.262"]
"clarkkev/attention-analysis" ["l"="23.564,14.904"]
"nelson-liu/contextual-repr-analysis" ["l"="52.925,25.291"]
"yoavg/bert-syntax" ["l"="52.865,25.227"]
"harvardnlp/urnng" ["l"="52.932,25.233"]
"strubell/LISA" ["l"="53.592,28.777"]
"nyu-mll/jiant" ["l"="52.948,25.537"]
"BeckyMarvin/LM_syneval" ["l"="52.843,25.227"]
"nikitakit/self-attentive-parser" ["l"="52.919,25.194"]
"neulab/compare-mt" ["l"="53.854,24.762"]
"successar/AttentionExplanation" ["l"="52.861,25.188"]
"jihunchoi/unsupervised-treelstm" ["l"="52.943,25.263"]
"facebookresearch/colorlessgreenRNNs" ["l"="52.827,25.212"]
"miyyer/scpn" ["l"="57.541,29.326"]
"alexwarstadt/blimp" ["l"="52.758,25.096"]
"john-hewitt/control-tasks" ["l"="52.851,25.246"]
"harvardnlp/compound-pcfg" ["l"="52.926,25.251"]
"iesl/diora" ["l"="52.945,25.247"]
"yikangshen/PRPN" ["l"="52.946,25.232"]
"openai/gpt-2" ["l"="53.255,25.87"]
"openai/gpt-3" ["l"="53.238,25.999"]
"Morizeyao/GPT2-Chinese" ["l"="53.251,27.165"]
"karpathy/minGPT" ["l"="40.09,0.707"]
"openai/gym" ["l"="57.598,17.87"]
"karpathy/nanoGPT" ["l"="40.159,0.576"]
"deepset-ai/FARM" ["l"="52.738,25.6"]
"ThilinaRajapakse/simpletransformers" ["l"="52.79,25.725"]
"utterworks/fast-bert" ["l"="52.823,25.655"]
"linkedin/detext" ["l"="52.65,25.609"]
"huggingface/naacl_transfer_learning_tutorial" ["l"="23.497,14.916"]
"deepset-ai/COVID-QA" ["l"="52.642,25.454"]
"deepset-ai/haystack" ["l"="40.615,0.499"]
"huggingface/neuralcoref" ["l"="52.83,25.597"]
"ddangelov/Top2Vec" ["l"="52.649,25.709"]
"facebookresearch/SentEval" ["l"="52.976,25.541"]
"dbmdz/berts" ["l"="52.277,25.405"]
"jalammar/ecco" ["l"="52.653,25.662"]
"bhoov/exbert" ["l"="52.809,25.505"]
"QData/TextAttack" ["l"="52.748,25.575"]
"newsdev/who-the-hill" ["l"="52.443,26.37"]
"newsdev/elex" ["l"="-5.239,-41.311"]
"datadesk/lapd-crime-classification-analysis" ["l"="52.442,26.306"]
"deeppavlov/DeepPavlov" ["l"="53.068,25.804"]
"RasaHQ/rasa" ["l"="53.055,25.935"]
"facebookresearch/ParlAI" ["l"="53.115,25.785"]
"gunthercox/ChatterBot" ["l"="55.868,28.297"]
"snipsco/snips-nlu" ["l"="45.927,4.973"]
"AtmaHou/Task-Oriented-Dialogue-Research-Progress-Survey" ["l"="56.669,29.18"]
"Conchylicultor/DeepQA" ["l"="55.76,28.404"]
"ztane/python-Levenshtein" ["l"="52.555,25.984"]
"miohtama/python-Levenshtein" ["l"="52.542,26.075"]
"roy-ht/editdistance" ["l"="52.53,26.041"]
"jamesturk/jellyfish" ["l"="52.505,25.991"]
"seatgeek/thefuzz" ["l"="52.561,25.934"]
"WojciechMula/pyahocorasick" ["l"="53.767,27.309"]
"life4/textdistance" ["l"="52.623,25.845"]
"rapidfuzz/RapidFuzz" ["l"="52.527,25.915"]
"rapidfuzz/Levenshtein" ["l"="52.541,26.134"]
"doukremt/distance" ["l"="52.561,26.035"]
"Mimino666/langdetect" ["l"="53.685,24.691"]
"mammothb/symspellpy" ["l"="52.813,24.337"]
"deanmalmgren/textract" ["l"="46.205,4.716"]
"PyTables/PyTables" ["l"="43.768,23.757"]
"aneesha/RAKE" ["l"="52.494,25.767"]
"tensorflow/models" ["l"="48.134,28.884"]
"fxsjy/jieba" ["l"="53.075,27.279"]
"macanv/BERT-BiLSTM-CRF-NER" ["l"="53.448,27.311"]
"PaddlePaddle/ERNIE" ["l"="53.328,27.242"]
"brightmart/albert_zh" ["l"="53.393,27.247"]
"bojone/bert4keras" ["l"="53.428,27.201"]
"plasticityai/magnitude" ["l"="52.892,25.58"]
"facebookresearch/StarSpace" ["l"="52.979,25.615"]
"IndicoDataSolutions/finetune" ["l"="52.864,25.565"]
"bheinzerling/bpemb" ["l"="53.02,25.578"]
"facebookresearch/MUSE" ["l"="52.983,25.589"]
"salesforce/decaNLP" ["l"="53.027,25.606"]
"huggingface/hmtl" ["l"="52.951,25.564"]
"Hironsan/anago" ["l"="53.547,27.491"]
"ThoughtRiver/lmdb-embeddings" ["l"="53.972,27.49"]
"facebookresearch/LASER" ["l"="52.968,25.635"]
"nlptown/nlp-notebooks" ["l"="52.79,25.656"]
"adsieg/text_similarity" ["l"="52.693,25.678"]
"NirantK/NLP_Quickbook" ["l"="52.775,25.639"]
"makcedward/nlp" ["l"="52.766,25.678"]
"kavgan/nlp-in-practice" ["l"="52.725,25.646"]
"PrincetonML/SIF" ["l"="52.975,25.507"]
"msgi/nlp-journey" ["l"="53.505,27.207"]
"oborchers/Fast_Sentence_Embeddings" ["l"="52.756,25.548"]
"pengshuang/Text-Similarity" ["l"="53.267,27.368"]
"nlptown/nlppapers" ["l"="52.772,25.623"]
"hb20007/hands-on-nltk-tutorial" ["l"="52.799,25.638"]
"llhthinker/NLP-Papers" ["l"="52.841,25.621"]
"JohnSnowLabs/spark-nlp-workshop" ["l"="52.538,25.607"]
"JohnSnowLabs/spark-nlp" ["l"="-2.489,17.188"]
"JohnSnowLabs/spark-nlp-models" ["l"="52.467,25.597"]
"JohnSnowLabs/nlu" ["l"="52.491,25.64"]
"JohnSnowLabs/johnsnowlabs" ["l"="52.484,25.593"]
"JohnSnowLabs/visual-nlp-workshop" ["l"="52.497,25.612"]
"JohnSnowLabs/langtest" ["l"="52.476,25.562"]
"allenai/scispacy" ["l"="-33.409,16.293"]
"CogStack/MedCAT" ["l"="-33.426,16.254"]
"dmis-lab/biobert" ["l"="-33.361,16.317"]
"NorskRegnesentral/skweak" ["l"="52.47,25.62"]
"medspacy/medspacy" ["l"="-33.433,16.296"]
"PAIR-code/lit" ["l"="52.732,25.676"]
"bigscience-workshop/biomedical" ["l"="-33.459,16.309"]
"dair-ai/nlp_paper_summaries" ["l"="52.755,25.743"]
"huggingface/awesome-papers" ["l"="52.839,25.675"]
"tomohideshibata/BERT-related-papers" ["l"="53.272,27.134"]
"dair-ai/d2l-study-group" ["l"="52.749,25.847"]
"brianspiering/awesome-dl4nlp" ["l"="52.865,25.69"]
"mathsyouth/awesome-text-summarization" ["l"="58.418,29.119"]
"dbamman/anlp19" ["l"="52.148,25.251"]
"dbamman/book-nlp" ["l"="52.134,25.218"]
"dbamman/litbank" ["l"="52.221,25.235"]
"cu-nil/chnotes" ["l"="52.009,25.187"]
"booknlp/booknlp" ["l"="52.308,25.373"]
"melaniewalsh/responsible-datasets-in-context" ["l"="52.018,25.164"]
"melaniewalsh/Intro-Cultural-Analytics" ["l"="52.043,25.16"]
"sgsinclair/alta" ["l"="51.967,25.169"]
"facebookresearch/mmf" ["l"="48.638,32.057"]
"facebookresearch/PyTorch-BigGraph" ["l"="52.97,16.094"]
"openai/finetune-transformer-lm" ["l"="53.112,25.624"]
"allenai/bilm-tf" ["l"="53.105,25.598"]
"google-research/text-to-text-transfer-transformer" ["l"="53.106,25.819"]
"namisan/mt-dnn" ["l"="53.308,27.184"]
"ymcui/Chinese-XLNet" ["l"="53.456,27.231"]
"nshepperd/gpt-2" ["l"="53.434,25.845"]
"minimaxir/gpt-2-simple" ["l"="53.396,25.865"]
"ak9250/gpt-2-colab" ["l"="53.489,25.858"]
"lopuhin/transformer-lm" ["l"="53.513,25.84"]
"ConnorJL/GPT2" ["l"="-1.257,3.126"]
"openai/gpt-2-output-dataset" ["l"="53.326,25.786"]
"graykode/gpt-2-Pytorch" ["l"="53.404,25.84"]
"huggingface/transfer-learning-conv-ai" ["l"="56.682,29.115"]
"akanyaani/gpt-2-tensorflow2.0" ["l"="53.393,25.894"]
"minimaxir/aitextgen" ["l"="53.454,25.907"]
"shawwn/gpt-2" ["l"="53.513,25.868"]
"jcpeterson/openwebtext" ["l"="53.366,25.768"]
"minimaxir/gpt-2-cloud-run" ["l"="53.474,25.883"]
"minimaxir/textgenrnn" ["l"="53.411,25.809"]
"microsoft/DialoGPT" ["l"="56.65,29.104"]
"makcedward/nlpaug" ["l"="52.729,25.717"]
"princeton-nlp/SimCSE" ["l"="53.339,27.107"]
"brightmart/roberta_zh" ["l"="53.414,27.216"]
"google-research/albert" ["l"="53.337,27.179"]
"MaartenGr/BERTopic" ["l"="52.677,25.766"]
"FlagOpen/FlagEmbedding" ["l"="38.963,-1.98"]
"huggingface/trl" ["l"="38.758,-0.761"]
"google/active-learning" ["l"="51.955,25.856"]
"ej0cl6/deep-active-learning" ["l"="51.95,25.874"]
"rmunro/pytorch_active_learning" ["l"="51.978,25.869"]
"modAL-python/modAL" ["l"="52.028,25.85"]
"NUAA-AL/ALiPy" ["l"="51.975,25.85"]
"ntucllab/libact" ["l"="51.974,25.894"]
"ozansener/active_learning_coreset" ["l"="51.934,25.88"]
"dsgissin/DiscriminativeActiveLearning" ["l"="51.95,25.889"]
"baifanxxx/awesome-active-learning" ["l"="51.933,25.859"]
"SupeRuier/awesome-active-learning" ["l"="51.934,25.841"]
"sinhasam/vaal" ["l"="51.924,25.897"]
"Mephisto405/Learning-Loss-for-Active-Learning" ["l"="51.911,25.87"]
"SineZHAN/deepALplus" ["l"="51.903,25.879"]
"JordanAsh/badge" ["l"="51.919,25.883"]
"Azure/active-learning-workshop" ["l"="51.758,33.895"]
"baal-org/baal" ["l"="52.001,25.855"]
"webis-de/small-text" ["l"="52.33,25.731"]
"snorkel-team/snorkel" ["l"="52.691,25.708"]
"BlackHC/BatchBALD" ["l"="51.948,25.906"]
"scikit-optimize/scikit-optimize" ["l"="45.573,26.229"]
"avihu111/TypiClust" ["l"="51.872,25.902"]
"svdesai/coreset-al" ["l"="51.914,25.919"]
"yongjin-shin/awesome-active-learning" ["l"="51.911,25.855"]
"Riashat/Active-Learning-Bayesian-Convolutional-Neural-Networks" ["l"="51.909,25.942"]
"markpwoodward/active_osl" ["l"="51.958,25.945"]
"Riashat/Deep-Bayesian-Active-Learning" ["l"="51.93,25.93"]
"AAAI2018submission/Adversarial_Active_Learning" ["l"="51.953,25.831"]
"yuantn/MI-AOD" ["l"="51.875,25.859"]
"alimottaghi/adversarial-representation-active-learning" ["l"="51.897,25.929"]
"toantm/BGADL" ["l"="51.886,25.94"]
"nihalsid/ViewAL" ["l"="51.805,25.907"]
"cubeyoung/TA-VAAL" ["l"="51.892,25.898"]
"cure-lab/deep-active-learning" ["l"="51.889,25.915"]
"prakashpandey9/Text-Classification-Pytorch" ["l"="53.355,28.716"]
"649453932/Chinese-Text-Classification-Pytorch" ["l"="53.464,27.18"]
"numenta/nupic-legacy" ["l"="44.862,27.874"]
"johnmyleswhite/ML_for_Hackers" ["l"="48.1,28.513"]
"apache/predictionio" ["l"="47.761,28.905"]
"VowpalWabbit/vowpal_wabbit" ["l"="45.634,26.119"]
"dive-into-machine-learning/dive-into-machine-learning" ["l"="47.896,28.522"]
"Theano/Theano" ["l"="47.866,28.979"]
"airbnb/aerosolve" ["l"="47.953,28.806"]
"lisa-lab/pylearn2" ["l"="44.842,27.772"]
"tflearn/tflearn" ["l"="47.841,28.826"]
"pybrain/pybrain" ["l"="44.842,27.805"]
"localminimum/QANet" ["l"="54.708,26.522"]
"abisee/pointer-generator" ["l"="58.397,29.109"]
"kk7nc/Text_Classification" ["l"="53.611,27.203"]
"boudinfl/pke" ["l"="52.501,25.791"]
"gaoisbest/NLP-Projects" ["l"="52.701,25.739"]
"JasonKessler/scattertext" ["l"="52.642,25.638"]
"vijayanandrp/Thirukkural-Tamil-Dataset" ["l"="52.7,24.701"]
"tk120404/thirukkural" ["l"="52.697,24.667"]
"outcastofmusic/quick-nlp" ["l"="53.003,25.501"]
"facebookresearch/UnsupervisedMT" ["l"="53.808,24.711"]
"IntelLabs/nlp-architect" ["l"="52.943,25.66"]
"yandexdataschool/Practical_RL" ["l"="57.56,17.956"]
"yandexdataschool/Practical_DL" ["l"="-44.358,26.065"]
"esokolov/ml-course-hse" ["l"="-44.384,26.054"]
"girafe-ai/ml-course" ["l"="-44.42,26.028"]
"jasonwei20/eda_nlp" ["l"="53.43,27.163"]
"google-research/uda" ["l"="51.287,30.273"]
"marcotcr/checklist" ["l"="52.788,25.588"]
"styfeng/DataAug4NLP" ["l"="52.673,25.732"]
"thunlp/PLMpapers" ["l"="53.319,27.158"]
"Separius/BERT-keras" ["l"="53.747,27.266"]
"JayYip/m3tl" ["l"="53.591,27.31"]
"facebookresearch/adaptive-span" ["l"="48.781,33.928"]
"kentonl/e2e-coref" ["l"="53.252,27.601"]
"huggingface/torchMoji" ["l"="53.037,25.542"]
"facebookresearch/SpanBERT" ["l"="53.381,27.397"]
"Orange-OpenSource/conllueditor" ["l"="52.317,25.133"]
"jonorthwash/ud-annotatrix" ["l"="52.331,25.128"]
"kaushaltrivedi/bert-toxic-comments-multilabel" ["l"="53.717,27.242"]
"allenai/longformer" ["l"="53.252,27.091"]
"THUNLP-MT/MT-Reading-List" ["l"="53.786,24.715"]
"clab/fast_align" ["l"="53.8,24.78"]
"artetxem/vecmap" ["l"="53.844,24.746"]
"glample/fastBPE" ["l"="53.823,24.755"]
"facebookresearch/flores" ["l"="53.859,24.835"]
"MaartenGr/KeyBERT" ["l"="52.599,25.766"]
"DerwenAI/pytextrank" ["l"="52.559,25.683"]
"sunyilgdx/SIFRank_zh" ["l"="52.48,25.866"]
"LIAAD/KeywordExtractor-Datasets" ["l"="52.444,25.851"]
"ibatra/BERT-Keyword-Extractor" ["l"="52.456,25.828"]
"thunlp/BERT-KPE" ["l"="52.463,25.843"]
"SpikeKing/DL-Project-Template" ["l"="52.989,25.312"]
"SpikeKing/triplet-loss-mnist" ["l"="32.92,29.51"]
"Ahmkel/Keras-Project-Template" ["l"="52.951,25.447"]
"lifeomic/sparkflow" ["l"="53.087,25.126"]
"MrGemy95/Tensorflow-Project-Template" ["l"="47.618,28.765"]
"Separius/awesome-sentence-embedding" ["l"="52.986,25.562"]
"Hironsan/awesome-embedding-models" ["l"="53.029,25.513"]
"Jiakui/awesome-bert" ["l"="53.517,27.232"]
"NTMC-Community/MatchZoo" ["l"="53.367,27.337"]
"epfml/sent2vec" ["l"="52.915,25.554"]
"HIT-SCIR/ELMoForManyLangs" ["l"="53.078,25.591"]
"adbar/German-NLP" ["l"="52.12,25.362"]
"tblock/10kGNAD" ["l"="52.063,25.359"]
"devmount/GermanWordEmbeddings" ["l"="52.046,25.341"]
"tsproisl/SoMaJo" ["l"="52.179,25.377"]
"WZBSocialScienceCenter/germalemma" ["l"="52.086,25.35"]
"gambolputty/german-nouns" ["l"="52.099,25.436"]
"oliverguhr/german-sentiment" ["l"="52.083,25.33"]
"oliverguhr/german-sentiment-lib" ["l"="52.099,25.323"]
"hdaSprachtechnologie/odenet" ["l"="52.131,25.422"]
"gesistsa/oolong" ["l"="39.828,33.931"]
"elenanereiss/Legal-Entity-Recognition" ["l"="6.424,-20.044"]
"thorstenMueller/Thorsten-Voice" ["l"="37.292,2.332"]
"dkpro/dkpro-cassis" ["l"="52.182,25.303"]
"stefan-it/europeana-bert" ["l"="52.188,25.363"]
"PolMine/GermaParlTEI" ["l"="52.106,25.34"]
"amaiya/ktrain" ["l"="52.664,25.68"]
"jfilter/clean-text" ["l"="52.603,25.667"]
"cdpierse/transformers-interpret" ["l"="52.586,25.694"]
"MilaNLProc/contextualized-topic-models" ["l"="52.541,25.658"]
"GEM-benchmark/NL-Augmenter" ["l"="52.667,25.643"]
"georgian-io/Multimodal-Toolkit" ["l"="45.988,24.742"]
"keras-team/keras-tuner" ["l"="45.637,25.918"]
"zihangdai/mos" ["l"="53.213,25.537"]
"benkrause/dynamic-evaluation" ["l"="53.279,25.533"]
"salesforce/nonauto-nmt" ["l"="53.912,24.653"]
"nyu-dl/dl4mt-nonauto" ["l"="53.912,24.689"]
"dreasysnail/deconv_paragraph_represention" ["l"="53.483,28.67"]
"kelvinguu/neural-editor" ["l"="57.678,29.354"]
"ChengyueGongR/Frequency-Agnostic" ["l"="53.319,25.516"]
"microsoft/MASS" ["l"="53.841,24.689"]
"CalculatedContent/WeightWatcher" ["l"="52.52,25.686"]
"f-dangel/cockpit" ["l"="21.613,14.015"]
"NannyML/nannyml" ["l"="45.214,26.062"]
"koaning/doubtlab" ["l"="45.112,26.343"]
"huggingface/setfit" ["l"="52.568,25.752"]
"awslabs/fortuna" ["l"="43.705,26.168"]
"pytorch/functorch" ["l"="21.677,14.079"]
"deepchecks/deepchecks" ["l"="45.231,26.033"]
"SelfExplainML/PiML-Toolbox" ["l"="43.688,26.201"]
"Lightning-Universe/lightning-bolts" ["l"="50.957,29.568"]
"argilla-io/argilla" ["l"="52.528,25.718"]
"patrick-kidger/torchtyping" ["l"="21.645,14.092"]
"google/neural-tangents" ["l"="21.667,13.957"]
"oegedijk/explainerdashboard" ["l"="45.258,26.183"]
"ElizaLo/NLP-Natural-Language-Processing" ["l"="52.762,25.716"]
"costezki/awesome-nlprojects" ["l"="52.79,25.688"]
"NirantK/best-of-jupyter" ["l"="52.71,25.456"]
"cedrickchee/awesome-transformer-nlp" ["l"="53.421,27.127"]
"astorfi/Deep-Learning-NLP" ["l"="52.805,25.675"]
"Andras7/word2vec-pytorch" ["l"="53.481,25.292"]
"OlgaChernytska/word2vec-pytorch" ["l"="53.523,25.267"]
"theeluwin/pytorch-sgns" ["l"="53.411,25.333"]
"rkfg/gpt-2" ["l"="53.547,25.838"]
"imgarylai/bert-embedding" ["l"="53.158,25.479"]
"Kyubyong/bert-token-embeddings" ["l"="53.243,25.427"]
"szha/KDD18-Gluon" ["l"="51.765,33.767"]
"dmlc/gluon-nlp" ["l"="53.071,25.619"]
"brightmart/bert_language_understanding" ["l"="53.553,27.339"]
"howardhsu/BERT-for-RRC-ABSA" ["l"="54.154,28.172"]
"recommenders-team/recommenders" ["l"="59.388,23.856"]
"microsoft/computervision-recipes" ["l"="50.808,29.571"]
"microsoft/forecasting" ["l"="45.489,26.362"]
"chiphuyen/machine-learning-systems-design" ["l"="48.113,26.278"]
"microsoft/BlingFire" ["l"="52.887,25.655"]
"marian-nmt/marian" ["l"="53.797,24.762"]
"microsoft/SPTAG" ["l"="-1.03,4.036"]
"curiosity-ai/catalyst" ["l"="-35.039,-2.999"]
"VKCOM/YouTokenToMe" ["l"="-44.182,26.034"]
"castorini/anserini" ["l"="54.522,25.717"]
"nipunsadvilkar/pySBD" ["l"="52.556,25.628"]
"attardi/wikiextractor" ["l"="53.009,25.629"]
"explosion/spacy-models" ["l"="52.691,25.621"]
"explosion/spacy-stanza" ["l"="52.639,25.541"]
"niderhoff/nlp-datasets" ["l"="52.963,25.731"]
"andrewt3000/DL4NLP" ["l"="52.942,25.617"]
"RedditSota/state-of-the-art-result-for-machine-learning-problems" ["l"="47.648,28.737"]
"dennybritz/deeplearning-papernotes" ["l"="47.764,28.803"]
"karthikncode/nlp-datasets" ["l"="55.82,28.406"]
"chbrown/liwc-python" ["l"="52.527,24.853"]
"evanll/liwc-text-analysis-python" ["l"="52.513,24.817"]
"thunlp/Auto_CLIWC" ["l"="52.778,24.905"]
"Ejhfast/empath-client" ["l"="52.375,24.93"]
"SkotBotCambo/liwcExtractor" ["l"="52.501,24.834"]
"dfederschmidt/pyliwc" ["l"="52.524,24.83"]
"kbenoit/LIWCalike" ["l"="52.459,24.865"]
"HazyResearch/deepdive" ["l"="52.681,25.555"]
"deepwel/Chinese-Annotator" ["l"="53.397,27.384"]
"thunlp/OpenNRE" ["l"="53.43,27.363"]
"thunlp/NRE" ["l"="55.718,26.627"]
"crownpku/Information-Extraction-Chinese" ["l"="53.452,27.386"]
"memect/kg-beijing" ["l"="55.336,27.131"]
"Pelhans/Z_knowledge_graph" ["l"="55.404,27.145"]
"cemoody/lda2vec" ["l"="52.867,25.606"]
"Franck-Dernoncourt/NeuroNER" ["l"="53.508,27.51"]
"brmson/yodaqa" ["l"="55.634,26.17"]
"mit-nlp/MITIE" ["l"="55.592,28.319"]
"thunlp/KB2E" ["l"="53.639,15.97"]
"INK-USC/USC-DS-RelationExtraction" ["l"="55.701,26.633"]
"machinalis/iepy" ["l"="44.767,27.797"]
"ryankiros/skip-thoughts" ["l"="46.18,27.768"]
"latitudegames/AIDungeon" ["l"="53.601,25.843"]
"marblexu/PythonPlantsVsZombies" ["l"="48.217,23.588"]
"cloveranon/Clover-Edition" ["l"="53.766,25.836"]
"KoboldAI/KoboldAI-Client" ["l"="42.817,-2.004"]
"TerryCavanagh/VVVVVV" ["l"="-9.546,2.13"]
"storybro/storybro" ["l"="53.702,25.833"]
"NetHack/NetHack" ["l"="-9.996,2.924"]
"OpenDiablo2/OpenDiablo2" ["l"="-10.926,1.703"]
"thadunge2/AIDungeon" ["l"="53.719,25.838"]
"nickwalton/AI-DungeonMaster" ["l"="53.666,25.838"]
"joel-simon/ganbreeder" ["l"="44.997,30.66"]
"Eigenbahn/ai-dungeon-cli" ["l"="53.675,25.861"]
"Azgaar/Fantasy-Map-Generator" ["l"="-32.385,-27.495"]
"asyml/texar" ["l"="57.735,29.417"]
"virtualvinodh/aksharamukha" ["l"="52.613,24.866"]
"virtualvinodh/aksharamukha-python" ["l"="52.576,24.844"]
"indic-transliteration/sanscript.js" ["l"="52.634,24.898"]
"ashtadhyayi-com/data" ["l"="52.623,24.847"]
"ambuda-org/ambuda" ["l"="52.626,24.835"]
"sanskrit/raw_etexts" ["l"="52.63,24.875"]
"OliverHellwig/sanskrit" ["l"="52.65,24.851"]
"indic-transliteration/indic_transliteration_py" ["l"="52.647,24.961"]
"Sandhi-IITBombay/Shobhika" ["l"="52.575,24.798"]
"sanskrit/ashtadhyayi" ["l"="52.598,24.867"]
"adashofdata/nlp-in-python-tutorial" ["l"="52.771,25.603"]
"adashofdata/intro-to-text-analytics" ["l"="52.755,25.528"]
"adashofdata/muffin-cupcake" ["l"="52.772,25.519"]
"hse-aml/natural-language-processing" ["l"="48.408,27.302"]
"susanli2016/Machine-Learning-with-Python" ["l"="52.772,25.474"]
"justmarkham/pandas-videos" ["l"="48.026,28.242"]
"goru001/nlp-for-hindi" ["l"="52.684,25.153"]
"AI4Bharat/indicnlp_corpus" ["l"="52.69,25.109"]
"NirantK/hindi2vec" ["l"="52.674,25.214"]
"mapmeld/hindi-bert" ["l"="52.668,25.137"]
"goru001/inltk" ["l"="52.711,25.232"]
"AI4Bharat/indicnlp_catalog" ["l"="52.694,25.06"]
"anoopkunchukuttan/indic_nlp_library" ["l"="52.677,25.067"]
"AI4Bharat/Indic-BERT-v1" ["l"="52.7,25.077"]
"libindic/indic-trans" ["l"="52.664,25.054"]
"goru001/nlp-for-sanskrit" ["l"="52.667,24.911"]
"AI4Bharat/IndicTrans2" ["l"="52.705,24.996"]
"renatoviolin/next_word_prediction" ["l"="52.702,25.427"]
"google-research-datasets/dakshina" ["l"="52.681,25.092"]
"theainerd/MLInterview" ["l"="48.269,26.232"]
"neubig/lowresource-nlp-bootcamp-2020" ["l"="52.812,25.546"]
"huggingface/knockknock" ["l"="52.873,25.633"]
"maciejkula/glove-python" ["l"="53.19,25.536"]
"koth/kcws" ["l"="53.329,27.454"]
"farizrahman4u/seq2seq" ["l"="55.837,28.49"]
"programminghistorian/jekyll" ["l"="52.083,25.204"]
"programminghistorian/ph-submissions" ["l"="52.05,25.213"]
"dh-tech/awesome-digital-humanities" ["l"="25.732,-26.252"]
"maehr/awesome-digital-history" ["l"="25.795,-26.248"]
"archivesunleashed/aut" ["l"="38.707,32.543"]
"TEIC/TEI" ["l"="-52.125,-11.497"]
"curateteaching/digitalpedagogy" ["l"="25.4,-26.227"]
"jarmoza/twic" ["l"="52.022,25.099"]
"ropensci/historydata" ["l"="52.042,25.191"]
"distant-viewing/dvt" ["l"="52.069,25.172"]
"leviswind/pytorch-transformer" ["l"="53.44,25.64"]
"wmathor/nlp-tutorial" ["l"="53.554,27.082"]
"keon/seq2seq" ["l"="53.231,25.621"]
"dhlee347/pytorchic-bert" ["l"="-5.07,-23.152"]
"hemingkx/ChineseNMT" ["l"="53.591,25.61"]
"nyu-mll/GLUE-baselines" ["l"="53.05,25.589"]
"harvardnlp/pytorch-struct" ["l"="57.622,29.477"]
"yet-another-account/openwebtext" ["l"="53.369,25.808"]
"NVIDIA/sentiment-discovery" ["l"="53.068,25.515"]
"openai/generating-reviews-discovering-sentiment" ["l"="53.094,25.499"]
"guillitte/pytorch-sentiment-neuron" ["l"="53.142,25.461"]
"bfelbo/DeepMoji" ["l"="53.115,25.56"]
"vanzytay/pytorch_sentiment_rnn" ["l"="59.877,23.629"]
"cedias/Hierarchical-Sentiment" ["l"="53.297,28.766"]
"shreevatsa/sanskrit" ["l"="52.66,24.838"]
"sanskrit/sanskrit" ["l"="52.653,24.824"]
"kmadathil/sanskrit_parser" ["l"="52.637,24.856"]
"drdhaval2785/SanskritVerb" ["l"="52.637,24.824"]
"avinashvarna/sanskrit_tts" ["l"="52.683,24.807"]
"avinashvarna/audio_alignment" ["l"="52.674,24.833"]
"drdhaval2785/SanskritSubanta" ["l"="52.656,24.809"]
"rowanz/grover" ["l"="53.278,25.741"]
"eric-mitchell/detect-gpt" ["l"="37.487,0.161"]
"salesforce/ctrl" ["l"="53.262,25.783"]
"HendrikStrobelt/detecting-fake-text" ["l"="37.462,0.131"]
"openai/image-gpt" ["l"="45.092,30.644"]
"dmlc/gluon-cv" ["l"="50.751,29.974"]
"awslabs/sockeye" ["l"="53.769,24.736"]
"zackchase/mxnet-the-straight-dope" ["l"="51.794,33.603"]
"chinakook/Awesome-MXNet" ["l"="51.763,33.619"]
"piskvorky/gensim-data" ["l"="52.958,25.596"]
"commonsense/conceptnet-numberbatch" ["l"="52.972,25.467"]
"brmson/dataset-sts" ["l"="53.027,25.458"]
"strongio/keras-elmo" ["l"="53.855,27.381"]
"shivanikohlii/SanTran" ["l"="52.695,24.875"]
"soskek/bookcorpus" ["l"="53.272,25.671"]
"EleutherAI/the-pile" ["l"="38.533,-0.692"]
"facebookresearch/cc_net" ["l"="38.527,-0.625"]
"facebookresearch/ELI5" ["l"="54.512,25.484"]
"google-research/deduplicate-text-datasets" ["l"="38.55,-0.567"]
"huggingface/pytorch_block_sparse" ["l"="48.88,33.948"]
"google-deepmind/pg19" ["l"="53.472,25.767"]
"google-research/xtreme" ["l"="54.681,25.374"]
"bigscience-workshop/bigscience" ["l"="38.713,-0.522"]
"hundredblocks/concrete_NLP_tutorial" ["l"="52.844,25.543"]
"marcotcr/lime" ["l"="45.438,26.108"]
"rouseguy/DeepLearning-NLP" ["l"="48.069,28.583"]
"mesolitica/NLP-Models-Tensorflow" ["l"="53.525,27.257"]
"hundredblocks/ml-powered-applications" ["l"="47.964,26.551"]
"UKPLab/deeplearning4nlp-tutorial" ["l"="52.976,25.408"]
"RubensZimbres/Repo-2017" ["l"="47.712,28.059"]
"neubig/nn4nlp-code" ["l"="53.006,25.6"]
"neulab/nn4nlp-concepts" ["l"="53.121,25.504"]
"neubig/nlptutorial" ["l"="53.034,25.481"]
"clab/dynet" ["l"="53.139,25.533"]
"stanfordnlp/cs224n-winter17-notes" ["l"="52.977,25.662"]
"thunlp/TAADpapers" ["l"="52.779,25.414"]
"thunlp/OpenAttack" ["l"="52.755,25.387"]
"jind11/TextFooler" ["l"="52.772,25.364"]
"THUYimingLi/backdoor-learning-resources" ["l"="38.446,-7.747"]
"nesl/nlp_adversarial_examples" ["l"="52.792,25.314"]
"Eric-Wallace/universal-triggers" ["l"="52.797,25.345"]
"P2333/Papers-of-Robust-ML" ["l"="39.031,-7.519"]
"BorealisAI/advertorch" ["l"="38.999,-7.484"]
"fuzhenxin/Style-Transfer-in-Text" ["l"="57.665,29.39"]
"thunlp/PromptPapers" ["l"="50.059,38.052"]
"danqi/acl2020-openqa-tutorial" ["l"="54.495,25.53"]
"advboxes/AdvBox" ["l"="39.037,-7.448"]
"textflint/textflint" ["l"="52.748,25.422"]
"gnes-ai/gnes" ["l"="52.9,25.615"]
"koursaros-ai/nboost" ["l"="54.558,25.795"]
"Hironsan/bertsearch" ["l"="-2.445,8.83"]
"jina-ai/examples" ["l"="41.803,-3.6"]
"NTMC-Community/awesome-neural-models-for-semantic-match" ["l"="53.257,27.397"]
"ICLRandD/Blackstone" ["l"="52.742,27.867"]
"charlesXu86/Chatbot_CN" ["l"="55.687,28.259"]
"bojone/on-lstm" ["l"="52.912,25.318"]
"yikangshen/Ordered-Neurons" ["l"="52.953,25.326"]
"CyberZHG/keras-ordered-neurons" ["l"="52.881,25.304"]
"affjljoo3581/GPT2" ["l"="53.665,25.96"]
"graykode/xlnet-Pytorch" ["l"="53.683,27.107"]
"graykode/ALBERT-Pytorch" ["l"="53.6,27.126"]
"rish-16/gpt2client" ["l"="53.403,25.915"]
"santhoshkolloju/Abstractive-Summarization-With-Transfer-Learning" ["l"="58.434,29.094"]
"NiuTrans/NiuTensor" ["l"="52.671,26.007"]
"NiuTrans/MTBook" ["l"="52.712,25.99"]
"NiuTrans/MT-paper-lists" ["l"="52.664,26.045"]
"NiuTrans/NiuTrans.SMT" ["l"="52.668,26.031"]
"NiuTrans/NiuTrans.NMT" ["l"="52.65,26.036"]
"NiuTrans/LanguageCodes" ["l"="52.643,26.049"]
"NiuTrans/MTVenues" ["l"="52.66,26.06"]
"NiuTrans/ABigSurvey" ["l"="52.697,25.87"]
"adsieg/Multi_Text_Classification" ["l"="52.617,25.722"]
"TharinduDR/Simple-Sentence-Similarity" ["l"="52.633,25.678"]
"AndriyMulyar/semantic-text-similarity" ["l"="52.615,25.697"]
"mankadronit/Automated-Essay--Scoring" ["l"="36.476,2.394"]
"ad2476/pos-research" ["l"="52.705,24.852"]
"tatuylonen/wiktextract" ["l"="52.147,25.533"]
"suyashb95/WiktionaryParser" ["l"="52.11,25.52"]
"tatuylonen/wikitextprocessor" ["l"="52.103,25.5"]
"rspeer/wordfreq" ["l"="52.427,25.543"]
"hermitdave/FrequencyWords" ["l"="52.164,25.559"]
"globalwordnet/english-wordnet" ["l"="52.194,25.506"]
"FreeLanguageTools/vocabsieve" ["l"="-36.367,18.559"]
"Tatoeba/tatoeba2" ["l"="-36.192,18.679"]
"earwig/mwparserfromhell" ["l"="-1.084,-42.135"]
"yomidevs/kaikki-to-yomitan" ["l"="-36.455,18.57"]
"tatuylonen/wiktfinnish" ["l"="52.114,25.541"]
"5j9/wikitextparser" ["l"="-1.11,-42.12"]
"componavt/wikokit" ["l"="52.089,25.532"]
"freedict/fd-dictionaries" ["l"="51.981,25.539"]
"adbar/simplemma" ["l"="1.228,-8.393"]
"DoodleJZ/HPSG-Neural-Parser" ["l"="52.921,25.151"]
"KhalilMrini/LAL-Parser" ["l"="52.898,25.135"]
"hantek/distance-parser" ["l"="52.939,25.199"]
"yzhangcs/crfpar" ["l"="52.908,25.118"]
"MengtingWan/goodreads" ["l"="51.791,24.978"]
"maria-antoniak/goodreads-scraper" ["l"="51.907,25.055"]
"BahramJannesar/GoodreadsBookDataset" ["l"="51.778,24.937"]
"MengtingWan/chainRec" ["l"="51.744,24.979"]
"MengtingWan/bittersweet-phd" ["l"="51.764,24.959"]
"sefakilic/goodreads" ["l"="51.713,24.927"]
"huawei-noah/Pretrained-Language-Model" ["l"="53.362,27.15"]
"CLUEbenchmark/CLUE" ["l"="53.381,27.209"]
"intersun/PKD-for-BERT-Model-Compression" ["l"="53.206,27.107"]
"google-research/electra" ["l"="53.282,27.163"]
"thunlp/ERNIE" ["l"="53.397,27.266"]
"ChineseGLUE/ChineseGLUE" ["l"="53.442,27.238"]
"nttcslab-sp/kaldiio" ["l"="35.708,2.35"]
"belambert/edit-distance" ["l"="35.849,2.472"]
"cbaziotis/neat-vision" ["l"="52.13,26.042"]
"minqi/hnatt" ["l"="52.094,26.064"]
"jiesutd/Text-Attention-Heatmap-Visualization" ["l"="52.187,26.002"]
"georgepar/optimistic-adam" ["l"="52.118,26.067"]
"jettify/pytorch-optimizer" ["l"="50.972,29.95"]
"huggingface/accelerate" ["l"="38.719,-0.759"]
"psolin/cleanco" ["l"="52.256,25.778"]
"DeNederlandscheBank/name_matching" ["l"="52.162,25.791"]
"ing-bank/sparse_dot_topn" ["l"="52.294,25.763"]
"Bergvca/string_grouper" ["l"="52.331,25.761"]
"babylonhealth/fastText_multilingual" ["l"="53.006,25.534"]
"meetDeveloper/freeDictionaryAPI" ["l"="52.101,25.666"]
"meetDeveloper/Dictionary-Anywhere" ["l"="52.043,25.703"]
"dwyl/english-words" ["l"="51.991,25.657"]
"skywind3000/ECDICT" ["l"="-5.176,16.914"]
"wordset/wordset-dictionary" ["l"="51.995,25.58"]
"matheuss/google-translate-api" ["l"="52.657,26.218"]
"LibreTranslate/LibreTranslate" ["l"="-53.424,11.174"]
"lukePeavey/quotable" ["l"="27.131,-26.963"]
"first20hours/google-10000-english" ["l"="52.084,25.602"]
"kajweb/dict" ["l"="-5.144,16.939"]
"dolph/dictionary" ["l"="51.968,25.619"]
"FooSoft/anki-connect" ["l"="-36.197,18.092"]
"matthewreagan/WebstersEnglishDictionary" ["l"="52.014,25.615"]
"explosion/srsly" ["l"="40.868,1.561"]
"iamtraction/google-translate" ["l"="52.69,26.275"]
"cjvnjde/google-translate-api-browser" ["l"="52.674,26.293"]
"vitalets/google-translate-api" ["l"="52.697,26.317"]
"sudongyuer/learn-eslint" ["l"="-6.971,-34.907"]
"UKPLab/elmo-bilstm-cnn-crf" ["l"="53.766,27.484"]
"UKPLab/emnlp2017-bilstm-cnn-crf" ["l"="53.559,27.508"]
"guillaumegenthial/sequence_tagging" ["l"="53.493,27.466"]
"HKUST-KnowComp/R-Net" ["l"="54.695,26.506"]
"licstar/compare" ["l"="53.18,25.249"]
"fraym/fraym" ["l"="53.326,25.312"]
"IntelLabs/pWord2Vec" ["l"="53.369,25.25"]
"maxoodf/word2vec" ["l"="53.298,25.372"]
"dmlc/experimental-lda" ["l"="57.796,23.504"]
"tankle/word2vec" ["l"="53.346,25.29"]
"RobinL/fuzzymatcher" ["l"="52.325,26.186"]
"J535D165/recordlinkage" ["l"="52.367,26.153"]
"jsoma/fuzzy_pandas" ["l"="38.564,34.011"]
"moj-analytical-services/splink" ["l"="-0.571,15.915"]
"J535D165/data-matching-software" ["l"="52.333,26.212"]
"AuCson/PyTorch-Batch-Attention-Seq2seq" ["l"="53.244,25.592"]
"eladhoffer/seq2seq.pytorch" ["l"="53.214,25.573"]
"ymfa/seq2seq-summarizer" ["l"="58.431,29.068"]
"suragnair/seqGAN" ["l"="57.78,29.391"]
"atulkum/pointer_summarizer" ["l"="58.409,29.081"]
"timbmg/Sentence-VAE" ["l"="57.705,29.351"]
"lium-lst/nmtpytorch" ["l"="53.824,24.668"]
"harvardnlp/seq2seq-attn" ["l"="46.138,27.753"]
"alex-berard/seq2seq" ["l"="55.819,28.553"]
"Shawn1993/cnn-text-classification-pytorch" ["l"="53.379,28.704"]
"HazyResearch/metal" ["l"="52.521,25.536"]
"HazyResearch/babble" ["l"="52.491,25.474"]
"HazyResearch/tanda" ["l"="52.467,25.461"]
"HazyResearch/reef" ["l"="52.466,25.488"]
"snorkel-team/snorkel-tutorials" ["l"="52.538,25.58"]
"larsga/Duke" ["l"="52.328,26.156"]
"YannBrrd/elasticsearch-entity-resolution" ["l"="52.286,26.161"]
"scify/JedAIToolkit" ["l"="52.266,26.243"]
"dedupeio/dedupe" ["l"="52.453,26.07"]
"drangons/entity_resolution_spark" ["l"="52.296,26.185"]
"dedupeio/dedupe-examples" ["l"="52.386,26.149"]
"Simmetrics/simmetrics" ["l"="-2.145,12.023"]
"zouzias/spark-lucenerdd" ["l"="52.249,26.172"]
"dipanjanS/stanford-statistical-learning" ["l"="52.612,25.356"]
"dipanjanS/practical_nlp_workshop_gids20" ["l"="52.581,25.355"]
"dipanjanS/nlp_crash_course_plugin20" ["l"="52.558,25.331"]
"dmmiller612/sparktorch" ["l"="53.119,25.072"]
"dalinvip/cw2vec" ["l"="53.271,25.087"]
"dalinvip/corpus_process_script" ["l"="53.311,25.079"]
"Luka0612/cw2vec" ["l"="53.306,25.056"]
"HKUST-KnowComp/JWE" ["l"="53.26,25.101"]
"zhang2010hao/cw2vec-pytorch" ["l"="53.291,25.073"]
"Leonard-Xu/CWE" ["l"="53.179,25.141"]
"WenDesi/Chinese_radical" ["l"="53.279,25.056"]
"dalinvip/Word_Similarity_and_Word_Analogy" ["l"="53.287,25.131"]
"roomylee/rcnn-text-classification" ["l"="53.254,25.031"]
"airalcorn2/Recurrent-Convolutional-Neural-Network-Text-Classifier" ["l"="53.24,25.072"]
"KaiDMML/FakeNewsNet" ["l"="52.404,26.774"]
"sumeetkr/AwesomeFakeNews" ["l"="52.381,26.774"]
"entitize/Fakeddit" ["l"="52.437,26.779"]
"uber-research/PPLM" ["l"="53.34,25.91"]
"FakeNewsChallenge/fnc-1" ["l"="52.323,26.82"]
"dhruvkhattar/MVAE" ["l"="52.442,26.765"]
"several27/FakeNewsCorpus" ["l"="52.4,26.806"]
"sannykim/transformer" ["l"="23.449,15.014"]
"moses-smt/mosesdecoder" ["l"="53.787,24.745"]
"salesforce/cos-e" ["l"="52.837,25.109"]
"nazneenrajani/CoS-E" ["l"="52.833,25.078"]
"stefantruehl/research-proposal-template" ["l"="52.735,25.965"]
"dair-ai/awesome-research-proposals-guide" ["l"="52.737,25.925"]
"pickhardt/betty" ["l"="52.912,26.11"]
"gutfeeling/beginner_nlp" ["l"="52.86,25.947"]
"WZBSocialScienceCenter/tmtoolkit" ["l"="52.405,25.456"]
"internaut/tmtoolkit" ["l"="52.382,25.431"]
"Waikato/meka" ["l"="45.855,26.046"]
"GauravBh1010tt/DeepLearn" ["l"="52.936,25.582"]
"victoresque/pytorch-template" ["l"="51.012,29.651"]
"lvapeab/nmt-keras" ["l"="53.774,24.762"]
"taehoonlee/tensornets" ["l"="50.348,33.114"]
"maxpumperla/hyperas" ["l"="45.631,26.158"]
"fchollet/keras-resources" ["l"="47.697,28.66"]
"senderle/topic-modeling-tool" ["l"="51.964,25.192"]
"TEIC/CETEIcean" ["l"="-52.106,-11.503"]
"mandarjoshi90/coref" ["l"="53.272,27.636"]
"pitrack/incremental-coref" ["l"="53.228,27.705"]
"VectorFist/RNN-NMT" ["l"="53.776,25.551"]
"foamliu/Machine-Translation" ["l"="53.739,25.573"]
"carrie0307/attention-nmt" ["l"="53.795,25.559"]
"jmhIcoding/machine_translation" ["l"="53.802,25.537"]
"foamliu/Machine-Translation-v2" ["l"="53.766,25.585"]
"foamliu/Transformer" ["l"="53.76,25.566"]
"yuenoble/Machine-Translation-by-Transformer" ["l"="53.781,25.577"]
"juand-r/entity-recognition-datasets" ["l"="53.591,27.503"]
"icoxfog417/awesome-text-summarization" ["l"="58.401,29.133"]
"davidadamojr/TextRank" ["l"="52.464,25.701"]
"summanlp/textrank" ["l"="52.439,25.729"]
"miso-belica/sumy" ["l"="52.402,25.698"]
"snkim/AutomaticKeyphraseExtraction" ["l"="52.439,25.809"]
"IndigoResearch/textteaser" ["l"="52.347,25.702"]
"facebookarchive/NAMAS" ["l"="58.388,29.153"]
"salestock/fastText.py" ["l"="53.036,25.593"]
"xiaoxu193/PyTeaser" ["l"="52.367,25.686"]
"carpedm20/neural-summary-tensorflow" ["l"="46.245,27.824"]
"lipiji/App-DL" ["l"="58.414,29.172"]
"udibr/headlines" ["l"="58.451,29.184"]
"jjangsangy/ExplainToMe" ["l"="52.362,25.662"]
"JHL-HUST/PWWS" ["l"="52.789,25.328"]
"marcotcr/sears" ["l"="52.772,25.312"]
"JHL-HUST/FGPM" ["l"="52.81,25.299"]
"RishabhMaheshwary/hard-label-attack" ["l"="52.762,25.326"]
"thunlp/SememePSO-Attack" ["l"="52.78,25.337"]
"jiesutd/LatticeLSTM" ["l"="53.536,27.383"]
"jiesutd/NCRFpp" ["l"="53.517,27.467"]
"muatik/naive-bayes-classifier" ["l"="53.424,25.122"]
"yhat/python-naive-bayes" ["l"="53.377,25.158"]
"codebox/bayesian-classifier" ["l"="53.464,25.091"]
"imcaspar/gpt2-ml" ["l"="53.328,27.202"]
"EleutherAI/gpt-neo" ["l"="53.282,25.928"]
"kingoflolz/mesh-transformer-jax" ["l"="38.72,-0.912"]
"sotte/pytorch_tutorial" ["l"="52.807,26.017"]
"yashu-seth/pytorch-tabular" ["l"="52.813,26.073"]
"nithyadurai87/machine_learning_examples" ["l"="52.738,24.627"]
"nithyadurai87/python-tutorials" ["l"="52.737,24.597"]
"IndicoDataSolutions/Enso" ["l"="52.846,25.496"]
"t-makaro/animatplot" ["l"="52.853,25.474"]
"chakki-works/chazutsu" ["l"="5.912,-40.969"]
"feedly/transfer-nlp" ["l"="52.491,25.667"]
"itkach/slob" ["l"="51.71,25.505"]
"itkach/aard2-android" ["l"="51.624,25.497"]
"itkach/aard2-web" ["l"="51.662,25.492"]
"farfromrefug/OSS-Dict" ["l"="51.661,25.51"]
"itkach/mw2slob" ["l"="51.682,25.482"]
"aarddict/desktop" ["l"="51.686,25.519"]
"catalpa-cl/inceptalytics" ["l"="52.215,25.303"]
"anhaidgroup/deepmatcher" ["l"="52.281,26.268"]
"megagonlabs/ditto" ["l"="52.242,26.296"]
"anhaidgroup/py_entitymatching" ["l"="52.269,26.294"]
"zhao1701/extending-deep-ER" ["l"="52.256,26.323"]
"anhaidgroup/py_stringmatching" ["l"="52.245,26.313"]
"brunnurs/entity-matching-transformer" ["l"="52.264,26.313"]
"Gaglia88/sparker" ["l"="52.308,26.209"]
"chu-data-lab/zeroer" ["l"="52.256,26.283"]
"ropeladder/record-linkage-resources" ["l"="52.321,26.237"]
"qcri/DeepBlocker" ["l"="52.247,26.275"]
"megagonlabs/sato" ["l"="38.014,-2.273"]
"vintasoftware/entity-embed" ["l"="52.291,26.285"]
"icip-cas/EntityMatcher" ["l"="52.276,26.325"]
"madisonmay/CommonRegex" ["l"="52.333,26.035"]
"madisonmay/Tomorrow" ["l"="45.147,20.62"]
"tartley/python-regex-cheatsheet" ["l"="52.229,26.083"]
"yhat/db.py" ["l"="43.73,23.944"]
"derek73/python-nameparser" ["l"="52.41,26.154"]
"datamade/parserator" ["l"="52.419,26.109"]
"lk-geimfari/expynent" ["l"="52.269,26.087"]
"aloisdg/awesome-regex" ["l"="26.1,-26.162"]
"vladimarius/pyap" ["l"="52.331,26.111"]
"datamade/probablepeople" ["l"="52.416,26.128"]
"datamade/usaddress" ["l"="52.443,26.134"]
"joshfraser/JavaScript-Name-Parser" ["l"="52.413,26.241"]
"daviddrysdale/python-phonenumbers" ["l"="47.289,18.367"]
"openvenues/pypostal" ["l"="52.392,26.176"]
"sunlightlabs/name-cleaver" ["l"="52.416,26.185"]
"michaelhelmick/lassie" ["l"="47.612,19.077"]
"gwu-libraries/namesparser" ["l"="52.402,26.196"]
"mailgun/flanker" ["l"="45.019,20.192"]
"msg-systems/holmes-extractor" ["l"="52.487,25.509"]
"graphbrain/graphbrain" ["l"="52.474,25.531"]
"msg-systems/coreferee" ["l"="52.359,25.57"]
"explosion/spacy-experimental" ["l"="52.371,25.546"]
"artpar/languagecrunch" ["l"="52.425,25.428"]
"yash1994/dframcy" ["l"="52.439,25.464"]
"minimaxir/tweet-generator" ["l"="53.577,25.92"]
"minimaxir/autotweet-from-googlesheet" ["l"="53.672,26.014"]
"AidanWelch/google-translate-api" ["l"="52.707,26.381"]
"matheuss/google-translate-token" ["l"="52.651,26.289"]
"songkeys/translateer" ["l"="52.717,26.362"]
"plainheart/bing-translate-api" ["l"="52.683,26.409"]
"translate-tools/core" ["l"="52.677,26.363"]
"franciscop/translate" ["l"="52.654,26.317"]
"Animenosekai/translate" ["l"="52.813,26.233"]
"Stichoza/google-translate-php" ["l"="-15.002,27.826"]
"vitalets/google-translate-token" ["l"="52.697,26.349"]
"yzhangcs/parser" ["l"="52.898,25.162"]
"mitchellstern/minimal-span-parser" ["l"="52.89,25.103"]
"XuezheMax/NeuroNLP2" ["l"="52.958,25.172"]
"clab/rnng" ["l"="52.965,25.209"]
"hankcs/TreebankPreprocessing" ["l"="52.926,25.126"]
"MojoJolo/textteaser" ["l"="52.32,25.693"]
"jbrooksuk/node-summary" ["l"="52.266,25.689"]
"OvidijusParsiunas/myvision" ["l"="53.469,26.044"]
"minimaxir/gpt-3-experiments" ["l"="53.408,25.996"]
"kosukeimai/fastLink" ["l"="52.342,26.25"]
"OlivierBinette/Awesome-Entity-Resolution" ["l"="52.301,26.242"]
"usc-isi-i2/rltk" ["l"="52.32,26.301"]
"J535D165/recordlinkage-annotator" ["l"="52.294,26.224"]
"Lyonk71/pandas-dedupe" ["l"="52.361,26.212"]
"ManivannanMurugavel/spacy-ner-annotator" ["l"="52.341,25.579"]
"ieriii/spacy-annotator" ["l"="52.372,25.589"]
"tokestermw/spacy_hunspell" ["l"="51.87,25.223"]
"tokestermw/spacy_kenlm" ["l"="51.835,25.218"]
"nickdavidhaynes/spacy-cld" ["l"="51.809,25.21"]
"sanyam5/skip-thoughts" ["l"="53.366,25.212"]
"Cadene/skip-thoughts.torch" ["l"="53.427,25.177"]
"lajanugen/S2V" ["l"="53.25,25.297"]
"dipanjanS/convolutional_neural_networks_essentials" ["l"="52.608,25.319"]
"dipanjanS/deep_transfer_learning_nlp_dhs2019" ["l"="52.537,25.271"]
"dipanjanS/ml_model_deployment_example" ["l"="52.562,25.345"]
"dipanjanS/nlp_workshop_odsc19" ["l"="52.524,25.285"]
"TakeLab/spacy-udpipe" ["l"="52.462,25.259"]
"bjascob/LemmInflect" ["l"="52.741,24.478"]
"BramVanroy/spacy_conll" ["l"="52.608,25.472"]
"rock3125/enhanced-subject-verb-object-extraction" ["l"="-0.682,-42.053"]
"thavelick/summarize" ["l"="52.273,25.717"]
"hengluchang/deep-news-summarization" ["l"="58.502,29.165"]
"vgel/summarize.py" ["l"="52.303,25.674"]
"LazoCoder/Article-Summarizer" ["l"="52.27,25.663"]
"chen0040/keras-text-summarization" ["l"="58.432,29.149"]
"grangier/python-goose" ["l"="46.229,23.976"]
"salesforce/matchbox" ["l"="53.862,24.659"]
"mila-iqia/welcome_tutorials" ["l"="23.519,14.799"]
"salesforce/cove" ["l"="54.681,26.461"]
"NickShahML/tensorflow_with_latest_papers" ["l"="46.15,27.801"]
"AndriyMulyar/bert_document_classification" ["l"="53.241,28.681"]
"chriskonnertz/DeepLy" ["l"="52.912,26.525"]
"Baby-Markt/deepl-php-lib" ["l"="52.918,26.558"]
"DeepLcom/deepl-php" ["l"="52.901,26.458"]
"inception-project/inception" ["l"="52.26,25.303"]
"webanno/webanno" ["l"="52.279,25.188"]
"nlplab/brat" ["l"="53.435,27.41"]
"inception-project/inception-external-recommender" ["l"="52.233,25.281"]
"inception-project/pycaprio" ["l"="52.233,25.3"]
"amir-zeldes/gum" ["l"="58.013,29.065"]
"inception-project/external-recommender-spacy" ["l"="52.249,25.274"]
"chanzuckerberg/MedMentions" ["l"="-33.408,16.319"]
"dkpro/dkpro-core" ["l"="52.175,25.246"]
"ambuda-org/vidyut" ["l"="52.612,24.82"]
"cltk/sanskrit_text_gitasupersite" ["l"="52.629,24.816"]
"fanglanting/skip-gram-pytorch" ["l"="53.427,25.305"]
"Adoni/word2vec_pytorch" ["l"="53.458,25.312"]
"dthiagarajan/word2vec-pytorch" ["l"="53.447,25.347"]
"dalinvip/pytorch_word2vec" ["l"="53.493,25.317"]
"kefirski/pytorch_NEG_loss" ["l"="53.474,25.336"]
"blackredscarf/pytorch-SkipGram" ["l"="53.445,25.294"]
"ray1007/pytorch-word2vec" ["l"="53.442,25.324"]
"dedupeio/csvdedupe" ["l"="52.392,26.124"]
"datamade/data-making-guidelines" ["l"="52.43,26.212"]
"dataproofer/Dataproofer" ["l"="-5.195,-41.393"]
"neulab/langrank" ["l"="52.854,25.297"]
"aoncevay/multiview-langrep" ["l"="52.841,25.276"]
"antonisa/lang2vec" ["l"="52.891,25.187"]
"kawine/usif" ["l"="52.751,25.502"]
"rock3125/sentence2vec" ["l"="53.023,25.436"]
"smujjiga/SIF" ["l"="52.739,25.52"]
"MaartenGr/PolyFuzz" ["l"="52.49,25.706"]
"kevinlu1248/pyate" ["l"="52.442,25.568"]
"facebookresearch/SentAugment" ["l"="52.647,25.487"]
"Ezhil-Language-Foundation/Ezhil-Lang" ["l"="52.768,24.681"]
"Ezhil-Language-Foundation/open-tamil" ["l"="52.741,24.69"]
"AshokR/TamilNLP" ["l"="52.763,24.696"]
"nithyadurai87/tamil-sandhi-checker" ["l"="52.768,24.713"]
"rdamodharan/tamil-stemmer" ["l"="52.771,24.66"]
"vasurenganathan/tamil-tts" ["l"="52.789,24.695"]
"rprabhu/TamilDictionary" ["l"="52.788,24.677"]
"vanangamudi/tamil-lm2" ["l"="52.752,24.712"]
"srix/pytamil" ["l"="52.752,24.658"]
"thangamani-arun/Tamil-NLP-Resources" ["l"="52.793,24.654"]
"malaikannan/TamilSpellChecker" ["l"="52.744,24.722"]
"ddelange/pipgrip" ["l"="52.775,26.081"]
"dpressel/dliss-tutorial" ["l"="52.773,26.028"]
"UniversalDependencies/docs" ["l"="52.359,25.108"]
"UniversalDependencies/tools" ["l"="52.341,25.106"]
"udapi/udapi-python" ["l"="52.317,25.103"]
"ufal/udpipe" ["l"="52.396,25.149"]
"hfst/hfst" ["l"="26.163,-25.231"]
"Arborator/arborator-server" ["l"="52.35,25.068"]
"pyconll/pyconll" ["l"="52.337,25.087"]
"ElizaLo/Data-Science" ["l"="47.23,24.825"]
"ElizaLo/Machine-Learning" ["l"="47.284,24.843"]
"PacktPublishing/Advanced-Natural-Language-Processing-with-TensorFlow-2" ["l"="47.54,26.579"]
"anujvyas/Natural-Language-Processing-Projects" ["l"="47.152,24.811"]
"Storiesbyharshit/Natural-Language-Processing" ["l"="52.735,25.776"]
"wasiahmad/paraphrase_identification" ["l"="57.495,29.294"]
"practical-nlp/practical-nlp-code" ["l"="52.758,25.768"]
"emorynlp/character-mining" ["l"="52.45,24.825"]
"emorynlp/character-identification" ["l"="52.426,24.788"]
"emorynlp/emotion-detection" ["l"="52.668,24.782"]
"emorynlp/personality-detection" ["l"="52.429,24.723"]
"pranav-ust/BERT-keyphrase-extraction" ["l"="52.418,25.824"]
"kenchan0226/keyphrase-generation-rl" ["l"="52.398,25.864"]
"memray/seq2seq-keyphrase" ["l"="52.429,25.835"]
"memray/OpenNMT-kpg-release" ["l"="52.405,25.85"]
"DataTerminatorX/Keyword-BERT" ["l"="53.326,27.218"]
"supercoderhawk/deep-keyphrase" ["l"="52.429,25.861"]
"boudinfl/ake-datasets" ["l"="52.418,25.856"]
"tdozat/Parser-v1" ["l"="52.98,25.151"]
"zhangmeishan/BiaffineDParser" ["l"="52.946,25.081"]
"NLPInBLCU/BiaffineDependencyParsing" ["l"="52.921,25.052"]
"baidu/DDParser" ["l"="53.425,27.282"]
"bamtercelboo/PyTorch_Biaffine_Dependency_Parsing" ["l"="52.926,25.068"]
"elikip/bist-parser" ["l"="52.956,25.155"]
"juntaoy/biaffine-ner" ["l"="53.656,27.501"]
"chantera/biaffineparser" ["l"="52.938,25.138"]
"globalwordnet/cili" ["l"="52.161,25.482"]
"wordnet/wordnet" ["l"="52.138,25.468"]
"nltk/wordnet" ["l"="52.222,25.493"]
"jmccrae/wordnet-angular" ["l"="52.168,25.499"]
"ontolex/ontolex" ["l"="52.178,25.477"]
"robinjia/certified-word-sub" ["l"="52.761,25.285"]
"pmichel31415/teapot-nlp" ["l"="52.797,25.289"]
"nmrksic/counter-fitting" ["l"="52.864,25.319"]
"lushleaf/Structure-free-certified-NLP" ["l"="52.778,25.29"]
"aonotas/interpretable-adv" ["l"="52.786,25.191"]
"AnyiRao/WordAdver" ["l"="52.803,25.271"]
"google-deepmind/interval-bound-propagation" ["l"="38.853,-7.393"]
"cmhcbb/Seq2Sick" ["l"="52.783,25.268"]
"tlkh/text-emotion-classification" ["l"="52.936,24.816"]
"sarnthil/unify-emotion-datasets" ["l"="52.883,24.766"]
"JULIELab/EmoBank" ["l"="52.919,24.757"]
"lukasgarbas/nlp-text-emotion" ["l"="52.928,24.777"]
"nikicc/twitter-emotion-recognition" ["l"="52.986,24.766"]
"ryubidragonfire/Emotion" ["l"="52.963,24.789"]
"tpsatish95/emotion-detection-from-text" ["l"="52.968,24.808"]
"sinmaniphel/py_isear_dataset" ["l"="52.908,24.784"]
"HPI-Information-Systems/Metanome" ["l"="52.158,26.495"]
"HPI-Information-Systems/metanome-algorithms" ["l"="52.152,26.519"]
"HPI-Information-Systems/inclusion-dependency-algorithms" ["l"="52.137,26.51"]
"nabihach/FD_CFD_extraction" ["l"="52.14,26.532"]
"dsfsi/textaugment" ["l"="52.7,25.828"]
"pfnet-research/contextual_augmentation" ["l"="52.82,25.984"]
"1024er/cbert_aug" ["l"="52.844,25.972"]
"akkarimi/aeda_nlp" ["l"="52.647,25.893"]
"clovaai/ssmix" ["l"="52.657,25.878"]
"SanghunYun/UDA_pytorch" ["l"="51.338,30.34"]
"sharmaroshan/Fraud-Detection-in-Online-Transactions" ["l"="52.269,26.026"]
"sharmaroshan/Google-Job-Skills" ["l"="52.307,26.008"]
"sharmaroshan/Ads-Optimization" ["l"="52.235,26.035"]
"sharmaroshan/Percentage-of-Women-in-Bacelor-s-Degree" ["l"="52.324,26"]
"sharmaroshan/Avito-Demand-Prediction-Challenge" ["l"="52.249,26.042"]
"BlackHC/batchbald_redux" ["l"="51.967,25.915"]
"rpinsler/active-bayesian-coresets" ["l"="51.94,25.949"]
"MrGiovanni/Active-Learning" ["l"="51.934,25.97"]
"asiddhant/Active-NLP" ["l"="51.911,25.962"]
"CambridgeUniversityPress/FirstCourseNetworkScience" ["l"="52.097,24.879"]
"ericmjl/Network-Analysis-Made-Simple" ["l"="39.247,36.032"]
"PacktPublishing/Network-Science-with-Python-and-NetworkX-Quick-Start-Guide" ["l"="52.087,24.82"]
"chatox/networks-science-course" ["l"="52.049,24.858"]
"junipertcy/bipartiteSBM" ["l"="52.131,24.927"]
"martingerlach/hSBM_Topicmodel" ["l"="52.178,24.99"]
"GiulioRossetti/dynetx" ["l"="51.599,15.881"]
"yy/dviz-course" ["l"="52.055,24.828"]
"rtidatascience/connected-nx-tutorial" ["l"="52.076,24.785"]
"jcl132/personality-prediction-from-text" ["l"="52.391,24.645"]
"jkwieser/personality-prediction-from-text" ["l"="52.412,24.637"]
"SenticNet/personality-detection" ["l"="52.435,24.659"]
"yashsmehta/personality-prediction" ["l"="52.409,24.654"]
"vishalbhalla/Twitter-User-Personality-Prediction" ["l"="52.361,24.627"]
"hplt-project/sacremoses" ["l"="53.84,24.799"]
"google-research-datasets/paws" ["l"="57.488,29.327"]
"sgraaf/Replicate-Toronto-BookCorpus" ["l"="53.363,25.679"]
"mjpost/sacrebleu" ["l"="53.803,24.795"]
"vitutorial/VITutorial" ["l"="57.589,29.498"]
"atcbosselut/comet-commonsense" ["l"="55.763,25.925"]
"ciprian-chelba/1-billion-word-language-modeling-benchmark" ["l"="46.216,27.81"]
"LuminosoInsight/exquisite-corpus" ["l"="52.382,25.504"]
"textstat/textstat" ["l"="52.578,25.652"]
"gutfeeling/word_forms" ["l"="52.793,24.471"]
"cdimascio/py-readability-metrics" ["l"="52.505,25.589"]
"cisnlp/simalign" ["l"="53.845,24.831"]
"commonsense/conceptnet5" ["l"="52.907,25.52"]
"IlyaSemenov/wikipedia-word-frequency" ["l"="52.213,25.568"]
"wolfgarbe/SymSpell" ["l"="52.751,24.349"]
"proycon/pynlpl" ["l"="52.693,25.304"]
"dmort27/epitran" ["l"="37.287,2.257"]
"zhezhaoa/ngram2vec" ["l"="53.354,27.388"]
"siegfang/word2vec" ["l"="-4.032,8.476"]
"largelymfs/topical_word_embeddings" ["l"="53.25,26.301"]
"TalLinzen/rnn_agreement" ["l"="52.846,25.206"]
"vansky/neural-complexity" ["l"="52.803,25.174"]
"microsoft/OpenKP" ["l"="52.45,25.884"]
"ygorg/KPTimes" ["l"="52.443,25.872"]
"sunyilgdx/SIFRank" ["l"="52.422,25.873"]
"lzheng21/SpectralCF" ["l"="51.72,24.978"]
"yaushian/Tree-Transformer" ["l"="52.924,25.268"]
"dasguptar/treelstm.pytorch" ["l"="53,25.464"]
"harvardnlp/var-attn" ["l"="53.903,24.595"]
"qipeng/gcn-over-pruned-trees" ["l"="55.698,26.69"]
"Smerity/sha-rnn" ["l"="53.204,27.143"]
"nyu-mll/spinn" ["l"="52.951,25.291"]
"Cartus/AGGCN" ["l"="55.68,26.684"]
"memray/seq2seq-keyphrase-pytorch" ["l"="52.406,25.837"]
"jiacheng-ye/kg_one2set" ["l"="52.365,25.866"]
"avinsit123/keyphrase-gan" ["l"="52.381,25.87"]
"Chen-Wang-CUHK/KG-KE-KR-M" ["l"="52.371,25.886"]
"Chen-Wang-CUHK/ExHiRD-DKG" ["l"="52.359,25.878"]
"yuewang-cuhk/TAKG" ["l"="52.352,25.893"]
"vered1986/lexcomp" ["l"="52.902,25.255"]
"swabhs/scaffolding" ["l"="52.768,25.206"]
"dschnelldavis/parse-full-name" ["l"="52.42,26.27"]
"fnielsen/awesome-danish" ["l"="51.924,25.451"]
"alexandrainst/danlp" ["l"="51.953,25.458"]
"certainlyio/nordic_bert" ["l"="51.948,25.432"]
"centre-for-humanities-computing/DaCy" ["l"="51.992,25.467"]
"sarnikowski/danish_transformers" ["l"="51.916,25.438"]
"ebanalyse/senda" ["l"="51.933,25.472"]
"danspeech/danspeech" ["l"="51.909,25.461"]
"leondz/dagw_page" ["l"="51.938,25.443"]
"alvenirai/punctfix" ["l"="51.887,25.456"]
"Guscode/Sentida" ["l"="51.89,25.441"]
"sosedoff/goodreads" ["l"="51.68,24.928"]
"aonotas/adversarial_text" ["l"="52.795,25.092"]
"enricivi/adversarial_training_methods" ["l"="52.799,25.054"]
"agermanidis/pigeon" ["l"="52.467,25.723"]
"dennisbakhuis/pigeonXT" ["l"="52.418,25.752"]
"koaning/human-learn" ["l"="45.135,26.339"]
"koaning/embetter" ["l"="45.098,26.328"]
"koaning/bulk" ["l"="45.073,26.36"]
"koaning/scikit-lego" ["l"="45.251,26.324"]
"ipyannotate/ipyannotate" ["l"="52.392,25.758"]
"ideonate/jupyter-innotater" ["l"="52.371,25.75"]
"ymym3412/position-rank" ["l"="52.372,25.837"]
"yagays/embedrank" ["l"="52.314,25.854"]
"nyu-mll/PRPN-Analysis" ["l"="52.96,25.244"]
"eponvert/upparse" ["l"="52.925,25.214"]
"yikangshen/Ordered-Memory" ["l"="52.932,25.167"]
"ExplorerFreda/TreeEnc" ["l"="52.945,25.214"]
"jxhe/struct-learning-with-flow" ["l"="52.929,25.11"]
"davidswelt/dmvccm" ["l"="52.909,25.083"]
"ketranm/neuralHMM" ["l"="52.928,25.085"]
"shtechair/CRFAE-Dep-Parser" ["l"="52.908,25.043"]
"FilippoC/diffdp" ["l"="57.51,29.504"]
"mingdachen/disentangle-semantics-syntax" ["l"="57.602,29.32"]
"yoonkim/neural-qcfg" ["l"="52.9,25.212"]
"vene/sparsemap" ["l"="23.202,15.03"]
"radekosmulski/quickdraw" ["l"="49.391,28.518"]
"dice-group/LIMES" ["l"="-1.664,-41.977"]
"vintasoftware/deduplication-slides" ["l"="52.364,26.193"]
"dedupeio/address-matching" ["l"="52.351,26.176"]
"DongjunLee/transformer-tensorflow" ["l"="53.369,25.625"]
"lilianweng/transformer-tensorflow" ["l"="53.396,25.629"]
"flrngel/Self-Attentive-tensorflow" ["l"="53.452,28.778"]
"tobyyouup/conv_seq2seq" ["l"="46.397,27.944"]
"galsang/ABCNN" ["l"="53.252,27.539"]
"serrano-s/attn-tests" ["l"="52.831,25.146"]
"sarahwie/attention" ["l"="52.847,25.141"]
"EmilStenstrom/conllu" ["l"="52.354,25.127"]
"jbesomi/texthero" ["l"="52.727,25.752"]
"PrithivirajDamodaran/Styleformer" ["l"="57.5,29.389"]
"artefactory/NLPretext" ["l"="48.005,26.802"]
"pudo/normality" ["l"="-4.897,-41.214"]
"kootenpv/contractions" ["l"="52.842,24.274"]
"ematvey/tensorflow-seq2seq-tutorials" ["l"="55.803,28.528"]
"sindresorhus/word-list" ["l"="51.873,25.612"]
"sindresorhus/random-word" ["l"="51.826,25.601"]
"cbaziotis/ntua-slp-semeval2018" ["l"="52.897,24.735"]
"monologg/GoEmotions-pytorch" ["l"="52.898,24.694"]
"DhruvDh/emocontext" ["l"="52.87,24.741"]
"GreenBuildingRegistry/usaddress-scourgify" ["l"="52.439,26.165"]
"datamade/how-to" ["l"="52.453,26.22"]
"NathanDuran/Switchboard-Corpus" ["l"="52.218,24.844"]
"cgpotts/swda" ["l"="52.236,24.885"]
"NathanDuran/MRDA-Corpus" ["l"="52.201,24.809"]
"ilopezfr/gpt-2" ["l"="53.554,25.87"]
"CaptainValor/gpt-2-colab" ["l"="53.532,25.852"]
"HoloClean/holoclean" ["l"="52.202,26.406"]
"dbunibas/BART" ["l"="52.179,26.442"]
"BigDaMa/raha" ["l"="52.161,26.439"]
"BigDaMa/ExampleDrivenErrorDetection" ["l"="52.179,26.426"]
"HoloClean/HoloClean-Legacy-deprecated" ["l"="52.215,26.445"]
"cpitclaudel/dBoost" ["l"="52.195,26.442"]
"sis-ethz/Profiler-Public" ["l"="52.172,26.414"]
"jasonrig/address-net" ["l"="52.177,26.264"]
"GRAAL-Research/deepparse" ["l"="52.262,26.218"]
"matthaywardwebdesign/aus-search" ["l"="52.087,26.335"]
"hjian42/automatic-personality-prediction" ["l"="52.427,24.62"]
"nlp-psych/personality" ["l"="52.418,24.591"]
"Resh1992/User-profiling-in-social-media" ["l"="52.444,24.628"]
"ziyin-dl/word-embedding-dimensionality-selection" ["l"="52.983,25.194"]
"StillKeepTry/Transformer-PyTorch" ["l"="53.488,25.628"]
"DevilExileSu/transformer" ["l"="53.712,25.585"]
"AngusMonroe/Active-NER" ["l"="51.858,26.005"]
"SDuari/Keyword-Extraction-Datasets" ["l"="52.436,25.898"]
"xnliang98/uke_ccrank" ["l"="52.412,25.891"]
"LinhanZ/mderank" ["l"="52.406,25.88"]
"hd10-iupui/AttentionRank" ["l"="52.425,25.886"]
"asahi417/kex" ["l"="52.416,25.906"]
"mholtzscher/spacy_readability" ["l"="51.651,25.159"]
"DeNeutoy/spacy-vis" ["l"="51.672,25.173"]
"sorenlind/lemmy" ["l"="51.975,25.463"]
"danish-foundation-models/site" ["l"="52.028,25.467"]
"martincjespersen/DaAnonymization" ["l"="51.971,25.449"]
"mourga/affective-attention" ["l"="52.168,25.847"]
"mourga/transformer-uncertainty" ["l"="52.145,25.845"]
"mourga/variational-lstm" ["l"="52.155,25.858"]
"mourga/awd-lstm-lm" ["l"="52.155,25.841"]
"mourga/contrastive-active-learning" ["l"="52.14,25.859"]
"alexandra-chron/ntua-slp-wassa-iest2018" ["l"="52.172,25.836"]
"minimaxir/gpt-2-keyword-generation" ["l"="53.491,25.921"]
"minimaxir/ctrl-gce" ["l"="53.56,25.954"]
"minimaxir/reddit-gpt-2-cloud-run" ["l"="53.533,25.933"]
"snorkel-team/snorkel-extraction" ["l"="52.503,25.552"]
"HazyResearch/snorkel-superglue" ["l"="52.515,25.56"]
"HazyResearch/flyingsquid" ["l"="52.381,25.528"]
"HazyResearch/fonduer" ["l"="-34.063,16.523"]
"UKPLab/arxiv2018-xling-sentence-embeddings" ["l"="53.003,25.414"]
"thunlp/Character-enhanced-Sememe-Prediction" ["l"="52.908,24.901"]
"thunlp/sememe_prediction" ["l"="52.907,24.925"]
"zengjichuan/TMN" ["l"="53.324,26.341"]
"yuewang-cuhk/HashtagGeneration" ["l"="52.317,25.915"]
"zengjichuan/Topic_Disc" ["l"="53.311,26.317"]
"mpuig/spacy-lookup" ["l"="51.726,25.188"]
"ganeshjawahar/interpret_bert" ["l"="52.834,25.168"]
"AI-team-UoA/JedAI-WebApp" ["l"="52.212,26.262"]
"scify/JedAI-Spark" ["l"="52.218,26.247"]
"kootenpv/spacy_api" ["l"="52.544,25.469"]
"amore-upf/semeval2018-task4" ["l"="52.422,24.767"]
"emorynlp/semeval-2018-task4" ["l"="52.408,24.772"]
"IssamLaradji/sls" ["l"="52.528,25.122"]
"IssamLaradji/sps" ["l"="52.52,25.091"]
"chinwuDebug/RAKE_improve" ["l"="52.376,25.785"]
"mpk001/RAKE-keywordsExtraction" ["l"="52.391,25.782"]
"noobiegz/cw2vec" ["l"="53.333,25.031"]
"mattzheng/ChineseWiki" ["l"="53.381,25.007"]
"nocoolsandwich/iamQA" ["l"="53.413,24.974"]
"sharmaroshan/Graduate-Admissions-Analysis" ["l"="52.325,26.01"]
"sharmaroshan/Churn-Modelling-Dataset" ["l"="52.344,26.005"]
"GeneZC/ASGCN" ["l"="54.147,28.143"]
"TakeLab/podium" ["l"="52.429,25.2"]
"josipjukic/alanno" ["l"="52.408,25.188"]
"PetarMihalj/cpack" ["l"="52.436,25.173"]
"PetarMihalj/AGT" ["l"="52.423,25.173"]
"EdGENetworks/attention-networks-for-classification" ["l"="53.351,28.75"]
"minimaxir/twitter-cloud-run" ["l"="53.513,25.937"]
"kylemcdonald/gpt-2-poetry" ["l"="53.533,25.9"]
"vecto-ai/vecto" ["l"="53.14,25.167"]
"undertherain/vsmlib" ["l"="53.156,25.129"]
"yifan0sun/DynamicWord2Vec" ["l"="52.126,25.085"]
"valedica/twec" ["l"="52.131,25.067"]
"llhthinker/BDCI2017-MingLue" ["l"="58.039,22.749"]
"changwookjun/nlp-paper" ["l"="53.519,27.125"]
"NLPScott/bert-Chinese-classification-task" ["l"="53.568,27.285"]
"sanskrit-kosha/kosha" ["l"="52.615,24.889"]
"zentity-io/zentity" ["l"="52.229,26.261"]
"anoopkunchukuttan/crowd-indic-transliteration-data" ["l"="52.651,25.126"]
"omarsar/pytorch_neural_machine_translation_attention" ["l"="52.581,26.245"]
"omarsar/machine_learning_fundamentals" ["l"="52.608,26.222"]
"benathi/multisense-prob-fasttext" ["l"="53.175,25.183"]
"benathi/word2gm" ["l"="53.146,25.222"]
"NiuTrans/NASPapers" ["l"="52.642,26.068"]
"deborausujono/word2vecpy" ["l"="53.364,25.309"]
"n0obcoder/Skip-Gram-Model-PyTorch" ["l"="53.464,25.268"]
"whqwill/seq2seq-keyphrase-bert" ["l"="52.379,25.85"]
"fudannlp16/KeyPhrase-Extraction" ["l"="52.389,25.829"]
"agnusmaximus/Word2Bits" ["l"="53.037,25.317"]
"alexandres/lexvec" ["l"="53.038,25.36"]
"orenmel/context2vec" ["l"="53.087,25.294"]
"ColingPaper2018/DialogueAct-Tagger" ["l"="52.222,24.867"]
"NathanDuran/Probabilistic-RNN-DA-Classifier" ["l"="52.205,24.869"]
"havanagrawal/GoodreadsScraper" ["l"="51.869,25.02"]
"havanagrawal/c2c2017" ["l"="51.832,25.01"]
"andre-st/goodreads-toolbox" ["l"="51.848,24.979"]
"OmarEinea/GoodReadsScraper" ["l"="51.835,24.952"]
"thunlp/SE-WRL" ["l"="52.96,24.966"]
"Boreaso/ALFramework" ["l"="51.98,25.963"]
"shibing624/labelit" ["l"="51.981,25.994"]
"karlmoritz/bicvm" ["l"="53.247,25.214"]
"shyamupa/biling-survey" ["l"="53.23,25.232"]
"chu-data-lab/CleanML" ["l"="52.133,26.458"]
"zishansami102/First-Impression" ["l"="52.437,24.593"]
"yagguc/deep_impression" ["l"="52.435,24.563"]
"nikhgarg/EmbeddingDynamicStereotypes" ["l"="52.111,25.052"]
"williamleif/histwords" ["l"="52.158,25.078"]
"KnowledgeLab/GeometryofCulture" ["l"="52.073,25.034"]
"varunkumar-dev/TransformersDataAugmentation" ["l"="52.953,26.007"]
"dair-ai/deep_learning_notations" ["l"="52.715,25.926"]
"dair-ai/nlp_with_tensorflow" ["l"="52.71,25.947"]
"daqcri/DeepER" ["l"="52.259,26.339"]
"DistrictDataLabs/entity-resolution" ["l"="52.239,26.365"]
"ryanjgallagher/shifterator" ["l"="52.26,25.059"]
"dhammack/Word2VecExample" ["l"="53.217,25.308"]
"zseymour/phrase2vec" ["l"="53.18,25.324"]
"dgaddy/parser-analysis" ["l"="52.871,25.074"]
"cdg720/emnlp2016" ["l"="52.868,25.059"]
"LouChao98/neural_based_dmv" ["l"="52.901,25.056"]
"HIT-SCIR/SemEval-2016" ["l"="52.934,25.04"]
"MalteHB/-l-ctra" ["l"="51.953,25.443"]
"EuroEval/EuroEval" ["l"="51.982,25.442"]
"ebanalyse/NERDA" ["l"="51.954,25.481"]
"ITUnlp/daner" ["l"="51.917,25.477"]
"sarit/SARIT-corpus" ["l"="52.644,24.869"]
"ihdia/sanskrit-ocr" ["l"="52.637,24.777"]
"tylergneill/skrutable" ["l"="52.671,24.821"]
"sanskrit/data" ["l"="52.688,24.84"]
"wujastyk/GRETIL-mirror" ["l"="52.667,24.862"]
"SushantDave/Sandhi_Prakarana" ["l"="52.644,24.811"]
"mttk/rnn-classifier" ["l"="53.53,28.678"]
"coleridge72/quick_thoughts" ["l"="53.289,25.276"]
"RottenFruits/quick-thought-in-pytorch" ["l"="53.284,25.287"]
"Apress/practical-web-scraping-for-data-science" ["l"="53.016,25.186"]
"Apress/website-scraping-w-python" ["l"="53.036,25.141"]
"INFITTOfficial/awesome-tamil" ["l"="52.725,24.673"]
"narVidhai/tamil-nlp-catalog" ["l"="52.722,24.709"]
"abhinand5/tamil-llama" ["l"="52.735,24.767"]
"KaniyamFoundation/ProjectIdeas" ["l"="52.729,24.65"]
"goru001/nlp-for-tamil" ["l"="52.712,24.685"]
"Liebeck/spacy-sentiws" ["l"="52.005,25.322"]
"Liebeck/spacy-iwnlp" ["l"="51.981,25.308"]
"ines/spacy-js" ["l"="52.29,25.281"]
"kengz/spacy-nlp" ["l"="52.286,25.245"]
"ines/spacy-graphql" ["l"="52.206,25.278"]
"jgontrum/spacy-api-docker" ["l"="52.348,25.324"]
"bregydoc/gtranslate" ["l"="52.612,26.329"]
"mind1949/googletrans" ["l"="52.596,26.378"]
"mmautner/readability" ["l"="52.531,25.81"]
"wimmuskee/readability-score" ["l"="52.515,25.869"]
"andreasvc/readability" ["l"="52.517,25.847"]
"inejc/paragraph-vectors" ["l"="53.166,25.414"]
"jhlau/doc2vec" ["l"="53.054,25.465"]
"JonathanRaiman/PVDM" ["l"="53.145,25.358"]
"ibrahimsharaf/doc2vec" ["l"="53.14,25.415"]
"midas-research/keyphrase-extraction-as-sequence-labeling-data" ["l"="52.354,25.858"]
"Jayshen0/Unsupervised-Deep-Keyphrase-Generation" ["l"="52.342,25.91"]
"NKU-HLT/PromptRank" ["l"="52.334,25.931"]
"ltgoslo/norec" ["l"="51.865,25.388"]
"ltgoslo/norec_fine" ["l"="51.882,25.405"]
"noklesta/The-Oslo-Bergen-Tagger" ["l"="51.829,25.378"]
"web64/norwegian-nlp-resources" ["l"="51.897,25.397"]
"daqcri/NADEEF" ["l"="52.182,26.463"]
"explosion/spacymoji" ["l"="52.019,25.249"]
"itkach/mwscrape" ["l"="51.669,25.467"]
"megemini/-_megemini-" ["l"="53.306,25.009"]
"dimtxw/RJYY" ["l"="53.318,24.988"]
"ltgoslo/norne" ["l"="51.859,25.36"]
"ltgoslo/NorBERT" ["l"="51.89,25.378"]
"ljos/navnkjenner" ["l"="51.835,25.345"]
"emanlapponi/norlem-norwegian-lemmatizer" ["l"="51.832,25.36"]
"ohenrik/nb_dep_ud_sm" ["l"="51.866,25.332"]
"mchesterkadwell/intro-to-text-mining-with-python" ["l"="51.87,25.182"]
"mchesterkadwell/intro-to-text-mining-with-python-2020" ["l"="51.849,25.181"]
"mfaruqui/crosslingual-cca" ["l"="53.167,25.309"]
"gouwsmeister/bilbowa" ["l"="53.203,25.244"]
"williamleif/social-lstm" ["l"="52.134,25.013"]
"williamleif/redditnetwork" ["l"="52.114,25.013"]
"jacobeisenstein/probabilistic-lexicon-classification" ["l"="52.12,25.029"]
"williamleif/socialsent" ["l"="52.137,25.033"]
"ICML14MoMCompare/spectral-learn" ["l"="52.111,25"]
"UniversalDependencies/UD_English-EWT" ["l"="52.392,25.091"]
"thunlp/SCPapers" ["l"="52.953,24.92"]
"thunlp/OpenHowNet" ["l"="53.483,27.329"]
"thunlp/RCPapers" ["l"="54.714,26.541"]
"thunlp/Sememe-SC" ["l"="52.965,24.888"]
"thunlp/SE-WRL-SAT" ["l"="52.97,24.938"]
"thunlp/NREPapers" ["l"="55.677,26.659"]
"sahil711/AV" ["l"="52.48,25.201"]
"sahil711/DHS-19" ["l"="52.507,25.223"]
"oaqa/suim" ["l"="52.13,25.151"]
"EDS-APHP/UimaOnSpark" ["l"="52.121,25.135"]
"apache/uima-uimafit" ["l"="52.113,25.159"]
"quincyliang/nlp-data-augmentation" ["l"="53.583,27.145"]
"malllabiisc/DiPS" ["l"="57.531,29.357"]
"noisemix/noisemix" ["l"="52.824,26.039"]
"chatox/data-mining-course" ["l"="52.025,24.847"]
"WangJiuniu/adversarial_training" ["l"="52.806,25.015"]
"apache/uima-uimaj" ["l"="52.126,25.186"]
"apache/uima-addons" ["l"="52.106,25.174"]
"boknilev/nlp-analysis-methods" ["l"="52.826,25.188"]
"openeventdata/phoenix_pipeline" ["l"="52.535,25.423"]
"openeventdata/petrarch2" ["l"="52.524,25.408"]
"proycon/flat" ["l"="52.229,25.145"]
"proycon/folia" ["l"="52.208,25.119"]
"tdozat/Parser-v3" ["l"="52.96,25.025"]
"AntNLP/gnn-dep-parsing" ["l"="52.958,24.993"]
"wangxinyu0922/Second_Order_SDP" ["l"="52.945,25.009"]
"eelcovdw/Biaffine-Parser" ["l"="52.977,24.996"]
"LiangsLi/LSTM_Biaffine_Dependency_Parser_PyTorch" ["l"="52.922,25.022"]
"MimiOnuoha/Impossible-Maps" ["l"="51.885,25.094"]
"MimiOnuoha/Creative-Approaches" ["l"="51.899,25.105"]
"openeventdata/petrarch" ["l"="52.503,25.381"]
"chatopera/text-dependency-parser" ["l"="52.917,24.97"]
"justinlittman/fb-ad-archive-scraper" ["l"="53.804,26.128"]
"CybersecurityForDemocracy/FacebookApiPolAdsCollector" ["l"="53.822,26.143"]
"alexandra-chron/siatl" ["l"="52.238,25.804"]
"Garrafao/LSCDetection" ["l"="52.033,24.968"]
"akutuzov/semeval2020" ["l"="52.06,24.996"]
"Garrafao/TemporalReferencing" ["l"="52.015,24.948"]
"omarsar/deep_learning_notations" ["l"="52.588,26.261"]
"semantic-dependency-parsing/toolkit" ["l"="52.928,25.002"]
"KaiyuanGao/Kick_Algorithm" ["l"="52.592,26.175"]
"KaiyuanGao/Kick_AI_Interview" ["l"="52.598,26.138"]
"MimiOnuoha/Philosophy-of-Data" ["l"="51.859,25.073"]
"olgaliak/active-learning-detect" ["l"="51.768,25.86"]
"nducthang/Active-learning-for-object-detection" ["l"="51.818,25.852"]
"JappaB/Active_Learning_Object_Detection" ["l"="51.804,25.849"]
"openstates/name_tools" ["l"="52.406,26.217"]
"sharmaroshan/Car_Evaluation" ["l"="52.418,26.007"]
"JianGuanTHU/StoryEndGen" ["l"="53.628,26.383"]
"lancopku/Skeleton-Based-Generation-Model" ["l"="53.651,26.411"]
"alexandra-chron/lexical_xlm_relm" ["l"="52.204,25.819"]
"alexandra-chron/hierarchical-domain-adaptation" ["l"="52.199,25.832"]
"alexandra-chron/relm_unmt" ["l"="52.189,25.819"]
"t-systems-on-site-services-gmbh/german-wikipedia-text-corpus" ["l"="52.242,25.372"]
"t-systems-on-site-services-gmbh/german-elmo-model" ["l"="52.226,25.356"]
"Hunter-DDM/sentimental-story-ending" ["l"="53.654,26.436"]
"abisee/story-generation-eval" ["l"="53.673,26.425"]
"kenchan0226/dual_view_review_sum" ["l"="52.306,25.9"]
"rmunro/active_learning_class" ["l"="51.955,25.976"]
"akanyaani/Phrase_Extraction_Bi-LSTM" ["l"="53.423,25.92"]
"akanyaani/Illustrated_GPT2_With_Code" ["l"="53.414,25.931"]
"thamizha/thamizha-solthiruthi" ["l"="52.78,24.633"]
"virtualvinodh/avalokitam" ["l"="52.783,24.612"]
"amirmohammadkz/personality-detection" ["l"="52.393,24.594"]
"amirmohammadkz/personality_detection" ["l"="52.41,24.62"]
"zihaohe123/speak-turn-emb-dialog-act-clf" ["l"="52.189,24.785"]
"akjindal53244/dependency_parsing_tf" ["l"="52.963,25.103"]
"SmartLi8/cs224n-assignment" ["l"="52.979,25.069"]
"pmichel31415/translate" ["l"="52.796,25.255"]
"apache/uima-ruta" ["l"="52.093,25.136"]
"tk120404/tamilproverbs" ["l"="52.678,24.643"]
"tk120404/Aathichudi" ["l"="52.693,24.643"]
"boehm-e/spacy-raspberry" ["l"="51.645,25.178"]
"aghie/tree2labels" ["l"="52.968,25.049"]
"sunnypatel165/c2c2018" ["l"="51.811,25.007"]
"sharmaroshan/Stock-Market-Predictions" ["l"="52.298,26.024"]
"sharmaroshan/Social-Networks-Ads" ["l"="52.28,26.045"]
"codocedo/tane" ["l"="52.131,26.549"]
"zychen423/UHop" ["l"="52.892,25.231"]
"lanyunshi/Multi-hopQA" ["l"="52.877,25.209"]
"virtualvinodh/anunaadam" ["l"="52.797,24.594"]
"thamizha/tawiktionary-offline" ["l"="52.783,24.588"]
"YanWenqiang/HBLSTM-CRF" ["l"="52.239,24.853"]
"Franck-Dernoncourt/naacl2016" ["l"="52.249,24.864"]
"omarsar/nlp_pytorch_tensorflow_notebooks" ["l"="52.656,26.147"]
"vefthym/MinoanER" ["l"="52.236,26.246"]
"yatsukha/double-pendulum" ["l"="52.437,25.156"]
"Textualize/textual" ["l"="44.683,20.539"]
"Textualize/rich" ["l"="44.658,20.487"]
"coding-horror/basic-computer-games" ["l"="26.935,-26.416"]
"adambom/dictionary" ["l"="51.987,25.603"]
"psf/black" ["l"="44.74,20.577"]
"coqui-ai/TTS" ["l"="38.433,1.412"]
"Rapptz/discord.py" ["l"="-54.748,4.128"]
"3b1b/manim" ["l"="48.524,29.174"]
"tqdm/tqdm" ["l"="44.714,20.468"]
"dylanaraps/neofetch" ["l"="-13.9,-7.19"]
"elyase/awesome-gpt3" ["l"="53.196,25.924"]
"shreyashankar/gpt3-sandbox" ["l"="53.288,25.982"]
"humanloop/awesome-chatgpt" ["l"="43.921,0.835"]
"visenger/awesome-mlops" ["l"="48.011,26.296"]
"lucidrains/DALLE-pytorch" ["l"="46.018,31.525"]
"mrdbourke/machine-learning-roadmap" ["l"="47.892,26.115"]
"facebookresearch/metaseq" ["l"="38.79,-0.808"]
"MIND-Lab/OCTIS" ["l"="53.34,26.393"]
"bmabey/pyLDAvis" ["l"="52.754,25.655"]
"gregversteeg/corex_topic" ["l"="53.286,26.364"]
"huggingface/datasets" ["l"="53.027,26.003"]
"huggingface/diffusers" ["l"="45.89,31.459"]
"eugeneyan/applied-ml" ["l"="47.958,26.221"]
"gradio-app/gradio" ["l"="39.955,0.241"]
"jax-ml/jax" ["l"="50.809,29.353"]
"thunlp/OpenKE" ["l"="53.602,15.934"]
"commonsense/conceptnet" ["l"="53.121,25.429"]
"INK-USC/KagNet" ["l"="55.729,25.979"]
"facebookresearch/LAMA" ["l"="49.998,38.071"]
"scikit-learn/scikit-learn" ["l"="48.164,28.819"]
"openai/DALL-E" ["l"="45.989,31.448"]
"tatsu-lab/stanford_alpaca" ["l"="40,0.482"]
"google/trax" ["l"="53.153,25.852"]
"google/flax" ["l"="21.721,13.999"]
"google-deepmind/dm-haiku" ["l"="21.721,14.052"]
"lucidrains/reformer-pytorch" ["l"="48.824,33.956"]
"arogozhnikov/einops" ["l"="50.9,29.579"]
"horovod/horovod" ["l"="45.559,25.861"]
"openvenues/libpostal" ["l"="39.599,24.217"]
"datamade/census" ["l"="18.821,13.698"]
"scaleway/postal-address" ["l"="52.437,26.187"]
"SwoopSearch/pyaddress" ["l"="52.456,26.195"]
"rhiever/datacleaner" ["l"="43.755,24.146"]
"lucidrains/vit-pytorch" ["l"="50.683,29.606"]
"lucidrains/denoising-diffusion-pytorch" ["l"="45.812,31.565"]
"google-research/vision_transformer" ["l"="50.739,29.626"]
"microsoft/LoRA" ["l"="39.84,0.5"]
"microsoft/Swin-Transformer" ["l"="50.669,29.705"]
"hojonathanho/diffusion" ["l"="45.784,31.551"]
"AntixK/PyTorch-VAE" ["l"="45.877,31.629"]
"BradyFU/Awesome-Multimodal-Large-Language-Models" ["l"="47.423,29.9"]
"facebookresearch/DiT" ["l"="45.849,31.545"]
"graykode/nlp-roadmap" ["l"="52.816,25.822"]
"graykode/distribution-is-all-you-need" ["l"="50.669,28.162"]
"instillai/deep-learning-roadmap" ["l"="50.771,28.508"]
"songyingxin/NLPer-Interview" ["l"="53.532,27.107"]
"zhpmatrix/nlp-competitions-list-review" ["l"="53.491,27.178"]
"jeffreybreen/twitter-sentiment-analysis-tutorial-201107" ["l"="53.061,25.251"]
"mjhea0/twitter-sentiment-analysis" ["l"="53.095,25.183"]
"abromberg/sentiment_analysis" ["l"="53.088,25.204"]
"allenai/pawls" ["l"="52.399,25.727"]
"tvst/st-annotated-text" ["l"="42.459,-2.786"]
"okld/streamlit-elements" ["l"="42.467,-2.839"]
"PrithivirajDamodaran/Gramformer" ["l"="57.409,29.377"]
"davidberenstein1957/concise-concepts" ["l"="52.352,25.596"]
"numpy/numpy" ["l"="43.504,23.505"]
"google-research/t5x" ["l"="37.139,-0.072"]
"google-research/multilingual-t5" ["l"="53.272,27.002"]
"NVIDIA/Megatron-LM" ["l"="38.862,-0.695"]
"EleutherAI/gpt-neox" ["l"="38.738,-0.832"]
"CarperAI/trlx" ["l"="37.133,-0.204"]
"lucidrains/deep-daze" ["l"="46.079,31.527"]
"axa-group/Parsr" ["l"="52.609,25.809"]
"Layout-Parser/layout-parser" ["l"="46.286,6.131"]
"neuml/txtai" ["l"="40.746,0.567"]
"mindee/doctr" ["l"="46.249,6.107"]
"online-ml/river" ["l"="45.389,26.108"]
"pdfminer/pdfminer.six" ["l"="46.154,4.794"]
"kermitt2/grobid" ["l"="-34.111,16.29"]
"Unstructured-IO/unstructured" ["l"="40.796,0.527"]
"dair-ai/ml-nlp-paper-discussions" ["l"="52.722,25.856"]
"dair-ai/nlp_newsletter" ["l"="52.725,25.838"]
"dair-ai/nlp_fundamentals" ["l"="52.732,25.875"]
"dair-ai/keep-learning-ml" ["l"="52.717,25.888"]
"neubig/nmt-tips" ["l"="53.739,24.772"]
"neubig/kytea" ["l"="5.648,-40.849"]
"clab/dynet_tutorial_examples" ["l"="53.064,25.358"]
"ymym3412/acl-papers" ["l"="5.895,-41.029"]
"saffsd/langid.py" ["l"="53.719,24.682"]
"Kyubyong/wordvectors" ["l"="53.05,25.568"]
"pytorch/captum" ["l"="50.955,29.638"]
"automoto/big-five-data" ["l"="52.393,24.621"]
"arrow-py/arrow" ["l"="44.891,20.704"]
"ydataai/ydata-profiling" ["l"="45.365,26.075"]
"modin-project/modin" ["l"="45.322,26.054"]
"spotify/luigi" ["l"="44.514,20.588"]
"joke2k/faker" ["l"="44.687,20.582"]
"more-itertools/more-itertools" ["l"="45.134,20.911"]
"rapidfuzz/rapidfuzz-cpp" ["l"="52.452,26.007"]
"unionai-oss/pandera" ["l"="45.28,26.057"]
"nalepae/pandarallel" ["l"="45.359,26.105"]
"skrub-data/skrub" ["l"="45.212,26.327"]
"guillaume-be/rust-bert" ["l"="-8.439,-4.363"]
"huggingface/candle" ["l"="-8.472,-4.459"]
"microsoft/Semi-supervised-learning" ["l"="51.399,30.373"]
"AminParvaneh/alpha_mix_active_learning" ["l"="51.876,25.875"]
"yassouali/awesome-semi-supervised-learning" ["l"="51.391,30.349"]
"kanchitank/Text-Emotion-Analysis" ["l"="52.956,24.746"]
"Chulong-Li/Real-time-Sentiment-Tracking-on-Twitter-for-Brand-Improvement-and-Trend-Recognition" ["l"="53.047,25.113"]
"agrawal-rohit/tweet-sense" ["l"="53.058,25.042"]
"geekquad/Fraud-Detection" ["l"="53.064,25.064"]
"the-javapocalypse/Twitter-Sentiment-Analysis" ["l"="53.002,25.231"]
"SouravG/Housing-price-prediction-using-Regularised-linear-regression" ["l"="53.075,25.072"]
"MelihGulum/Comprehensive-Data-Science-AI-Project-Portfolio" ["l"="53.078,25.06"]
"HiteshAgarwal1/Personality-Prediction-Through-CV" ["l"="52.596,25.247"]
"philkam/AI_Personality-Prediction-System-Through-CV-Analysis" ["l"="52.575,25.217"]
"Bharath-K3/Next-Word-Prediction-with-NLP-and-Deep-Learning" ["l"="52.627,25.286"]
"nidhaloff/deep-translator" ["l"="52.812,26.186"]
"UlionTse/translators" ["l"="-55.176,-14.242"]
"ssut/py-googletrans" ["l"="52.858,26.109"]
"argosopentech/argos-translate" ["l"="52.912,26.167"]
"terryyin/translate-python" ["l"="52.858,26.227"]
"DeepLcom/deepl-python" ["l"="52.871,26.343"]
"xhluca/dl-translate" ["l"="40.55,2.995"]
"nidhaloff/Translator-pp" ["l"="52.788,26.218"]
"UKPLab/EasyNMT" ["l"="52.569,25.727"]
"ShadowMusk/QingLong-framework" ["l"="-53.011,-11.879"]
"zhensherlock/watermark-js-plus" ["l"="-53.01,-11.87"]
"LujiaJin/Basis-Prediction-Networks-PyTorch" ["l"="-53.029,-11.866"]
"ordylan/OrdylanNote" ["l"="-53,-11.868"]
"zhensherlock/intellij-platform-git-stats-plugin" ["l"="-53.001,-11.874"]
"ServiceNow/azimuth" ["l"="51.992,25.813"]
"nlp-with-transformers/notebooks" ["l"="47.75,26.429"]
"PacktPublishing/Transformers-for-Natural-Language-Processing" ["l"="47.58,26.54"]
"blueprints-for-text-analytics-python/blueprints-text" ["l"="52.671,25.845"]
"totalgood/nlpia" ["l"="48.321,27.913"]
"GoogleCloudPlatform/practical-ml-vision-book" ["l"="47.806,26.67"]
"GoogleCloudPlatform/ml-design-patterns" ["l"="48.042,26.422"]
"timoschick/pet" ["l"="50.044,38.101"]
"google-research/language" ["l"="54.474,25.54"]
"NiuTrans/CNSurvey" ["l"="52.637,26.003"]
"MLNLP-World/Top-AI-Conferences-Paper-with-Code" ["l"="53.468,27.102"]
"km1994/nlp_paper_study" ["l"="53.515,27.092"]
"THUNLP-MT/THUMT" ["l"="53.75,24.74"]
"CLUEbenchmark/CLUEDatasetSearch" ["l"="53.391,27.17"]
"roomylee/nlp-papers-with-arxiv" ["l"="-5.229,-23.089"]
"joeynmt/joeynmt" ["l"="53.859,24.789"]
"facebookresearch/KILT" ["l"="54.501,25.555"]
"salesforce/GeDi" ["l"="53.424,26.016"]
"THUNLP-MT/TG-Reading-List" ["l"="57.657,29.344"]
"XiangLi1999/Diffusion-LM" ["l"="45.967,30.736"]
"Maluuba/nlg-eval" ["l"="58.307,29.128"]
"yangkevin2/naacl-2021-fudge-controlled-generation" ["l"="53.431,26.046"]
"rikdz/GraphWriter" ["l"="57.631,29.191"]
"yxuansu/SimCTG" ["l"="53.445,26.109"]
"ChunyuanLI/Optimus" ["l"="57.646,29.323"]
"XiangLi1999/PrefixTuning" ["l"="50.086,38.092"]
"Tiiiger/bert_score" ["l"="58.292,29.049"]
"facebookresearch/unlikelihood_training" ["l"="53.41,26.083"]
"dialect-app/dialect" ["l"="-16.279,-1.858"]
"Helsinki-NLP/Opus-MT" ["l"="53.838,24.879"]
"thedaviddelta/lingva-translate" ["l"="-53.403,11.348"]
"argosopentech/argos-train" ["l"="53.735,25.088"]
"OpenNMT/CTranslate2" ["l"="40.597,3.281"]
"chinesehuazhou/python-weekly" ["l"="-44.054,12.015"]
"Danily07/Translumo" ["l"="-36.307,20.042"]
"niedev/RTranslator" ["l"="45.613,-1.915"]
"SYSTRAN/faster-whisper" ["l"="40.559,3.249"]
"alphacep/vosk-api" ["l"="35.425,2.443"]
"dair-ai/pytorch_notebooks" ["l"="52.746,25.886"]
"omarsar/pytorch_notebooks" ["l"="52.702,26.051"]
"dair-ai/nlp_overview" ["l"="52.732,25.911"]
"dair-ai/notebooks" ["l"="52.8,25.951"]
"dair-ai/awesome-ML-projects-guide" ["l"="52.714,25.91"]
"dair-ai/data_science_writing_primer" ["l"="52.741,25.942"]
"vahidk/EffectivePyTorch" ["l"="23.619,15.003"]
"rasbt/stat453-deep-learning-ss20" ["l"="23.568,14.971"]
"sudhof/politeness" ["l"="52.249,24.975"]
"myeomans/politeness" ["l"="39.751,33.844"]
"tag-and-generate/politeness-dataset" ["l"="52.212,24.93"]
"CornellNLP/ConvoKit" ["l"="52.287,25.019"]
"tslmy/politeness-estimator" ["l"="52.236,24.954"]
"hila-chefer/Transformer-Explainability" ["l"="50.877,29.662"]
"g8a9/ferret" ["l"="44.796,25.431"]
"eugeneyan/ml-surveys" ["l"="48.028,26.326"]
"xcfcode/Summarization-Papers" ["l"="58.368,29.02"]
"dair-ai/GNNs-Recipe" ["l"="47.849,26.433"]
"hans/glove.py" ["l"="53.287,25.459"]
"GradySimon/tensorflow-glove" ["l"="53.299,25.487"]
"IndicoDataSolutions/Passage" ["l"="44.876,27.672"]
"idio/wiki2vec" ["l"="-0.445,-42.003"]
"JonathanRaiman/glove" ["l"="53.269,25.484"]
"alexander-rakhlin/CNN-for-Sentence-Classification-in-Keras" ["l"="46.287,27.684"]
"stanfordnlp/treelstm" ["l"="46.148,27.771"]
"tmplt/fuzzywuzzy" ["l"="52.413,26.033"]
"OpenCageData/address-formatting" ["l"="52.393,26.288"]
"fragaria/address-formatter" ["l"="52.376,26.337"]
"johnlonganecker/libpostal-rest" ["l"="52.372,26.297"]
"openvenues/php-postal" ["l"="52.396,26.354"]
"predicthq/address-formatter-php" ["l"="52.402,26.323"]
"pelias/pelias" ["l"="39.547,24.211"]
"kartotherian/kartotherian" ["l"="39.323,24.325"]
"anoopkunchukuttan/indic_nlp_resources" ["l"="52.664,25.079"]
"dongrixinyu/chinese_keyphrase_extractor" ["l"="53.43,27.247"]
"JackHCC/Chinese-Keyphrase-Extraction" ["l"="52.398,25.916"]
"bigzhao/Keyword_Extraction" ["l"="53.493,27.27"]
"zzy99/epidemic-sentence-pair" ["l"="53.476,27.272"]
"luozhouyang/AutoPhraseX" ["l"="55.352,26.604"]
"bojone/word-discovery" ["l"="53.364,27.403"]
"Xirider/finetune-gpt2xl" ["l"="53.808,25.92"]
"minimaxir/download-tweets-ai-text-gen" ["l"="53.496,25.968"]
"EricFillion/happy-transformer" ["l"="52.738,24.397"]
"robustness-gym/robustness-gym" ["l"="52.643,25.571"]
"microsoft/fastformers" ["l"="52.612,25.524"]
"robustness-gym/summvis" ["l"="58.174,28.908"]
"neulab/InterpretEval" ["l"="58.394,28.802"]
"timoschick/dino" ["l"="52.612,25.596"]
"salesforce/progen" ["l"="24.347,13.486"]
"thunlp/OpenBackdoor" ["l"="38.427,-7.765"]
"LinyangLee/BERT-Attack" ["l"="52.749,25.35"]
"facebookresearch/text-adversarial-attack" ["l"="52.715,25.323"]
"fra31/auto-attack" ["l"="39.007,-7.525"]
"neulab/RIPPLe" ["l"="38.366,-7.815"]
"thunlp/HiddenKiller" ["l"="38.399,-7.793"]
"dongjun-Lee/text-summarization-tensorflow" ["l"="58.441,29.133"]
"pltrdy/rouge" ["l"="58.336,29.098"]
"letiantian/TextRank4ZH" ["l"="53.288,27.293"]
"nlpyang/PreSumm" ["l"="58.38,29.071"]
"LaxmiChaudhary/Amzon-Product-Recommendation" ["l"="52.617,25.256"]
"jsvine/markovify" ["l"="53.404,25.739"]
"Deimos/SubredditSimulator" ["l"="53.478,25.72"]
"riccardoscalco/Pykov" ["l"="53.509,25.711"]
"bear/python-twitter" ["l"="39.076,33.98"]
"karpathy/char-rnn" ["l"="47.953,28.898"]
"dariusk/corpora" ["l"="34.299,23.988"]
"jmschrei/pomegranate" ["l"="45.637,26.21"]
"codebox/markov-text" ["l"="53.509,25.744"]
"hmmlearn/hmmlearn" ["l"="45.667,26.233"]
"cordx56/tweet-generator" ["l"="7.319,-40.553"]
"tweepy/tweepy" ["l"="39.121,33.957"]
"galaxykate/tracery" ["l"="34.175,23.936"]
"robbiebarrat/rapping-neural-network" ["l"="45.921,29.646"]
"zelandiya/RAKE-tutorial" ["l"="52.433,25.787"]
"fabianvf/python-rake" ["l"="52.449,25.768"]
"zelandiya/keyword-extraction-datasets" ["l"="52.403,25.808"]
"zelandiya/maui" ["l"="52.384,25.801"]
"laserwave/keywords_extraction_rake" ["l"="52.403,25.789"]
"explosion/spacy-llm" ["l"="41.054,1.177"]
"tecoholic/ner-annotator" ["l"="52.425,25.596"]
"bhattbhavesh91/gpt-3-simple-tutorial" ["l"="53.043,26.045"]
"surya-veer/movement-tracking" ["l"="-0.036,-21.053"]
"bkane1/gpt3-instruct-sandbox" ["l"="53.33,26.074"]
"mikhail-bot/awesome-gpt3" ["l"="53.379,26.027"]
"WebDevSimplified/Zoom-Clone-With-WebRTC" ["l"="-53.143,-9.89"]
"mkualquiera/AIDungeonAPI" ["l"="53.698,25.878"]
"SoptikHa2/aidungeon2-cli" ["l"="53.705,25.865"]
"R1j1t/contextualSpellCheck" ["l"="52.779,24.346"]
"HLasse/TextDescriptives" ["l"="52.229,25.536"]
"fbdesignpro/sweetviz" ["l"="45.298,26.186"]
"alfiopuglisi/guietta" ["l"="45.86,23.863"]
"sfu-db/dataprep" ["l"="45.237,26.208"]
"akanyaani/ranknet-tensorflow2.0" ["l"="53.428,25.934"]
"prakhar21/TextAugmentation-GPT2" ["l"="53.26,25.958"]
"djz233/D-DGCN" ["l"="52.413,24.696"]
"sdispater/mixology" ["l"="52.759,26.137"]
"FFY00/python-resolver" ["l"="52.768,26.115"]
"maraoz/gpt-scrolls" ["l"="53.484,26.017"]
"swyxio/gpt3-list" ["l"="53.4,26.049"]
"sevazhidkov/prompts-ai" ["l"="43.921,0.438"]
"minimaxir/gpt-3-client" ["l"="53.455,26.005"]
"semiosis/prompts" ["l"="53.51,26.026"]
"zelandiya/maui-standalone" ["l"="52.342,25.813"]
"HIIT/maui-2" ["l"="52.34,25.826"]
"Trusted-AI/adversarial-robustness-toolbox" ["l"="38.945,-7.431"]
"bethgelab/foolbox" ["l"="38.987,-7.446"]
"llm-attacks/llm-attacks" ["l"="38.126,-7.398"]
"CCChenhao997/DualGCN-ABSA" ["l"="54.1,28.117"]
"davidmcclure/textplot" ["l"="51.852,25.151"]
"tedunderwood/paceofchange" ["l"="51.902,25.158"]
"thu-coai/UNION" ["l"="53.591,26.313"]
"thu-coai/OpenMEVA" ["l"="53.569,26.294"]
"PlusLabNLP/Plot-guided-Coherence-Evaluation" ["l"="53.613,26.329"]
"thu-coai/CommonsenseStoryGen" ["l"="53.583,26.329"]
"GRAAL-Research/deepparse-address-data" ["l"="52.223,26.217"]
"words/an-array-of-english-words" ["l"="51.848,25.626"]
"adjidieng/ETM" ["l"="53.287,26.383"]
"bab2min/tomotopy" ["l"="53.276,26.402"]
"zll17/Neural_Topic_Models" ["l"="53.323,26.378"]
"akashgit/autoencoding_vi_for_topic_models" ["l"="53.303,26.353"]
"Machine-Learning-Tokyo/AI_Curriculum" ["l"="48.125,26.364"]
"Morizeyao/Decoders-Chinese-TF2.0" ["l"="53.337,27.286"]
"rish-16/sight" ["l"="53.464,25.96"]
"opensanctions/fingerprints" ["l"="-4.948,-41.23"]
"rdoeffinger/Dictionary" ["l"="51.581,25.473"]
"namndev/QDict" ["l"="51.588,25.493"]
"aarddict/android" ["l"="51.598,25.52"]
"TachibanaGeneralLaboratories/download-navi" ["l"="-52.57,9.329"]
"daimajia/little-bear-dictionary" ["l"="51.563,25.511"]
"SufficientlySecure/document-viewer" ["l"="-52.86,9.309"]
"renatoviolin/Question-Answering-Albert-Electra" ["l"="52.67,25.397"]
"renatoviolin/Semantic-Search" ["l"="52.69,25.381"]
"renatoviolin/Bart_T5-summarization" ["l"="52.668,25.373"]
"renatoviolin/Multiple-Choice-Question-Generation-T5-and-Text2Text" ["l"="52.688,25.354"]
"renatoviolin/T5-paraphrase-generation" ["l"="57.447,29.396"]
"labteral/ernie" ["l"="52.66,25.333"]
"craffel/dl3d-seminar" ["l"="50.411,32.544"]
"Layout-Parser/layout-model-training" ["l"="47.445,6.395"]
"doc-analysis/DocBank" ["l"="46.363,6.095"]
"allenai/mmda" ["l"="-33.999,16.403"]
"BobLd/DocumentLayoutAnalysis" ["l"="47.389,6.479"]
"jpWang/LiLT" ["l"="46.33,6.091"]
"samueldobbie/markup" ["l"="52.31,25.783"]
"allenai/vila" ["l"="-34.018,16.413"]
"SKRohit/Generating_Text_Summary_With_GPT2" ["l"="53.914,25.925"]
"VincentK1991/BERT_summarization_1" ["l"="53.973,25.935"]
"tanyuqian/progressive-generation" ["l"="53.583,26.283"]
"thu-coai/HINT" ["l"="53.566,26.261"]
"hrashkin/plotmachines" ["l"="53.559,26.278"]
"WHUIR/PPVAE" ["l"="57.614,29.242"]
"kw-service/klas-helper-userscript" ["l"="53.905,26.086"]
"kw-service/klas-helper-extension" ["l"="53.931,26.102"]
"kw-service/kw-notice-v1" ["l"="53.872,26.077"]
"SoYoungCho/Today-I-Learned" ["l"="53.93,26.084"]
"kw-service/kw-notice-android-v2" ["l"="53.851,26.054"]
"dipanjanS/adversarial_learning_tfug2020" ["l"="52.59,25.282"]
"mfaruqui/retrofitting" ["l"="53.051,25.3"]
"mfaruqui/non-distributional" ["l"="53.102,25.262"]
"iunderstand/SWE" ["l"="53.108,25.273"]
"mfaruqui/eval-word-vectors" ["l"="53.122,25.222"]
"wlin12/wang2vec" ["l"="53.115,25.242"]
"yiyang-gt/feat2vec" ["l"="53.081,25.26"]
"kudkudak/word-embeddings-benchmarks" ["l"="53.092,25.24"]
"ytsvetko/qvec" ["l"="53.092,25.278"]
"awslabs/mlm-scoring" ["l"="52.626,24.993"]
"simonepri/lm-scorer" ["l"="52.564,24.939"]
"Hsuan-Tung/universal_attack_natural_trigger" ["l"="52.819,25.321"]
"ucinlp/autoprompt" ["l"="50.032,38.065"]
"Eric-Wallace/interpretability-tutorial-emnlp2020" ["l"="23.422,15.267"]
"decile-team/distil" ["l"="51.869,25.845"]
"cjshui/WAAL" ["l"="51.902,25.906"]
"forest-snow/alps" ["l"="51.872,25.928"]
"virajprabhu/CLUE" ["l"="-54.643,-12.187"]
"klb3713/sentence2vec" ["l"="53.121,25.353"]
"largelymfs/paragraph2vec" ["l"="53.175,25.345"]
"airalcorn2/Deep-Semantic-Similarity-Model" ["l"="57.95,23.308"]
"ryankiros/visual-semantic-embedding" ["l"="58.327,8.321"]
"mesnilgr/iclr15" ["l"="53.223,25.271"]
"jiweil/Neural-Dialogue-Generation" ["l"="56.592,29.076"]
"attardi/deepnl" ["l"="53.058,25.337"]
"hassyGo/paragraph-vector" ["l"="53.152,25.315"]
"codekansas/keras-language-modeling" ["l"="55.861,28.465"]
"zhuchen03/FreeLB" ["l"="52.741,25.318"]
"AI-secure/InfoBERT" ["l"="52.731,25.336"]
"seominseok0429/Learning-Loss-for-Active-Learning-Pytorch" ["l"="51.846,25.884"]
"NVlabs/AL-MDN" ["l"="51.853,25.858"]
"euphoria0-0/Learning-Loss-for-Active-Learning" ["l"="51.863,25.872"]
"johnsk95/PT4AL" ["l"="51.855,25.896"]
"PrateekMunjal/TorchAL" ["l"="51.865,25.884"]
"sharat29ag/CDAL" ["l"="51.846,25.868"]
"engarde-dev/engarde" ["l"="43.768,24.089"]
"walkr/oi" ["l"="45.362,20.442"]
"LeapBeyond/scrubadub" ["l"="43.772,24.196"]
"wireservice/agate" ["l"="-5.195,-41.314"]
"indic-dict/stardict-sanskrit" ["l"="52.606,24.848"]
"indic-dict/stardict-pali" ["l"="52.585,24.829"]
"xgeric/UCPhrase-exp" ["l"="54.211,27.221"]
"hinesboy/transformer-simple" ["l"="53.662,25.584"]
"sdelgadoc/download-tweets-ai-text-gen-plus" ["l"="53.539,25.986"]
"mesnilgr/nbsvm" ["l"="53.261,25.245"]
"sidaw/nbsvm" ["l"="53.295,25.219"]
"lrei/nbsvm" ["l"="53.311,25.226"]
"vinhkhuc/kaggle-sentiment-popcorn" ["l"="53.301,25.197"]
"omwn/omw-data" ["l"="52.243,25.487"]
"VBPXKSMI/Open-CYOAI-Project" ["l"="53.739,25.832"]
"AIDungeonWiXAnon/AID2-Installer-Project" ["l"="53.791,25.84"]
"AetherDevSecOps/aid_adventure_vulnerability_report" ["l"="53.805,25.823"]
"valahraban/AID-World-Info-research-sheet" ["l"="53.933,25.813"]
"finetunej/gpt-neo_dungeon" ["l"="53.835,25.868"]
"doccano/doccano-transformer" ["l"="52.361,25.62"]
"KennethEnevoldsen/augmenty" ["l"="52.325,25.557"]
"LouisTsiattalou/tfidf_matcher" ["l"="52.281,25.794"]
"affjljoo3581/Expanda" ["l"="53.706,25.99"]
"affjljoo3581/canrevan" ["l"="53.698,25.97"]
"ds-wook/predict-delinquency" ["l"="53.722,25.982"]
"ds-wook/BOJ" ["l"="53.719,25.974"]
"ds-wook/ml-project" ["l"="53.708,25.98"]
"affjljoo3581/Differentiable-RandAugment" ["l"="53.734,26.007"]
"affjljoo3581/Job-Recommend-Competition" ["l"="53.756,26.01"]
"affjljoo3581/Samsung-AI-Challenge-for-Scientific-Discovery" ["l"="53.744,25.991"]
"ds-wook/ds-wook" ["l"="53.733,25.988"]
"ds-wook/final-industry-university" ["l"="53.722,25.967"]
"rockingdingo/deepnlp" ["l"="53.39,27.446"]
"jannson/yaha" ["l"="53.34,27.588"]
"neopunisher/Open-Text-Summarizer" ["l"="52.249,25.718"]
"linkedin/gdmix" ["l"="52.559,25.537"]
"facebookresearch/TransCoder" ["l"="36.033,-0.233"]
"uber/manifold" ["l"="45.291,26.116"]
"tensorflow/ranking" ["l"="58.143,23.462"]
"ULTR-Community/ULTRA" ["l"="54.635,25.823"]
"nlp-uoregon/trankit" ["l"="52.578,25.598"]
"AI4Bharat/indicTrans" ["l"="52.688,25.037"]
"prajdabre/yanmtt" ["l"="52.715,25.032"]
"Open-Speech-EkStep/vakyansh-models" ["l"="52.687,25.002"]
"AI4Bharat/IndicBERT" ["l"="52.725,25.013"]
"AI4Bharat/IndicNLP-Transliteration" ["l"="52.668,25.023"]
"taranjeet/hindi-tokenizer" ["l"="52.637,25.027"]
"libindic/Transliteration" ["l"="52.636,25.05"]
"thammegowda/mtdata" ["l"="53.896,24.834"]
"cpllab/syntactic-generalization" ["l"="52.771,25.065"]
"alexwarstadt/data_generation" ["l"="52.754,25.067"]
"autonlab/weasel" ["l"="52.318,25.492"]
"microsoft/ASTRA" ["l"="37.221,-2.776"]
"HazyResearch/epoxy" ["l"="52.342,25.497"]
"JieyuZ2/wrench" ["l"="52.276,25.458"]
"microsoft/fastseq" ["l"="48.903,33.97"]
"huggingface/nn_pruning" ["l"="53.169,27.808"]
"Tencent/TurboTransformers" ["l"="53.292,27.093"]
"laiguokun/Funnel-Transformer" ["l"="48.851,34.002"]
"princeton-nlp/DensePhrases" ["l"="54.506,25.572"]
"ELS-RD/transformer-deploy" ["l"="38.805,-0.598"]
"cliang1453/BOND" ["l"="53.637,27.633"]
"zhihu/cuBERT" ["l"="53.325,27.081"]
"studio-ousia/bpr" ["l"="54.533,25.579"]
"gtolomei/big-data-computing" ["l"="51.894,26.065"]
"erodola/DLAI-s2-2022" ["l"="51.879,26.082"]
"erodola/DLAI-s2-2021" ["l"="51.919,26.049"]
"erodola/DLAI-s2-2020" ["l"="51.96,26"]
"andrea-gasparini/sapienza-beamer-template" ["l"="51.855,26.1"]
"bardhprenkaj/ML_labs" ["l"="51.863,26.074"]
"andrea-gasparini/cloud-computing-exam-simulator" ["l"="51.887,26.096"]
"nxphi47/tree_transformer" ["l"="37.574,-1.841"]
"bwang514/PerformanceNet" ["l"="54.86,26.603"]
"zysszy/TreeGen" ["l"="37.556,-1.801"]
"facebookresearch/code-prediction-transformer" ["l"="37.553,-1.835"]
"yahah100/text_summarization" ["l"="54.001,25.942"]
"maria-antoniak/little-mallet-wrapper" ["l"="51.963,25.094"]
"dair-ai/emotion_dataset" ["l"="52.792,26.061"]
"dair-ai/research_emotion_analysis" ["l"="52.79,26.102"]
"njerschow/openai-api" ["l"="53.622,26.159"]
"poteat/gpt3-cli" ["l"="53.661,26.189"]
"erlapso/openai-api-node" ["l"="53.639,26.184"]
"ceifa/openai" ["l"="53.655,26.167"]
"ziqizhang/jate" ["l"="52.337,25.445"]
"ispras/atr4s" ["l"="52.368,25.49"]
"UDAAN-LEAP/leap-pe-tool" ["l"="52.544,24.735"]
"rohitsaluja22/OpenOCRCorrect" ["l"="52.554,24.755"]
"lonePatient/TorchBlocks" ["l"="52.722,25.146"]
"geyingli/unif" ["l"="52.722,25.197"]
"suolyer/PyTorch_BERT_Biaffine_NER" ["l"="53.688,27.52"]
"bhoov/spacyface" ["l"="52.816,25.452"]
"delftdata/valentine" ["l"="38.087,-2.302"]
"ruc-datalab/Unicorn" ["l"="52.215,26.322"]
"wbsg-uni-mannheim/MatchGPT" ["l"="52.206,26.337"]
"CGCL-codes/HierGAT" ["l"="52.212,26.307"]
"megagonlabs/rotom" ["l"="38.057,-2.343"]
"wbsg-uni-mannheim/contrastive-product-matching" ["l"="52.195,26.317"]
"NIHOPA/NLPre" ["l"="52.422,25.515"]
"facebookresearch/Ad-Library-API-Script-Repository" ["l"="53.776,26.126"]
"minimaxir/facebook-ad-library-scraper" ["l"="53.759,26.097"]
"facebookresearch/Radlibrary" ["l"="40.032,33.933"]
"Ashish-Github193/Facebook-Ads-Library" ["l"="53.785,26.102"]
"glnmario/cwr4lsc" ["l"="52.097,25.031"]
"CtfChan/pytorch_ssd_active_learning" ["l"="51.783,25.849"]
"erre-quadro/spikex" ["l"="52.402,25.557"]
"kabirkhan/recon" ["l"="52.345,25.538"]
"mmxgn/spacy-clausie" ["l"="-0.681,-42.033"]
"DerwenAI/kglab" ["l"="-1.75,-42.046"]
"richardpaulhudson/holmes-extractor" ["l"="52.342,25.556"]
"sgsinclair/VoyantServer" ["l"="37.833,17.906"]
"DH-Box/corpus-downloader" ["l"="51.938,25.169"]
"tedunderwood/DataMunging" ["l"="51.944,25.147"]
"aiplanethub/Datasets" ["l"="52.419,24.968"]
"aiplanethub/Machine_Learning_Bootcamp" ["l"="52.426,24.997"]
"aiplanethub/live_sessions" ["l"="52.413,24.938"]
"NbAiLab/notram" ["l"="51.931,25.411"]
"mollerhoj/Scandinavian-ULMFiT" ["l"="51.911,25.419"]
"KennethEnevoldsen/scandinavian-embedding-benchmark" ["l"="52.016,25.456"]
"FailedSave/storytelling-guide" ["l"="53.978,25.771"]
"gimzani/ai-dungeon-worldbuilder" ["l"="53.954,25.789"]
"ithaka/constellate-notebooks" ["l"="52.002,25.126"]
"wjbmattingly/tap-2023-spacy-01" ["l"="51.987,25.097"]
"erikfredner/tap-2024" ["l"="51.974,25.115"]
"jdportercode/TAP23" ["l"="51.987,25.112"]
"elliewix/tapi-2023-webscraping" ["l"="52.001,25.103"]
"wjbmattingly/tap-2024-vector-databases" ["l"="51.98,25.128"]
"primaryobjects/lda" ["l"="51.93,24.97"]
"awaisathar/lda.js" ["l"="51.911,24.942"]
"mimno/jsLDA" ["l"="51.968,25.023"]
"KaiyuanGao/AI-Surveys" ["l"="52.609,26.082"]
"loujie0822/Pre-trained-Models" ["l"="53.496,27.163"]
"liushulinle/PLOME" ["l"="53.729,27.447"]
"UniversalDependencies/UD_English-GUM" ["l"="52.386,25.058"]
"decompositional-semantics-initiative/decomp" ["l"="52.5,25.113"]
"mdzhang/goodreads-api-client-python" ["l"="51.695,24.901"]
"bdickason/node-goodreads" ["l"="51.68,24.876"]
"mon95/Goodreads-Quotes-Extractor" ["l"="51.719,24.902"]
"philippbayer/Goodreads_visualization" ["l"="51.652,24.903"]
"AI4Bharat/indic-bart" ["l"="52.729,25.047"]
"SforAiDl/decepticonlp" ["l"="-3.747,23.138"]
"drdhaval2785/prakriya" ["l"="52.625,24.794"]
"samsaadhanii/scl" ["l"="52.596,24.817"]
"xiaohan2012/twitter-sent-dnn" ["l"="53.058,25.28"]
"uclatommy/tweetfeels" ["l"="53.026,25.269"]
"cyhex/streamcrab" ["l"="53.067,25.214"]
"Poyuli/sentiment.analysis" ["l"="53.121,25.283"]
"pthrasher/sentiment" ["l"="53.072,25.272"]
"jasti/Stock-Predictor" ["l"="-9.284,12.739"]
"awni/semantic-rntn" ["l"="53.111,25.172"]
"danielegrattarola/twitter-sentiment-cnn" ["l"="53.02,25.25"]
"Zynj-git/AIDungeon" ["l"="53.946,25.799"]
"Gnurro/AIDscripts" ["l"="53.956,25.809"]
"writerai/fitbert" ["l"="52.532,24.912"]
"aiplanethub/Deep_Learning_Bootcamp" ["l"="52.452,25.033"]
"aiplanethub/Data_Science_Bootcamp" ["l"="52.442,24.991"]
"aiplanethub/nlp_essentials" ["l"="52.517,25.176"]
"pycaret/pycaret-demo-dphi" ["l"="52.435,24.974"]
"aiplanethub/ML_Models" ["l"="52.447,24.96"]
"aiplanethub/Datathons" ["l"="52.413,24.983"]
"CLARIAH/awesome-humanities-ontologies" ["l"="25.706,-26.26"]
"laurenfklein/emory-qtm340" ["l"="52.033,25.132"]
"amazon-science/transformers-data-augmentation" ["l"="52.975,26.083"]
"catenae/catenae-kafka" ["l"="52.649,25.305"]
"ari-holtzman/degen" ["l"="53.411,26.124"]
"facebookresearch/DisCo" ["l"="53.971,24.642"]
"wendykan/DeepLearningMovies" ["l"="53.123,25.319"]
"linanqiu/word2vec-sentiments" ["l"="53.07,25.399"]
"rafacarrascosa/samr" ["l"="53.156,25.256"]
"jiegzhan/multi-class-text-classification-cnn-rnn" ["l"="53.364,28.863"]
"nitishsrivastava/deepnet" ["l"="47.998,28.919"]
"dennybritz/chatbot-retrieval" ["l"="55.736,28.441"]
"Theo-/sentiment-analysis-keras-conv" ["l"="53.173,25.285"]
"mkusner/wmd" ["l"="53.106,25.391"]
"Lab41/sunny-side-up" ["l"="53.089,25.341"]
"Yelp/dataset-examples" ["l"="59.473,23.59"]
"dennybritz/rnn-tutorial-rnnlm" ["l"="46.187,27.802"]
"DNE-Digital/dolores" ["l"="53.527,26.042"]
"Huffon/sentence-similarity" ["l"="52.565,25.789"]
"cdqa-suite/cdQA" ["l"="55.435,26.166"]
"elcronos/COVID-19" ["l"="52.59,25.417"]
"paper2code/telegram-qa-with-arxiv-papers" ["l"="52.619,25.429"]
"gsarti/covid-papers-browser" ["l"="52.579,25.39"]
"dmis-lab/bioasq-biobert" ["l"="-33.455,16.354"]
"2006pmach/awesome-active-learning" ["l"="51.882,25.833"]
"Machine-Learning-Tokyo/Math_resources" ["l"="48.22,26.429"]
"lolipopshock/Detectron2_AL" ["l"="51.77,25.84"]
"adversarial-for-goodness/Co-Attack" ["l"="38.194,-7.133"]
"FightCOVID19/webapp" ["l"="52.559,25.396"]
"latitudegames/Scripting" ["l"="53.967,25.791"]
"biplab-iitb/practNLPTools" ["l"="53.01,25.282"]
"fanfannothing/RNTN" ["l"="53.125,25.142"]
"rksltnl/RNTN" ["l"="53.132,25.12"]
"raghavbali/appliedml_workshop_dhs_av_2019" ["l"="52.503,25.239"]
"nikhilmishradevelop/MachineHack-Chartbursters" ["l"="47.135,24.874"]
"vector-ai/vectorai" ["l"="52.301,25.621"]
"RelevanceAI/vectorhub" ["l"="52.328,25.647"]
"MiuLab/DuaLUG" ["l"="52.236,25.624"]
"sibbsnb/jina_hack_2020_search_stories" ["l"="52.259,25.625"]
"SudalaiRajkumar/DHS2019_HackSession_NLP" ["l"="52.518,25.239"]
"KristiyanVachev/Leaf-Question-Generation" ["l"="57.295,29.341"]
"xiaoiker/NAS-With-Code" ["l"="52.632,26.129"]
"automl/NASLib" ["l"="52.764,34.046"]
"neulab/Text-Summarization-Papers" ["l"="58.37,29.049"]
"pfliu-nlp/Named-Entity-Recognition-NER-Papers" ["l"="53.654,27.568"]
"roomylee/EMNLP-2019-Papers" ["l"="-5.264,-23.046"]
"allenai/acl2018-semantic-parsing-tutorial" ["l"="37.593,-1.715"]
"alisawuffles/DExperts" ["l"="53.445,26.035"]
"alvinchangw/COCON_ICLR2021" ["l"="53.468,26.073"]
"PierreGtch/AMAL-project" ["l"="52.725,25.29"]
"haven-ai/haven-ai" ["l"="52.551,25.187"]
"ElementAI/haven_old" ["l"="52.539,25.159"]
"iAyon/DataHackSummit2019" ["l"="52.491,25.218"]
"ArantxaCasanova/ralis" ["l"="51.76,25.912"]
"wannature/BoostMIS" ["l"="51.767,25.931"]
"MySong7NLPer/HyperMatch" ["l"="52.3,25.924"]
"dipanjanS/nlp_workshop_odsc_europe20" ["l"="52.569,25.301"]
"pradeeppathak9/ml-hackathons" ["l"="52.496,25.192"]
"stefan-it/german-gpt2" ["l"="52.253,25.386"]
"wxjiao/WMT2022-Large-Scale-African" ["l"="52.229,25.925"]
"davidberenstein1957/crosslingual-coreference" ["l"="52.279,25.614"]
"brucewlee/lingfeat" ["l"="41.209,1.918"]
"shizhouxing/Robustness-Verification-for-Transformers" ["l"="52.759,25.262"]
"dongxinshuai/ASCC" ["l"="52.739,25.265"]
"dugu9sword/dne" ["l"="52.748,25.278"]
"RockyLzy/TextDefender" ["l"="52.748,25.255"]
"linkedin/lambda-learner" ["l"="52.52,25.496"]
"monologg/GoEmotions-Korean" ["l"="52.908,24.659"]
"dipanjanS/explainable_artificial_intelligence" ["l"="52.501,25.273"]
"dipanjanS/nlp_workshop_iisc19" ["l"="52.514,25.263"]
"dipanjanS/transformers_nlp_essentials" ["l"="52.549,25.304"]
"chsasank/indic-transliteration" ["l"="52.625,25.112"]
"ksenia-konyushkova/LAL-RL" ["l"="51.729,25.917"]
"HIT-ICES/AL-NER" ["l"="51.811,26.04"]
"bqw18744018044/Active-Learning-for-NER" ["l"="51.832,26.024"]
"HqWu-HITCS/Awesome-Keyphrase-Prediction" ["l"="52.341,25.873"]
"doccano/doccano-client" ["l"="52.287,25.637"]
"yehiahesham/Movie_Sentiment_Analysis" ["l"="53.19,25.228"]
"vsl9/Sentiment-Analysis-with-Convolutional-Networks" ["l"="53.206,25.21"]
"ArjitJ/DIAL" ["l"="52.276,26.349"]
"baahrens/goodreads-api-node" ["l"="51.663,24.856"]
"tag-and-generate/tagger-generator" ["l"="52.205,24.91"]
"PlusLabNLP/story-gen-BART" ["l"="53.537,26.273"]
"BahramJannesar/ArchdailyProjectDownloader" ["l"="51.77,24.911"]
"Riccorl/transformers-embedder" ["l"="52.067,25.87"]
"sanskrit-lexicon/csl-orig" ["l"="52.657,24.878"]
"equester/mlops-plugin_2020" ["l"="52.531,25.317"]
"acl21/deep-active-learning-pytorch" ["l"="51.88,25.888"]
"BahramJannesar/DiamondsMachineLearning" ["l"="51.764,24.896"]
"suzgunmirac/prompt-and-rerank" ["l"="52.184,24.912"]
"huanghuidmml/tfbert" ["l"="52.708,25.174"]
"sustcsonglin/second-order-neural-dmv" ["l"="52.89,25.064"]
"WinnieHAN/mndmv" ["l"="52.9,25.029"]
"zjiehang/RanMASK" ["l"="52.769,25.251"]
"ds-wook/Python-Machine-Learning" ["l"="53.736,25.967"]
"ds-wook/DsProject" ["l"="53.737,25.976"]
"ds-wook/humain-computing-experiment" ["l"="53.75,25.975"]
"dbmdz/historic-ner" ["l"="52.164,25.336"]
"gpapadis/ContinuousFilteringBenchmark" ["l"="52.188,26.243"]
"stanford-futuredata/ColBERT" ["l"="54.569,25.629"]
"lushan88a/google_trans_new" ["l"="52.858,26.166"]
"pndurette/gTTS" ["l"="37.02,2.468"]
"Uberi/speech_recognition" ["l"="35.342,2.39"]
"argilla-io/distilabel" ["l"="38.597,-0.509"]
"huggingface/text-generation-inference" ["l"="38.78,-0.679"]
"guardrails-ai/guardrails" ["l"="40.879,0.7"]
"AnswerDotAI/RAGatouille" ["l"="41.095,0.724"]
"huggingface/alignment-handbook" ["l"="38.666,-0.614"]
"wcmac/sippycup" ["l"="55.671,26.249"]
"zhanlaoban/CS224N-Stanford-Winter-2019" ["l"="53.639,27.087"]
"ZacBi/CS224n-2019-solutions" ["l"="53.652,27.064"]
"tensorflow/fold" ["l"="46.192,27.87"]
"blei-lab/edward" ["l"="45.764,26.126"]
"kjw0612/awesome-rnn" ["l"="47.892,28.734"]
"chainer/chainer" ["l"="47.887,29.112"]
"taoztw/Transformer" ["l"="53.681,25.596"]
"DevilExileSu/pytorch-template" ["l"="53.737,25.6"]
"thaalesalves/ai-games-research" ["l"="53.963,25.824"]
"l-io-n/AI-Resources" ["l"="53.975,25.812"]
"cpsievert/LDAvis" ["l"="39.668,33.843"]
"lda-project/lda" ["l"="53.199,26.295"]
"TeamHG-Memex/eli5" ["l"="45.403,26.217"]
"bigartm/bigartm" ["l"="-44.215,26.034"]
"DistrictDataLabs/yellowbrick" ["l"="45.396,26.198"]
"vi3k6i5/GuidedLDA" ["l"="53.264,26.358"]
"shuyo/iir" ["l"="53.203,26.314"]
"zhangxiangxiao/Crepe" ["l"="46.135,27.724"]
"Lab41/hermes" ["l"="53.146,25.289"]
"thunlp/NSC" ["l"="54.306,28.265"]
"cfiltnlp/pyiwn" ["l"="52.619,25.032"]
"facebookresearch/DPR" ["l"="54.497,25.597"]
"kpu/kenlm" ["l"="35.58,2.371"]
"j-min/tf_tutorial_plus" ["l"="55.8,28.577"]
"Currie32/Text-Summarization-with-Amazon-Reviews" ["l"="58.48,29.192"]
"google-deepmind/rc-data" ["l"="46.128,27.787"]
"inseq-team/inseq" ["l"="37.857,-6.996"]
"tscheepers/word2vec" ["l"="53.394,25.299"]
"klb3713/word2vec" ["l"="53.414,25.262"]
"enewe101/word2vec" ["l"="53.39,25.277"]
"weberrr/pytorch_word2vec" ["l"="53.413,25.281"]
"OthersideAI/chronology" ["l"="53.518,26.092"]
"KellanM/OpenAI-Api-Unreal" ["l"="-34.049,-26.418"]
"hexthedev/OpenAi-Api-Unity" ["l"="-25.013,-32.518"]
"Shubhamsaboo/kairos_gpt3" ["l"="53.566,26.128"]
"OthersideAI/chronology-ui" ["l"="53.554,26.102"]
"ben-aaron188/rgpt3" ["l"="40.925,35.265"]
"dylanshine/openai-kit" ["l"="27.55,-21.289"]
"openai/openai-quickstart-python" ["l"="40.479,0.364"]
"CrazyPython/gpt3-cli" ["l"="53.537,26.124"]
"tectalichq/public-openai-client-js" ["l"="-14.587,30.078"]
"sferik/openai-ruby" ["l"="53.581,26.105"]
"JieyuZ2/Awesome-Weak-Supervision" ["l"="52.257,25.46"]
"JieyuZ2/TaskMeAnything" ["l"="52.219,25.435"]
"JieyuZ2/EcoAssistant" ["l"="52.239,25.432"]
"benbo/interactive-weak-supervision" ["l"="52.283,25.475"]
"RAIVNLab/sugar-crepe" ["l"="52.226,25.45"]
"adbar/trafilatura" ["l"="46.148,23.959"]
"jd/tenacity" ["l"="44.903,20.875"]
"ResidentMario/missingno" ["l"="45.366,26.217"]
"BeastByteAI/scikit-llm" ["l"="40.729,0.707"]
"DeepLcom/deepl-dotnet" ["l"="52.854,26.424"]
"DeepLcom/deepl-node" ["l"="52.881,26.415"]
"ptrstn/deepl-translate" ["l"="52.834,26.315"]
"eggplants/deepl-cli" ["l"="52.919,26.403"]
"DeepLcom/openapi" ["l"="52.88,26.388"]
"polm/fugashi" ["l"="5.774,-40.973"]
"jianfch/stable-ts" ["l"="40.56,3.145"]
"DeepLcom/google-sheets-example" ["l"="52.901,26.37"]
"pemistahl/lingua-py" ["l"="53.637,24.665"]
"DeepLcom/deepl-java" ["l"="52.848,26.387"]
"Softcatala/whisper-ctranslate2" ["l"="40.535,3.13"]
"kakaobrain/kogpt" ["l"="-5.146,-23.168"]
"Liquid-Legal-Institute/Legal-Text-Analytics" ["l"="52.745,27.888"]
"amrrs/custom-ner-with-spacy3" ["l"="52.392,25.597"]
"Jcharis/Natural-Language-Processing-Tutorials" ["l"="42.619,-2.667"]
"interpretml/interpret-text" ["l"="45.039,26.135"]
"koaning/spacy-youtube-material" ["l"="52.385,25.575"]
"giacbrd/ShallowLearn" ["l"="53.153,25.337"]
"fbkarsdorp/doc2vec" ["l"="53.108,25.413"]
"richliao/textClassifier" ["l"="53.381,28.809"]
"2shou/TextGrocery" ["l"="53.319,27.431"]
"mallorbc/Finetune_LLMs" ["l"="53.876,25.938"]
"mallorbc/gpt-j-6b" ["l"="53.903,25.949"]
"mallorbc/GPT_Neo_quotes_dataset" ["l"="53.895,25.965"]
"zphang/minimal-llama" ["l"="42.472,-1.908"]
"DeepSchneider/gpt-neo-fine-tuning-example" ["l"="53.845,25.921"]
"arrmansa/Basic-UI-for-GPT-J-6B-with-low-vram" ["l"="53.875,25.898"]
"zphang/minimal-gpt-neox-20b" ["l"="53.93,25.961"]
"LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words" ["l"="53.208,27.069"]
"mortenjust/cleartext-mac" ["l"="22.997,-26.825"]
"arstgit/high-frequency-vocabulary" ["l"="47.61,24.754"]
"mahavivo/english-wordlists" ["l"="-5.116,16.916"]
"spencermountain/compromise" ["l"="-32.776,-35.941"]
"jnoodle/English-Vocabulary-Word-List" ["l"="47.561,24.772"]
"yvoronoy/awesome-english" ["l"="45.513,-0.618"]
"BrachioLab/adversarial_prompting" ["l"="52.695,25.278"]
"neulab/awesome-align" ["l"="53.864,24.816"]
"Unbabel/COMET" ["l"="53.842,24.857"]
"yy/netsci-course" ["l"="52.038,24.807"]
"zygmuntz/classifying-text" ["l"="53.346,25.15"]
"dkpro/dkpro-tc" ["l"="52.182,25.212"]
"dkpro/dkpro-core-examples" ["l"="52.127,25.242"]
"dkpro/dkpro-jwpl" ["l"="52.15,25.283"]
"dkpro/dkpro-lab" ["l"="52.179,25.226"]
"dkpro/dkpro-uby" ["l"="52.16,25.226"]
"ClearTK/cleartk" ["l"="52.151,25.181"]
"dkpro/dkpro-similarity" ["l"="52.161,25.209"]
"dkpro/dkpro-jwktl" ["l"="52.141,25.347"]
"MartinoMensio/spacy-universal-sentence-encoder" ["l"="41.035,1.364"]
"qingyujean/Magic-NLPer" ["l"="53.658,25.621"]
"benywon/en-ch-NMT" ["l"="53.622,25.579"]
"JasonFengGit/Neural-Model-Translation" ["l"="-53.659,-13.889"]
"seanzhang-zhichen/-transformer-english2chinese-" ["l"="53.627,25.6"]
"P3n9W31/transformer-pytorch" ["l"="53.627,25.621"]
"FLC777/GLAT" ["l"="53.964,24.674"]
"TimLuo465/baidu-translate-api" ["l"="52.68,26.449"]
"semiosis/pen.el" ["l"="-16.34,-11.535"]
"semiosis/glossaries-gh" ["l"="53.544,26.035"]
"google/BIG-bench" ["l"="37.205,-0.127"]
"allenai/natural-instructions" ["l"="37.211,-0.1"]
"neulab/BARTScore" ["l"="58.317,28.937"]
"neulab/knn-transformers" ["l"="36.924,-2.604"]
"IBM/low-resource-text-classification-framework" ["l"="52.27,25.745"]
"DFKI-NLP/thermostat" ["l"="52.247,25.75"]
"explosion/floret" ["l"="52.335,25.607"]
"tomaarsen/SpanMarkerNER" ["l"="41.14,1.073"]
"TimSchopf/KeyphraseVectorizers" ["l"="52.313,25.815"]
"archivesunleashed/docker-aut" ["l"="52.011,25.076"]
"MagicShel/aid-simple-context" ["l"="53.992,25.835"]
"mallorbc/GPT_Neo_fine-tuning_notebook" ["l"="53.832,25.939"]
"finetunej/gpt-neo_finetune_2.7B" ["l"="53.834,25.897"]
"arrmansa/Basic-UI-for-GPT-Neo-with-low-vram" ["l"="53.923,25.894"]
"finetunej/transformers" ["l"="53.905,25.883"]
"Open-Speech-EkStep/vakyansh-wav2vec2-experimentation" ["l"="52.684,24.975"]
"Open-Speech-EkStep/vakyansh-tts" ["l"="52.68,24.948"]
"Open-Speech-EkStep/audio-to-speech-pipeline" ["l"="52.663,24.978"]
"Open-Speech-EkStep/indic-punct" ["l"="52.671,24.963"]
"AI4Bharat/IndicWav2Vec" ["l"="52.712,24.973"]
"AI4Bharat/Indic-TTS" ["l"="52.704,24.956"]
"clab/lstm-parser" ["l"="53.013,25.213"]
"YahooArchive/YaraParser" ["l"="53.04,25.231"]
"eth0izzle/Needl" ["l"="-51.355,9.984"]
"sergey-scat/unicaps" ["l"="52.799,26.297"]
"NorskRegnesentral/weak-supervision-for-NER" ["l"="53.585,27.696"]
"vedicscriptures/bhagavad-gita-api" ["l"="52.627,24.699"]
"vedic-lang/vedic" ["l"="52.625,24.734"]
"PtPrashantTripathi/linkpe" ["l"="10.306,-29.125"]
"thu-coai/PaperForONLG" ["l"="53.53,26.243"]
"krishnap25/mauve" ["l"="53.491,26.195"]
"wyu97/KENLG-Reading" ["l"="50.642,2.804"]
"Dansk-Data-Science-Community/sustainable-data-science" ["l"="51.972,25.414"]
"LaurentVeyssier/Chest-X-Ray-Medical-Diagnosis-with-Deep-Learning" ["l"="53.088,25.038"]
"we1pingyu/CALD" ["l"="51.835,25.846"]
"ChenhongyiYang/PPAL" ["l"="51.829,25.86"]
"superannotateai/active_learning" ["l"="7.646,-10.2"]
"huyvvo/BiB" ["l"="51.818,25.87"]
"erickrf/nlpnet" ["l"="52.902,25.29"]
"niangaotuantuan/Publications-of-Deep-Learning-in-NLP" ["l"="-45.693,-33.758"]
"shashankg7/Deep-Learning-for-NLP-Resources" ["l"="52.983,25.436"]
"sbos/AdaGram.jl" ["l"="53.192,25.272"]
"askerlee/topicvec" ["l"="53.259,26.322"]
"dbpedia/fact-extractor" ["l"="-0.468,-41.991"]
"jwieting/charagram" ["l"="53.089,25.368"]
"lopuhin/python-adagram" ["l"="53.235,25.254"]
"openaddresses/pyesridump" ["l"="38.959,24.231"]
"datamade/data-analysis-guidelines" ["l"="52.437,26.248"]
"propublica/ilcampaigncash" ["l"="52.452,26.259"]
"wbrown/novelai-research-tool" ["l"="54,25.819"]
"JianXu123/SCWE" ["l"="53.223,25.112"]
"thunlp/COS960" ["l"="53.199,25.101"]
"lancopku/text-autoaugment" ["l"="52.636,25.78"]
"FranxYao/Deep-Generative-Models-for-Natural-Language-Processing" ["l"="57.58,29.437"]
"yym6472/ConSERT" ["l"="53.336,27.054"]
"allenai/dont-stop-pretraining" ["l"="53.345,27.068"]
"SALT-NLP/MixText" ["l"="53.931,27.313"]
"zhijing-jin/nlp-phd-global-equality" ["l"="-3.842,23.383"]
"rapidfuzz/python-Levenshtein" ["l"="52.538,26.166"]
"rapidfuzz/JaroWinkler" ["l"="52.535,26.194"]
"dtuggener/CharSplit" ["l"="51.95,25.319"]
"swabhs/joint-lstm-parser" ["l"="53.047,25.187"]
"VinAIResearch/PhoBERT" ["l"="52.748,-0.163"]
"vncorenlp/VnCoreNLP" ["l"="52.77,-0.193"]
"binhvq/news-corpus" ["l"="52.767,-0.163"]
"VinAIResearch/PhoNLP" ["l"="52.773,-0.132"]
"hailoc12/docbao" ["l"="52.777,-0.172"]
"vietai/dab" ["l"="52.804,-0.13"]
"langmaninternet/VietnameseTextNormalizer" ["l"="52.797,-0.207"]
"KennethEnevoldsen/spacy-wrap" ["l"="52.145,25.497"]
"SimmerChan/corpus" ["l"="53.537,27.241"]
"xiaoqian19940510/text-classification-surveys" ["l"="50.535,2.748"]
"thunlp/SOS4NLP" ["l"="-5.152,-23.228"]
"src-d/wmd-relax" ["l"="53.23,25.349"]
"gaohuang/S-WMD" ["l"="65.738,11.332"]
"wmayner/pyemd" ["l"="65.679,11.375"]
"mchen24/iclr2017" ["l"="53.153,25.385"]
"aseveryn/deep-qa" ["l"="54.747,25.966"]
"stephenhky/PyWMD" ["l"="53.184,25.365"]
"Lissy93/twitter-sentiment-visualisation" ["l"="53.08,25.155"]
"Lissy93/sentiment-analysis" ["l"="53.105,25.11"]
"neomatrix369/nlp_profiler" ["l"="48.324,26.236"]
"JohnGiorgi/DeCLUTR" ["l"="53.22,26.963"]
"lmthang/bivec" ["l"="53.235,25.205"]
"slavpetrov/berkeleyparser" ["l"="53.014,25.067"]
"DeligientSloth/AdversialNLP" ["l"="52.729,25.172"]
"yjyoon-dev/yjyoon-dev.github.io" ["l"="53.75,26.033"]
"affjljoo3581/KW-Computer-Vision-AI-1st-Solution" ["l"="53.805,26.035"]
"peleiden/daluke" ["l"="51.974,25.483"]
"ahalterman/mordecai3" ["l"="52.51,25.441"]
"ahalterman/NGEC" ["l"="52.476,25.426"]
"rt219/Unpaired-Sketch-to-Photo-Translation" ["l"="52.262,25.428"]
"NSchrading/intro-spacy-nlp" ["l"="52.463,25.356"]
"JonathanReeve/workshop-text-analysis-spacy" ["l"="52.44,25.322"]
"tjflexic/kaggle-word2vec-movie-reviews" ["l"="53.333,25.177"]
"logicalguess/tf-idf-spark-and-python" ["l"="53.316,25.176"]
"naver/gdc" ["l"="53.445,26.077"]
"neulab/ExplainaBoard" ["l"="58.36,28.86"]
"txsun1997/MOSS" ["l"="36.802,-2.539"]
"fastnlp/fastHan" ["l"="53.458,27.251"]
"airaria/TextBrewer" ["l"="53.41,27.175"]
"knodle/knodle" ["l"="52.301,25.449"]
"AI4Bharat/IndicInstruct" ["l"="52.749,25"]
"vintasoftware/aurorae" ["l"="52.291,26.313"]
"vintasoftware/eslint-config-vinta" ["l"="52.301,26.323"]
"krishnap25/mauve-experiments" ["l"="53.496,26.228"]
"Yale-LILY/SummEval" ["l"="58.315,28.979"]
"rishabhk108/AdvancedOptML" ["l"="51.705,25.826"]
"rishabhk108/OptimizationDemos" ["l"="51.678,25.836"]
"rishabhk108/OptimizationML" ["l"="51.668,25.821"]
"decile-team/submodlib" ["l"="51.792,25.824"]
"victorywys/SMART-KPE" ["l"="52.253,25.956"]
"MySong7NLPer/AI-Conference-Acceptance-Rate" ["l"="52.267,25.952"]
"MySong7NLPer/ChineseKeyphraseExtraction" ["l"="52.267,25.944"]
"MySong7NLPer/ResearchWriting-Tips" ["l"="52.256,25.933"]
"MySong7NLPer/HyperSiameseNet" ["l"="52.274,25.948"]
"MySong7NLPer/HISum" ["l"="52.262,25.939"]
"MySong7NLPer/ChatGPT_as_Keyphrase_Extractor" ["l"="52.276,25.938"]
"MySong7NLPer/Presentations-Notes" ["l"="52.289,25.929"]
"CuriousNekomimi/AIDCAT" ["l"="53.863,25.855"]
"richardpaulhudson/coreferee" ["l"="52.311,25.571"]
"interrogator/corpkit" ["l"="52.632,25.209"]
"interrogator/tucan" ["l"="52.626,25.183"]
"interrogator/buzz" ["l"="52.605,25.176"]
"interrogator/risk" ["l"="52.609,25.194"]
"frcchang/zpar" ["l"="53.046,25.16"]
"arrmansa/Gpt-Neo-Limited-Vram-Cuda" ["l"="53.944,25.893"]
"FreddeFrallan/Non-Residual-Prompting" ["l"="53.488,26.109"]
"Sachin19/mucoco" ["l"="53.547,26.156"]
"anhaidgroup/sparkly" ["l"="52.218,26.287"]
"PaulKlinger/Bookstats" ["l"="51.624,24.892"]
"knok/rcnn-text-classification" ["l"="53.223,25.147"]
"Chen-Wang-CUHK/Training-Free-and-Ref-Free-Summ-Evaluation" ["l"="52.194,25.937"]
"megagonlabs/machamp" ["l"="52.273,26.335"]
"alex-berard/multivec" ["l"="53.258,25.19"]
"ds-wook/ventilator-pressure-prediction" ["l"="53.768,25.985"]
"seomoz/word2gauss" ["l"="53.173,25.218"]
"abrazinskas/BSG" ["l"="53.21,25.176"]
"schelotto/Gaussian_Word_Embedding" ["l"="53.199,25.19"]
"edu-rinaldi/Iris-Recognition" ["l"="51.917,26.072"]
"decile-team/cords" ["l"="34.504,31.844"]
"decile-team/trust" ["l"="51.824,25.823"]
"dengfy/cs224d" ["l"="52.751,26.053"]
"dennybritz/cs224d-solutions" ["l"="52.742,26.091"]
"sustcsonglin/TN-PCFG" ["l"="52.883,25.025"]
"VPeterV/RankSpace-Models" ["l"="52.875,24.997"]
"TravelingRobot/NAI_Community_Research" ["l"="53.978,25.828"]
"decile-team/jensen" ["l"="51.751,25.812"]
"xiaowu0162/low-resource-kpgen" ["l"="52.313,25.877"]
"uclanlp/awesome-keyphrase-papers" ["l"="52.324,25.883"]
"uclanlp/DeepKPG" ["l"="52.33,25.897"]
"TaleirOfDeynai/NAI-Lore-Helper" ["l"="54.004,25.801"]
"tblazevic/moonlander" ["l"="52.425,25.156"]
"code-kern-ai/refinery-python-sdk" ["l"="52.351,25.723"]
"code-kern-ai/embedders" ["l"="52.337,25.716"]
"code-kern-ai/automl-docker" ["l"="52.368,25.717"]
"code-kern-ai/sequence-learn" ["l"="52.367,25.706"]
"LeonardoEmili/stock-price-forecasting" ["l"="51.815,26.134"]
"andrea-gasparini/f1-racing-cars-tracking" ["l"="51.829,26.121"]
"jiangfeng1124/acl15-clnndep" ["l"="53.268,25.208"]
"Riccorl/ipa" ["l"="52.073,25.892"]
"SapienzaNLP/bmr" ["l"="52.059,25.892"]
"aiplanethub/Micro-Courses" ["l"="52.409,24.916"]
"thinkwee/UniKeyphrase" ["l"="52.274,25.887"]
"machinelearning4health/TextHoaxer" ["l"="52.748,25.297"]
"GarfieldLyu/OCR_POST_DE" ["l"="52.143,25.319"]
"Chen-Wang-CUHK/DialSum-with-SUFM-and-FR" ["l"="52.204,25.926"]
"ds-wook/goodbooks-10k" ["l"="53.744,25.953"]
"ds-wook/predict-meals" ["l"="53.713,26.007"]
"ChristosChristofidis/awesome-deep-learning" ["l"="47.832,28.622"]
"src-d/awesome-machine-learning-on-source-code" ["l"="47.666,28.87"]
"ujjwalkarn/Machine-Learning-Tutorials" ["l"="47.775,28.619"]
"jbhuang0604/awesome-computer-vision" ["l"="47.724,28.755"]
"aikorea/awesome-rl" ["l"="57.507,17.95"]
"GoogleTrends/data" ["l"="47.706,28.91"]
"jtoy/awesome-tensorflow" ["l"="47.814,28.742"]
"terryum/awesome-deep-learning-papers" ["l"="47.852,28.669"]
"EthicalML/awesome-production-machine-learning" ["l"="48.011,26.19"]
"josephmisiti/awesome-machine-learning" ["l"="47.945,28.625"]
"gaussic/text-classification-cnn-rnn" ["l"="53.271,27.231"]
"tensorflow/nmt" ["l"="53.192,25.709"]
"sherjilozair/char-rnn-tensorflow" ["l"="46.238,27.763"]
"JonathanReeve/chapterize" ["l"="52.277,25.344"]
"malllabiisc/WordGCN" ["l"="55.707,26.722"]
"tca19/dict2vec" ["l"="53.145,25.146"]
"minimalparts/nonce2vec" ["l"="53.129,25.186"]
"tolga-b/debiaswe" ["l"="40.066,34.32"]
"gonenhila/gender_bias_lipstick" ["l"="40.12,34.3"]
"nyu-mll/multiNLI" ["l"="53.07,27.436"]
"meereeum/lda2vec-tf" ["l"="53.229,26.328"]
"baidu/Familia" ["l"="53.309,27.373"]
"tensorflow/skflow" ["l"="47.865,28.864"]
"aditya-grover/node2vec" ["l"="52.939,16.133"]
"dmlc/ps-lite" ["l"="57.937,23.504"]
"wzhe06/Ad-papers" ["l"="58.15,23.422"]
"wzhe06/Reco-papers" ["l"="58.168,23.4"]
"alibaba/euler" ["l"="52.987,16.127"]
"ChenglongChen/tensorflow-DeepFM" ["l"="58.092,23.387"]
"zhougr1993/DeepInterestNetwork" ["l"="58.12,23.384"]
"alibaba/x-deeplearning" ["l"="58.105,23.45"]
"mireshghallah/mixmatch" ["l"="53.567,26.17"]
"voussoir/reddit" ["l"="38.345,33.171"]
"vedic-lang/vedic-lang.github.io" ["l"="52.598,24.696"]
"vedic-lang/vedic-ide" ["l"="52.606,24.713"]
"infinitylogesh/mutate" ["l"="52.24,25.592"]
"argilla-io/adept-augmentations" ["l"="52.196,25.598"]
"zinggAI/zingg" ["l"="-0.564,16.043"]
"ekzhu/datasketch" ["l"="-1.065,4.144"]
"ronxin/wevi" ["l"="53.206,25.333"]
"miyyer/dan" ["l"="45.817,26.264"]
"uhh-lt/sensegram" ["l"="53.267,25.271"]
"medallia/Word2VecJava" ["l"="-4.05,8.473"]
"wnzhang/deep-ctr" ["l"="57.97,23.383"]
"kojisekig/word2vec-lucene" ["l"="-4.056,8.434"]
"jalammar/jalammar.github.io" ["l"="52.717,25.786"]
"edobashira/speech-language-processing" ["l"="35.515,2.207"]
"coverist/coverist-android" ["l"="53.794,26.005"]
"affjljoo3581/Inverse-DALL-E-for-Optical-Character-Recognition" ["l"="53.79,26.028"]
"SapienzaNLP/extend" ["l"="52.172,25.713"]
"SapienzaNLP/maverick-coref" ["l"="41.075,1.236"]
"Babelscape/ner4el" ["l"="-0.488,-42.214"]
"Babelscape/rebel" ["l"="55.541,26.655"]
"microsoft/spacy-ann-linker" ["l"="-0.28,-42.154"]
"nicola-decao/efficient-autoregressive-EL" ["l"="-0.47,-42.194"]
"Babelscape/crocodile" ["l"="52.128,25.729"]
"AI4Bharat/IndicXlit" ["l"="52.659,24.995"]
"lvsh/keywordfinder" ["l"="52.372,25.818"]
"kengz/aiva" ["l"="52.328,25.232"]
"explosion/spacy-services" ["l"="52.389,25.314"]
"kengz/CGKB" ["l"="52.29,25.218"]
"superscriptjs/superscript" ["l"="55.607,28.571"]
"patrickjquinn/P-Brain.ai" ["l"="52.272,25.158"]
"explosion/displacy-ent" ["l"="52.358,25.273"]
"Melissa-AI/Melissa-Core" ["l"="35.838,3.255"]
"treethought/flask-assistant" ["l"="35.275,1.409"]
"ritwik12/Virtual-Assistant" ["l"="52.317,25.188"]
"macournoyer/neuralconvo" ["l"="55.758,28.484"]
"explosion/spacy-dev-resources" ["l"="52.401,25.297"]
"rkadlec/ubuntu-ranking-dataset-creator" ["l"="56.657,29.073"]
"erelsgl/limdu" ["l"="-32.639,-35.988"]
"ggeop/Python-ai-assistant" ["l"="35.716,3.249"]
"davidsbatista/Annotated-Semantic-Relationships-Datasets" ["l"="55.721,26.671"]
"shyamupa/snli-entailment" ["l"="52.778,27.483"]
"TensorFlowKR/awesome_tensorflow_implementations" ["l"="-4.844,-23.008"]
"DeepLcom/deepl-mock" ["l"="52.851,26.457"]
"hal3/ciml" ["l"="53.114,25.467"]
"rasbt/deep-learning-book" ["l"="47.828,28.588"]
"mavam/stat-cookbook" ["l"="47.955,28.351"]
"dmlc/mxnet-notebooks" ["l"="51.807,33.637"]
"joanbruna/stat212b" ["l"="47.831,28.854"]
"ben519/MLPB" ["l"="40.384,35.298"]
"fonnesbeck/Bios8366" ["l"="39.268,36.01"]
"floydhub/dl-setup" ["l"="47.764,28.86"]
"rlabbe/ThinkBayes" ["l"="48.297,28.055"]
"yxuansu/Contrastive_Search_Is_What_You_Need" ["l"="53.457,26.148"]
"yxuansu/MAGIC" ["l"="49.249,30.421"]
"Shark-NLP/CoNT" ["l"="37.917,-1.401"]
"yxuansu/TaCL" ["l"="53.498,26.165"]
"XiangLi1999/ContrastiveDecoding" ["l"="37.642,-6.805"]
"shyamupa/bi-embedding" ["l"="53.146,25.195"]
"shangjingbo1226/AutoPhrase" ["l"="53.489,27.484"]
"ing-bank/EntityMatchingModel" ["l"="52.131,25.798"]
"iitml/AL" ["l"="51.991,25.937"]
"ServiceNow/WorkArena" ["l"="36.83,-1.43"]
"ServiceNow/AgentLab" ["l"="36.812,-1.447"]
"juditacs/wikt2dict" ["l"="52.058,25.518"]
"benreynwar/wiktionary-parser" ["l"="52.075,25.511"]
"words/wiktionary" ["l"="52.069,25.496"]
"google-research/url-nlp" ["l"="52.996,25.015"]
"cisnlp/Glot500" ["l"="53.023,24.97"]
"freedict/tools" ["l"="51.943,25.529"]
"huzheng001/stardict-3" ["l"="-36.177,18.395"]
"pmbaumgartner/spacy-html-tokenizer" ["l"="52.267,25.578"]
"rdoeffinger/DictionaryPC" ["l"="51.553,25.461"]
"kosukeimai/wru" ["l"="52.337,26.28"]
"waseem18/Hacks" ["l"="52.236,25.855"]
"waseem18/Openflock" ["l"="52.266,25.84"]
"kristjankorjus/applied-deep-learning-resources" ["l"="-4.664,-22.993"]
"razvancaramalau/Sequential-GCN-for-Active-Learning" ["l"="51.821,25.889"]
"IBM/zshot" ["l"="3.23,-6.87"]
"davidberenstein1957/classy-classification" ["l"="52.298,25.591"]
"sayef/fsner" ["l"="52.291,25.545"]
"davidberenstein1957/fast-sentence-transformers" ["l"="52.274,25.596"]
"JulesBelveze/concepcy" ["l"="52.286,25.565"]
"Aarhus-Psychiatry-Research/timeseriesflattener" ["l"="52.016,25.441"]
"KennethEnevoldsen/asent" ["l"="52.094,25.472"]
"davidberenstein1957/spacy-setfit" ["l"="41.158,1.147"]
"stanfordnlp/spinn" ["l"="52.965,25.31"]
"jekbradbury/examples" ["l"="52.963,25.359"]
"J911/J911" ["l"="51.907,30.539"]
"guillaume-chevalier/GloVe-as-a-TensorFlow-Embedding-Layer" ["l"="53.37,25.47"]
"MySong7NLPer/ALCO" ["l"="52.259,25.924"]
"MySong7NLPer/KeyphraseExtractionSurvey" ["l"="52.27,25.928"]
"qkaren/COLD_decoding" ["l"="53.576,26.186"]
"launchnlp/BOLT" ["l"="53.597,26.209"]
"AI4Bharat/Shoonya-Backend" ["l"="52.582,24.897"]
"AI4Bharat/Shoonya-Frontend" ["l"="52.561,24.88"]
"AI4Bharat/Chitralekha-Backend" ["l"="52.605,24.911"]
"MedICL-VU/COLosSAL" ["l"="51.812,25.935"]
"yichen928/ActiveFT" ["l"="51.819,25.952"]
"cliangyu/CSVAL" ["l"="51.858,25.914"]
"LightersWang/Awesome-Active-Learning-for-Medical-Image-Analysis" ["l"="51.834,25.926"]
"HealthML/active-segmentation" ["l"="51.834,25.912"]
"ds-wook/ai-hackathon" ["l"="53.791,25.99"]
"openeventdata/PLOVER" ["l"="52.52,25.388"]
"yxuansu/Chinese-TaCL-BERT-NER-CWS" ["l"="53.522,26.195"]
"yxuansu/Awesome_Diffusions" ["l"="53.52,26.179"]
"fh295/SentenceRepresentation" ["l"="53.133,25.385"]
"jwieting/iclr2016" ["l"="53.088,25.409"]
"JackHck/SBCL" ["l"="52.216,25.401"]
"JackHck/MADAug" ["l"="52.202,25.388"]
"IceCream0910/kw-klas-plus" ["l"="53.954,26.114"]
"jmhessel/FightingWords" ["l"="52.273,24.978"]
"kenlimmj/fightin-words" ["l"="52.27,24.957"]
"rapidfuzz/CyDifflib" ["l"="52.532,26.224"]
"readme-generator/alreadyme-ai-serving" ["l"="53.827,26.059"]
"yichen928/FreeSel" ["l"="51.798,25.968"]
"ds-wook/amex-default-prediction" ["l"="53.79,25.976"]
"yjyoon-dev/ssoda-flutter" ["l"="53.763,26.053"]
"dhwajraj/deep-siamese-text-similarity" ["l"="53.072,27.412"]
"zhiguowang/BiMPM" ["l"="53.104,27.486"]
"shuzi/insuranceQA" ["l"="55.861,28.386"]
"alvations/stasis" ["l"="53.064,25.423"]
"aditya1503/Siamese-LSTM" ["l"="52.994,27.423"]
"iterative/dvc" ["l"="45.319,25.9"]
"interpretml/interpret" ["l"="45.309,26.145"]
"jacobeisenstein/language-change-tutorial" ["l"="52.1,25.073"]
"taylor-arnold/cleanNLP" ["l"="39.699,33.787"]
"tdszyman/twapy" ["l"="52.177,25.061"]
"derekgreene/dynamic-nmf" ["l"="53.259,26.413"]
"viveksck/langchangetrack" ["l"="52.171,25.043"]
"dustinstoltz/CMDist" ["l"="52.152,25.054"]
"kbenoit/quanteda.dictionaries" ["l"="52.422,24.882"]
"dlatk/dlatk" ["l"="52.347,24.874"]
"seanrife/psyLex" ["l"="52.361,24.907"]
"facebookresearch/pysparnn" ["l"="53.078,25.671"]
"pixelogik/NearPy" ["l"="-1.121,4.056"]
"ryanrhymes/panns" ["l"="-1.136,4.026"]
"nmslib/nmslib" ["l"="-1.068,4.042"]
"FALCONN-LIB/FALCONN" ["l"="-1.094,4.057"]
"facebookresearch/CommAI-env" ["l"="46.099,27.844"]
"yahoo/lopq" ["l"="-1.186,3.98"]
"facebookresearch/darkforestGo" ["l"="58.458,17.288"]
"facebookarchive/fbpca" ["l"="55.396,32.686"]
"microsoft/LightLDA" ["l"="57.817,23.504"]
"facebookresearch/multipathnet" ["l"="53.621,30.716"]
"scikit-learn-contrib/polylearn" ["l"="57.899,23.337"]
"facebookresearch/adaptive-softmax" ["l"="46.003,27.711"]
"datquocnguyen/RDRPOSTagger" ["l"="52.517,25.023"]
"datquocnguyen/VnDT" ["l"="52.537,25.024"]
"datquocnguyen/jLDADMM" ["l"="53.28,26.327"]
"hua1995116/google-translate-open-api" ["l"="52.615,26.284"]
"googleapis/nodejs-translate" ["l"="34.756,2.494"]
"yixianle/translate-api" ["l"="1.347,12.215"]
"yixianle/google-translate" ["l"="1.319,12.186"]
"matheuss/vertaler" ["l"="52.643,26.252"]
"facebookresearch/EmpatheticDialogues" ["l"="56.796,28.959"]
"alexa/dialoglue" ["l"="56.589,29.225"]
"PolyAI-LDN/conversational-datasets" ["l"="56.654,29.128"]
"alexa/Topical-Chat" ["l"="56.716,29.103"]
"dopefishh/pympi" ["l"="52.294,24.981"]
"zhijing-jin/NLP4SocialGood_Papers" ["l"="-3.778,23.37"]
"AfaanBilal/koshur-lang" ["l"="52.446,25.513"]
"PacktPublishing/Advanced-NLP-Projects-with-TensorFlow-2.0" ["l"="47.169,24.817"]
"commonsense/luminoso" ["l"="53.209,25.403"]
"commonsense/omcs" ["l"="53.19,25.395"]
"AI4Bharat/Chitralekha" ["l"="52.65,24.937"]
"code-kern-ai/refinery" ["l"="52.43,25.674"]
"code-kern-ai/bricks" ["l"="-12.617,-4.228"]
"impira/docquery" ["l"="46.23,6.141"]
"orchest/orchest" ["l"="45.2,26.015"]
"qdrant/quaterion" ["l"="-44.375,26.329"]
"explosion/radicli" ["l"="40.876,1.621"]
"affjljoo3581/G2Net-Detecting-Continuous-Gravitational-Waves" ["l"="53.821,26.042"]
"affjljoo3581/starcoder-jax" ["l"="53.828,26.042"]
"urchade/GLiNER" ["l"="41.163,0.926"]
"huggingface/optimum" ["l"="38.709,-0.64"]
"AnswerDotAI/ModernBERT" ["l"="41.243,0.852"]
"huggingface/text-embeddings-inference" ["l"="38.74,-0.669"]
"smtiitm/Fastspeech2_HS" ["l"="52.719,24.92"]
"smtiitm/Fastspeech2_MFA" ["l"="52.704,24.927"]
"advancedlogic/go-freeling" ["l"="1.173,-8.132"]
"AI-team-UoA/pyJedAI" ["l"="52.191,26.285"]
"readme-generator/alreadyme-desktop" ["l"="53.837,26.055"]
"readme-generator/alreadyme-ai-research" ["l"="53.812,26.053"]
"Tony0726/Keyword-Extraction" ["l"="52.364,25.947"]
"mmihaltz/word2vec-GoogleNews-vectors" ["l"="53.326,25.442"]
"eyaler/word2vec-slim" ["l"="53.411,25.42"]
"chrisjmccormick/inspect_word2vec" ["l"="53.295,25.42"]
"TaoYang225/AD-DROP" ["l"="52.393,24.691"]
"MaxwellRebo/awesome-2vec" ["l"="53.077,25.461"]
"chihming/awesome-network-embedding" ["l"="52.955,16.117"]
"geffy/tffm" ["l"="57.95,23.375"]
"bdhingra/tweet2vec" ["l"="-0.343,-41.913"]
"thunlp/OpenNE" ["l"="52.904,16.15"]
"benedekrozemberczki/AttentionWalk" ["l"="52.765,15.872"]
"mnqu/PTE" ["l"="52.851,16.234"]
"nate-russell/Network-Embedding-Resources" ["l"="53.142,25.436"]
"johnlonganecker/libpostal-rest-docker" ["l"="52.378,26.262"]
"jhcross/span-parser" ["l"="52.982,25.101"]
"clab/language-universal-parser" ["l"="52.977,25.12"]
"wddabc/bist-parser" ["l"="52.96,25.12"]
"CoNLL-UD-2018/UDPipe-Future" ["l"="52.405,25.119"]
"buriy/spacy-ru" ["l"="-44.046,26.044"]
"bnosac/udpipe" ["l"="39.659,33.785"]
"minus34/gnaf-loader" ["l"="51.974,26.442"]
"data61/gnaf" ["l"="52.025,26.393"]
"ondrejivanic/G-NAF" ["l"="51.963,26.468"]
"minus34/census-loader" ["l"="51.944,26.461"]
"qapn/gnaf-importer" ["l"="51.978,26.463"]
"iag-geo/psma-admin-bdys" ["l"="51.948,26.442"]
"openvenues/lieu" ["l"="52.384,26.228"]
"fahadm/Bayesian-Active-Learning-Pytorch" ["l"="51.876,25.976"]
"bnjasim/Deep-Bayesian-Active-Learning" ["l"="51.886,25.965"]
"kmkurn/pytorch-rnng" ["l"="52.987,25.174"]
"anhaidgroup/py_stringsimjoin" ["l"="52.238,26.331"]
"code-kern-ai/refinery-sample-projects" ["l"="52.297,25.726"]
"scify/jedai-ui" ["l"="52.229,26.236"]
"NKU-HLT/Role-Play-Prompting" ["l"="52.317,25.949"]
"NKU-HLT/Emotion-Recognition" ["l"="52.304,25.949"]
"NKU-HLT/KNN-CTC" ["l"="52.301,25.963"]
"NKU-HLT/Fusion-Insider-threat-detection" ["l"="52.317,25.961"]
"NKU-HLT/RAMP_MOS" ["l"="52.281,25.974"]
"modelai/ALBench" ["l"="51.784,25.879"]
"yxuansu/Contrastive_Search_versus_Contrastive_Decoding" ["l"="53.458,26.177"]
"bplank/bilstm-aux" ["l"="53.064,25.232"]
"zouzias/spark-lucenerdd-examples" ["l"="52.218,26.18"]
"MimiOnuoha/missing-datasets" ["l"="51.916,25.129"]
"MimiOnuoha/On-Algorithmic-Violence" ["l"="51.877,25.128"]
"aparrish/rwet" ["l"="34.19,24.051"]
"antimodular/Best-practices-for-conservation-of-media-art" ["l"="34.622,24.272"]
"LibraryOfCongress/data-exploration" ["l"="51.829,25.1"]
"evnbr/bindery" ["l"="20.286,1.058"]
"dataviza11y/resources" ["l"="-8.566,-24.146"]
"learning-gardens/cybernetics-club" ["l"="20.317,1.203"]
"lenagroeger/gifs" ["l"="-5.245,-41.354"]
"organisciak/Text-Mining-Course" ["l"="51.869,25.108"]
"cyanic-selkie/cutters" ["l"="52.388,25.178"]
"commonsense/divisi2" ["l"="53.264,25.388"]
"donguk071/three.js-with-mediapipe" ["l"="53.815,26.007"]
"ds-wook/categorical-tabnet" ["l"="53.807,25.986"]
"ds-wook/web-ctr-prediction" ["l"="53.827,25.988"]
"kingtaurus/cs224d" ["l"="52.738,26.072"]
"cerberusd/cs224d-solutions" ["l"="52.727,26.106"]
"riedlma/SECOS" ["l"="51.892,25.314"]
"jodaiber/semantic_compound_splitting" ["l"="51.866,25.303"]
"rug-compling/conllu-viewer" ["l"="52.298,25.082"]
"readme-generator/alreadyme-backend" ["l"="53.846,26.083"]
"affjljoo3581/Google-American-Sign-Language-Fingerspelling-Recognition" ["l"="53.827,26.03"]
"detail-novelist/novelist-triton-server" ["l"="53.863,26.046"]
"JasonKessler/Scattertext-PyData" ["l"="52.568,25.571"]
"hltcoe/PredPatt" ["l"="52.622,25.146"]
"vivekn/sentiment-web" ["l"="53.102,25.221"]
"thisandagain/sentiment" ["l"="-32.769,-35.899"]
"monkeylearn/hotel-review-analysis" ["l"="48.257,18.593"]
"fjavieralba/basic_sentiment_analysis" ["l"="53.131,25.268"]
"bogatyy/cs224d" ["l"="52.772,25.98"]
"sapruash/RecursiveNN" ["l"="52.829,25.789"]
"vijayvee/Recursive-neural-networks-TensorFlow" ["l"="52.788,25.917"]
"amueller/word_cloud" ["l"="52.949,26.045"]
"pyecharts/pyecharts" ["l"="48.043,23.379"]
"bokeh/bokeh" ["l"="43.589,23.664"]
"vega/altair" ["l"="43.589,23.799"]
"mwaskom/seaborn" ["l"="43.55,23.618"]
"jasondavies/d3-cloud" ["l"="-4.343,-41.907"]
"littlecodersh/ItChat" ["l"="48.152,23.298"]
"python-visualization/folium" ["l"="41.492,24.02"]
"stanfordnlp/string2string" ["l"="53.043,24.928"]
"vrasneur/pyfasttext" ["l"="53.24,25.551"]
"apcode/tensorflow_fasttext" ["l"="50.087,33.173"]
"cahya-wirawan/cnn-text-classification-tf" ["l"="53.32,28.886"]
"jiegzhan/multi-class-text-classification-cnn" ["l"="53.368,28.888"]
"realpython/twitter-sentiment-elasticsearch" ["l"="53.07,25.19"]
"oprogramador/most-common-words-by-language" ["l"="52.104,25.561"]
"barrust/pyspellchecker" ["l"="52.774,24.311"]
"michmech/lemmatization-lists" ["l"="1.218,-8.347"]
"titoBouzout/Dictionaries" ["l"="25.483,-24.247"]
"kerrickstaley/genanki" ["l"="-36.224,18.044"]
"jhlau/gensim" ["l"="53.098,25.433"]
"PengboLiu/Doc2Vec-Document-Similarity" ["l"="53.313,27.478"]
"iamxiaomu/doc2vec" ["l"="53.082,25.431"]
"openeventdata/mordecai" ["l"="52.572,25.49"]
"openeventdata/es-geonames" ["l"="52.552,25.442"]
"Novetta/CLAVIN" ["l"="-0.142,-41.996"]
"stuartemiddleton/geoparsepy" ["l"="52.532,25.451"]
"mediacloud/cliff-annotator" ["l"="-0.114,-41.997"]
"mirusu400/KWU-library-QR-PoC" ["l"="53.971,26.123"]
"eBay/Sequence-Semantic-Embedding" ["l"="52.78,25.805"]
"lgalke/vec4ir" ["l"="52.762,25.917"]
"RAIVNLab/CREPE" ["l"="52.191,25.442"]
"interrogator/conll-df" ["l"="52.359,25.085"]
"danieldeutsch/sacrerouge" ["l"="58.298,28.951"]
"neelkamath/spacy-server" ["l"="52.321,25.304"]
"InnovArul/first-impressions" ["l"="52.432,24.543"]
"nicolaspi/treelstm" ["l"="52.887,25.681"]
"XingxingZhang/td-treelstm" ["l"="52.773,25.859"]
"erickrf/treernn" ["l"="52.78,25.836"]
"adamfabish/Reduction" ["l"="52.221,25.725"]
"genekogan/text-learning" ["l"="52.216,25.741"]
"dell-research-harvard/linktransformer" ["l"="52.14,26.32"]
"NickCrews/mismo" ["l"="52.12,26.339"]
"explosion/displacy" ["l"="52.382,25.267"]
"whq-xxh/SFADA-GTV-Seg" ["l"="51.707,25.988"]
"whq-xxh/SFADA-UWF-SLO" ["l"="51.686,25.991"]
"HiLab-git/UGTST" ["l"="51.761,25.961"]
"whq-xxh/RSVIS" ["l"="51.683,26.007"]
"harvardnlp/decomp-attn" ["l"="52.943,27.48"]
"joelnish/double-edge-swap-mcmc" ["l"="52.103,24.977"]
"VarunGumma/IndicTransToolkit" ["l"="52.734,24.966"]
"AI4Bharat/IndicLID" ["l"="52.734,24.979"]
"AI4Bharat/IndicLLMSuite" ["l"="52.738,24.945"]
"yihui-he/recursive-neural-network" ["l"="52.775,25.952"]
"JieyuZ2/ProVision" ["l"="52.212,25.418"]
"pnpnpn/street-address" ["l"="52.476,26.223"]
"izan-majeed/Kaeshir-Database" ["l"="52.426,25.487"]
"kenchan0226/FineGrainedFact" ["l"="52.205,25.945"]
"omarsar/nlp_with_tensorflow" ["l"="52.602,26.243"]
"RasaHQ/rasa_core" ["l"="55.603,28.285"]
"botpress/botpress" ["l"="15.591,-10.128"]
"crownpku/Rasa_NLU_Chi" ["l"="55.665,28.28"]
"chakki-works/chakin" ["l"="5.882,-40.956"]
"arXivTimes/arXivTimes" ["l"="5.831,-41.124"]
"lanpa/tensorboardX" ["l"="50.919,29.781"]
"pytorch/ignite" ["l"="50.991,29.781"]
"kefirski/pytorch_RVAE" ["l"="57.684,29.333"]
"jakezhaojb/ARAE" ["l"="57.732,29.378"]
"lanl/pyxDamerauLevenshtein" ["l"="52.486,26.042"]
"luozhouyang/python-string-similarity" ["l"="53.493,27.221"]
"jx00109/sentence2vec" ["l"="53.002,25.436"]
"jcjohnson/pytorch-examples" ["l"="50.691,28.51"]
"ritchieng/the-incredible-pytorch" ["l"="47.978,26.259"]
"hunkim/PyTorchZeroToAll" ["l"="50.637,28.494"]
"pytorch/tutorials" ["l"="50.679,28.562"]
"ebanalyse/ebnerd-benchmark" ["l"="51.872,25.479"]
"reczoo/RecSys2024_CTR_Challenge" ["l"="51.843,25.481"]
"lovit/soynlp" ["l"="-5.083,-23.102"]
"SKTBrain/KoBERT" ["l"="-5.08,-23.135"]
"monologg/KoELECTRA" ["l"="-5.125,-23.144"]
"waseem18/node-rake" ["l"="52.351,25.795"]
"MultiPath/CopyNet" ["l"="54.602,27.257"]
"gambolputty/wiktionary-de-parser" ["l"="52.065,25.424"]
"explosion/talks" ["l"="52.453,25.381"]
"explosion/spacy-lookups-data" ["l"="52.432,25.371"]
"lorenbrichter/Words" ["l"="51.777,25.628"]
"lk-geimfari/mimesis" ["l"="45.022,20.632"]
"patrickjquinn/P-Brain.ai-RasPi" ["l"="52.256,25.131"]
"jeremy-rifkin/Wordlist" ["l"="51.917,25.625"]
"gugug/TensorFlow_DNN_Character_Classification" ["l"="52.466,24.625"]
"desaichirayu/Personality-Attribution-using-Natural-Language-Processing" ["l"="52.463,24.658"]
"watson-developer-cloud/personality-insights-nodejs" ["l"="23.858,2.294"]
"declare-lab/MELD" ["l"="56.668,28.03"]
"Penghao-He/YouTube-Personality-Detection" ["l"="52.453,24.645"]
"thorehusfeldt/git-paa-dansk" ["l"="51.846,25.433"]
"NiuTrans/Introduction-to-Transformers" ["l"="52.659,26.103"]
"proycon/colibri-core" ["l"="52.664,25.255"]
"LibraryOfCongress/concordia" ["l"="51.783,25.085"]
"wtetsu/mouse-dictionary" ["l"="6.059,-39.917"]
"wwbp/county_tweet_lexical_bank" ["l"="52.327,24.853"]
"humanlab/HaRT" ["l"="52.344,24.848"]
"nick7nlp/Counting-Stars" ["l"="52.247,25.944"]
"ltgoslo/talk-of-norway" ["l"="51.853,25.4"]
"AylaRT/ACTER" ["l"="52.344,25.468"]
"cythnn/cythnn" ["l"="53.4,25.23"]
"IBM/WordMoversEmbeddings" ["l"="53.216,25.371"]
"taolei87/rcnn" ["l"="54.619,26.747"]
"neubig/lamtram" ["l"="53.752,24.801"]
"nyu-dl/dl4mt-tutorial" ["l"="53.728,24.756"]
"lisa-groundhog/GroundHog" ["l"="53.704,24.765"]
"gastonstat/Mining_Twitter" ["l"="53.111,25.147"]
"jcyk/Dynet-Biaffine-dependency-parser" ["l"="53.002,25.115"]
"tdozat/Parser-v2" ["l"="53.003,25.097"]
"repodiac/german_compound_splitter" ["l"="51.924,25.304"]
"mattermost-community/mattermost-plugin-jenkins" ["l"="-21.46,-20.182"]
"yiyang-gt/social-attention" ["l"="52.084,24.972"]
"HiLab-git/DMSPS" ["l"="51.741,25.98"]
"prernakhurana2/RCNN" ["l"="53.241,25.046"]
"minerva-ml/open-solution-toxic-comments" ["l"="57.472,23.997"]
"affjljoo3581/deit3-jax" ["l"="53.828,26.014"]
"milvus-io/milvus" ["l"="40.363,0.485"]
"vllm-project/vllm" ["l"="40.265,0.397"]
"run-llama/llama_index" ["l"="40.423,0.353"]
"ray-project/ray" ["l"="50.74,29.255"]
"langchain-ai/langchain" ["l"="40.202,0.224"]
"openai/tiktoken" ["l"="40.271,0.533"]
"OpenNMT/OpenNMT" ["l"="53.765,24.675"]
"google-deepmind/sonnet" ["l"="57.431,17.873"]
"buriburisuri/speech-to-text-wavenet" ["l"="37.042,2.54"]
"ctgk/PRML" ["l"="50.738,28.124"]
"fbkarsdorp/python-course" ["l"="51.911,25.185"]
"dmmiller612/bert-extractive-summarizer" ["l"="58.373,29.125"]
"CloudBytes-Academy/English-Dictionary-Open-Source" ["l"="51.957,25.571"]
"zaibacu/thesaurus" ["l"="51.913,25.577"]
"open-dict-data/ipa-dict" ["l"="37.322,2.227"]
"TheOpenDictionary/odict" ["l"="51.936,25.56"]
"ncbi-nlp/BioSentVec" ["l"="-33.378,16.282"]
"laugustyniak/awesome-sentiment-analysis" ["l"="53.006,25.15"]
"laugustyniak/textlytics" ["l"="53.021,25.112"]
"lixin4ever/TNet" ["l"="54.24,28.184"]
"ChenChengKuan/awesome-text-generation" ["l"="57.726,29.364"]
"haiker2011/awesome-nlp-sentiment-analysis" ["l"="54.113,28.201"]
"google/sling" ["l"="53.06,25.542"]
"percyliang/sempre" ["l"="55.637,26.199"]
"shawnwun/RNNLG" ["l"="56.557,29.129"]
"hankcs/CS224n" ["l"="53.692,27.197"]
"learning511/cs224n-learning-camp" ["l"="53.665,27.174"]
"chiphuyen/stanford-tensorflow-tutorials" ["l"="47.839,28.711"]
"nltk/nltk_data" ["l"="53.275,27.202"]
"LiyuanLucasLiu/LM-LSTM-CRF" ["l"="53.54,27.517"]
"OpenNMT/OpenNMT-tf" ["l"="53.752,24.711"]
"srendle/libfm" ["l"="57.973,23.42"]
"aviaryan/gcide-dictionary-json" ["l"="51.95,25.598"]
"marcosfede/algorithms" ["l"="52.589,25.903"]
"s0md3v/huepy" ["l"="-47.386,-30.403"]
"rShetty/awesome-distributed-systems" ["l"="26.065,-26.084"]
"devAmoghS/Python-Interview-Problems-for-Practice" ["l"="29.18,-26.774"]
"kevintpeng/Learn-Something-Every-Day" ["l"="45.535,20.503"]
"llSourcell/Learn_Blockchain_in_2_months" ["l"="49.512,26.984"]
"minimaxir/person-blocker" ["l"="45.494,25.922"]
"sahilbansal17/Get_Better_at_CP_in_2_Months" ["l"="29.41,-26.769"]
"ua-nick/Data-Structures-and-Algorithms" ["l"="4.265,-8.893"]
"fnplus/interview-techdev-guide" ["l"="29.409,-26.886"]
"anubhavshrimal/Data-Structures-Algorithms" ["l"="29.192,-26.934"]
"0xAX/go-algorithms" ["l"="4.246,-8.881"]
"schollz/find3" ["l"="23.678,-26.482"]
"astorfi/Deep-Learning-Roadmap" ["l"="47.51,28.638"]
"whq-xxh/ADA4MIA" ["l"="51.717,25.972"]
"Dongping-Chen/ISG" ["l"="52.195,25.417"]
"RAIVNLab/mnms" ["l"="52.179,25.42"]
"ganeshjawahar/mem_absa" ["l"="54.259,28.226"]
"jimmyyfeng/TD-LSTM" ["l"="54.275,28.227"]
"declare-lab/awesome-sentiment-analysis" ["l"="54.17,28.196"]
"usc-isi-i2/etk" ["l"="52.314,26.351"]
"usc-isi-i2/dig-etl-engine" ["l"="52.31,26.384"]
"NKU-HLT/AudioEditor" ["l"="52.245,25.993"]
"NKU-HLT/MusicEval-baseline" ["l"="52.264,25.986"]
"ttpro1995/TreeLSTMSentiment" ["l"="52.959,25.422"]
"unbounce/pytorch-tree-lstm" ["l"="52.941,25.405"]
"ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding" ["l"="53.425,28.735"]
"Sshanu/Relation-Classification-using-Bidirectional-LSTM-Tree" ["l"="55.745,26.6"]
"djvanderlaan/reclin" ["l"="52.344,26.302"]
"dgrtwo/fuzzyjoin" ["l"="40.588,35.366"]
"eaclark07/sms" ["l"="53.291,25.34"]
"AIPHES/emnlp19-moverscore" ["l"="58.278,28.978"]
"google-research-datasets/sentence-compression" ["l"="53.313,25.291"]
"NIHOPA/word2vec_pipeline" ["l"="52.374,25.465"]
"BaderLab/saber" ["l"="-33.442,16.362"]
"unicamp-dl/PTT5" ["l"="6.304,-20.15"]
"cnap/sentence-compression" ["l"="53.342,25.262"]
"Ankushr785/Emotion-recognition-from-tweets" ["l"="53.006,24.743"]
"SungjoonPark/EmotionDetection" ["l"="52.942,24.718"]
"JULIELab/JEmAS" ["l"="52.934,24.737"]
"gmendes9/multilingual_va_prediction" ["l"="52.922,24.725"]
"dmis-lab/Monet" ["l"="53.842,26.033"]
"erikbern/ann-benchmarks" ["l"="-1.101,4.009"]
"nmslib/hnswlib" ["l"="-1.047,4.004"]
"tirthajyoti/Machine-Learning-with-Python" ["l"="47.9,28.329"]
"rasbt/python-machine-learning-book" ["l"="47.964,28.486"]
"rasbt/python-machine-learning-book-2nd-edition" ["l"="47.862,28.475"]
"lazyprogrammer/machine_learning_examples" ["l"="47.79,28.517"]
"WillKoehrsen/Data-Analysis" ["l"="48.076,28.406"]
"TarrySingh/Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials" ["l"="47.756,28.405"]
"zotroneneis/machine_learning_basics" ["l"="47.714,28.533"]
"kojino/120-Data-Science-Interview-Questions" ["l"="48.192,26.189"]
"udacity/machine-learning" ["l"="47.6,28.551"]
"cerlymarco/MEDIUM_NoteBook" ["l"="45.587,26.32"]
"firmai/industry-machine-learning" ["l"="48.137,26.12"]
"rhiever/Data-Analysis-and-Machine-Learning-Projects" ["l"="48.018,28.446"]
"adeshpande3/Tensorflow-Programs-and-Tutorials" ["l"="47.615,28.706"]
"adeshpande3/Machine-Learning-Links-And-Lessons-Learned" ["l"="47.618,28.679"]
"adeshpande3/Generative-Adversarial-Networks" ["l"="46.107,29.219"]
"mpk001/Sentiment_analysis" ["l"="50.127,22.211"]
"adeshpande3/Facebook-Messenger-Bot" ["l"="55.715,28.471"]
"ilivans/tf-rnn-attention" ["l"="53.357,28.838"]
"tkipf/pygcn" ["l"="52.857,15.998"]
"bojone/attention" ["l"="53.649,27.27"]
"susanli2016/PySpark-and-MLlib" ["l"="-2.788,16.823"]
"geek-ai/Texygen" ["l"="57.748,29.388"]
"jcjohnson/torch-rnn" ["l"="46.17,27.698"]
"ryankiros/neural-storyteller" ["l"="46.237,27.713"]
"l11x0m7/Question_Answering_Models" ["l"="52.659,25.81"]
"seriousran/awesome-qa" ["l"="55.513,26.132"]
"lihanghang/NLP-Knowledge-Graph" ["l"="55.376,27.19"]
"xmxoxo/BERT-train2deploy" ["l"="53.506,27.309"]
"zlsdu/Word-Embedding" ["l"="53.458,27.27"]
"lukalabs/cakechat" ["l"="56.569,29.062"]
"uclnlp/emoji2vec" ["l"="53.267,25.513"]
"atpaino/deep-text-corrector" ["l"="52.9,24.407"]
"pender/chatbot-rnn" ["l"="55.783,28.437"]
"vprusso/youtube_tutorials" ["l"="52.969,25.277"]
"CoreyMSchafer/code_snippets" ["l"="47.859,28.21"]
"Sentdex/socialsentiment" ["l"="42.985,25.412"]
"joeyajames/Python" ["l"="48.081,23.717"]
"OmkarPathak/Data-Structures-using-Python" ["l"="29.097,-26.804"]
"careercup/CtCI-6th-Edition-Python" ["l"="29.172,-26.965"]
"areed1192/sigma_coding_youtube" ["l"="-8.918,13"]
"codingforentrepreneurs/30-Days-of-Python" ["l"="46.709,18.521"]
"MorvanZhou/easy-scraping-tutorial" ["l"="49.863,26.373"]
"facebookresearch/poincare-embeddings" ["l"="21.342,14.021"]
"maciejkula/spotlight" ["l"="59.513,23.761"]
"lukewhyte/textpack" ["l"="52.213,25.781"]
"ing-bank/popmon" ["l"="45.348,26.56"]
"clarkkev/deep-coref" ["l"="53.23,27.627"]
"shayneobrien/coreference-resolution" ["l"="53.262,27.626"]
"kitten/node-tldr" ["l"="52.206,25.684"]
"pdehaan/summarizer" ["l"="52.226,25.694"]
"topliceanu/sum" ["l"="52.208,25.706"]
"ageitgey/node-unfluff" ["l"="46.302,23.859"]
"anpandu/nodejs-text-summarizer" ["l"="52.23,25.678"]
"linanqiu/lexrank" ["l"="52.215,25.666"]
"moos/wordpos" ["l"="-4.025,-30.786"]
"retextjs/retext-keywords" ["l"="-3.988,-30.697"]
"fergiemcdowall/stopword" ["l"="52.175,25.681"]
"indic-transliteration/common_maps" ["l"="52.626,24.945"]
"jojonki/word2vec-pytorch" ["l"="53.512,25.295"]
"mouuff/mtranslate" ["l"="52.909,26.296"]
"translate/translate" ["l"="-9.309,-7.426"]
"jjangsangy/py-translate" ["l"="52.875,26.285"]
"dveselov/python-yandex-translate" ["l"="52.851,26.274"]
"littlecodersh/translation" ["l"="52.883,26.261"]
"jg-you/noisy-networks-measurements" ["l"="51.626,15.993"]
"TopSBM/topsbm" ["l"="52.162,24.963"]
"justmarkham/scikit-learn-videos" ["l"="48.069,28.333"]
"WillKoehrsen/machine-learning-project-walkthrough" ["l"="47.149,24.709"]
"oracle/skater" ["l"="45.264,26.23"]
"rasbt/mlxtend" ["l"="45.448,26.214"]
"WillKoehrsen/feature-selector" ["l"="45.533,26.385"]
"ray1007/GWE" ["l"="53.298,25.096"]
"jerryli27/TwinGAN" ["l"="-34.907,20.445"]
"sachinruk/deepschool.io" ["l"="47.746,28.644"]
"diasks2/pragmatic_segmenter" ["l"="6.34,-37.369"]
"mediacloud/sentence-splitter" ["l"="53.767,24.881"]
"bitextor/bitextor" ["l"="53.828,24.823"]
"segment-any-text/wtpsplit" ["l"="41.229,1.005"]
"fnl/syntok" ["l"="35.919,2.779"]
"PaulKlinger/Enhance-GoodReads-Export" ["l"="51.601,24.882"]
"sheng-z/stog" ["l"="57.716,29"]
"XuezheMax/LasagneNLP" ["l"="53.5,27.686"]
"eladhoffer/captionGen" ["l"="53.319,25.552"]
"paarthneekhara/byteNet-tensorflow" ["l"="53.651,24.801"]
"artetxem/undreamt" ["l"="53.831,24.706"]
"wiseodd/controlled-text-generation" ["l"="57.711,29.378"]
"wroberts/pygermanet" ["l"="52.094,25.404"]
"shijx12/AR-Tree" ["l"="52.914,25.235"]
"sourcedexter/tfClassifier" ["l"="53.37,25.568"]
"cysmith/neural-style-tf" ["l"="45.643,29.367"]
"visipedia/tf_classification" ["l"="53.445,25.546"]
"tam17aki/multiplicative-lstm-tensorflow" ["l"="53.184,25.44"]
"lonePatient/chinese-word2vec-pytorch" ["l"="53.543,25.308"]
"mstrise/dep2label" ["l"="52.613,25.077"]
"cosmozhang/NCRF-AE" ["l"="52.901,25.004"]
"tsproisl/SoMeWeTa" ["l"="52.154,25.369"]
"drdhaval2785/python-prakriya" ["l"="52.67,24.851"]
"ptnplanet/NLTK-Contributions" ["l"="52.059,25.323"]
"tombosc/cpae" ["l"="53.167,25.103"]
}